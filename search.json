[{"title":"Verilog 部分特性整理","url":"/HDL/verilog/","content":"<p>找老师问有什么东西可以给我先看起来，老师发来了Verilog……</p>\n<p>孽缘未了啊，这回重头认真学一学。</p>\n<p>记录一些之前没有考虑过的内容。</p>\n<p>参考这个网站https://hdlbits.01xz.net/</p>\n<span id=\"more\"></span>\n<h1 id=\"隐式声明\">隐式声明</h1>\n<p>通常变量需要使用 <code>wire</code> 或 <code>reg</code> 声明。</p>\n<p>但是也可以直接使用 <code>wire t = a &amp; b;</code>\n这样直接创建一个中间变量 <code>t</code> ，但是 <code>t</code>\n的宽度<strong>一定是1bit</strong>。</p>\n<p>这个在之前写CPU的时候错过无数遍了。</p>\n<h1 id=\"wire-和-reg\">wire 和 reg</h1>\n<blockquote>\n<p>A note on wire vs. reg: The left-hand-side of an assign statement\nmust be a <em>net</em> type (e.g., <code>wire</code>), while the\nleft-hand-side of a procedural assignment (in an always block) must be a\n<em>variable</em> type (e.g., <code>reg</code>). These types (wire vs.\nreg) have nothing to do with what hardware is synthesized, and is just\nsyntax left over from Verilog's use as a hardware <em>simulation</em>\nlanguage.</p>\n</blockquote>\n<p>其实没有本质区别。</p>\n<p>reg只能写在always里，wire只能写在外面通过assign或module连接。</p>\n<p>reg只是设计Verilog时的历史遗留问题。</p>\n<h1 id=\"避免锁存器\">避免锁存器</h1>\n<p>https://hdlbits.01xz.net/wiki/Always_if2</p>\n<blockquote>\n<p>一个常见的错误来源：如何避免生成锁存器（Latches）</p>\n<p>在设计电路时，你必须首先从电路的角度进行思考：</p>\n<ul>\n<li>我需要这个逻辑门</li>\n<li>我需要一个组合逻辑块，它有这些输入并产生这些输出</li>\n<li>我需要一个组合逻辑块，后面跟着一组触发器（flip-flops）</li>\n</ul>\n<p>你不能做的是：先写代码，然后希望它能生成一个合适的电路。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">If (cpu_overheated) then shut_off_computer = 1;</span><br><span class=\"line\">If (~arrived) then keep_driving = ~gas_tank_empty;</span><br></pre></td></tr></table></figure>\n<p>语法正确的代码不一定会生成合理的电路（组合逻辑 +\n触发器）。通常的问题是：\"在你未指定的情况下会发生什么？\"。Verilog\n的回答是：保持输出不变。</p>\n<p>这种“保持输出不变”的行为意味着当前状态需要被记住，因此会产生一个锁存器（latch）。组合逻辑（例如逻辑门）无法记住任何状态。要留意\n“Warning (10240): … inferring latch(es)”\n警告消息。除非锁存器是故意设计的，否则它几乎总是表示一个错误。组合电路必须在所有情况下对所有输出赋值。这通常意味着你需要使用\n<code>else</code> 子句或对输出赋予默认值。</p>\n</blockquote>\n<p>一个最重要的思路，写HDL和其他高级语言是非常不一样的两个体系。</p>\n<p>其他编程语言描述过程，HDL如其名描述<strong>硬件结构</strong>。</p>\n<p>不管是写什么代码，都是在告诉编译器生成一个什么样的硬件结构。</p>\n<p>这个问题就是如果不明确指明所有情况，则会产生锁存器，因为Verilog在没有指明的情况下会保持wire的输出不变。</p>\n<p>总之：<strong>当使用分支语句时必须覆盖所有情况。</strong></p>\n<hr>\n<p>后续遇到继续补充</p>\n","categories":["HDL"],"tags":["HDL","FPGA","学习笔记"]},{"title":"Spring Cloud - 注册中心、中央配置、网关","url":"/cloud-native/spring-cloud/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>实习第一天，主要目的是学习云原生架构。今天先从 Spring Cloud\n开始。</p>\n<figure>\n<img src=\"/cloud-native/spring-cloud/202408050942244.jpg\" alt=\"31722821596_.pic\">\n<figcaption aria-hidden=\"true\">31722821596_.pic</figcaption>\n</figure>\n<p>总的来说，Spring Boot 提供构建应用的基础，Spring Cloud\n在此基础上提供了分布式系统和微服务架构所需的工具和支持。</p>\n<span id=\"more\"></span>\n<h1 id=\"注册中心eureka\">1 注册中心（Eureka）</h1>\n<h2 id=\"eureka-名字由来\">1.1 Eureka 名字由来</h2>\n<p>“Eureka”是希腊语，意思是“我发现了！”</p>\n<p>源自经典的 <strong>阿基米德洗澡时发现浮力原理</strong> 小故事。</p>\n<blockquote>\n<p>阿基米德在洗澡时发现了证明王冠是否纯金的方法(黄金密度)，他激动地一边大喊“Eureka！”一边跳出澡盆奔去王宫，连衣服都忘了穿。后来人们用Eureka这个词来形容洞察浮现的瞬间。</p>\n</blockquote>\n<h2 id=\"网络架构\">1.2 网络架构</h2>\n<p>一个最简单的示例如下：</p>\n<figure>\n<img src=\"https://gitee.com/Cishoon/pic-bed/raw/master/202408051045349.png\" alt=\"image-20240805104516240\">\n<figcaption aria-hidden=\"true\">image-20240805104516240</figcaption>\n</figure>\n<p>要记住这个架构是一个微服务架构，将各个功能的实现分布式地部署在多个服务器中。每一个微服务都是独立的Springboot\nApp，分为以下三类：</p>\n<ol type=\"1\">\n<li><strong>Eureka Server（注册中心）</strong></li>\n<li><strong>Eureka Client（服务提供者）</strong></li>\n<li><strong>Eureka Client（服务消费者）</strong></li>\n</ol>\n<h3 id=\"注册中心\">1.2.1 注册中心</h3>\n<p><strong>注册中心</strong>是一个中央服务器，其他微服务都知道注册中心的Url。</p>\n<p>只需要增加配置，并在入口处增加 <code>@EnableEurekaServer</code>\n注解。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8761</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">    <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">register-with-eureka:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        <span class=\"attr\">fetch-registry:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span></span><br><span class=\"line\">        <span class=\"attr\">enable-self-preservation:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EurekaServerApplication</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务提供者\">1.2.2 服务提供者</h3>\n<p><strong>服务提供者</strong>实现了一部分的 REST 接口，即实现\n<code>Controller</code>。在启动时会连接上注册中心，将他提供的接口注册到Eureka\nServer。可以有多个提供者提供相同的接口。</p>\n<p>服务提供者在配置文件中设置实例名称，以及注册中心的Url</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">provider-service</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"服务消费者\">1.2.3 服务消费者</h3>\n<p><strong>服务消费者</strong>的工作流程：</p>\n<ul>\n<li>消费者发送请求 <code>http://provider-service/hello</code>。（这里的\n<code>provider-service</code>\n就是服务提供者设置的实例名称，<code>hello</code>\n是提供者已经实现的一个接口。）</li>\n<li><code>RestTemplate</code> 查询 Eureka 注册中心，获取\n<code>provider-service</code> 的所有实例地址。</li>\n<li>负载均衡器选择一个实例，将请求路由到该实例。</li>\n</ul>\n<p>代码实现是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerController</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(\"/invoke\")</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">invokeProviderService</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">\"http://provider-service/hello\"</span>, String.class);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在配置中设置 <code>RestTemplate</code> ，增加\n<code>@loadBalanced</code> 负载均衡注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h4 id=\"resttemplate的简化\">RestTemplate的简化</h4>\n<blockquote>\n<p><code>RestTemplate</code> 是 Spring 提供的一个同步 HTTP\n客户端，用于简化与 RESTful\n服务的通信。它提供了多种便捷的方法，可以轻松地执行各种 HTTP 请求（如\nGET、POST、PUT、DELETE 等）并处理响应。<code>RestTemplate</code>\n可以自动处理请求和响应的序列化和反序列化，使得与 REST API\n的交互变得更加简洁和直观。</p>\n</blockquote>\n<p><code>@LoadBalanced</code> 注解是 Spring Cloud\n实现的，会自动完成以下步骤：</p>\n<ol type=\"1\">\n<li><strong>服务发现</strong>：从 Eureka\n注册中心获取指定服务的所有可用实例。</li>\n<li><strong>负载均衡</strong>：根据负载均衡策略（默认是轮询）选择一个实例。</li>\n<li><strong>请求转发</strong>：将请求转发到选择的实例。</li>\n</ol>\n<p>如果不使用 <code>@LoadBalance</code> 注解，完整的 <code>invoke</code>\n接口实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.http.HttpUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerController</span> {</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DiscoveryClient discoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(\"/invoke\")</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">invokeProviderService</span><span class=\"params\">()</span> {</span><br><span class=\"line\">        <span class=\"comment\">// 获取 provider-service 的所有实例</span></span><br><span class=\"line\">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class=\"string\">\"provider-service\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instances == <span class=\"literal\">null</span> || instances.isEmpty()) {</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">\"No instances available for provider-service\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 随机选择一个实例（简单的负载均衡策略）</span></span><br><span class=\"line\">        <span class=\"type\">ServiceInstance</span> <span class=\"variable\">selectedInstance</span> <span class=\"operator\">=</span> instances.get(random.nextInt(instances.size()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 构造服务URL</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> selectedInstance.getUri().toString() + <span class=\"string\">\"/hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用 Hutool 发送 HTTP 请求</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> HttpUtil.get(url);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"中央配置spring-cloud-config\">2 中央配置（Spring Cloud\nConfig）</h1>\n<p>原理差不多。中央配置与服务注册的逻辑是独立的，他们互不相关。</p>\n<p>也分为 <strong>config-client</strong> 和\n<strong>config-server</strong>.</p>\n<p>配置文件参考网上其他教程。</p>\n<hr>\n<p>我测试过程中遇到一个问题，client一直没有向 server\n发送获取配置的请求。</p>\n<p>原因：</p>\n<p><code>pom.xml</code> 中必须有以下配置（开始运行时获取配置）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>并且不能有 server 的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-config-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>我就是在client的 <code>pom.xml</code> 里不小心赋值进去了\n<code>config-server</code> 的依赖，导致一直没有获取配置。</p>\n<hr>\n<p>另外，有两个设计思路：</p>\n<ol type=\"1\">\n<li>config-client 连接 config-server，自动获取 config-server\n的注册中心</li>\n<li>设置注册中心，获取注册中心里的 config-server</li>\n</ol>\n<p>总之目的就是有一个统一的配置文件管理仓库，所有微服务启动时都能获取到最新的配置。</p>\n<h1 id=\"网关spring-cloud-gateway\">3 网关（Spring Cloud Gateway)</h1>\n<p>也是一个单独的应用。通过集成 Spring Cloud\nGateway，可以在微服务架构中实现集中路由和过滤功能。</p>\n<p>贴一下GPT的回答。</p>\n<h3 id=\"spring-cloud-gateway-简介\">Spring Cloud Gateway 简介</h3>\n<p>Spring Cloud Gateway 是一种基于 Spring Framework 5、Spring Boot 2 和\nProject Reactor 的 API\n网关，旨在为微服务架构提供路由、过滤、监控和安全功能。与 Zuul\n不同，Spring Cloud Gateway 使用非阻塞的 WebFlux\n框架，这使得它在处理高并发请求时更加高效。</p>\n<h3 id=\"集成-spring-cloud-gateway\">集成 Spring Cloud Gateway</h3>\n<h4 id=\"创建-spring-cloud-gateway-项目\">1. 创建 Spring Cloud Gateway\n项目</h4>\n<ol type=\"1\">\n<li><strong>创建一个新的 Spring Boot 项目</strong>。</li>\n<li><strong>添加依赖</strong>：</li>\n</ol>\n<p>在 <code>pom.xml</code> 中添加 Spring Cloud Gateway 和 Eureka Client\n的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"配置-gateway\">2. 配置 Gateway</h4>\n<p>在 <code>src/main/resources/application.yml</code> 中配置\nGateway：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">provider-service</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://provider-service</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/provider/**</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">consumer-service</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://consumer-service</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/consumer/**</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span></span><br></pre></td></tr></table></figure>\n<p>以上配置定义了两个路由： - <code>/provider/**</code>\n路径的请求将被转发到 <code>provider-service</code>。 -\n<code>/consumer/**</code> 路径的请求将被转发到\n<code>consumer-service</code>。</p>\n<p><code>StripPrefix=1</code> 表示在转发请求之前，将 URL 路径前缀\n<code>/provider</code> 或 <code>/consumer</code> 去掉。</p>\n<h4 id=\"启动类\">3. 启动类</h4>\n<p>在主类中添加 <code>@SpringBootApplication</code> 和\n<code>@EnableEurekaClient</code> 注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GatewayApplication</span> {</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> {</span><br><span class=\"line\">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动和测试\">启动和测试</h3>\n<ol type=\"1\">\n<li><strong>启动 Eureka Server</strong>。</li>\n<li><strong>启动 Config Server</strong>。</li>\n<li><strong>启动多个服务提供者实例</strong>。</li>\n<li><strong>启动服务消费者</strong>。</li>\n<li><strong>启动 Gateway</strong>。</li>\n</ol>\n<h3 id=\"测试-gateway-路由\">测试 Gateway 路由</h3>\n<p>访问 Gateway 路由以测试：</p>\n<ol type=\"1\">\n<li><p>测试服务提供者： <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/provider/hello</span><br></pre></td></tr></table></figure> 或在浏览器中访问：\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/provider/hello</span><br></pre></td></tr></table></figure></p></li>\n<li><p>测试服务消费者： <figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:8080/consumer/invoke</span><br></pre></td></tr></table></figure> 或在浏览器中访问：\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/consumer/invoke</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<h3 id=\"总结\">总结</h3>\n<p>通过集成 Spring Cloud\nGateway，您可以在微服务架构中实现集中路由和过滤功能。它提供了强大的功能和灵活性，可以根据需要进行自定义和扩展。在上述配置中，我们实现了基本的服务路由，实际项目中可以根据需求增加更多的路由规则和过滤器。</p>\n<h1 id=\"总结-1\">总结</h1>\n<p>终于接触了微服务架构。初步了解了Spring\nCloud的框架。总之就是进一步的分布，进一步的解耦。</p>\n","categories":["笔记"],"tags":["实习，SpringCloud，微服务"]},{"title":"Rust 学习笔记 - 变量与可变性","url":"/rust/1-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>开始学习Rust。这是第一篇学习笔记，记录一些基础的概念。</p>\n<span id=\"more\"></span>\n<h1 id=\"rust-变量与可变性\">1 Rust 变量与可变性</h1>\n<h2 id=\"常量\">1.1 常量</h2>\n<p>Rust中的常量与其他语言类似，使用 <code>const</code>\n声明，命名规范为<strong>所有字母大写，用下划线分割</strong> 。</p>\n<p>常量声明时，<strong>必须指定类型</strong>，<strong>必须赋初值</strong>。并且初值只能是<strong>常量表达式</strong>，不能是函数的调用结果、或是运行过程中计算得到的值。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> THREE_HOURS_IN_SECONDS: <span class=\"type\">u32</span> = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"变量\">1.2 变量</h2>\n<p>Rust中的变量使用 <code>let</code> 声明，可以自动推导类别，也可以使用\n<code>:</code> 指定类别。</p>\n<p>变量又分为：<strong>可变变量</strong>和<strong>不可变变量</strong>，<code>let</code>\n声明的默认是不可变变量，在变量前加上 <code>mut</code> 才是可变变量。</p>\n<h3 id=\"可变变量\">1.2.1 可变变量</h3>\n<p>可变变量的使用方法是符合在其他编程语言里使用习惯的写法，直接使用\n<code>=</code> 进行赋值，变量的类型无法更改。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = <span class=\"number\">6</span>; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">    x = <span class=\"string\">\"abc\"</span>; <span class=\"comment\">// 改变了类型，错误</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h3 id=\"不可变变量-shadow\">1.2.2 不可变变量 &amp; Shadow</h3>\n<p>顾名思义，不可变变量无法直接复制修改：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = <span class=\"number\">6</span>; <span class=\"comment\">// 错误 </span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">error[E0384]: cannot assign twice to immutable variable `x`</span><br><span class=\"line\"> --&gt; test.rs:3:5</span><br><span class=\"line\">  |</span><br><span class=\"line\">2 |     <span class=\"built_in\">let</span> x = 5;</span><br><span class=\"line\">  |         -</span><br><span class=\"line\">  |         |</span><br><span class=\"line\">  |         first assignment to `x`</span><br><span class=\"line\">  |         <span class=\"built_in\">help</span>: consider making this binding mutable: `mut x`</span><br><span class=\"line\">3 |     x = 6; // 错误 </span><br><span class=\"line\">  |     ^^^^^ cannot assign twice to immutable variable</span><br><span class=\"line\"></span><br><span class=\"line\">error: aborting due to 1 previous error; 2 warnings emitted</span><br></pre></td></tr></table></figure>\n<p>传统的方法在Rust里变得复杂了，说明Rust一定提出了一个更好的特性——<strong>Shadow</strong></p>\n<p>Rust允许使用 <code>let</code> 创建同名变量，例如：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, x);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The value of x is: 5</span><br><span class=\"line\">The value of x is: 6</span><br><span class=\"line\">The value of x is: 12</span><br><span class=\"line\">The value of x is: hello</span><br></pre></td></tr></table></figure>\n<p>并不像其他编程语言里，定义同名变量通常会报错。Rust直接使用后定义的变量覆盖之前定义的变量。因为这是重新定义变量，所以甚至可以改变变量的类型。</p>\n<p>这个过程被取了一个好听的名字\nShadow，新变量像把旧变量罩住了、盖住了一样。</p>\n<p>这个特性最好用的地方就在于<strong>可以改变变量的类型</strong>。</p>\n<p>在其他语言中经常有以下情况，在类型转换前后需要定义两个不同名称的变量，实际上他们表达的含义是完全相同的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>{</span><br><span class=\"line\">\t<span class=\"type\">char</span> score_str[] = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> score = <span class=\"built_in\">atoi</span>(score_str);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 Rust 可以解决这个问题：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span> = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span>: <span class=\"type\">i32</span> = score.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>即保证了变量的强类型安全性，又保留了使用的便捷性。很优雅。</p>\n<p>还有一个情景 shadow\n很好用。假如我在写一个很复杂的数学公式，公式的好几个部分都用到了同样的符号\n<code>a</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"variable\">a</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = a + <span class=\"number\">1</span> ... </span><br><span class=\"line\">    <span class=\"comment\">// 此处省略一大堆内容</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在里上面的a隔了好多行的地方，我又想定义一个变量a</span></span><br><span class=\"line\">    <span class=\"comment\">// 我可以当作之前从来没有使用过那个变量a一样，直接定义一个新的a</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在后续的代码中，我也会很自然的认为a就是我最近定义的a = 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 而不会是之前的 a = 3</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>另外，shadow 可变变量会报 warning：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">score</span> = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span>: <span class=\"type\">i32</span> = score.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"score: {}\"</span>, score);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">warning: variable does not need to be mutable</span><br><span class=\"line\"> --&gt; test.rs:2:9</span><br><span class=\"line\">  |</span><br><span class=\"line\">2 |     <span class=\"built_in\">let</span> mut score = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">  |         ----^^^^^</span><br><span class=\"line\">  |         |</span><br><span class=\"line\">  |         <span class=\"built_in\">help</span>: remove this `mut`</span><br><span class=\"line\">  |</span><br><span class=\"line\">  = note: `#[warn(unused_mut)]` on by default</span><br><span class=\"line\"></span><br><span class=\"line\">warning: 1 warning emitted</span><br><span class=\"line\"></span><br><span class=\"line\">score: 123</span><br></pre></td></tr></table></figure>\n<p>因为这样写语法上没问题，但是这样就改变了使用 <code>mut</code>\n的本意。</p>\n<p>我的理解是：</p>\n<ul>\n<li>如果需要使用的变量是传统意义的变量，也就是其他编程语言中最常用的变量，使用\n<code>let mut</code> 声明可变变量。</li>\n<li>不可变变量的 shadow\n就是用来解决无用中间变量过多的问题。生命周期短的变量，都可以使用不可变变量，因为他们通常不会被修改，并且影响的范围很小。解决了一个变量名焦虑的问题。</li>\n</ul>\n","categories":["笔记"],"tags":["学习笔记","Rust"]},{"title":"Rust 学习笔记 - 所有权","url":"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>本文记录了 Rust 所有权 (<em>ownership</em>) 相关的内容。</p>\n<span id=\"more\"></span>\n<p>其他语言的内存管理机制基本分为两类：</p>\n<ul>\n<li>以 C 为代表的，显示分配和释放内存。\n<ul>\n<li>优点：内存管理完全由程序员负责，效率高</li>\n<li>缺点：显而易见，程序员会出错，容易发生内存泄漏、产生重复释放等Bug</li>\n</ul></li>\n<li>以 Java 为代表的，垃圾回收机制自动管理内存。\n<ul>\n<li>优点：方便，程序员不需要在意内存何时释放，不会发生内存泄露</li>\n<li>缺点：需要频繁扫描追踪分配的对象，慢</li>\n</ul></li>\n</ul>\n<p>而 Rust\n为了同时实现安全和高效两个目标，提出了<strong>所有权</strong>的机制。</p>\n<ul>\n<li>为了安全，就不能完全放任程序员负责内存分配，编写代码的过程中需要有所限制。</li>\n<li>为了高效，在运行阶段不能频繁进行内存检查，所以保证内存安全的算法必须在\n<strong>编译</strong> 过程实现。</li>\n</ul>\n<h1 id=\"拷贝与移动\">1 拷贝与移动</h1>\n<p>首先，简单变量类型（整型、浮点数等，以及仅包含简单类型的元组和数组），他们的长度固定，直接压入栈中就行。只在栈上的数据赋值时进行的是<strong>拷贝（<em>copy</em>）</strong>操作。</p>\n<p>即每次赋值时都会在栈内压入一个新的值，就是最符合直觉的实现。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>此时栈中有两个 <code>5</code> ，分别所属于 <code>x</code> 和\n<code>y</code>。</p>\n<blockquote>\n<p>这里说简单变量类型不够严谨，准确说是实现了 Copy trait 的类型。</p>\n</blockquote>\n<p>对于复杂类型的变量，例如 <code>String</code>\n，需要在堆中分配空间，在栈中压入一个<strong>指针</strong>，指向堆中的空间。</p>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292226831.svg\" alt=\"String in memory\">\n<figcaption aria-hidden=\"true\">String in memory</figcaption>\n</figure>\n<p>此类变量的类型在 Rust 中显示为 <code>{unknown}</code> ，</p>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292223784.png\" alt=\"image-20240729222344611\">\n<figcaption aria-hidden=\"true\">image-20240729222344611</figcaption>\n</figure>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y); <span class=\"comment\">// 报错，x无法使用</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在执行 <code>let y = x;</code>\n时，并不是像其他语言那样浅拷贝，创建了第二个指针 <code>y</code>\n指向相同的内存空间。</p>\n<p>而是类似于执行：<code>y = std::move(x)</code> ，之后 <code>x</code>\n就无法再使用了。</p>\n<p>这个特性使得可以确保字符串 <code>hello</code>\n的内存空间<strong>仅所属于一个变量</strong>。</p>\n<p>这样做的好处是，堆空间的生命周期与变量的作用域强绑定。当\n<code>y</code> 离开作用域时，就释放 <code>y</code> 所指的内存空间。</p>\n<p>同样的，默认的函数传参过程也是执行 <code>move</code>：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">test</span>(y);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y); <span class=\"comment\">// 报错，x、y均无法使用</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(s: <span class=\"type\">String</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, s);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>Rust\n里没有浅拷贝的概念，并且默认情况下绝对不会隐式进行深拷贝，所以这种赋值操作都可以被认为是非常高效的。</p>\n<p>如果要深拷贝，使用 <code>clone</code> 方法。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = x.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">test</span>(y.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x = {}, y = {}\"</span>, x, y); </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(s: <span class=\"type\">String</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, s);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292253395-2850267.svg\" alt=\"s1 and s2 to two places\">\n<figcaption aria-hidden=\"true\">s1 and s2 to two places</figcaption>\n</figure>\n<p>总结一下，就是这个非常暴力、强硬的规则，保证了 Rust 的内存安全：</p>\n<ul>\n<li>一个内存空间，有且仅有一个变量具有其所有权</li>\n<li>当这个变量离开作用域时，自动销毁其内存空间</li>\n</ul>\n<p>在 Rust\n里就不会有多个指针共同拥有一段空间的所有权，也不会有指向非法空间的指针，也不会有没有被指针指向的内存空间。</p>\n<p>这使得 Rust 不需要手动释放内存，也不需要运行时垃圾回收。Rust\n为了内存安全做出的牺牲就是这套强硬的规则。</p>\n<h1 id=\"引用和借用\">2 引用和借用</h1>\n<p>但是这个规则导致了某些情况非常麻烦，例如函数传参。</p>\n<p>这是非常可笑的，把一个变量的所有权传给了一个函数，函数结束后这个变量和对应的内存空间也就被销毁了。返回原逻辑后这个参数就无法使用了。</p>\n<p>所以 Rust 还提供了 <strong>引用</strong> 的概念。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The length of '{}' is {}.\"</span>, s1, len);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> {</span><br><span class=\"line\">    s.<span class=\"title function_ invoke__\">len</span>()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure>\n<img src=\"/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/202407292254851.svg\" alt=\"&String s pointing at String s1\">\n<figcaption aria-hidden=\"true\">&amp;String s pointing at String\ns1</figcaption>\n</figure>\n<p>这些 &amp; 符号就是\n<strong>引用</strong>，它们允许你使用值但不获取其所有权。</p>\n<p>应用的变量被离开作用域时，不会释放内存空间。这很正常，因为只有具有所有权的变量离开作用域时才会释放内存空间，而引用不具有所有权。</p>\n<p>同样的，默认情况下引用是 <strong>只读</strong>\n的。必须显示的规定引用的 <strong>可写</strong> 性：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) {</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">\", world\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>首先，我们必须将 <code>s</code> 改为 <code>mut</code>。然后必须在调用\n<code>change</code> 函数的地方创建一个可变引用\n<code>&amp;mut s</code>，并更新函数签名以接受一个可变引用\n<code>some_string: &amp;mut String</code>。这就非常清楚地表明，<code>change</code>\n函数将改变它所借用的值。</p>\n<p>这样的好处是，程序员可以非常清楚的知道我所调用的函数有没有可能会修改我提供的变量，能够使得函数调用更加的解耦。</p>\n<hr>\n<p>为了防止数据冲突，Rust 对引用和借用也有限制。简单来说，就是：</p>\n<ul>\n<li>写写冲突</li>\n<li>读写冲突</li>\n</ul>\n<p>看下面两段代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = &amp;<span class=\"keyword\">mut</span> x; \t\t<span class=\"comment\">// y 的生命周期开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &amp;x;\t\t\t\t<span class=\"comment\">// 报错，读写冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z_mut</span> = &amp;<span class=\"keyword\">mut</span> x;\t\t<span class=\"comment\">// 报错，写写冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, y);\t\t<span class=\"comment\">// y 的生命周期结束</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在可变引用 <code>y</code> 的生命周期内，不能有任何其他引用。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">\"hello\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = &amp;x; \t\t\t<span class=\"comment\">// y 的生命周期开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &amp;x;\t\t\t\t<span class=\"comment\">// 不报错，可以同时读取不会造成冲突</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z_mut</span> = &amp;<span class=\"keyword\">mut</span> x;\t\t<span class=\"comment\">// 报错，读写冲突</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, y);\t\t<span class=\"comment\">// y 的生命周期结束</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>在不可变引用 <code>y</code> 的生命周期内，不能有可变引用。</p>\n<p>总结一下，Rust\n同样有一个严苛的规则，强行保证了变量不会发生访问冲突。</p>\n<h1 id=\"总结\">总结</h1>\n<p>现在 Rust\n给我一种暴力美学的感觉，用非常严格的规则在编译阶段限制死了可能存在的安全问题。</p>\n<p>另外还有一个<strong>切片(<em>slice</em>)</strong>的概念，我感觉就是对数组的局部引用，很直观，是某种特殊的引用（不一定引用整体，可以引用局部），就没有什么值得单独写的。</p>\n","categories":["笔记"],"tags":["学习笔记","Rust"]},{"title":"浙软夏令营卓越营员面试复盘","url":"/interview/%E6%B5%99%E8%BD%AF%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8D%93%E8%B6%8A%E8%90%A5%E5%91%98%E9%9D%A2%E8%AF%95/","content":"<p>参加了浙软的面试，抽签抽到倒数第二个……在门口等了五个小时，非常热……</p>\n<p>记录一下面试的内容，整理了一下经验。</p>\n<p>整体来说老师的问题很有含金量很有启发性，没有一个水问题。</p>\n<p>也暴露了我专业课准备不充分的问题。</p>\n<p>之前完全没想到，会问这么多软件工程的专业问题，老师最感兴趣的尽然是济星云……</p>\n<p>与我准备的内容大相径庭2333我只能尽量的说，感觉大错是没有的，个别题目回答不流利，让人感觉基础不扎实</p>\n<span id=\"more\"></span>\n<h1 id=\"面试内容复盘\">面试内容复盘</h1>\n<p>刚开始是一个很和蔼的老师，笑呵呵的，坐在正中间：</p>\n<ol type=\"1\">\n<li><p><strong>济星云和你名字一样，是为什么</strong></p>\n<p>热场小问题，开玩笑，讲讲就过去了</p></li>\n<li><p><strong>ChatGLM和llama的区别</strong></p>\n<p>因为我讲了一下人工智能算法精英赛，项目做的是大语言模型</p>\n<p>但是真的不会，我直接说不是做大语言模型方向的，确实不了解</p></li>\n</ol>\n<p>然后换了一个最边上的老师，应该是负责软件工程的。</p>\n<ol type=\"1\">\n<li><p><strong>你的第一个项目，这个需求是真实的吗</strong></p>\n<p>这个项目就是夏令营做的《基于分布式数字身份的电影院售票系统》</p>\n<p>电影院的背景是强行加上去的，本身就不是实际的需求</p>\n<p>他讲了一些需求要从实际出发之类的问题，我频频点头2333</p></li>\n<li><p><strong>济星云中的需求是怎么来的</strong></p>\n<p>一开始是组内大家自己根据日常需要提出的，之后有反馈和建议渠道，收集+评审，确定新需求</p>\n<p>追问，反馈渠道获得的需求都做吗？有什么其他的判断标准吗？（表述不太准确）</p>\n<p>我总结一下就是说这样不会导致这个项目很臃肿吗？（其实我觉得济星云确实是个有点臃肿的项目……）</p></li>\n<li><p><strong>如何审查反馈渠道提供的需求</strong></p>\n<p>我回答，会再由产品组的同学审核一遍，判断是不是真的有需求，有没有必要加到我们的小程序里，有些也会做问卷征集意见。</p>\n<p>老师追问，能举一个例子，有哪些需求被舍弃了</p></li>\n<li><p><strong>有哪些需求被舍弃了</strong></p>\n<p>我举了乌龙茶（实际上没有被舍弃，脑子一空）</p>\n<p>我说是在上面进行课程评价、老师评价的一个需求</p>\n<p>但是我们担心可能有同学会在上面发表一些过激言论，而且已经有了一些相同功能的产品</p>\n<p>老师补充比如学校的什么官网，我说对</p></li>\n<li><p><strong>你觉得什么是软件工程</strong></p>\n<p>……扯了一点是一个保证项目稳定开发的方法（类似这样的）</p></li>\n<li><p><strong>济星云的团队有多少人</strong></p>\n<p>我说产品组和研发组都有30~40人，（可能其实还更多）</p>\n<p>他就问这真的需要这么多人吗</p>\n<p>我说这是一个给同学们练手的平台，没有什么成本……</p>\n<p>他打断，交流也是成本，然后开始问下一个问题</p></li>\n<li><p><strong>如何管理团队，保证产品的开发效率和质量</strong></p>\n<p>我说一个大型团队会根据项目分成多个小组，每组七八个人，每个小组有一个负责人</p>\n<p>他总结，一个两层的架构。追问，是如何分组的？</p>\n<p>我说根据项目需求分组的，每一个需求会拉一个群</p>\n<p>然后隔两三天定期进行沟通，跟踪进度。</p>\n<p>质量的话最后会有一个星期的测试环节，由团队里的同学们进行测试。</p>\n<p>他又追问：</p></li>\n<li><p><strong>上过软件测试的课吗？有什么软件测试方法</strong></p>\n<p>我说白盒黑盒……然后这里愣了很久，突然忘了里面具体的测试方法了（黑盒有等价类，边界值，判定表……白盒有各种路径覆盖）</p>\n<p>这里很尴尬，我呃呃啊啊了一会儿，坐立不安2333</p>\n<p>他说你说的白盒黑盒是一种分类，还有其它分类</p>\n<p>我说噢，集成测试……他打断，集成测试是很后面的了，前面还有</p>\n<p>我就知道问什么了，说先是单元测试、功能测试、集成测试，最后还有性能测试</p>\n<p>只能说没记到烂熟于心的程度，脑子里有，但是一紧张讲不出来……</p></li>\n<li><p><strong>济星云有使用什么协同工具吗</strong></p>\n<p>我说用阿里云云效，有代码仓库，有CICD，有类似飞书的共享文档，有任务看板</p></li>\n<li><p><strong>熟悉什么设计模式？</strong></p>\n<p>我说，就从我用到过的几个讲，把我一时间想到的都说了一遍</p></li>\n<li><p><strong>讲一下单例模式和工厂模式在什么时候使用</strong></p>\n<p>就举了几个例子说明</p></li>\n</ol>\n<p>然后他开始问OJ了，就到了我觉得答的最不好的一个题目</p>\n<ol type=\"1\">\n<li><p><strong>讲一下从提交代码到判题完成的全流程</strong></p>\n<p>我一开始没get到，我以为讲一下OJ的工作过程就可以了。结果他想问的是“从浏览器输入地址到打开网页的全流程”这样的问题，要你讲出所有小细节。</p>\n<p>我都讲到开始评测的时候，他打断我，说直接就能评测吗？编译完直接就能评测吗？</p>\n<p>我蒙了，（不是吗？</p>\n<p>后来听明白了，他就是想我讲操作系统的细节。这就有点慌，没能慢慢思考，讲的有点磕巴</p>\n<p>相关的我好像只提到了进程切换的时候保存上下文，switch（我还口误说成io多路复用的select了），中断，其他我啥都没说出来。</p>\n<p>确实也没复习，有好多知识点分散在我脑子里，我串不起来，我觉得这个题扣大分，接下来就复习操作系统</p>\n<p>现在我复盘有好多可以讲的，从发送请求开始就有套接字，io多路复用这些。</p></li>\n</ol>\n<p>然后时间就已经到了，最后一个老师问我小胶质细胞的项目：</p>\n<ol type=\"1\">\n<li><p><strong>为什么要先分割再检测</strong></p>\n<p>我说因为认为可能分割会提供一些更有用的特征，作为检测的输入可以提供一些更好的依据（类似这个意思）</p>\n<p>他追问，有一个XXXX模型（名字忘了），可以同时分割和检测，有试过吗？</p>\n<p>之前我答辩的时候，问我的是Yolo本身就可以检测和分割，那个问题我准备好了，说实验过，yolo效果不如这样……就行了</p>\n<p>但是这个模型我名字都没听过，不敢多说，就直接说没用过了</p></li>\n<li><p><strong>你提到了使用了Focal Loss，讲解一下Focal\nLoss的形式</strong></p>\n<p>我说损失函数外面套一个 <span class=\"math inline\"><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -1.126ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.864ex\" height=\"3.083ex\" role=\"img\" focusable=\"false\" viewbox=\"0 -864.9 824 1362.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mfrac\"><g data-mml-node=\"mn\" transform=\"translate(235.2,394) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/></g><g data-mml-node=\"mi\" transform=\"translate(220,-345) scale(0.707)\"><path data-c=\"1D6FE\" d=\"M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z\"/></g><rect width=\"584\" height=\"60\" x=\"120\" y=\"220\"/></g></g></g></svg></mjx-container></span> 次方</p></li>\n</ol>\n<p>另外问了我：</p>\n<ol type=\"1\">\n<li><p><strong>你自我介绍里提到，想要实现区块链和AI的结合，你觉得有哪些地方可以用上AI</strong></p>\n<p>我说比如现在区块链的排序算法，来控制这个请求应该在哪个节点上执行的调度算法，现在是用的传统的RIFT，也许可以使用AI的一些方式来优化这里的排序</p></li>\n</ol>\n<h1 id=\"总结\">总结</h1>\n<p>面试的时候嘴巴基本没停（有2个地方有磕巴：软件测试方法想不出来、OJ+操作系统底层），但是看第二个软工老师的反应并不是很好，看不出来他的态度。</p>\n<p>问题密度非常大，我忘记看我自我介绍完还剩多少时间，应该大概还剩15分钟，上面一个老师就提了快15个问题，我语速也非常快，拼命讲拼命讲。</p>\n<p>没想到会问这么多软件工程相关的内容……我以为他会侧重项目一些细节，我详细准备的地方他都没有问。自我介绍里有一些一笔带过的技术细节，其实就是希望老师提问的时候再问一点的，也可能是因为老师也没了解这一块内容不能判断我讲的对不对、或者他知道这种问题我肯定会准备的很充分，反而挑着我没准备的内容问。</p>\n<p>以及面试前还会担心老师问一些水问题，比如为什么选择来浙大、为什么想做系统而不是AI等等，完全没问，15分钟提问时间非常扎实，全是干货，好评。</p>\n<p>问题提的确实招招致命，济星云确实就不是一个很优秀的大型项目，更多的是同学们练手的平台。但是既然这个项目老师这么喜欢问，就留下来吧。</p>\n<hr>\n<p>需要再好好准备一下软件工程相关的内容：</p>\n<ul>\n<li>设计模式，直接全背熟</li>\n<li>软件测试</li>\n<li>需求提取</li>\n<li>什么是软件工程</li>\n<li>如何提升团队合作效率</li>\n</ul>\n<p>操作系统：</p>\n<ul>\n<li>进程管理，中断等等，好好复习</li>\n<li>文件管理</li>\n<li>网络编程，套接字这些</li>\n</ul>\n<p>其实面试前重点准备了文件管理（因为写在了简历里）和网络编程（特地复习了IO多路复用），都没用上……</p>\n<p>其实也有机会，我可以在问OJ流程那个题里把网络编程加进去，但是没意识到老师问的是啥</p>\n<p>自我介绍优化一下，不要提算法精英赛了，项目内的优化方式我能讲，项目外的其他AI常见知识真的不了解了。</p>\n<p>然后开始复习，复习完把上面的问题重新回答一遍。预推免的ppt和自我介绍应该都不用重新准备了，基本上可以复用。</p>\n<hr>\n<p>最后总结个准备面试的经验：能准备的内容只有专业知识。</p>\n<p>专业知识是问到了一定得答对，打错了很扣分的。而且专业知识被问到了，如果准备的好就有一连串保证不会错的内容可以输出，很加分且增加自信。</p>\n<p>其他非专业知识的内容，面试前可能准备了好多，但是很小概率能被问到，而且被问到的时候受限于一个上下文的提问环境，可能没办法把准备的答案直接用上，还是得随机应变。所以干脆不准备了。</p>\n<p>项目相关的细节本来其实就是很熟悉的，简单过一遍就可以，相信自己在面试的情况下可以讲得出来，编也可以编出来，具体的细节老师也不知道，只要自圆其说讲的合理就行。</p>\n<h1 id=\"补充\">补充</h1>\n<p>结果通过啦！感谢老师感谢学校</p>\n","categories":["面试"],"tags":["面试","复盘","浙大","保研"]},{"title":"Rust 学习笔记 - 数据类型、函数、控制流","url":"/rust/2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>本文记录了对于 Rust\n数据类型、函数、控制流相关的内容。并不详细记录所有细节，只记录和其他高级语言有区别的部分。</p>\n<span id=\"more\"></span>\n<h1 id=\"数据类型\">1 数据类型</h1>\n<p>再次强调 Rust\n是一个<strong>静态类型</strong>语言，必须能在编译阶段知道所有变量的类型。不需要显式规定类型的必要前提是可以推导。</p>\n<p>例如在进行类型转换时：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">guess</span>: <span class=\"type\">u32</span> = <span class=\"string\">\"42\"</span>.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">expect</span>(<span class=\"string\">\"Not a number!\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这里不能确定要将 <code>42</code> 解析成什么类型，可能是\n<code>i32</code> <code>u32</code> <code>f64</code>……，所以必须指定\n<code>guess: u32</code></p>\n<p>Rust 的数据类型分为两类，标量类型(scarlar)和组合类型(compound)。</p>\n<h2 id=\"标量类型\">1.1 标量类型</h2>\n<h3 id=\"整数类型\">1.1.1 整数类型</h3>\n<p>变量名从表意的 <code>int</code> <code>long</code>\n变成了可以清晰表示数字位数的 <code>i32</code>\n<code>i64</code>，jiangly写算法就喜欢\n<code>using i64 = long long;</code>。</p>\n<p>并且最大提供了 <code>i128</code> <code>u128</code>\n，<code>u128</code> 最大能表示\n<code>340282366920938463463374607431768211455</code>\n，一般情况绝对够用了。</p>\n<p>类似于 <code>size_t</code> Rust 有 <code>isize</code>\n<code>usize</code>。位数和系统的位数一致。</p>\n<p>数字的字面量有以下特性：</p>\n<ul>\n<li>默认类型为 <code>i32</code></li>\n<li>可以在后缀增加指定类型，例如 <code>123u8</code></li>\n<li>与其他语言相同，前缀指定进制，十六进制：<code>0x</code>\n；八进制：<code>0o</code> ；二进制 <code>0b</code></li>\n<li>可以用下划线作为分隔符，例如<code>1000_0000</code></li>\n<li><strong>字节</strong>：<code>b'A'</code> 表示一个 <code>u8</code>\n类型的整数，即 <code>60</code> ，等价于C/C++中的\n<code>unsigned char</code></li>\n</ul>\n<h3 id=\"字符类型\">1.1.2 字符类型</h3>\n<p>Rust 中的字符类型(char) 和 C/C++\n中的不同，占用空间<strong>4字节</strong>，表示的是 Unicode 编码而非\nASCII 编码。</p>\n<p>总而言之，Rust 中的 char\n类型可以表示任何键盘可以打出来的<strong>一个</strong>字符。这里的<strong>一个</strong>是直观感觉的一个字符，站在用户角度的一个字符，而非程序员习惯的一个字符。</p>\n<h3 id=\"浮点类型\">1.1.3 浮点类型</h3>\n<p>基本和传统语言一样，但是字面量的<strong>默认类型</strong>为\n<code>f64</code> ，因为 Rust\n认为现代计算机中双浮点数和单浮点数的计算效率已经差距不大。</p>\n<h3 id=\"布尔类型\">1.1.4 布尔类型</h3>\n<p>基本和传统语言一样，占用空间<strong>1字节</strong>。</p>\n<h2 id=\"复合类型\">1.2 复合类型</h2>\n<p>分为元组(tuple)和数组(array)。</p>\n<h3 id=\"元组\">1.2.1 元组</h3>\n<p>元组中的元素类型可以不同。</p>\n<p>下面一个例子包含了元组的所有基本用法：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">tup</span> = (<span class=\"number\">500</span>, <span class=\"number\">6.4</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> (_, y, _) = tup;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of x is: {}\"</span>, tup.<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of y is: {}\"</span>, y);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of z is: {}\"</span>, tup.<span class=\"number\">2</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">unit</span>: () = ();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of unit is: {:?}\"</span>, unit);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用 <code>(type1, type2, ..., type_n)</code>\n来定义元组类型</p></li>\n<li><p>用模式匹配的方式<strong>解构</strong>元组</p></li>\n<li><p>支持<strong>匿名变量</strong> <code>_</code></p></li>\n<li><p>用句点 <code>.</code> 索引访问变量</p></li>\n<li><p>特殊的，空元组 <code>()</code> 叫做<strong>单元类型</strong>(unit\ntype)，该类型只有一种值，即<strong>单元值</strong>。单元值和单元类型都写作\n<code>()</code></p>\n<p>如果一个<strong>表达式</strong>不返回任何值，就隐式返回单元值。</p>\n<blockquote>\n<p>单元类型就类似于 C 中的 <code>void</code></p>\n<p>这里的<strong>表达式</strong>用编译原理语法分析过程中的状态来理解。见2.1节</p>\n</blockquote></li>\n</ul>\n<h3 id=\"数组\">1.2.2 数组</h3>\n<p>数组中的元素类型必须相同。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span>: [<span class=\"type\">i32</span>; <span class=\"number\">5</span>] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"a has {} elements\"</span>, a.<span class=\"title function_ invoke__\">len</span>());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{:?}\"</span>, a);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"a[0] = {}\"</span>, a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"a[1] = {}\"</span>, a[<span class=\"number\">1</span>]); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span>: [<span class=\"type\">i32</span>; <span class=\"number\">5</span>] = [<span class=\"number\">1</span>; <span class=\"number\">5</span>];</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{:?}\"</span>, b);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li>类型声明：[type; len]</li>\n<li>数组的值有两种表示：\n<ul>\n<li><code>[num1, num2, ..., num_n]</code></li>\n<li><code>[num; repeat]</code></li>\n</ul></li>\n<li>使用方括号 <code>[]</code> 索引</li>\n</ul>\n<p>和大多数其他语言相同，Rust 的数组使用栈空间。同样也有\n<code>Vector</code> 类型占用堆空间，这在后面再讨论。</p>\n<p>最重要的一点是，Rust 的索引必须在 <code>[0, len-1]</code>\n的范围里，即不可以访问未被分配的无效内存。在运行过程中，任何对无效内存的访问均会报错；在编译阶段，一些很明显的访问无效内存操作也会被检测到。</p>\n<h2 id=\"类型转换\">1.3 类型转换</h2>\n<p>暂时只讨论最简单的类型转换。还有很多使用了标准库中的一些 Trait\n进行类型转换的方法。</p>\n<blockquote>\n<p>Trait 是 Rust 中的一个重要概念，可以被简单的理解为接口。</p>\n</blockquote>\n<p>不像 C/C++ 有很多隐式类型转换的情况（如整型提升等），Rust\n中<strong>几乎所有类型转换都需要显式进行</strong>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span>: <span class=\"type\">i32</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">i64</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    x + y; <span class=\"comment\">// 报错，类型不匹配</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>; <span class=\"comment\">// 自动推导为i64</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">i64</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    x + y; <span class=\"comment\">// 不报错，类型为 i64</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>如果不指定 <code>x</code> 的类型为 <code>i32</code>\n，则会在类型推导过程中把 <code>x</code> 的类型推导为\n<code>i64</code>，看似是隐式类型转换了，本质上还是定义过程的类型推导。</p>\n<p>显示类型转换的方式类似于 Typescript：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span>: <span class=\"type\">i32</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">i64</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = x <span class=\"keyword\">as</span> <span class=\"type\">i64</span> + y;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>as type</code> 的方式转换类型。</p>\n<h1 id=\"函数语句和表达式\">2 函数、语句和表达式</h1>\n<p>这一部分站在编译原理的角度理解。</p>\n<h2 id=\"表达式\">2.1 表达式</h2>\n<p>表达式用于计算并返回值。表达式可以是常量、变量、算术运算、函数调用等。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> + <span class=\"number\">4</span> * <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add</span>(y, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>用来创建新作用域的大括号（代码块） <code>{}</code>\n也是一个表达式，返回值大括号里的最后一个表达式：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">    x + <span class=\"number\">1</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>这里的返回值就是 4。需要注意的是，<code>x + 1</code> 的末尾没有\n<code>;</code> ，如果加上分号，则变成了一个语句，而语句没有返回值。</p>\n<p>总结：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">大括号表达式 ::= { &lt;语句列表&gt; [表达式] }</span><br></pre></td></tr></table></figure>\n<p>如果有表达式，大括号表达式的返回值为表达式的值；如果没有表达式，返回值为单元值<code>()</code>。</p>\n<h2 id=\"语句\">2.2 语句</h2>\n<p>语句用于执行某些操作，<strong>通常不返回值</strong>。常见的语句包括变量声明、赋值、表达式语句、控制流语句（如if、for、while）等。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> x &gt; <span class=\"number\">5</span> {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is greater than 5\"</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>通常不返回值，也就是说有例外。见3.1节 if else 语句。</p>\n<h2 id=\"函数\">2.3 函数</h2>\n<p>函数是代码的基本组织单位，用于封装特定的功能。函数的定义包括函数名、参数列表、返回类型和函数体。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(a: <span class=\"type\">i32</span>, b: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt; b {<span class=\"keyword\">return</span> a - b} </span><br><span class=\"line\">    a + b</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>函数体有点像是一个大括号表达式，所以末尾的表达式可以不使用\n<code>return</code> 进行返回。用 <code>return</code>\n可以让函数提前返回。（但是大括号表达式里不能用 <code>return</code>\n进行返回）</p>\n<p>如果函数有返回值，必须指定返回值类型（否则返回值类型为单元类型\n<code>()</code> ）。</p>\n<p>函数在使用前，并不需要先声明。例如</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"The value of a is: {}\"</span>, <span class=\"title function_ invoke__\">test</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test</span>(a: <span class=\"type\">i32</span>, b: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> {</span><br><span class=\"line\">    a + b</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h1 id=\"控制流\">3 控制流</h1>\n<p>外观上最显著的不同是，条件不需要加括号。</p>\n<h2 id=\"if-语句\">3.1 if 语句</h2>\n<p>基本用法与其他语言类似，不赘述。</p>\n<p>但是 Rust 中，if-else 语句是可以有返回值的。</p>\n<blockquote>\n<p>需要明确一下，这里的有返回值指的是返回值不是单元值\n<code>()</code></p>\n</blockquote>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span> = <span class=\"keyword\">if</span> x &gt; <span class=\"number\">5</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is greater than 5\"</span>);</span><br><span class=\"line\">        <span class=\"number\">0</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is less than or equal to 5\"</span>);</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br><span class=\"line\">    };</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"ret is {}\"</span>, ret);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<ul>\n<li>必须有一个 <code>else</code>\n才可以有返回值。（否则可能没有返回值）</li>\n<li>所有大括号表达式的返回值类型必须相同。（否则类型不可推断）</li>\n</ul>\n<p>再次强调，上面说的 <strong>没有返回值</strong> 指的是\n<strong>返回值=()</strong>。如果显示指定变量的返回值就是\n<code>()</code>，不需要 <code>else</code> 也可以。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span>: () = <span class=\"keyword\">if</span> x == <span class=\"number\">5</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"x is five!\"</span>);</span><br><span class=\"line\">    }; </span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>当然，这种写法并没有什么意义，只是在反向理解 Rust\n编译过程的实现。</p>\n<p>通常的用法如下，目的是压行，代码更模块化、可读性更强，类似与 python\n里的 <code>x = 0 if condition else 1</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span> = <span class=\"keyword\">if</span> x == <span class=\"number\">5</span> {<span class=\"literal\">true</span>} <span class=\"keyword\">else</span> {<span class=\"literal\">false</span>};</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"ret is {}\"</span>, ret);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"loop\">3.2 loop</h2>\n<p>Rust 提供了 3\n中循环，<code>loop</code>，<code>while</code>，<code>for</code>。<code>loop</code>\n是其他语言没有的。</p>\n<p><code>loop</code> 就是一个 <code>while true</code>\n的死循环。但是提供了一些语法糖：</p>\n<h3 id=\"嵌套循环跳出\">3.2.1 嵌套循环跳出</h3>\n<p><code>break</code>\n语句用于跳出循环，同其他语言只能跳出最内层循环。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">        <span class=\"built_in\">print!</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">            <span class=\"built_in\">print!</span>(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 结果是 1212121212...</span></span><br></pre></td></tr></table></figure>\n<p>但是可以给外层的 <code>loop</code> 添加一个标记：<code>'label</code>\n，就可以直接跳出外层循环。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"symbol\">'out</span>: <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">        <span class=\"built_in\">print!</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">            <span class=\"built_in\">print!</span>(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span> <span class=\"symbol\">'out</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 结果是 12</span></span><br></pre></td></tr></table></figure>\n<p>相比于其他语言，想要直接跳出多层循环只有两种方法：</p>\n<ul>\n<li>使用一个中间变量记录结果（<code>while (loop) {}</code> ）</li>\n<li>使用goto</li>\n</ul>\n<h3 id=\"返回值\">3.2.2 返回值</h3>\n<p><code>loop</code> 可以通过 <code>break</code>\n传递返回值。太方便了。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() {</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">ret</span> = <span class=\"symbol\">'out</span>: <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">        <span class=\"built_in\">print!</span>(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">loop</span> {</span><br><span class=\"line\">            <span class=\"built_in\">print!</span>(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span> <span class=\"symbol\">'out</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    };</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"ret: {}\"</span>, ret);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<h2 id=\"while循环\">3.3 while循环</h2>\n<p>没什么区别，不讲了</p>\n<h2 id=\"for循环\">3.4 for循环</h2>\n<p>没什么细节，让GPT写了一些常见的用法。</p>\n<p>在 Rust 中，<code>for</code>\n循环有多种用法，通常用于遍历集合或范围。以下是所有常见的\n<code>for</code> 循环用法：</p>\n<ol type=\"1\">\n<li><strong>遍历范围：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span>..<span class=\"number\">5</span> {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码将输出 0 到 4。</p>\n<ol start=\"2\" type=\"1\">\n<li><strong>遍历集合：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">arr</span> = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">element</span> <span class=\"keyword\">in</span> arr.<span class=\"title function_ invoke__\">iter</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, element);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>iter</code> 方法遍历数组。</p>\n<ol start=\"3\" type=\"1\">\n<li><strong>遍历可变集合：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">element</span> <span class=\"keyword\">in</span> vec.<span class=\"title function_ invoke__\">iter_mut</span>() {</span><br><span class=\"line\">    *element *= <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">\"{:?}\"</span>, vec);</span><br></pre></td></tr></table></figure>\n<p>使用 <code>iter_mut</code> 方法遍历和修改向量中的元素。</p>\n<ol start=\"4\" type=\"1\">\n<li><strong>遍历字符串字符：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">c</span> <span class=\"keyword\">in</span> s.<span class=\"title function_ invoke__\">chars</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, c);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>chars</code> 方法遍历字符串中的字符。</p>\n<ol start=\"5\" type=\"1\">\n<li><strong>遍历字节：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">b</span> <span class=\"keyword\">in</span> s.<span class=\"title function_ invoke__\">bytes</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, b);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>bytes</code> 方法遍历字符串中的字节。</p>\n<ol start=\"6\" type=\"1\">\n<li><strong>遍历 <code>Option</code> 类型：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">maybe_value</span> = <span class=\"title function_ invoke__\">Some</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">value</span> <span class=\"keyword\">in</span> maybe_value {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>如果 <code>Option</code> 是 <code>Some</code>，则 <code>for</code>\n循环会遍历其中的值。</p>\n<ol start=\"7\" type=\"1\">\n<li><strong>遍历 <code>Result</code> 类型：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span>: <span class=\"type\">Result</span>&lt;<span class=\"type\">i32</span>, &amp;<span class=\"type\">str</span>&gt; = <span class=\"title function_ invoke__\">Ok</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">value</span> <span class=\"keyword\">in</span> result {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>如果 <code>Result</code> 是 <code>Ok</code>，则 <code>for</code>\n循环会遍历其中的值。</p>\n<ol start=\"8\" type=\"1\">\n<li><strong>结合 <code>enumerate</code> 方法：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">arr</span> = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> arr.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Index: {}, Value: {}\"</span>, index, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>enumerate</code> 方法获取索引和值对。</p>\n<ol start=\"9\" type=\"1\">\n<li><strong>使用 <code>into_iter</code> 方法：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">element</span> <span class=\"keyword\">in</span> vec.<span class=\"title function_ invoke__\">into_iter</span>() {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, element);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>使用 <code>into_iter</code> 方法将向量所有权移动到迭代器中。</p>\n<ol start=\"10\" type=\"1\">\n<li><strong>多重循环：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">3</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">j</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">3</span> {</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">\"i: {}, j: {}\"</span>, i, j);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>嵌套循环。</p>\n<p>在 Rust 中，<code>for</code> 循环的范围 (<code>range</code>)\n默认步长为 1，无法直接通过语法来控制步长。不过，你可以通过使用迭代器的\n<code>step_by</code> 方法来控制步长。以下是一些示例：</p>\n<ol type=\"1\">\n<li><strong>使用 <code>step_by</code> 控制步长：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span>..<span class=\"number\">10</span>).<span class=\"title function_ invoke__\">step_by</span>(<span class=\"number\">2</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码将以步长 2 遍历范围，输出 0、2、4、6、8。</p>\n<ol start=\"2\" type=\"1\">\n<li><strong>步长为负数（降序循环）：</strong></li>\n</ol>\n<p>Rust 的 <code>Range</code>\n类型不支持直接创建降序范围。你可以通过自定义迭代器来实现：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span>..<span class=\"number\">10</span>).<span class=\"title function_ invoke__\">rev</span>().<span class=\"title function_ invoke__\">step_by</span>(<span class=\"number\">2</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码将以步长 2 逆序遍历范围，输出 9、7、5、3、1。</p>\n<ol start=\"3\" type=\"1\">\n<li><strong>自定义范围和步长：</strong></li>\n</ol>\n<p>你也可以使用 <code>while</code> 循环来更灵活地控制范围和步长：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">i</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> i &lt; <span class=\"number\">10</span> {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"{}\"</span>, i);</span><br><span class=\"line\">    i += <span class=\"number\">2</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码同样以步长 2 遍历范围，输出 0、2、4、6、8。</p>\n<ol start=\"4\" type=\"1\">\n<li><strong>遍历数组或向量时使用步长：</strong></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">arr</span> = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>, <span class=\"number\">60</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> arr.<span class=\"title function_ invoke__\">iter</span>().<span class=\"title function_ invoke__\">enumerate</span>().<span class=\"title function_ invoke__\">step_by</span>(<span class=\"number\">2</span>) {</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">\"Index: {}, Value: {}\"</span>, index, value);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n<p>上面的代码以步长 2 遍历数组中的元素，输出 Index: 0, Value: 10 和\nIndex: 2, Value: 30 等。</p>\n<p>这些方法可以让你在 Rust 中通过 <code>for</code> 循环控制步长。</p>\n<h1 id=\"其他\">其他</h1>\n<p>vscode 里的 Rust 插件真的是非常的智能。</p>\n<p>cargo 的报错提示也非常的清晰，很优雅。</p>\n","categories":["笔记"],"tags":["学习笔记","Rust"]},{"title":"EVM 学习笔记","url":"/blockchain/EVM/","content":"<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<p>老师安排的任务是EVM智能合约的加速计算，给我的论文提出了一个新的架构……</p>\n<p>但是我还不知道原始的EVM是怎么实现的，所以先学习一下</p>\n<span id=\"more\"></span>\n<h1 id=\"solidity\">1 Solidity</h1>\n<p>Solidity 是一种为实现智能合约而创建的高级编程语言。</p>\n<p>最终跑在以太坊虚拟机(EVM)上的代码，就是由Solidity编译得到的。所以得先学一下Solidity是怎么写的。</p>\n<p>基本的运算规则、语法等等查阅文档：https://learnblockchain.cn/docs/solidity</p>\n<h2 id=\"数据位置\">1.1 数据位置</h2>\n<h3 id=\"分类\">1.1.1 分类</h3>\n<ul>\n<li><code>storage</code>：用于存储状态变量，即需要长期保存的数据，生命周期与合约相同。</li>\n<li><code>memory</code>：用于存储临时变量，可以读写，生命周期在函数执行期间。</li>\n<li><code>calldata</code>：用于存储函数输入参数，是只读的，生命周期在函数执行期间。</li>\n</ul>\n<p><code>storage</code> 存储在区块链上，<code>memory</code>\n在合约执行过程中的内存中，<code>calldata</code>\n中的数据来自执行的交易本身（所以不占据额外空间而且是只读的）</p>\n<p>通过 <code>msg.data</code> 可以获取完整的 <code>calldata</code></p>\n<h3 id=\"默认位置\">1.1.2 默认位置</h3>\n<ul>\n<li><strong>状态变量</strong>：默认在<code>storage</code>中。</li>\n<li><strong>函数内部的局部变量</strong>：值类型默认在<code>memory</code>中。</li>\n<li><strong>函数参数</strong>：\n<ul>\n<li><code>external</code>函数的引用类型参数默认在<code>calldata</code>中。</li>\n<li>其他函数的引用类型参数需要显式指定<code>memory</code>或<code>storage</code>。</li>\n</ul></li>\n<li><strong>返回值</strong>：引用类型默认在<code>memory</code>中。</li>\n</ul>\n<h2 id=\"函数调用\">1.2 函数调用</h2>\n<p>（GPT）</p>\n<p>内部调用和外部调用在Solidity的合约编程中都有不同的行为，在以太坊虚拟机（EVM）的实现中也有显著的区别。以下是这两种调用方式在EVM层面的差异：</p>\n<h3 id=\"内部调用internal-call\">1. <strong>内部调用（Internal\nCall）</strong></h3>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>直接调用</strong>：内部调用是通过直接跳转到目标函数的代码位置来实现的。这是因为内部调用发生在同一合约内部，EVM不需要额外的处理步骤，调用者和被调用者共享相同的上下文和存储。</li>\n<li><strong>无消息传递</strong>：内部调用不涉及消息传递，也没有额外的Gas消耗。因为调用在相同的合约上下文中进行，所有的状态变量和内存都是直接共享的。</li>\n<li><strong>编译优化</strong>：在内部调用时，Solidity编译器可以进行优化，如内联函数（inline\nfunctions），使得调用过程更加高效。</li>\n</ul>\n<p><strong>EVM行为：</strong></p>\n<ul>\n<li>EVM中的内部调用相当于一次代码跳转（jump），指令指针直接跳转到目标函数的起始位置。</li>\n<li>内部调用没有创建新的调用栈帧，保持相同的内存、堆栈和存储上下文。</li>\n<li>因为没有新的消息传递（即没有新的合约上下文被创建），内部调用的成本（Gas）相对较低。</li>\n</ul>\n<h3 id=\"外部调用external-call\">2. <strong>外部调用（External\nCall）</strong></h3>\n<p><strong>特点：</strong></p>\n<ul>\n<li><strong>消息传递</strong>：外部调用涉及到向另一个合约（即使是调用自身的<code>external</code>函数）发送消息，这会创建一个新的合约执行上下文，包括新的堆栈、内存和存储访问。</li>\n<li><strong>新Gas限制</strong>：每次外部调用会分配一个新的Gas限制，这意味着被调用合约的执行有自己独立的Gas预算。如果这个调用消耗了超出分配的Gas，调用将失败并回滚。</li>\n<li><strong>EVM上下文切换</strong>：外部调用会在EVM中引发上下文切换，即从调用者的上下文切换到被调用合约的上下文。这种切换会涉及到堆栈的保存和恢复，以及传递调用数据。</li>\n</ul>\n<p><strong>EVM行为：</strong></p>\n<ul>\n<li>EVM在执行外部调用时，会创建一个新的消息调用（Message\nCall）。这包括构建一个新的堆栈帧，传递调用数据（包括函数选择器和参数），以及初始化一个新的存储和内存上下文。</li>\n<li>外部调用会触发EVM的CALL指令。该指令在EVM中相对昂贵，因为它涉及到一系列的操作，如设置新的Gas限制、管理新的堆栈帧、以及潜在的跨合约调用的风险管理（例如重入攻击的防范）。</li>\n<li>外部调用的结果（如返回值或状态变更）在调用结束后返回给调用者，这通常需要通过<code>abi.decode</code>等方法进行解码。</li>\n<li>在外部调用中，如果调用的合约抛出异常或耗尽Gas，调用者合约将会得到失败的结果，并且可以选择回滚操作。</li>\n</ul>\n<h3 id=\"调用成本\">3. <strong>调用成本</strong></h3>\n<ul>\n<li><strong>内部调用</strong>：由于没有新的消息传递和上下文切换，内部调用的成本（Gas消耗）非常低。它是通过简单的跳转和共享上下文来实现的，因此更加高效。</li>\n<li><strong>外部调用</strong>：外部调用由于需要创建新的上下文、消息传递、处理潜在的返回数据等，成本较高。此外，外部调用可能带来安全风险，如重入攻击，这需要额外的防护措施。</li>\n</ul>\n<h3 id=\"安全性考虑\">4. <strong>安全性考虑</strong></h3>\n<ul>\n<li><strong>内部调用</strong>：通常被认为是安全的，因为它们在相同的合约上下文中运行，没有额外的消息传递和上下文切换。</li>\n<li><strong>外部调用</strong>：外部调用则需要更多的安全性考虑，尤其是在涉及到第三方合约时。常见的攻击手段如重入攻击就是通过外部调用进行的。因此，开发者通常会使用<code>checks-effects-interactions</code>模式来防范这种风险。</li>\n</ul>\n<h3 id=\"总结\">总结</h3>\n<ul>\n<li><strong>内部调用</strong>：是一次简单的代码跳转，没有消息传递和上下文切换，效率高且Gas成本低。</li>\n<li><strong>外部调用</strong>：涉及到新的消息传递和上下文切换，消耗更多Gas，并且需要特别注意安全性，尤其是在跨合约调用时。</li>\n</ul>\n<p>理解这些差异对编写高效和安全的Solidity合约非常重要。开发者应根据实际需求选择合适的调用方式，以优化合约的性能和安全性。</p>\n<hr>\n<p>一个合约最终会编译成一段字节码，函数是字节码中的一个部分。内部调用就是直接把执行的代码跳转到另一个函数；外部调用是发起了一个新的消息，创建了新的上下文。</p>\n<h1 id=\"evm\">2 EVM</h1>\n<p>看了这三篇文章：https://learnblockchain.cn/article/3779</p>\n<p>总而言之，了解了EVM中内存存储方式，以及栈式指令的执行过程。</p>\n","categories":["笔记"],"tags":["区块链","以太坊"]},{"title":"404","url":"//404.html","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n"},{"title":"文章标签","url":"/tags/index.html","content":"\n"}]