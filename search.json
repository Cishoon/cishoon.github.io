[{"title":"Rust 学习笔记 - 通用编程概念","url":"/rust/1-%E9%80%9A%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/","content":"<p>开始学习Rust。这是第一篇学习笔记，记录一些基础的概念。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p>\n</blockquote>\n<h1 id=\"1-Rust-变量与可变性\"><a href=\"#1-Rust-变量与可变性\" class=\"headerlink\" title=\"1 Rust 变量与可变性\"></a>1 Rust 变量与可变性</h1><h2 id=\"1-1-常量\"><a href=\"#1-1-常量\" class=\"headerlink\" title=\"1.1 常量\"></a>1.1 常量</h2><p>Rust中的常量与其他语言类似，使用 <code>const</code> 声明，命名规范为<strong>所有字母大写，用下划线分割</strong> 。</p>\n<p>常量声明时，<strong>必须指定类型</strong>，<strong>必须赋初值</strong>。并且初值只能是<strong>常量表达式</strong>，不能是函数的调用结果、或是运行过程中计算得到的值。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> THREE_HOURS_IN_SECONDS: <span class=\"type\">u32</span> = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-2-变量\"><a href=\"#1-2-变量\" class=\"headerlink\" title=\"1.2 变量\"></a>1.2 变量</h2><p>Rust中的变量使用 <code>let</code> 声明，可以自动推导类别，也可以使用 <code>:</code> 指定类别。</p>\n<p>变量又分为：<strong>可变变量</strong>和<strong>不可变变量</strong>，<code>let</code> 声明的默认是不可变变量，在变量前加上 <code>mut</code> 才是可变变量。</p>\n<h3 id=\"1-2-1-可变变量\"><a href=\"#1-2-1-可变变量\" class=\"headerlink\" title=\"1.2.1 可变变量\"></a>1.2.1 可变变量</h3><p>可变变量的使用方法是符合在其他编程语言里使用习惯的写法，直接使用 <code>=</code> 进行赋值，变量的类型无法更改。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = <span class=\"number\">6</span>; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">    x = <span class=\"string\">&quot;abc&quot;</span>; <span class=\"comment\">// 改变了类型，错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"1-2-2-不可变变量-Shadow\"><a href=\"#1-2-2-不可变变量-Shadow\" class=\"headerlink\" title=\"1.2.2 不可变变量 &amp; Shadow\"></a>1.2.2 不可变变量 &amp; Shadow</h3><p>顾名思义，不可变变量无法直接复制修改：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    x = <span class=\"number\">6</span>; <span class=\"comment\">// 错误 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">error[E0384]: cannot assign twice to immutable variable `x`</span><br><span class=\"line\"> --&gt; test.rs:3:5</span><br><span class=\"line\">  |</span><br><span class=\"line\">2 |     <span class=\"built_in\">let</span> x = 5;</span><br><span class=\"line\">  |         -</span><br><span class=\"line\">  |         |</span><br><span class=\"line\">  |         first assignment to `x`</span><br><span class=\"line\">  |         <span class=\"built_in\">help</span>: consider making this binding mutable: `mut x`</span><br><span class=\"line\">3 |     x = 6; // 错误 </span><br><span class=\"line\">  |     ^^^^^ cannot assign twice to immutable variable</span><br><span class=\"line\"></span><br><span class=\"line\">error: aborting due to 1 previous error; 2 warnings emitted</span><br></pre></td></tr></table></figure>\n\n\n\n<p>传统的方法在Rust里变得复杂了，说明Rust一定提出了一个更好的特性——<strong>Shadow</strong></p>\n<p>Rust允许使用 <code>let</code> 创建同名变量，例如：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = x * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The value of x is: 5</span><br><span class=\"line\">The value of x is: 6</span><br><span class=\"line\">The value of x is: 12</span><br><span class=\"line\">The value of x is: hello</span><br></pre></td></tr></table></figure>\n\n<p>并不像其他编程语言里，定义同名变量通常会报错。Rust直接使用后定义的变量覆盖之前定义的变量。因为这是重新定义变量，所以甚至可以改变变量的类型。</p>\n<p>这个过程被取了一个好听的名字 Shadow，新变量像把旧变量罩住了、盖住了一样。</p>\n<p>这个特性最好用的地方就在于<strong>可以改变变量的类型</strong>。</p>\n<p>在其他语言中经常有以下情况，在类型转换前后需要定义两个不同名称的变量，实际上他们表达的含义是完全相同的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> score_str[] = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> score = <span class=\"built_in\">atoi</span>(score_str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 Rust 可以解决这个问题：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span> = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span>: <span class=\"type\">i32</span> = score.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>即保证了变量的强类型安全性，又保留了使用的便捷性。很优雅。</p>\n<p>还有一个情景 shadow 很好用。假如我在写一个很复杂的数学公式，公式的好几个部分都用到了同样的符号 <code>a</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"variable\">a</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = a + <span class=\"number\">1</span> ... </span><br><span class=\"line\">    <span class=\"comment\">// 此处省略一大堆内容</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在里上面的a隔了好多行的地方，我又想定义一个变量a</span></span><br><span class=\"line\">    <span class=\"comment\">// 我可以当作之前从来没有使用过那个变量a一样，直接定义一个新的a</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 在后续的代码中，我也会很自然的认为a就是我最近定义的a = 4</span></span><br><span class=\"line\">    <span class=\"comment\">// 而不会是之前的 a = 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>另外，shadow 可变变量会报 warning：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">score</span> = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">score</span>: <span class=\"type\">i32</span> = score.<span class=\"title function_ invoke__\">parse</span>().<span class=\"title function_ invoke__\">unwrap</span>();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;score: &#123;&#125;&quot;</span>, score);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">warning: variable does not need to be mutable</span><br><span class=\"line\"> --&gt; test.rs:2:9</span><br><span class=\"line\">  |</span><br><span class=\"line\">2 |     <span class=\"built_in\">let</span> mut score = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">  |         ----^^^^^</span><br><span class=\"line\">  |         |</span><br><span class=\"line\">  |         <span class=\"built_in\">help</span>: remove this `mut`</span><br><span class=\"line\">  |</span><br><span class=\"line\">  = note: `#[warn(unused_mut)]` on by default</span><br><span class=\"line\"></span><br><span class=\"line\">warning: 1 warning emitted</span><br><span class=\"line\"></span><br><span class=\"line\">score: 123</span><br></pre></td></tr></table></figure>\n\n<p>因为这样写语法上没问题，但是这样就改变了使用 <code>mut</code> 的本意。</p>\n<p>我的理解是：</p>\n<ul>\n<li>如果需要使用的变量是传统意义的变量，也就是其他编程语言中最常用的变量，使用 <code>let mut</code> 声明可变变量。</li>\n<li>不可变变量的 shadow 就是用来解决无用中间变量过多的问题。生命周期短的变量，都可以使用不可变变量，因为他们通常不会被修改，并且影响的范围很小。解决了一个变量名焦虑的问题。</li>\n</ul>\n","categories":["笔记"],"tags":["Rust"]},{"title":"404","url":"//404.html","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n"},{"title":"文章标签","url":"/tags/index.html","content":""}]