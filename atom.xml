<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cishoon&#39;s Blog</title>
  
  
  <link href="http://cishoon.top/atom.xml" rel="self"/>
  
  <link href="http://cishoon.top/"/>
  <updated>2024-07-28T07:10:27.661Z</updated>
  <id>http://cishoon.top/</id>
  
  <author>
    <name>Cishoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rust 学习笔记 - 数据类型、函数、控制流</title>
    <link href="http://cishoon.top/rust/2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>http://cishoon.top/rust/2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
    <published>2024-07-26T16:00:00.000Z</published>
    <updated>2024-07-28T07:10:27.661Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p></blockquote><p>本文记录了对于 Rust 数据类型、函数、控制流相关的内容。并不详细记录所有细节，只记录和其他高级语言有区别的部分。</p><span id="more"></span><h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1 数据类型"></a>1 数据类型</h1><p>再次强调 Rust 是一个<strong>静态类型</strong>语言，必须能在编译阶段知道所有变量的类型。不需要显式规定类型的必要前提是可以推导。</p><p>例如在进行类型转换时：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="string">&quot;42&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Not a number!&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里不能确定要将 <code>42</code> 解析成什么类型，可能是 <code>i32</code> <code>u32</code> <code>f64</code>……，所以必须指定 <code>guess: u32</code></p><p>Rust 的数据类型分为两类，标量类型(scarlar)和组合类型(compound)。</p><h2 id="1-1-标量类型"><a href="#1-1-标量类型" class="headerlink" title="1.1 标量类型"></a>1.1 标量类型</h2><h3 id="1-1-1-整数类型"><a href="#1-1-1-整数类型" class="headerlink" title="1.1.1 整数类型"></a>1.1.1 整数类型</h3><p>变量名从表意的 <code>int</code> <code>long</code> 变成了可以清晰表示数字位数的 <code>i32</code> <code>i64</code>，jiangly写算法就喜欢 <code>using i64 = long long;</code>。</p><p>并且最大提供了 <code>i128</code> <code>u128</code> ，<code>u128</code> 最大能表示 <code>340282366920938463463374607431768211455</code> ，一般情况绝对够用了。</p><p>类似于 <code>size_t</code> Rust 有 <code>isize</code> <code>usize</code>。位数和系统的位数一致。</p><p>数字的字面量有以下特性：</p><ul><li>默认类型为 <code>i32</code> </li><li>可以在后缀增加指定类型，例如 <code>123u8</code> </li><li>与其他语言相同，前缀指定进制，十六进制：<code>0x</code> ；八进制：<code>0o</code> ；二进制 <code>0b</code> </li><li>可以用下划线作为分隔符，例如<code>1000_0000</code></li><li><strong>字节</strong>：<code>b&#39;A&#39;</code> 表示一个 <code>u8</code> 类型的整数，即 <code>60</code> ，等价于C&#x2F;C++中的 <code>unsigned char</code></li></ul><h3 id="1-1-2-字符类型"><a href="#1-1-2-字符类型" class="headerlink" title="1.1.2 字符类型"></a>1.1.2 字符类型</h3><p>Rust 中的字符类型(char) 和 C&#x2F;C++ 中的不同，占用空间<strong>4字节</strong>，表示的是 Unicode 编码而非 ASCII 编码。</p><p>总而言之，Rust 中的 char 类型可以表示任何键盘可以打出来的<strong>一个</strong>字符。这里的<strong>一个</strong>是直观感觉的一个字符，站在用户角度的一个字符，而非程序员习惯的一个字符。</p><h3 id="1-1-3-浮点类型"><a href="#1-1-3-浮点类型" class="headerlink" title="1.1.3 浮点类型"></a>1.1.3 浮点类型</h3><p>基本和传统语言一样，但是字面量的<strong>默认类型</strong>为 <code>f64</code> ，因为 Rust 认为现代计算机中双浮点数和单浮点数的计算效率已经差距不大。</p><h3 id="1-1-4-布尔类型"><a href="#1-1-4-布尔类型" class="headerlink" title="1.1.4 布尔类型"></a>1.1.4 布尔类型</h3><p>基本和传统语言一样，占用空间<strong>1字节</strong>。</p><h2 id="1-2-复合类型"><a href="#1-2-复合类型" class="headerlink" title="1.2 复合类型"></a>1.2 复合类型</h2><p>分为元组(tuple)和数组(array)。</p><h3 id="1-2-1-元组"><a href="#1-2-1-元组" class="headerlink" title="1.2.1 元组"></a>1.2.1 元组</h3><p>元组中的元素类型可以不同。</p><p>下面一个例子包含了元组的所有基本用法：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span> = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (_, y, _) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, tup.<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of z is: &#123;&#125;&quot;</span>, tup.<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">unit</span>: () = ();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of unit is: &#123;:?&#125;&quot;</span>, unit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用 <code>(type1, type2, ..., type_n)</code> 来定义元组类型</p></li><li><p>用模式匹配的方式<strong>解构</strong>元组</p></li><li><p>支持<strong>匿名变量</strong> <code>_</code></p></li><li><p>用句点 <code>.</code> 索引访问变量</p></li><li><p>特殊的，空元组 <code>()</code> 叫做<strong>单元类型</strong>(unit type)，该类型只有一种值，即<strong>单元值</strong>。单元值和单元类型都写作 <code>()</code></p><p>  如果一个<strong>表达式</strong>不返回任何值，就隐式返回单元值。</p><blockquote><p>单元类型就类似于 C 中的 <code>void</code></p><p>这里的<strong>表达式</strong>用编译原理语法分析过程中的状态来理解。见2.1节</p></blockquote></li></ul><h3 id="1-2-2-数组"><a href="#1-2-2-数组" class="headerlink" title="1.2.2 数组"></a>1.2.2 数组</h3><p>数组中的元素类型必须相同。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a has &#123;&#125; elements&quot;</span>, a.<span class="title function_ invoke__">len</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a[0] = &#123;&#125;&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a[1] = &#123;&#125;&quot;</span>, a[<span class="number">1</span>]); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>; <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型声明：[type; len]</li><li>数组的值有两种表示：<ul><li><code>[num1, num2, ..., num_n]</code></li><li><code>[num; repeat]</code></li></ul></li><li>使用方括号 <code>[]</code> 索引</li></ul><p>和大多数其他语言相同，Rust 的数组使用栈空间。同样也有 <code>Vector</code> 类型占用堆空间，这在后面再讨论。</p><p>最重要的一点是，Rust 的索引必须在 <code>[0, len-1]</code> 的范围里，即不可以访问未被分配的无效内存。在运行过程中，任何对无效内存的访问均会报错；在编译阶段，一些很明显的访问无效内存操作也会被检测到。</p><h2 id="1-3-类型转换"><a href="#1-3-类型转换" class="headerlink" title="1.3 类型转换"></a>1.3 类型转换</h2><p>暂时只讨论最简单的类型转换。还有很多使用了标准库中的一些 Trait 进行类型转换的方法。</p><blockquote><p>Trait 是 Rust 中的一个重要概念，可以被简单的理解为接口。</p></blockquote><p>不像 C&#x2F;C++ 有很多隐式类型转换的情况（如整型提升等），Rust 中<strong>几乎所有类型转换都需要显式进行</strong>。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i64</span> = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    x + y; <span class="comment">// 报错，类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>; <span class="comment">// 自动推导为i64</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i64</span> = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    x + y; <span class="comment">// 不报错，类型为 i64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不指定 <code>x</code> 的类型为 <code>i32</code> ，则会在类型推导过程中把 <code>x</code> 的类型推导为 <code>i64</code>，看似是隐式类型转换了，本质上还是定义过程的类型推导。</p><p>显示类型转换的方式类似于 Typescript：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i64</span> = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = x <span class="keyword">as</span> <span class="type">i64</span> + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>as type</code> 的方式转换类型。</p><h1 id="2-函数、语句和表达式"><a href="#2-函数、语句和表达式" class="headerlink" title="2 函数、语句和表达式"></a>2 函数、语句和表达式</h1><p>这一部分站在编译原理的角度理解。</p><h2 id="2-1-表达式"><a href="#2-1-表达式" class="headerlink" title="2.1 表达式"></a>2.1 表达式</h2><p>表达式用于计算并返回值。表达式可以是常量、变量、算术运算、函数调用等。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">4</span> * <span class="number">2</span></span><br><span class="line"><span class="title function_ invoke__">add</span>(y, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>用来创建新作用域的大括号（代码块） <code>&#123;&#125;</code> 也是一个表达式，返回值大括号里的最后一个表达式：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的返回值就是 4。需要注意的是，<code>x + 1</code> 的末尾没有 <code>;</code> ，如果加上分号，则变成了一个语句，而语句没有返回值。</p><p>总结：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大括号表达式 ::= &#123; &lt;语句列表&gt; [表达式] &#125;</span><br></pre></td></tr></table></figure><p>如果有表达式，大括号表达式的返回值为表达式的值；如果没有表达式，返回值为单元值<code>()</code>。</p><h2 id="2-2-语句"><a href="#2-2-语句" class="headerlink" title="2.2 语句"></a>2.2 语句</h2><p>语句用于执行某些操作，<strong>通常不返回值</strong>。常见的语句包括变量声明、赋值、表达式语句、控制流语句（如if、for、while）等。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x is greater than 5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常不返回值，也就是说有例外。见3.1节 if else 语句。</p><h2 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h2><p>函数是代码的基本组织单位，用于封装特定的功能。函数的定义包括函数名、参数列表、返回类型和函数体。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;<span class="keyword">return</span> a - b&#125; </span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数体有点像是一个大括号表达式，所以末尾的表达式可以不使用 <code>return</code> 进行返回。用 <code>return</code> 可以让函数提前返回。（但是大括号表达式里不能用 <code>return</code> 进行返回）</p><p>如果函数有返回值，必须指定返回值类型（否则返回值类型为单元类型 <code>()</code> ）。</p><p>函数在使用前，并不需要先声明。例如</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of a is: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">test</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-控制流"><a href="#3-控制流" class="headerlink" title="3 控制流"></a>3 控制流</h1><p>外观上最显著的不同是，条件不需要加括号。</p><h2 id="3-1-if-语句"><a href="#3-1-if-语句" class="headerlink" title="3.1 if 语句"></a>3.1 if 语句</h2><p>基本用法与其他语言类似，不赘述。</p><p>但是 Rust 中，if-else 语句是可以有返回值的。</p><blockquote><p>需要明确一下，这里的有返回值指的是返回值不是单元值 <code>()</code></p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span> = <span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x is greater than 5&quot;</span>);</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x is less than or equal to 5&quot;</span>);</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ret is &#123;&#125;&quot;</span>, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>必须有一个 <code>else</code> 才可以有返回值。（否则可能没有返回值）</li><li>所有大括号表达式的返回值类型必须相同。（否则类型不可推断）</li></ul><p>再次强调，上面说的 <strong>没有返回值</strong> 指的是 **返回值&#x3D;()**。如果显示指定变量的返回值就是 <code>()</code>，不需要 <code>else</code> 也可以。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span>: () = <span class="keyword">if</span> x == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x is five!&quot;</span>);</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当然，这种写法并没有什么意义，只是在反向理解 Rust 编译过程的实现。</p><p>通常的用法如下，目的是压行，代码更模块化、可读性更强，类似与 python 里的 <code>x = 0 if condition else 1</code> </p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span> = <span class="keyword">if</span> x == <span class="number">5</span> &#123;<span class="literal">true</span>&#125; <span class="keyword">else</span> &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ret is &#123;&#125;&quot;</span>, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-loop"><a href="#3-2-loop" class="headerlink" title="3.2 loop"></a>3.2 loop</h2><p>Rust 提供了 3 中循环，<code>loop</code>，<code>while</code>，<code>for</code>。<code>loop</code> 是其他语言没有的。</p><p><code>loop</code> 就是一个 <code>while true</code> 的死循环。但是提供了一些语法糖：</p><h3 id="3-2-1-嵌套循环跳出"><a href="#3-2-1-嵌套循环跳出" class="headerlink" title="3.2.1 嵌套循环跳出"></a>3.2.1 嵌套循环跳出</h3><p><code>break</code> 语句用于跳出循环，同其他语言只能跳出最内层循环。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果是 1212121212...</span></span><br></pre></td></tr></table></figure><p>但是可以给外层的 <code>loop</code> 添加一个标记：<code>&#39;label</code> ，就可以直接跳出外层循环。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="symbol">&#x27;out</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;out</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果是 12</span></span><br></pre></td></tr></table></figure><p>相比于其他语言，想要直接跳出多层循环只有两种方法：</p><ul><li>使用一个中间变量记录结果（<code>while (loop) &#123;&#125;</code> ）</li><li>使用goto</li></ul><h3 id="3-2-2-返回值"><a href="#3-2-2-返回值" class="headerlink" title="3.2.2 返回值"></a>3.2.2 返回值</h3><p><code>loop</code> 可以通过 <code>break</code> 传递返回值。太方便了。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span> = <span class="symbol">&#x27;out</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;out</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ret: &#123;&#125;&quot;</span>, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-while循环"><a href="#3-3-while循环" class="headerlink" title="3.3 while循环"></a>3.3 while循环</h2><p>没什么区别，不讲了</p><h2 id="3-4-for循环"><a href="#3-4-for循环" class="headerlink" title="3.4 for循环"></a>3.4 for循环</h2><p>没什么细节，让GPT写了一些常见的用法。</p><p>在 Rust 中，<code>for</code> 循环有多种用法，通常用于遍历集合或范围。以下是所有常见的 <code>for</code> 循环用法：</p><ol><li><strong>遍历范围：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将输出 0 到 4。</p><ol start="2"><li><strong>遍历集合：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>iter</code> 方法遍历数组。</p><ol start="3"><li><strong>遍历可变集合：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vec</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> vec.<span class="title function_ invoke__">iter_mut</span>() &#123;</span><br><span class="line">    *element *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, vec);</span><br></pre></td></tr></table></figure><p>使用 <code>iter_mut</code> 方法遍历和修改向量中的元素。</p><ol start="4"><li><strong>遍历字符串字符：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>chars</code> 方法遍历字符串中的字符。</p><ol start="5"><li><strong>遍历字节：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">b</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">bytes</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>bytes</code> 方法遍历字符串中的字节。</p><ol start="6"><li><strong>遍历 <code>Option</code> 类型：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">maybe_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">value</span> <span class="keyword">in</span> maybe_value &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>Option</code> 是 <code>Some</code>，则 <code>for</code> 循环会遍历其中的值。</p><ol start="7"><li><strong>遍历 <code>Result</code> 类型：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">result</span>: <span class="type">Result</span>&lt;<span class="type">i32</span>, &amp;<span class="type">str</span>&gt; = <span class="title function_ invoke__">Ok</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">value</span> <span class="keyword">in</span> result &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>Result</code> 是 <code>Ok</code>，则 <code>for</code> 循环会遍历其中的值。</p><ol start="8"><li><strong>结合 <code>enumerate</code> 方法：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Index: &#123;&#125;, Value: &#123;&#125;&quot;</span>, index, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>enumerate</code> 方法获取索引和值对。</p><ol start="9"><li><strong>使用 <code>into_iter</code> 方法：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">vec</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> vec.<span class="title function_ invoke__">into_iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>into_iter</code> 方法将向量所有权移动到迭代器中。</p><ol start="10"><li><strong>多重循环：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;i: &#123;&#125;, j: &#123;&#125;&quot;</span>, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套循环。</p><p>在 Rust 中，<code>for</code> 循环的范围 (<code>range</code>) 默认步长为 1，无法直接通过语法来控制步长。不过，你可以通过使用迭代器的 <code>step_by</code> 方法来控制步长。以下是一些示例：</p><ol><li><strong>使用 <code>step_by</code> 控制步长：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">10</span>).<span class="title function_ invoke__">step_by</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将以步长 2 遍历范围，输出 0、2、4、6、8。</p><ol start="2"><li><strong>步长为负数（降序循环）：</strong></li></ol><p>Rust 的 <code>Range</code> 类型不支持直接创建降序范围。你可以通过自定义迭代器来实现：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">10</span>).<span class="title function_ invoke__">rev</span>().<span class="title function_ invoke__">step_by</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将以步长 2 逆序遍历范围，输出 9、7、5、3、1。</p><ol start="3"><li><strong>自定义范围和步长：</strong></li></ol><p>你也可以使用 <code>while</code> 循环来更灵活地控制范围和步长：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码同样以步长 2 遍历范围，输出 0、2、4、6、8。</p><ol start="4"><li><strong>遍历数组或向量时使用步长：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>().<span class="title function_ invoke__">step_by</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Index: &#123;&#125;, Value: &#123;&#125;&quot;</span>, index, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码以步长 2 遍历数组中的元素，输出 Index: 0, Value: 10 和 Index: 2, Value: 30 等。</p><p>这些方法可以让你在 Rust 中通过 <code>for</code> 循环控制步长。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>vscode 里的 Rust 插件真的是非常的智能。</p><p>cargo 的报错提示也非常的清晰，很优雅。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文记录了对于 Rust 数据类型、函数、控制流相关的内容。并不详细记录所有细节，只记录和其他高级语言有区别的部分。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://cishoon.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Rust" scheme="http://cishoon.top/tags/Rust/"/>
    
    <category term="学习笔记" scheme="http://cishoon.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Rust 学习笔记 - 变量与可变性</title>
    <link href="http://cishoon.top/rust/1-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/"/>
    <id>http://cishoon.top/rust/1-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/</id>
    <published>2024-07-24T16:00:00.000Z</published>
    <updated>2024-07-25T15:54:48.063Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习Rust。这是第一篇学习笔记，记录一些基础的概念。</p><span id="more"></span><blockquote><p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p></blockquote><h1 id="1-Rust-变量与可变性"><a href="#1-Rust-变量与可变性" class="headerlink" title="1 Rust 变量与可变性"></a>1 Rust 变量与可变性</h1><h2 id="1-1-常量"><a href="#1-1-常量" class="headerlink" title="1.1 常量"></a>1.1 常量</h2><p>Rust中的常量与其他语言类似，使用 <code>const</code> 声明，命名规范为<strong>所有字母大写，用下划线分割</strong> 。</p><p>常量声明时，<strong>必须指定类型</strong>，<strong>必须赋初值</strong>。并且初值只能是<strong>常量表达式</strong>，不能是函数的调用结果、或是运行过程中计算得到的值。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> THREE_HOURS_IN_SECONDS: <span class="type">u32</span> = <span class="number">60</span> * <span class="number">60</span> * <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h2><p>Rust中的变量使用 <code>let</code> 声明，可以自动推导类别，也可以使用 <code>:</code> 指定类别。</p><p>变量又分为：<strong>可变变量</strong>和<strong>不可变变量</strong>，<code>let</code> 声明的默认是不可变变量，在变量前加上 <code>mut</code> 才是可变变量。</p><h3 id="1-2-1-可变变量"><a href="#1-2-1-可变变量" class="headerlink" title="1.2.1 可变变量"></a>1.2.1 可变变量</h3><p>可变变量的使用方法是符合在其他编程语言里使用习惯的写法，直接使用 <code>=</code> 进行赋值，变量的类型无法更改。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    x = <span class="number">6</span>; <span class="comment">// 正确</span></span><br><span class="line">    x = <span class="string">&quot;abc&quot;</span>; <span class="comment">// 改变了类型，错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-不可变变量-Shadow"><a href="#1-2-2-不可变变量-Shadow" class="headerlink" title="1.2.2 不可变变量 &amp; Shadow"></a>1.2.2 不可变变量 &amp; Shadow</h3><p>顾名思义，不可变变量无法直接复制修改：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    x = <span class="number">6</span>; <span class="comment">// 错误 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">error[E0384]: cannot assign twice to immutable variable `x`</span><br><span class="line"> --&gt; test.rs:3:5</span><br><span class="line">  |</span><br><span class="line">2 |     <span class="built_in">let</span> x = 5;</span><br><span class="line">  |         -</span><br><span class="line">  |         |</span><br><span class="line">  |         first assignment to `x`</span><br><span class="line">  |         <span class="built_in">help</span>: consider making this binding mutable: `mut x`</span><br><span class="line">3 |     x = 6; // 错误 </span><br><span class="line">  |     ^^^^^ cannot assign twice to immutable variable</span><br><span class="line"></span><br><span class="line">error: aborting due to 1 previous error; 2 warnings emitted</span><br></pre></td></tr></table></figure><p>传统的方法在Rust里变得复杂了，说明Rust一定提出了一个更好的特性——<strong>Shadow</strong></p><p>Rust允许使用 <code>let</code> 创建同名变量，例如：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of x is: 5</span><br><span class="line">The value of x is: 6</span><br><span class="line">The value of x is: 12</span><br><span class="line">The value of x is: hello</span><br></pre></td></tr></table></figure><p>并不像其他编程语言里，定义同名变量通常会报错。Rust直接使用后定义的变量覆盖之前定义的变量。因为这是重新定义变量，所以甚至可以改变变量的类型。</p><p>这个过程被取了一个好听的名字 Shadow，新变量像把旧变量罩住了、盖住了一样。</p><p>这个特性最好用的地方就在于<strong>可以改变变量的类型</strong>。</p><p>在其他语言中经常有以下情况，在类型转换前后需要定义两个不同名称的变量，实际上他们表达的含义是完全相同的。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> score_str[] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">int</span> score = <span class="built_in">atoi</span>(score_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Rust 可以解决这个问题：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">score</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">score</span>: <span class="type">i32</span> = score.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即保证了变量的强类型安全性，又保留了使用的便捷性。很优雅。</p><p>还有一个情景 shadow 很好用。假如我在写一个很复杂的数学公式，公式的好几个部分都用到了同样的符号 <code>a</code></p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = a + <span class="number">1</span> ... </span><br><span class="line">    <span class="comment">// 此处省略一大堆内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在里上面的a隔了好多行的地方，我又想定义一个变量a</span></span><br><span class="line">    <span class="comment">// 我可以当作之前从来没有使用过那个变量a一样，直接定义一个新的a</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 在后续的代码中，我也会很自然的认为a就是我最近定义的a = 4</span></span><br><span class="line">    <span class="comment">// 而不会是之前的 a = 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，shadow 可变变量会报 warning：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">score</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">score</span>: <span class="type">i32</span> = score.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;score: &#123;&#125;&quot;</span>, score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">warning: variable does not need to be mutable</span><br><span class="line"> --&gt; test.rs:2:9</span><br><span class="line">  |</span><br><span class="line">2 |     <span class="built_in">let</span> mut score = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  |         ----^^^^^</span><br><span class="line">  |         |</span><br><span class="line">  |         <span class="built_in">help</span>: remove this `mut`</span><br><span class="line">  |</span><br><span class="line">  = note: `#[warn(unused_mut)]` on by default</span><br><span class="line"></span><br><span class="line">warning: 1 warning emitted</span><br><span class="line"></span><br><span class="line">score: 123</span><br></pre></td></tr></table></figure><p>因为这样写语法上没问题，但是这样就改变了使用 <code>mut</code> 的本意。</p><p>我的理解是：</p><ul><li>如果需要使用的变量是传统意义的变量，也就是其他编程语言中最常用的变量，使用 <code>let mut</code> 声明可变变量。</li><li>不可变变量的 shadow 就是用来解决无用中间变量过多的问题。生命周期短的变量，都可以使用不可变变量，因为他们通常不会被修改，并且影响的范围很小。解决了一个变量名焦虑的问题。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;开始学习Rust。这是第一篇学习笔记，记录一些基础的概念。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://cishoon.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Rust" scheme="http://cishoon.top/tags/Rust/"/>
    
    <category term="学习笔记" scheme="http://cishoon.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
