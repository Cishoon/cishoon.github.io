<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cishoon&#39;s Blog</title>
  
  
  <link href="http://cishoon.top/atom.xml" rel="self"/>
  
  <link href="http://cishoon.top/"/>
  <updated>2024-08-19T09:20:44.035Z</updated>
  <id>http://cishoon.top/</id>
  
  <author>
    <name>Cishoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Verilog 部分特性整理</title>
    <link href="http://cishoon.top/HDL/verilog/"/>
    <id>http://cishoon.top/HDL/verilog/</id>
    <published>2024-08-18T16:00:00.000Z</published>
    <updated>2024-08-19T09:20:44.035Z</updated>
    
    <content type="html"><![CDATA[<p>找老师问有什么东西可以给我先看起来，老师发来了Verilog……</p><p>孽缘未了啊，这回重头认真学一学。</p><p>记录一些之前没有考虑过的内容。</p><p>参考这个网站<span class="exturl" data-url="aHR0cHM6Ly9oZGxiaXRzLjAxeHoubmV0Lw==">https://hdlbits.01xz.net/<i class="fa fa-external-link-alt"></i></span></p><span id="more"></span><h1 id="隐式声明"><a href="#隐式声明" class="headerlink" title="隐式声明"></a>隐式声明</h1><p>通常变量需要使用 <code>wire</code> 或 <code>reg</code> 声明。</p><p>但是也可以直接使用 <code>wire t = a &amp; b;</code> 这样直接创建一个中间变量 <code>t</code> ，但是 <code>t</code> 的宽度<strong>一定是1bit</strong>。</p><p>这个在之前写CPU的时候错过无数遍了。</p><h1 id="wire-和-reg"><a href="#wire-和-reg" class="headerlink" title="wire 和 reg"></a>wire 和 reg</h1><blockquote><p>A note on wire vs. reg: The left-hand-side of an assign statement must be a <em>net</em> type (e.g., <code>wire</code>), while the left-hand-side of a procedural assignment (in an always block) must be a <em>variable</em> type (e.g., <code>reg</code>). These types (wire vs. reg) have nothing to do with what hardware is synthesized, and is just syntax left over from Verilog&#39;s use as a hardware <em>simulation</em> language.</p></blockquote><p>其实没有本质区别。</p><p>reg只能写在always里，wire只能写在外面通过assign或module连接。</p><p>reg只是设计Verilog时的历史遗留问题。</p><h1 id="避免锁存器"><a href="#避免锁存器" class="headerlink" title="避免锁存器"></a>避免锁存器</h1><p><span class="exturl" data-url="aHR0cHM6Ly9oZGxiaXRzLjAxeHoubmV0L3dpa2kvQWx3YXlzX2lmMg==">https://hdlbits.01xz.net/wiki/Always_if2<i class="fa fa-external-link-alt"></i></span></p><blockquote><p>一个常见的错误来源：如何避免生成锁存器（Latches）</p><p>在设计电路时，你必须首先从电路的角度进行思考：</p><ul><li>我需要这个逻辑门</li><li>我需要一个组合逻辑块，它有这些输入并产生这些输出</li><li>我需要一个组合逻辑块，后面跟着一组触发器（flip-flops）</li></ul><p>你不能做的是：先写代码，然后希望它能生成一个合适的电路。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If (cpu_overheated) then shut_off_computer = 1;</span><br><span class="line">If (~arrived) then keep_driving = ~gas_tank_empty;</span><br></pre></td></tr></table></figure><p>语法正确的代码不一定会生成合理的电路（组合逻辑 + 触发器）。通常的问题是：&quot;在你未指定的情况下会发生什么？&quot;。Verilog 的回答是：保持输出不变。</p><p>这种“保持输出不变”的行为意味着当前状态需要被记住，因此会产生一个锁存器（latch）。组合逻辑（例如逻辑门）无法记住任何状态。要留意 “Warning (10240): … inferring latch(es)” 警告消息。除非锁存器是故意设计的，否则它几乎总是表示一个错误。组合电路必须在所有情况下对所有输出赋值。这通常意味着你需要使用 <code>else</code> 子句或对输出赋予默认值。</p></blockquote><p>一个最重要的思路，写HDL和其他高级语言是非常不一样的两个体系。</p><p>其他编程语言描述过程，HDL如其名描述<strong>硬件结构</strong>。</p><p>不管是写什么代码，都是在告诉编译器生成一个什么样的硬件结构。</p><p>这个问题就是如果不明确指明所有情况，则会产生锁存器，因为Verilog在没有指明的情况下会保持wire的输出不变。</p><p>总之：<strong>当使用分支语句时必须覆盖所有情况。</strong></p><hr><p>后续遇到继续补充</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;找老师问有什么东西可以给我先看起来，老师发来了Verilog……&lt;/p&gt;
&lt;p&gt;孽缘未了啊，这回重头认真学一学。&lt;/p&gt;
&lt;p&gt;记录一些之前没有考虑过的内容。&lt;/p&gt;
&lt;p&gt;参考这个网站&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9oZGxiaXRzLjAxeHoubmV0Lw==&quot;&gt;https://hdlbits.01xz.net/&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="HDL" scheme="http://cishoon.top/categories/HDL/"/>
    
    
    <category term="学习笔记" scheme="http://cishoon.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HDL" scheme="http://cishoon.top/tags/HDL/"/>
    
    <category term="FPGA" scheme="http://cishoon.top/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>浙软夏令营卓越营员面试复盘</title>
    <link href="http://cishoon.top/interview/%E6%B5%99%E8%BD%AF%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8D%93%E8%B6%8A%E8%90%A5%E5%91%98%E9%9D%A2%E8%AF%95/"/>
    <id>http://cishoon.top/interview/%E6%B5%99%E8%BD%AF%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%8D%93%E8%B6%8A%E8%90%A5%E5%91%98%E9%9D%A2%E8%AF%95/</id>
    <published>2024-08-14T16:00:00.000Z</published>
    <updated>2024-08-19T01:03:16.716Z</updated>
    
    <content type="html"><![CDATA[<p>参加了浙软的面试，抽签抽到倒数第二个……在门口等了五个小时，非常热……</p><p>记录一下面试的内容，整理了一下经验。</p><p>整体来说老师的问题很有含金量很有启发性，没有一个水问题。</p><p>也暴露了我专业课准备不充分的问题。</p><p>之前完全没想到，会问这么多软件工程的专业问题，老师最感兴趣的尽然是济星云……</p><p>与我准备的内容大相径庭2333我只能尽量的说，感觉大错是没有的，个别题目回答不流利，让人感觉基础不扎实</p><span id="more"></span><h1 id="面试内容复盘"><a href="#面试内容复盘" class="headerlink" title="面试内容复盘"></a>面试内容复盘</h1><p>刚开始是一个很和蔼的老师，笑呵呵的，坐在正中间：</p><ol><li><p><strong>济星云和你名字一样，是为什么</strong></p><p> 热场小问题，开玩笑，讲讲就过去了</p></li><li><p><strong>ChatGLM和llama的区别</strong></p><p> 因为我讲了一下人工智能算法精英赛，项目做的是大语言模型</p><p> 但是真的不会，我直接说不是做大语言模型方向的，确实不了解</p></li></ol><p>然后换了一个最边上的老师，应该是负责软件工程的。</p><ol><li><p><strong>你的第一个项目，这个需求是真实的吗</strong></p><p> 这个项目就是夏令营做的《基于分布式数字身份的电影院售票系统》</p><p> 电影院的背景是强行加上去的，本身就不是实际的需求</p><p> 他讲了一些需求要从实际出发之类的问题，我频频点头2333</p></li><li><p><strong>济星云中的需求是怎么来的</strong></p><p> 一开始是组内大家自己根据日常需要提出的，之后有反馈和建议渠道，收集+评审，确定新需求</p><p> 追问，反馈渠道获得的需求都做吗？有什么其他的判断标准吗？（表述不太准确）</p><p> 我总结一下就是说这样不会导致这个项目很臃肿吗？（其实我觉得济星云确实是个有点臃肿的项目……）</p></li><li><p><strong>如何审查反馈渠道提供的需求</strong></p><p> 我回答，会再由产品组的同学审核一遍，判断是不是真的有需求，有没有必要加到我们的小程序里，有些也会做问卷征集意见。</p><p> 老师追问，能举一个例子，有哪些需求被舍弃了</p></li><li><p><strong>有哪些需求被舍弃了</strong></p><p> 我举了乌龙茶（实际上没有被舍弃，脑子一空）</p><p> 我说是在上面进行课程评价、老师评价的一个需求</p><p> 但是我们担心可能有同学会在上面发表一些过激言论，而且已经有了一些相同功能的产品</p><p> 老师补充比如学校的什么官网，我说对</p></li><li><p><strong>你觉得什么是软件工程</strong></p><p> ……扯了一点是一个保证项目稳定开发的方法（类似这样的）</p></li><li><p><strong>济星云的团队有多少人</strong></p><p> 我说产品组和研发组都有30~40人，（可能其实还更多）</p><p> 他就问这真的需要这么多人吗</p><p> 我说这是一个给同学们练手的平台，没有什么成本……</p><p> 他打断，交流也是成本，然后开始问下一个问题</p></li><li><p><strong>如何管理团队，保证产品的开发效率和质量</strong></p><p> 我说一个大型团队会根据项目分成多个小组，每组七八个人，每个小组有一个负责人</p><p> 他总结，一个两层的架构。追问，是如何分组的？</p><p> 我说根据项目需求分组的，每一个需求会拉一个群</p><p> 然后隔两三天定期进行沟通，跟踪进度。</p><p> 质量的话最后会有一个星期的测试环节，由团队里的同学们进行测试。</p><p> 他又追问：</p></li><li><p><strong>上过软件测试的课吗？有什么软件测试方法</strong></p><p> 我说白盒黑盒……然后这里愣了很久，突然忘了里面具体的测试方法了（黑盒有等价类，边界值，判定表……白盒有各种路径覆盖）</p><p> 这里很尴尬，我呃呃啊啊了一会儿，坐立不安2333</p><p> 他说你说的白盒黑盒是一种分类，还有其它分类</p><p> 我说噢，集成测试……他打断，集成测试是很后面的了，前面还有</p><p> 我就知道问什么了，说先是单元测试、功能测试、集成测试，最后还有性能测试</p><p> 只能说没记到烂熟于心的程度，脑子里有，但是一紧张讲不出来……</p></li><li><p><strong>济星云有使用什么协同工具吗</strong></p><p> 我说用阿里云云效，有代码仓库，有CICD，有类似飞书的共享文档，有任务看板</p></li><li><p><strong>熟悉什么设计模式？</strong></p><p>我说，就从我用到过的几个讲，把我一时间想到的都说了一遍</p></li><li><p><strong>讲一下单例模式和工厂模式在什么时候使用</strong></p><p> 就举了几个例子说明</p></li></ol><p>然后他开始问OJ了，就到了我觉得答的最不好的一个题目</p><ol><li><p><strong>讲一下从提交代码到判题完成的全流程</strong></p><p> 我一开始没get到，我以为讲一下OJ的工作过程就可以了。结果他想问的是“从浏览器输入地址到打开网页的全流程”这样的问题，要你讲出所有小细节。</p><p> 我都讲到开始评测的时候，他打断我，说直接就能评测吗？编译完直接就能评测吗？</p><p> 我蒙了，（不是吗？</p><p> 后来听明白了，他就是想我讲操作系统的细节。这就有点慌，没能慢慢思考，讲的有点磕巴</p><p> 相关的我好像只提到了进程切换的时候保存上下文，switch（我还口误说成io多路复用的select了），中断，其他我啥都没说出来。</p><p> 确实也没复习，有好多知识点分散在我脑子里，我串不起来，我觉得这个题扣大分，接下来就复习操作系统</p><p> 现在我复盘有好多可以讲的，从发送请求开始就有套接字，io多路复用这些。</p></li></ol><p>然后时间就已经到了，最后一个老师问我小胶质细胞的项目：</p><ol><li><p><strong>为什么要先分割再检测</strong></p><p> 我说因为认为可能分割会提供一些更有用的特征，作为检测的输入可以提供一些更好的依据（类似这个意思）</p><p> 他追问，有一个XXXX模型（名字忘了），可以同时分割和检测，有试过吗？</p><p> 之前我答辩的时候，问我的是Yolo本身就可以检测和分割，那个问题我准备好了，说实验过，yolo效果不如这样……就行了</p><p> 但是这个模型我名字都没听过，不敢多说，就直接说没用过了</p></li><li><p><strong>你提到了使用了Focal Loss，讲解一下Focal Loss的形式</strong></p><p> 我说损失函数外面套一个 $\frac 1 \gamma$ 次方</p></li></ol><p>另外问了我：</p><ol><li><p><strong>你自我介绍里提到，想要实现区块链和AI的结合，你觉得有哪些地方可以用上AI</strong></p><p> 我说比如现在区块链的排序算法，来控制这个请求应该在哪个节点上执行的调度算法，现在是用的传统的RIFT，也许可以使用AI的一些方式来优化这里的排序</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>面试的时候嘴巴基本没停（有2个地方有磕巴：软件测试方法想不出来、OJ+操作系统底层），但是看第二个软工老师的反应并不是很好，看不出来他的态度。</p><p>问题密度非常大，我忘记看我自我介绍完还剩多少时间，应该大概还剩15分钟，上面一个老师就提了快15个问题，我语速也非常快，拼命讲拼命讲。</p><p>没想到会问这么多软件工程相关的内容……我以为他会侧重项目一些细节，我详细准备的地方他都没有问。自我介绍里有一些一笔带过的技术细节，其实就是希望老师提问的时候再问一点的，也可能是因为老师也没了解这一块内容不能判断我讲的对不对、或者他知道这种问题我肯定会准备的很充分，反而挑着我没准备的内容问。</p><p>以及面试前还会担心老师问一些水问题，比如为什么选择来浙大、为什么想做系统而不是AI等等，完全没问，15分钟提问时间非常扎实，全是干货，好评。</p><p>问题提的确实招招致命，济星云确实就不是一个很优秀的大型项目，更多的是同学们练手的平台。但是既然这个项目老师这么喜欢问，就留下来吧。</p><hr><p>需要再好好准备一下软件工程相关的内容：</p><ul><li>设计模式，直接全背熟</li><li>软件测试</li><li>需求提取</li><li>什么是软件工程</li><li>如何提升团队合作效率</li></ul><p>操作系统：</p><ul><li>进程管理，中断等等，好好复习</li><li>文件管理</li><li>网络编程，套接字这些</li></ul><p>其实面试前重点准备了文件管理（因为写在了简历里）和网络编程（特地复习了IO多路复用），都没用上……</p><p>其实也有机会，我可以在问OJ流程那个题里把网络编程加进去，但是没意识到老师问的是啥</p><p>自我介绍优化一下，不要提算法精英赛了，项目内的优化方式我能讲，项目外的其他AI常见知识真的不了解了。</p><p>然后开始复习，复习完把上面的问题重新回答一遍。预推免的ppt和自我介绍应该都不用重新准备了，基本上可以复用。</p><hr><p>最后总结个准备面试的经验：能准备的内容只有专业知识。</p><p>专业知识是问到了一定得答对，打错了很扣分的。而且专业知识被问到了，如果准备的好就有一连串保证不会错的内容可以输出，很加分且增加自信。</p><p>其他非专业知识的内容，面试前可能准备了好多，但是很小概率能被问到，而且被问到的时候受限于一个上下文的提问环境，可能没办法把准备的答案直接用上，还是得随机应变。所以干脆不准备了。</p><p>项目相关的细节本来其实就是很熟悉的，简单过一遍就可以，相信自己在面试的情况下可以讲得出来，编也可以编出来，具体的细节老师也不知道，只要自圆其说讲的合理就行。</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>结果通过啦！感谢老师感谢学校</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参加了浙软的面试，抽签抽到倒数第二个……在门口等了五个小时，非常热……&lt;/p&gt;
&lt;p&gt;记录一下面试的内容，整理了一下经验。&lt;/p&gt;
&lt;p&gt;整体来说老师的问题很有含金量很有启发性，没有一个水问题。&lt;/p&gt;
&lt;p&gt;也暴露了我专业课准备不充分的问题。&lt;/p&gt;
&lt;p&gt;之前完全没想到，会问这么多软件工程的专业问题，老师最感兴趣的尽然是济星云……&lt;/p&gt;
&lt;p&gt;与我准备的内容大相径庭2333我只能尽量的说，感觉大错是没有的，个别题目回答不流利，让人感觉基础不扎实&lt;/p&gt;</summary>
    
    
    
    <category term="面试" scheme="http://cishoon.top/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="http://cishoon.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="复盘" scheme="http://cishoon.top/tags/%E5%A4%8D%E7%9B%98/"/>
    
    <category term="浙大" scheme="http://cishoon.top/tags/%E6%B5%99%E5%A4%A7/"/>
    
    <category term="保研" scheme="http://cishoon.top/tags/%E4%BF%9D%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud - 注册中心、中央配置、网关</title>
    <link href="http://cishoon.top/cloud-native/spring-cloud/"/>
    <id>http://cishoon.top/cloud-native/spring-cloud/</id>
    <published>2024-08-04T16:00:00.000Z</published>
    <updated>2024-08-05T09:39:01.575Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p></blockquote><p>实习第一天，主要目的是学习云原生架构。今天先从 Spring Cloud 开始。</p><p><img src="/./spring-cloud/202408050942244.jpg" alt="31722821596_.pic" loading="lazy"></p><p>总的来说，Spring Boot 提供构建应用的基础，Spring Cloud 在此基础上提供了分布式系统和微服务架构所需的工具和支持。</p><span id="more"></span><h1 id="1-注册中心（Eureka）"><a href="#1-注册中心（Eureka）" class="headerlink" title="1 注册中心（Eureka）"></a>1 注册中心（Eureka）</h1><h2 id="1-1-Eureka-名字由来"><a href="#1-1-Eureka-名字由来" class="headerlink" title="1.1 Eureka 名字由来"></a>1.1 Eureka 名字由来</h2><p>“Eureka”是希腊语，意思是“我发现了！”</p><p>源自经典的 <strong>阿基米德洗澡时发现浮力原理</strong> 小故事。</p><blockquote><p>阿基米德在洗澡时发现了证明王冠是否纯金的方法(黄金密度)，他激动地一边大喊“Eureka！”一边跳出澡盆奔去王宫，连衣服都忘了穿。后来人们用Eureka这个词来形容洞察浮现的瞬间。</p></blockquote><h2 id="1-2-网络架构"><a href="#1-2-网络架构" class="headerlink" title="1.2 网络架构"></a>1.2 网络架构</h2><p>一个最简单的示例如下：</p><p><img src="https://gitee.com/Cishoon/pic-bed/raw/master/202408051045349.png" alt="image-20240805104516240" loading="lazy"></p><p>要记住这个架构是一个微服务架构，将各个功能的实现分布式地部署在多个服务器中。每一个微服务都是独立的Springboot App，分为以下三类：</p><ol><li><strong>Eureka Server（注册中心）</strong></li><li><strong>Eureka Client（服务提供者）</strong></li><li><strong>Eureka Client（服务消费者）</strong></li></ol><h3 id="1-2-1-注册中心"><a href="#1-2-1-注册中心" class="headerlink" title="1.2.1 注册中心"></a>1.2.1 注册中心</h3><p><strong>注册中心</strong>是一个中央服务器，其他微服务都知道注册中心的Url。</p><p>只需要增加配置，并在入口处增加 <code>@EnableEurekaServer</code> 注解。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">server:</span></span><br><span class="line">        <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-服务提供者"><a href="#1-2-2-服务提供者" class="headerlink" title="1.2.2 服务提供者"></a>1.2.2 服务提供者</h3><p><strong>服务提供者</strong>实现了一部分的 REST 接口，即实现 <code>Controller</code>。在启动时会连接上注册中心，将他提供的接口注册到Eureka Server。可以有多个提供者提供相同的接口。</p><p>服务提供者在配置文件中设置实例名称，以及注册中心的Url</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-服务消费者"><a href="#1-2-3-服务消费者" class="headerlink" title="1.2.3 服务消费者"></a>1.2.3 服务消费者</h3><p><strong>服务消费者</strong>的工作流程：</p><ul><li>消费者发送请求 <code>http://provider-service/hello</code>。（这里的 <code>provider-service</code> 就是服务提供者设置的实例名称，<code>hello</code> 是提供者已经实现的一个接口。）</li><li><code>RestTemplate</code> 查询 Eureka 注册中心，获取 <code>provider-service</code> 的所有实例地址。</li><li>负载均衡器选择一个实例，将请求路由到该实例。</li></ul><p>代码实现是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/invoke&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">invokeProviderService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://provider-service/hello&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置中设置 <code>RestTemplate</code> ，增加 <code>@loadBalanced</code> 负载均衡注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RestTemplate的简化"><a href="#RestTemplate的简化" class="headerlink" title="RestTemplate的简化"></a>RestTemplate的简化</h4><blockquote><p><code>RestTemplate</code> 是 Spring 提供的一个同步 HTTP 客户端，用于简化与 RESTful 服务的通信。它提供了多种便捷的方法，可以轻松地执行各种 HTTP 请求（如 GET、POST、PUT、DELETE 等）并处理响应。<code>RestTemplate</code> 可以自动处理请求和响应的序列化和反序列化，使得与 REST API 的交互变得更加简洁和直观。</p></blockquote><p><code>@LoadBalanced</code> 注解是 Spring Cloud 实现的，会自动完成以下步骤：</p><ol><li><strong>服务发现</strong>：从 Eureka 注册中心获取指定服务的所有可用实例。</li><li><strong>负载均衡</strong>：根据负载均衡策略（默认是轮询）选择一个实例。</li><li><strong>请求转发</strong>：将请求转发到选择的实例。</li></ol><p>如果不使用 <code>@LoadBalance</code> 注解，完整的 <code>invoke</code> 接口实现如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/invoke&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">invokeProviderService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 provider-service 的所有实例</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;provider-service&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instances == <span class="literal">null</span> || instances.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No instances available for provider-service&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机选择一个实例（简单的负载均衡策略）</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">selectedInstance</span> <span class="operator">=</span> instances.get(random.nextInt(instances.size()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造服务URL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> selectedInstance.getUri().toString() + <span class="string">&quot;/hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Hutool 发送 HTTP 请求</span></span><br><span class="line">        <span class="keyword">return</span> HttpUtil.get(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-中央配置（Spring-Cloud-Config）"><a href="#2-中央配置（Spring-Cloud-Config）" class="headerlink" title="2 中央配置（Spring Cloud Config）"></a>2 中央配置（Spring Cloud Config）</h1><p>原理差不多。中央配置与服务注册的逻辑是独立的，他们互不相关。</p><p>也分为 <strong>config-client</strong> 和 <strong>config-server</strong>.</p><p>配置文件参考网上其他教程。</p><hr><p>我测试过程中遇到一个问题，client一直没有向 server 发送获取配置的请求。</p><p>原因：</p><p><code>pom.xml</code> 中必须有以下配置（开始运行时获取配置）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且不能有 server 的依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我就是在client的 <code>pom.xml</code> 里不小心赋值进去了 <code>config-server</code> 的依赖，导致一直没有获取配置。</p><hr><p>另外，有两个设计思路：</p><ol><li>config-client 连接 config-server，自动获取 config-server 的注册中心</li><li>设置注册中心，获取注册中心里的 config-server</li></ol><p>总之目的就是有一个统一的配置文件管理仓库，所有微服务启动时都能获取到最新的配置。</p><h1 id="3-网关（Spring-Cloud-Gateway"><a href="#3-网关（Spring-Cloud-Gateway" class="headerlink" title="3 网关（Spring Cloud Gateway)"></a>3 网关（Spring Cloud Gateway)</h1><p>也是一个单独的应用。通过集成 Spring Cloud Gateway，可以在微服务架构中实现集中路由和过滤功能。</p><p>贴一下GPT的回答。</p><h3 id="Spring-Cloud-Gateway-简介"><a href="#Spring-Cloud-Gateway-简介" class="headerlink" title="Spring Cloud Gateway 简介"></a>Spring Cloud Gateway 简介</h3><p>Spring Cloud Gateway 是一种基于 Spring Framework 5、Spring Boot 2 和 Project Reactor 的 API 网关，旨在为微服务架构提供路由、过滤、监控和安全功能。与 Zuul 不同，Spring Cloud Gateway 使用非阻塞的 WebFlux 框架，这使得它在处理高并发请求时更加高效。</p><h3 id="集成-Spring-Cloud-Gateway"><a href="#集成-Spring-Cloud-Gateway" class="headerlink" title="集成 Spring Cloud Gateway"></a>集成 Spring Cloud Gateway</h3><h4 id="1-创建-Spring-Cloud-Gateway-项目"><a href="#1-创建-Spring-Cloud-Gateway-项目" class="headerlink" title="1. 创建 Spring Cloud Gateway 项目"></a>1. 创建 Spring Cloud Gateway 项目</h4><ol><li><strong>创建一个新的 Spring Boot 项目</strong>。</li><li><strong>添加依赖</strong>：</li></ol><p>在 <code>pom.xml</code> 中添加 Spring Cloud Gateway 和 Eureka Client 的依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-配置-Gateway"><a href="#2-配置-Gateway" class="headerlink" title="2. 配置 Gateway"></a>2. 配置 Gateway</h4><p>在 <code>src/main/resources/application.yml</code> 中配置 Gateway：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">provider-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://provider-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/provider/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">consumer-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://consumer-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/consumer/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>以上配置定义了两个路由：</p><ul><li><code>/provider/**</code> 路径的请求将被转发到 <code>provider-service</code>。</li><li><code>/consumer/**</code> 路径的请求将被转发到 <code>consumer-service</code>。</li></ul><p><code>StripPrefix=1</code> 表示在转发请求之前，将 URL 路径前缀 <code>/provider</code> 或 <code>/consumer</code> 去掉。</p><h4 id="3-启动类"><a href="#3-启动类" class="headerlink" title="3. 启动类"></a>3. 启动类</h4><p>在主类中添加 <code>@SpringBootApplication</code> 和 <code>@EnableEurekaClient</code> 注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动和测试"><a href="#启动和测试" class="headerlink" title="启动和测试"></a>启动和测试</h3><ol><li><strong>启动 Eureka Server</strong>。</li><li><strong>启动 Config Server</strong>。</li><li><strong>启动多个服务提供者实例</strong>。</li><li><strong>启动服务消费者</strong>。</li><li><strong>启动 Gateway</strong>。</li></ol><h3 id="测试-Gateway-路由"><a href="#测试-Gateway-路由" class="headerlink" title="测试 Gateway 路由"></a>测试 Gateway 路由</h3><p>访问 Gateway 路由以测试：</p><ol><li><p>测试服务提供者：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080/provider/hello</span><br></pre></td></tr></table></figure><p>或在浏览器中访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/provider/hello</span><br></pre></td></tr></table></figure></li><li><p>测试服务消费者：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl http://localhost:8080/consumer/invoke</span><br></pre></td></tr></table></figure><p>或在浏览器中访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/consumer/invoke</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过集成 Spring Cloud Gateway，您可以在微服务架构中实现集中路由和过滤功能。它提供了强大的功能和灵活性，可以根据需要进行自定义和扩展。在上述配置中，我们实现了基本的服务路由，实际项目中可以根据需求增加更多的路由规则和过滤器。</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>终于接触了微服务架构。初步了解了Spring Cloud的框架。总之就是进一步的分布，进一步的解耦。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实习第一天，主要目的是学习云原生架构。今天先从 Spring Cloud 开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/./spring-cloud/202408050942244.jpg&quot; alt=&quot;31722821596_.pic&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;总的来说，Spring Boot 提供构建应用的基础，Spring Cloud 在此基础上提供了分布式系统和微服务架构所需的工具和支持。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://cishoon.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="实习，SpringCloud，微服务" scheme="http://cishoon.top/tags/%E5%AE%9E%E4%B9%A0%EF%BC%8CSpringCloud%EF%BC%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Rust 学习笔记 - 所有权</title>
    <link href="http://cishoon.top/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/"/>
    <id>http://cishoon.top/rust/3-%E6%89%80%E6%9C%89%E6%9D%83/</id>
    <published>2024-07-27T16:00:00.000Z</published>
    <updated>2024-08-05T09:31:18.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p></blockquote><p>本文记录了 Rust 所有权 (<em>ownership</em>) 相关的内容。</p><span id="more"></span><p>其他语言的内存管理机制基本分为两类：</p><ul><li>以 C 为代表的，显示分配和释放内存。<ul><li>优点：内存管理完全由程序员负责，效率高</li><li>缺点：显而易见，程序员会出错，容易发生内存泄漏、产生重复释放等Bug</li></ul></li><li>以 Java 为代表的，垃圾回收机制自动管理内存。<ul><li>优点：方便，程序员不需要在意内存何时释放，不会发生内存泄露</li><li>缺点：需要频繁扫描追踪分配的对象，慢</li></ul></li></ul><p> 而 Rust 为了同时实现安全和高效两个目标，提出了<strong>所有权</strong>的机制。</p><ul><li>为了安全，就不能完全放任程序员负责内存分配，编写代码的过程中需要有所限制。</li><li>为了高效，在运行阶段不能频繁进行内存检查，所以保证内存安全的算法必须在 <strong>编译</strong> 过程实现。</li></ul><h1 id="1-拷贝与移动"><a href="#1-拷贝与移动" class="headerlink" title="1 拷贝与移动"></a>1 拷贝与移动</h1><p>首先，简单变量类型（整型、浮点数等，以及仅包含简单类型的元组和数组），他们的长度固定，直接压入栈中就行。只在栈上的数据赋值时进行的是<strong>拷贝（<em>copy</em>）</strong>操作。</p><p>即每次赋值时都会在栈内压入一个新的值，就是最符合直觉的实现。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时栈中有两个 <code>5</code> ，分别所属于 <code>x</code> 和 <code>y</code>。</p><blockquote><p>这里说简单变量类型不够严谨，准确说是实现了 Copy trait 的类型。</p></blockquote><p>对于复杂类型的变量，例如 <code>String</code> ，需要在堆中分配空间，在栈中压入一个<strong>指针</strong>，指向堆中的空间。</p><p><img src="/./3-%E6%89%80%E6%9C%89%E6%9D%83/202407292226831.svg" alt="String in memory" loading="lazy"></p><p>此类变量的类型在 Rust 中显示为 <code>&#123;unknown&#125;</code> ，</p><p><img src="/./3-%E6%89%80%E6%9C%89%E6%9D%83/202407292223784.png" alt="image-20240729222344611" loading="lazy"></p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y); <span class="comment">// 报错，x无法使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行 <code>let y = x;</code> 时，并不是像其他语言那样浅拷贝，创建了第二个指针 <code>y</code> 指向相同的内存空间。</p><p>而是类似于执行：<code>y = std::move(x)</code> ，之后 <code>x</code> 就无法再使用了。</p><p>这个特性使得可以确保字符串 <code>hello</code> 的内存空间<strong>仅所属于一个变量</strong>。</p><p>这样做的好处是，堆空间的生命周期与变量的作用域强绑定。当 <code>y</code> 离开作用域时，就释放 <code>y</code> 所指的内存空间。</p><p>同样的，默认的函数传参过程也是执行 <code>move</code>：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line">    <span class="title function_ invoke__">test</span>(y);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y); <span class="comment">// 报错，x、y均无法使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(s: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rust 里没有浅拷贝的概念，并且默认情况下绝对不会隐式进行深拷贝，所以这种赋值操作都可以被认为是非常高效的。</p><p>如果要深拷贝，使用 <code>clone</code> 方法。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = x.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">    <span class="title function_ invoke__">test</span>(y.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;, y = &#123;&#125;&quot;</span>, x, y); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(s: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./3-%E6%89%80%E6%9C%89%E6%9D%83/202407292253395-2850267.svg" alt="s1 and s2 to two places" loading="lazy"></p><p>总结一下，就是这个非常暴力、强硬的规则，保证了 Rust 的内存安全：</p><ul><li>一个内存空间，有且仅有一个变量具有其所有权</li><li>当这个变量离开作用域时，自动销毁其内存空间</li></ul><p>在 Rust 里就不会有多个指针共同拥有一段空间的所有权，也不会有指向非法空间的指针，也不会有没有被指针指向的内存空间。</p><p>这使得 Rust 不需要手动释放内存，也不需要运行时垃圾回收。Rust 为了内存安全做出的牺牲就是这套强硬的规则。</p><h1 id="2-引用和借用"><a href="#2-引用和借用" class="headerlink" title="2 引用和借用"></a>2 引用和借用</h1><p>但是这个规则导致了某些情况非常麻烦，例如函数传参。</p><p>这是非常可笑的，把一个变量的所有权传给了一个函数，函数结束后这个变量和对应的内存空间也就被销毁了。返回原逻辑后这个参数就无法使用了。</p><p> 所以 Rust 还提供了 <strong>引用</strong> 的概念。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calculate_length</span>(&amp;s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s1, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calculate_length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./3-%E6%89%80%E6%9C%89%E6%9D%83/202407292254851.svg" alt="&amp;String s pointing at String s1" loading="lazy"></p><p>这些 &amp; 符号就是 <strong>引用</strong>，它们允许你使用值但不获取其所有权。</p><p>应用的变量被离开作用域时，不会释放内存空间。这很正常，因为只有具有所有权的变量离开作用域时才会释放内存空间，而引用不具有所有权。</p><p>同样的，默认情况下引用是 <strong>只读</strong> 的。必须显示的规定引用的 <strong>可写</strong> 性：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">change</span>(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">change</span>(some_string: &amp;<span class="keyword">mut</span> <span class="type">String</span>) &#123;</span><br><span class="line">    some_string.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们必须将 <code>s</code> 改为 <code>mut</code>。然后必须在调用 <code>change</code> 函数的地方创建一个可变引用 <code>&amp;mut s</code>，并更新函数签名以接受一个可变引用 <code>some_string: &amp;mut String</code>。这就非常清楚地表明，<code>change</code> 函数将改变它所借用的值。</p><p>这样的好处是，程序员可以非常清楚的知道我所调用的函数有没有可能会修改我提供的变量，能够使得函数调用更加的解耦。</p><hr><p>为了防止数据冲突，Rust 对引用和借用也有限制。简单来说，就是：</p><ul><li>写写冲突</li><li>读写冲突</li></ul><p>看下面两段代码：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &amp;<span class="keyword">mut</span> x; <span class="comment">// y 的生命周期开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = &amp;x;<span class="comment">// 报错，读写冲突</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z_mut</span> = &amp;<span class="keyword">mut</span> x;<span class="comment">// 报错，写写冲突</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, y);<span class="comment">// y 的生命周期结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在可变引用 <code>y</code> 的生命周期内，不能有任何其他引用。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &amp;x; <span class="comment">// y 的生命周期开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = &amp;x;<span class="comment">// 不报错，可以同时读取不会造成冲突</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z_mut</span> = &amp;<span class="keyword">mut</span> x;<span class="comment">// 报错，读写冲突</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, y);<span class="comment">// y 的生命周期结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不可变引用 <code>y</code> 的生命周期内，不能有可变引用。</p><p>总结一下，Rust 同样有一个严苛的规则，强行保证了变量不会发生访问冲突。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在 Rust 给我一种暴力美学的感觉，用非常严格的规则在编译阶段限制死了可能存在的安全问题。</p><p>另外还有一个**切片(<em>slice</em>)**的概念，我感觉就是对数组的局部引用，很直观，是某种特殊的引用（不一定引用整体，可以引用局部），就没有什么值得单独写的。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文记录了 Rust 所有权 (&lt;em&gt;ownership&lt;/em&gt;) 相关的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://cishoon.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Rust" scheme="http://cishoon.top/tags/Rust/"/>
    
    <category term="学习笔记" scheme="http://cishoon.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Rust 学习笔记 - 数据类型、函数、控制流</title>
    <link href="http://cishoon.top/rust/2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <id>http://cishoon.top/rust/2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E6%8E%A7%E5%88%B6%E6%B5%81/</id>
    <published>2024-07-26T16:00:00.000Z</published>
    <updated>2024-07-28T07:10:27.661Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p></blockquote><p>本文记录了对于 Rust 数据类型、函数、控制流相关的内容。并不详细记录所有细节，只记录和其他高级语言有区别的部分。</p><span id="more"></span><h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1 数据类型"></a>1 数据类型</h1><p>再次强调 Rust 是一个<strong>静态类型</strong>语言，必须能在编译阶段知道所有变量的类型。不需要显式规定类型的必要前提是可以推导。</p><p>例如在进行类型转换时：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="string">&quot;42&quot;</span>.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Not a number!&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里不能确定要将 <code>42</code> 解析成什么类型，可能是 <code>i32</code> <code>u32</code> <code>f64</code>……，所以必须指定 <code>guess: u32</code></p><p>Rust 的数据类型分为两类，标量类型(scarlar)和组合类型(compound)。</p><h2 id="1-1-标量类型"><a href="#1-1-标量类型" class="headerlink" title="1.1 标量类型"></a>1.1 标量类型</h2><h3 id="1-1-1-整数类型"><a href="#1-1-1-整数类型" class="headerlink" title="1.1.1 整数类型"></a>1.1.1 整数类型</h3><p>变量名从表意的 <code>int</code> <code>long</code> 变成了可以清晰表示数字位数的 <code>i32</code> <code>i64</code>，jiangly写算法就喜欢 <code>using i64 = long long;</code>。</p><p>并且最大提供了 <code>i128</code> <code>u128</code> ，<code>u128</code> 最大能表示 <code>340282366920938463463374607431768211455</code> ，一般情况绝对够用了。</p><p>类似于 <code>size_t</code> Rust 有 <code>isize</code> <code>usize</code>。位数和系统的位数一致。</p><p>数字的字面量有以下特性：</p><ul><li>默认类型为 <code>i32</code> </li><li>可以在后缀增加指定类型，例如 <code>123u8</code> </li><li>与其他语言相同，前缀指定进制，十六进制：<code>0x</code> ；八进制：<code>0o</code> ；二进制 <code>0b</code> </li><li>可以用下划线作为分隔符，例如<code>1000_0000</code></li><li><strong>字节</strong>：<code>b&#39;A&#39;</code> 表示一个 <code>u8</code> 类型的整数，即 <code>60</code> ，等价于C&#x2F;C++中的 <code>unsigned char</code></li></ul><h3 id="1-1-2-字符类型"><a href="#1-1-2-字符类型" class="headerlink" title="1.1.2 字符类型"></a>1.1.2 字符类型</h3><p>Rust 中的字符类型(char) 和 C&#x2F;C++ 中的不同，占用空间<strong>4字节</strong>，表示的是 Unicode 编码而非 ASCII 编码。</p><p>总而言之，Rust 中的 char 类型可以表示任何键盘可以打出来的<strong>一个</strong>字符。这里的<strong>一个</strong>是直观感觉的一个字符，站在用户角度的一个字符，而非程序员习惯的一个字符。</p><h3 id="1-1-3-浮点类型"><a href="#1-1-3-浮点类型" class="headerlink" title="1.1.3 浮点类型"></a>1.1.3 浮点类型</h3><p>基本和传统语言一样，但是字面量的<strong>默认类型</strong>为 <code>f64</code> ，因为 Rust 认为现代计算机中双浮点数和单浮点数的计算效率已经差距不大。</p><h3 id="1-1-4-布尔类型"><a href="#1-1-4-布尔类型" class="headerlink" title="1.1.4 布尔类型"></a>1.1.4 布尔类型</h3><p>基本和传统语言一样，占用空间<strong>1字节</strong>。</p><h2 id="1-2-复合类型"><a href="#1-2-复合类型" class="headerlink" title="1.2 复合类型"></a>1.2 复合类型</h2><p>分为元组(tuple)和数组(array)。</p><h3 id="1-2-1-元组"><a href="#1-2-1-元组" class="headerlink" title="1.2.1 元组"></a>1.2.1 元组</h3><p>元组中的元素类型可以不同。</p><p>下面一个例子包含了元组的所有基本用法：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tup</span> = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (_, y, _) = tup;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, tup.<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of z is: &#123;&#125;&quot;</span>, tup.<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">unit</span>: () = ();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of unit is: &#123;:?&#125;&quot;</span>, unit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用 <code>(type1, type2, ..., type_n)</code> 来定义元组类型</p></li><li><p>用模式匹配的方式<strong>解构</strong>元组</p></li><li><p>支持<strong>匿名变量</strong> <code>_</code></p></li><li><p>用句点 <code>.</code> 索引访问变量</p></li><li><p>特殊的，空元组 <code>()</code> 叫做<strong>单元类型</strong>(unit type)，该类型只有一种值，即<strong>单元值</strong>。单元值和单元类型都写作 <code>()</code></p><p>  如果一个<strong>表达式</strong>不返回任何值，就隐式返回单元值。</p><blockquote><p>单元类型就类似于 C 中的 <code>void</code></p><p>这里的<strong>表达式</strong>用编译原理语法分析过程中的状态来理解。见2.1节</p></blockquote></li></ul><h3 id="1-2-2-数组"><a href="#1-2-2-数组" class="headerlink" title="1.2.2 数组"></a>1.2.2 数组</h3><p>数组中的元素类型必须相同。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a has &#123;&#125; elements&quot;</span>, a.<span class="title function_ invoke__">len</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a[0] = &#123;&#125;&quot;</span>, a[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a[1] = &#123;&#125;&quot;</span>, a[<span class="number">1</span>]); </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>; <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型声明：[type; len]</li><li>数组的值有两种表示：<ul><li><code>[num1, num2, ..., num_n]</code></li><li><code>[num; repeat]</code></li></ul></li><li>使用方括号 <code>[]</code> 索引</li></ul><p>和大多数其他语言相同，Rust 的数组使用栈空间。同样也有 <code>Vector</code> 类型占用堆空间，这在后面再讨论。</p><p>最重要的一点是，Rust 的索引必须在 <code>[0, len-1]</code> 的范围里，即不可以访问未被分配的无效内存。在运行过程中，任何对无效内存的访问均会报错；在编译阶段，一些很明显的访问无效内存操作也会被检测到。</p><h2 id="1-3-类型转换"><a href="#1-3-类型转换" class="headerlink" title="1.3 类型转换"></a>1.3 类型转换</h2><p>暂时只讨论最简单的类型转换。还有很多使用了标准库中的一些 Trait 进行类型转换的方法。</p><blockquote><p>Trait 是 Rust 中的一个重要概念，可以被简单的理解为接口。</p></blockquote><p>不像 C&#x2F;C++ 有很多隐式类型转换的情况（如整型提升等），Rust 中<strong>几乎所有类型转换都需要显式进行</strong>。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i64</span> = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    x + y; <span class="comment">// 报错，类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>; <span class="comment">// 自动推导为i64</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i64</span> = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    x + y; <span class="comment">// 不报错，类型为 i64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不指定 <code>x</code> 的类型为 <code>i32</code> ，则会在类型推导过程中把 <code>x</code> 的类型推导为 <code>i64</code>，看似是隐式类型转换了，本质上还是定义过程的类型推导。</p><p>显示类型转换的方式类似于 Typescript：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">i64</span> = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = x <span class="keyword">as</span> <span class="type">i64</span> + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>as type</code> 的方式转换类型。</p><h1 id="2-函数、语句和表达式"><a href="#2-函数、语句和表达式" class="headerlink" title="2 函数、语句和表达式"></a>2 函数、语句和表达式</h1><p>这一部分站在编译原理的角度理解。</p><h2 id="2-1-表达式"><a href="#2-1-表达式" class="headerlink" title="2.1 表达式"></a>2.1 表达式</h2><p>表达式用于计算并返回值。表达式可以是常量、变量、算术运算、函数调用等。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">4</span> * <span class="number">2</span></span><br><span class="line"><span class="title function_ invoke__">add</span>(y, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>用来创建新作用域的大括号（代码块） <code>&#123;&#125;</code> 也是一个表达式，返回值大括号里的最后一个表达式：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的返回值就是 4。需要注意的是，<code>x + 1</code> 的末尾没有 <code>;</code> ，如果加上分号，则变成了一个语句，而语句没有返回值。</p><p>总结：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大括号表达式 ::= &#123; &lt;语句列表&gt; [表达式] &#125;</span><br></pre></td></tr></table></figure><p>如果有表达式，大括号表达式的返回值为表达式的值；如果没有表达式，返回值为单元值<code>()</code>。</p><h2 id="2-2-语句"><a href="#2-2-语句" class="headerlink" title="2.2 语句"></a>2.2 语句</h2><p>语句用于执行某些操作，<strong>通常不返回值</strong>。常见的语句包括变量声明、赋值、表达式语句、控制流语句（如if、for、while）等。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x is greater than 5&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常不返回值，也就是说有例外。见3.1节 if else 语句。</p><h2 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h2><p>函数是代码的基本组织单位，用于封装特定的功能。函数的定义包括函数名、参数列表、返回类型和函数体。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;<span class="keyword">return</span> a - b&#125; </span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数体有点像是一个大括号表达式，所以末尾的表达式可以不使用 <code>return</code> 进行返回。用 <code>return</code> 可以让函数提前返回。（但是大括号表达式里不能用 <code>return</code> 进行返回）</p><p>如果函数有返回值，必须指定返回值类型（否则返回值类型为单元类型 <code>()</code> ）。</p><p>函数在使用前，并不需要先声明。例如</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of a is: &#123;&#125;&quot;</span>, <span class="title function_ invoke__">test</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">test</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-控制流"><a href="#3-控制流" class="headerlink" title="3 控制流"></a>3 控制流</h1><p>外观上最显著的不同是，条件不需要加括号。</p><h2 id="3-1-if-语句"><a href="#3-1-if-语句" class="headerlink" title="3.1 if 语句"></a>3.1 if 语句</h2><p>基本用法与其他语言类似，不赘述。</p><p>但是 Rust 中，if-else 语句是可以有返回值的。</p><blockquote><p>需要明确一下，这里的有返回值指的是返回值不是单元值 <code>()</code></p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span> = <span class="keyword">if</span> x &gt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x is greater than 5&quot;</span>);</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x is less than or equal to 5&quot;</span>);</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ret is &#123;&#125;&quot;</span>, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>必须有一个 <code>else</code> 才可以有返回值。（否则可能没有返回值）</li><li>所有大括号表达式的返回值类型必须相同。（否则类型不可推断）</li></ul><p>再次强调，上面说的 <strong>没有返回值</strong> 指的是 **返回值&#x3D;()**。如果显示指定变量的返回值就是 <code>()</code>，不需要 <code>else</code> 也可以。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span>: () = <span class="keyword">if</span> x == <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;x is five!&quot;</span>);</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当然，这种写法并没有什么意义，只是在反向理解 Rust 编译过程的实现。</p><p>通常的用法如下，目的是压行，代码更模块化、可读性更强，类似与 python 里的 <code>x = 0 if condition else 1</code> </p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span> = <span class="keyword">if</span> x == <span class="number">5</span> &#123;<span class="literal">true</span>&#125; <span class="keyword">else</span> &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ret is &#123;&#125;&quot;</span>, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-loop"><a href="#3-2-loop" class="headerlink" title="3.2 loop"></a>3.2 loop</h2><p>Rust 提供了 3 中循环，<code>loop</code>，<code>while</code>，<code>for</code>。<code>loop</code> 是其他语言没有的。</p><p><code>loop</code> 就是一个 <code>while true</code> 的死循环。但是提供了一些语法糖：</p><h3 id="3-2-1-嵌套循环跳出"><a href="#3-2-1-嵌套循环跳出" class="headerlink" title="3.2.1 嵌套循环跳出"></a>3.2.1 嵌套循环跳出</h3><p><code>break</code> 语句用于跳出循环，同其他语言只能跳出最内层循环。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果是 1212121212...</span></span><br></pre></td></tr></table></figure><p>但是可以给外层的 <code>loop</code> 添加一个标记：<code>&#39;label</code> ，就可以直接跳出外层循环。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="symbol">&#x27;out</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;out</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果是 12</span></span><br></pre></td></tr></table></figure><p>相比于其他语言，想要直接跳出多层循环只有两种方法：</p><ul><li>使用一个中间变量记录结果（<code>while (loop) &#123;&#125;</code> ）</li><li>使用goto</li></ul><h3 id="3-2-2-返回值"><a href="#3-2-2-返回值" class="headerlink" title="3.2.2 返回值"></a>3.2.2 返回值</h3><p><code>loop</code> 可以通过 <code>break</code> 传递返回值。太方便了。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ret</span> = <span class="symbol">&#x27;out</span>: <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            <span class="built_in">print!</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span> <span class="symbol">&#x27;out</span> <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ret: &#123;&#125;&quot;</span>, ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-while循环"><a href="#3-3-while循环" class="headerlink" title="3.3 while循环"></a>3.3 while循环</h2><p>没什么区别，不讲了</p><h2 id="3-4-for循环"><a href="#3-4-for循环" class="headerlink" title="3.4 for循环"></a>3.4 for循环</h2><p>没什么细节，让GPT写了一些常见的用法。</p><p>在 Rust 中，<code>for</code> 循环有多种用法，通常用于遍历集合或范围。以下是所有常见的 <code>for</code> 循环用法：</p><ol><li><strong>遍历范围：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将输出 0 到 4。</p><ol start="2"><li><strong>遍历集合：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>iter</code> 方法遍历数组。</p><ol start="3"><li><strong>遍历可变集合：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">vec</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> vec.<span class="title function_ invoke__">iter_mut</span>() &#123;</span><br><span class="line">    *element *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, vec);</span><br></pre></td></tr></table></figure><p>使用 <code>iter_mut</code> 方法遍历和修改向量中的元素。</p><ol start="4"><li><strong>遍历字符串字符：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>chars</code> 方法遍历字符串中的字符。</p><ol start="5"><li><strong>遍历字节：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">b</span> <span class="keyword">in</span> s.<span class="title function_ invoke__">bytes</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>bytes</code> 方法遍历字符串中的字节。</p><ol start="6"><li><strong>遍历 <code>Option</code> 类型：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">maybe_value</span> = <span class="title function_ invoke__">Some</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">value</span> <span class="keyword">in</span> maybe_value &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>Option</code> 是 <code>Some</code>，则 <code>for</code> 循环会遍历其中的值。</p><ol start="7"><li><strong>遍历 <code>Result</code> 类型：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">result</span>: <span class="type">Result</span>&lt;<span class="type">i32</span>, &amp;<span class="type">str</span>&gt; = <span class="title function_ invoke__">Ok</span>(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">value</span> <span class="keyword">in</span> result &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>Result</code> 是 <code>Ok</code>，则 <code>for</code> 循环会遍历其中的值。</p><ol start="8"><li><strong>结合 <code>enumerate</code> 方法：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Index: &#123;&#125;, Value: &#123;&#125;&quot;</span>, index, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>enumerate</code> 方法获取索引和值对。</p><ol start="9"><li><strong>使用 <code>into_iter</code> 方法：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">vec</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> vec.<span class="title function_ invoke__">into_iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>into_iter</code> 方法将向量所有权移动到迭代器中。</p><ol start="10"><li><strong>多重循环：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">j</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;i: &#123;&#125;, j: &#123;&#125;&quot;</span>, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套循环。</p><p>在 Rust 中，<code>for</code> 循环的范围 (<code>range</code>) 默认步长为 1，无法直接通过语法来控制步长。不过，你可以通过使用迭代器的 <code>step_by</code> 方法来控制步长。以下是一些示例：</p><ol><li><strong>使用 <code>step_by</code> 控制步长：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">10</span>).<span class="title function_ invoke__">step_by</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将以步长 2 遍历范围，输出 0、2、4、6、8。</p><ol start="2"><li><strong>步长为负数（降序循环）：</strong></li></ol><p>Rust 的 <code>Range</code> 类型不支持直接创建降序范围。你可以通过自定义迭代器来实现：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">10</span>).<span class="title function_ invoke__">rev</span>().<span class="title function_ invoke__">step_by</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将以步长 2 逆序遍历范围，输出 9、7、5、3、1。</p><ol start="3"><li><strong>自定义范围和步长：</strong></li></ol><p>你也可以使用 <code>while</code> 循环来更灵活地控制范围和步长：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">    i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码同样以步长 2 遍历范围，输出 0、2、4、6、8。</p><ol start="4"><li><strong>遍历数组或向量时使用步长：</strong></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>().<span class="title function_ invoke__">step_by</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Index: &#123;&#125;, Value: &#123;&#125;&quot;</span>, index, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码以步长 2 遍历数组中的元素，输出 Index: 0, Value: 10 和 Index: 2, Value: 30 等。</p><p>这些方法可以让你在 Rust 中通过 <code>for</code> 循环控制步长。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>vscode 里的 Rust 插件真的是非常的智能。</p><p>cargo 的报错提示也非常的清晰，很优雅。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文记录了对于 Rust 数据类型、函数、控制流相关的内容。并不详细记录所有细节，只记录和其他高级语言有区别的部分。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://cishoon.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Rust" scheme="http://cishoon.top/tags/Rust/"/>
    
    <category term="学习笔记" scheme="http://cishoon.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Rust 学习笔记 - 变量与可变性</title>
    <link href="http://cishoon.top/rust/1-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/"/>
    <id>http://cishoon.top/rust/1-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/</id>
    <published>2024-07-24T16:00:00.000Z</published>
    <updated>2024-07-28T13:43:13.192Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结</p></blockquote><p>开始学习Rust。这是第一篇学习笔记，记录一些基础的概念。</p><span id="more"></span><h1 id="1-Rust-变量与可变性"><a href="#1-Rust-变量与可变性" class="headerlink" title="1 Rust 变量与可变性"></a>1 Rust 变量与可变性</h1><h2 id="1-1-常量"><a href="#1-1-常量" class="headerlink" title="1.1 常量"></a>1.1 常量</h2><p>Rust中的常量与其他语言类似，使用 <code>const</code> 声明，命名规范为<strong>所有字母大写，用下划线分割</strong> 。</p><p>常量声明时，<strong>必须指定类型</strong>，<strong>必须赋初值</strong>。并且初值只能是<strong>常量表达式</strong>，不能是函数的调用结果、或是运行过程中计算得到的值。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> THREE_HOURS_IN_SECONDS: <span class="type">u32</span> = <span class="number">60</span> * <span class="number">60</span> * <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="1-2-变量"><a href="#1-2-变量" class="headerlink" title="1.2 变量"></a>1.2 变量</h2><p>Rust中的变量使用 <code>let</code> 声明，可以自动推导类别，也可以使用 <code>:</code> 指定类别。</p><p>变量又分为：<strong>可变变量</strong>和<strong>不可变变量</strong>，<code>let</code> 声明的默认是不可变变量，在变量前加上 <code>mut</code> 才是可变变量。</p><h3 id="1-2-1-可变变量"><a href="#1-2-1-可变变量" class="headerlink" title="1.2.1 可变变量"></a>1.2.1 可变变量</h3><p>可变变量的使用方法是符合在其他编程语言里使用习惯的写法，直接使用 <code>=</code> 进行赋值，变量的类型无法更改。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    x = <span class="number">6</span>; <span class="comment">// 正确</span></span><br><span class="line">    x = <span class="string">&quot;abc&quot;</span>; <span class="comment">// 改变了类型，错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-不可变变量-Shadow"><a href="#1-2-2-不可变变量-Shadow" class="headerlink" title="1.2.2 不可变变量 &amp; Shadow"></a>1.2.2 不可变变量 &amp; Shadow</h3><p>顾名思义，不可变变量无法直接复制修改：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    x = <span class="number">6</span>; <span class="comment">// 错误 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">error[E0384]: cannot assign twice to immutable variable `x`</span><br><span class="line"> --&gt; test.rs:3:5</span><br><span class="line">  |</span><br><span class="line">2 |     <span class="built_in">let</span> x = 5;</span><br><span class="line">  |         -</span><br><span class="line">  |         |</span><br><span class="line">  |         first assignment to `x`</span><br><span class="line">  |         <span class="built_in">help</span>: consider making this binding mutable: `mut x`</span><br><span class="line">3 |     x = 6; // 错误 </span><br><span class="line">  |     ^^^^^ cannot assign twice to immutable variable</span><br><span class="line"></span><br><span class="line">error: aborting due to 1 previous error; 2 warnings emitted</span><br></pre></td></tr></table></figure><p>传统的方法在Rust里变得复杂了，说明Rust一定提出了一个更好的特性——<strong>Shadow</strong></p><p>Rust允许使用 <code>let</code> 创建同名变量，例如：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = x * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The value of x is: 5</span><br><span class="line">The value of x is: 6</span><br><span class="line">The value of x is: 12</span><br><span class="line">The value of x is: hello</span><br></pre></td></tr></table></figure><p>并不像其他编程语言里，定义同名变量通常会报错。Rust直接使用后定义的变量覆盖之前定义的变量。因为这是重新定义变量，所以甚至可以改变变量的类型。</p><p>这个过程被取了一个好听的名字 Shadow，新变量像把旧变量罩住了、盖住了一样。</p><p>这个特性最好用的地方就在于<strong>可以改变变量的类型</strong>。</p><p>在其他语言中经常有以下情况，在类型转换前后需要定义两个不同名称的变量，实际上他们表达的含义是完全相同的。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> score_str[] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">int</span> score = <span class="built_in">atoi</span>(score_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Rust 可以解决这个问题：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">score</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">score</span>: <span class="type">i32</span> = score.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即保证了变量的强类型安全性，又保留了使用的便捷性。很优雅。</p><p>还有一个情景 shadow 很好用。假如我在写一个很复杂的数学公式，公式的好几个部分都用到了同样的符号 <code>a</code></p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = a + <span class="number">1</span> ... </span><br><span class="line">    <span class="comment">// 此处省略一大堆内容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在里上面的a隔了好多行的地方，我又想定义一个变量a</span></span><br><span class="line">    <span class="comment">// 我可以当作之前从来没有使用过那个变量a一样，直接定义一个新的a</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 在后续的代码中，我也会很自然的认为a就是我最近定义的a = 4</span></span><br><span class="line">    <span class="comment">// 而不会是之前的 a = 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，shadow 可变变量会报 warning：</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">score</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">score</span>: <span class="type">i32</span> = score.<span class="title function_ invoke__">parse</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;score: &#123;&#125;&quot;</span>, score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">warning: variable does not need to be mutable</span><br><span class="line"> --&gt; test.rs:2:9</span><br><span class="line">  |</span><br><span class="line">2 |     <span class="built_in">let</span> mut score = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">  |         ----^^^^^</span><br><span class="line">  |         |</span><br><span class="line">  |         <span class="built_in">help</span>: remove this `mut`</span><br><span class="line">  |</span><br><span class="line">  = note: `#[warn(unused_mut)]` on by default</span><br><span class="line"></span><br><span class="line">warning: 1 warning emitted</span><br><span class="line"></span><br><span class="line">score: 123</span><br></pre></td></tr></table></figure><p>因为这样写语法上没问题，但是这样就改变了使用 <code>mut</code> 的本意。</p><p>我的理解是：</p><ul><li>如果需要使用的变量是传统意义的变量，也就是其他编程语言中最常用的变量，使用 <code>let mut</code> 声明可变变量。</li><li>不可变变量的 shadow 就是用来解决无用中间变量过多的问题。生命周期短的变量，都可以使用不可变变量，因为他们通常不会被修改，并且影响的范围很小。解决了一个变量名焦虑的问题。</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文属于学习笔记，内容可能有误、可能不全面，仅代表个人在学习这一特性时的理解和总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开始学习Rust。这是第一篇学习笔记，记录一些基础的概念。&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://cishoon.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Rust" scheme="http://cishoon.top/tags/Rust/"/>
    
    <category term="学习笔记" scheme="http://cishoon.top/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
